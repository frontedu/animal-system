window.docsJson={
  "classes": [
    {
      "name": "AgendaColumn",
      "modulePath": "Calendar/column/AgendaColumn",
      "classDescription": "<p>A column that displays events for a day.</p>\n<p>This is not intended to be used directly, it is used by the <a href=\"#Calendar/widget/AgendaView\">AgendaView</a> which\nis a specialized <a href=\"#Grid/view/Grid\">Grid</a> subclass.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AgendaColumn.js",
      "path": "/Calendar/lib/Calendar/column",
      "classType": "agendacolumn",
      "functions": [
        {
          "name": "defaultRenderer",
          "access": "private",
          "description": "<p>Renderer that displays a widget in the cell.</p>",
          "parameters": [
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Render data</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "CalendarTag",
      "modulePath": "Calendar/customElements/CalendarTag",
      "classDescription": "<p>Import this file to be able to use the tag <code>&lt;bryntum-calendar&gt;</code> to create a Calendar.</p>\n<p>This is more of a proof of concept than a ready to use class. The dataset of the <code>&lt;data&gt;</code> and <code>&lt;bryntum-calendar&gt;</code>\ntags is applied to record and Calendar configs respectively, which means that you can pass any documented config\nthere, not only the ones demonstrated here. Dataset attributes are translated as follows:</p>\n<ul>\n<li><code>data-view-preset</code> -&gt; <code>viewPreset</code></li>\n<li><code>data-start-date</code> -&gt; <code>startDate</code>\netc.</li>\n</ul>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-calendar data-date=&quot;2018-04-02&quot;>\n     &lt;data>\n         &lt;events>\n             &lt;data data-id=&quot;1&quot; data-resource-id=&quot;1&quot; data-start-date=&quot;2018-04-03&quot; data-end-date=&quot;2018-04-05&quot;>&lt;/data>\n             &lt;data data-id=&quot;2&quot; data-resource-id=&quot;2&quot; data-start-date=&quot;2018-04-04&quot; data-end-date=&quot;2018-04-06&quot;>&lt;/data>\n             &lt;data data-id=&quot;3&quot; data-resource-id=&quot;3&quot; data-start-date=&quot;2018-04-05&quot; data-end-date=&quot;2018-04-07&quot;>&lt;/data>\n         &lt;/events>\n         &lt;resources>\n             &lt;data data-id=&quot;1&quot; data-name=&quot;Daniel&quot;>&lt;/data>\n             &lt;data data-id=&quot;2&quot; data-name=&quot;Steven&quot;>&lt;/data>\n             &lt;data data-id=&quot;3&quot; data-name=&quot;Sergei&quot;>&lt;/data>\n         &lt;/resources>\n     &lt;/data>\n&lt;/bryntum-calendar>\n</code></pre>\n<p>To get styling correct, supply the path to the theme you want to use and to the folder that holds Font Awesome:</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-calendar stylesheet=&quot;resources/calendar.stockholm.css&quot; fa-path=&quot;resources/fonts&quot;>\n&lt;/bryntum-calendar>\n</code></pre>\n<p>NOTE: Remember to call <a href=\"#Calendar/customElements/CalendarTag#function-destroy\">destroy</a> before removing this web component from the DOM to avoid memory\nleaks.</p>",
      "extends": [
        "Scheduler/customElements/TimelineBaseTag"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarTag.js",
      "path": "/Calendar/lib/Calendar/customElements",
      "demo": {
        "product": "calendar",
        "demo": "webcomponents"
      }
    },
    {
      "name": "CalendarDrag",
      "modulePath": "Calendar/feature/CalendarDrag",
      "classDescription": "<p>This feature provides drag-based event creation and modification for Calendars. When enabled (which is the default\nfor calendars), the user can do the following via the mouse or touch screen:</p>\n<ul>\n<li>Create events by touching (or pressing the mouse button in) an the empty space and dragging. As the drag\nprogresses, a tentative event is rendered. On release, the <a href=\"#Calendar/feature/EventEdit\">EventEdit</a> feature displays\nthe event edit dialog to complete the process. This can be disabled via the <a href=\"#Calendar/feature/CalendarDrag#config-creatable\">creatable</a> config.</li>\n<li>Adjust the start or end times of an event in the day or week views by dragging the top or bottom of an event.\nThis can be disabled via the <a href=\"#Calendar/feature/CalendarDrag#config-resizable\">resizable</a> config or the <a href=\"#Scheduler/model/mixin/EventModelMixin#field-resizable\">resizable</a>\nfield on a per-event basis.</li>\n<li>Adjust the start or end date of an all-day event in the month view by dragging the left-most or right-most end\nof an event. This can be disabled via the <a href=\"#Calendar/feature/CalendarDrag#config-resizable\">resizable</a> config or the\n<a href=\"#Scheduler/model/mixin/EventModelMixin#field-resizable\">resizable</a> field on a per-event basis.</li>\n<li>Move an event from its current time (in day or week views) or date (in all views except agenda) by dragging the\nbody of an event. This can be disabled via the <a href=\"#Calendar/feature/CalendarDrag#config-draggable\">draggable</a> config or via the\n<a href=\"#Scheduler/model/mixin/EventModelMixin#field-draggable\">draggable</a> field on a per-event basis.</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code> // change name for events created by drag to &quot;Event&quot;:\n let calendar = new Calendar({\n     features : {\n         drag : {\n             newName : 'Event'\n         }\n     }\n });\n</code></pre>\n<h2>Asynchronous validation of resize, move and create operations</h2>\n<p>You can easily add a confirmation step after an operation to show a dialog to the end user. This is done using the\n<a href=\"#Calendar/feature/CalendarDrag#event-beforeDragMoveEnd\">beforeDragMoveEnd</a>, <a href=\"#Calendar/feature/CalendarDrag#event-beforeDragCreateEnd\">beforeDragCreateEnd</a> and <a href=\"#Calendar/feature/CalendarDrag#event-beforeDragResizeEnd\">beforeDragResizeEnd</a> events.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let calendar = new Calendar({\n     listeners : {\n         // Async event listeners allowing you to veto drag operations\n         beforeDragMoveEnd : async({ eventRecord }) => {\n              const result = await MessageDialog.confirm({\n                  title   : 'Please confirm',\n                  message : 'Is this the start time you wanted?'\n              });\n\n              // Return true to accept the drop or false to reject it\n              return result === MessageDialog.yesButton;\n          },\n          beforeDragResizeEnd : async({ eventRecord }) => {\n              const result = await MessageDialog.confirm({\n                  title   : 'Please confirm',\n                  message : 'Is this the duration you wanted?'\n              });\n\n              // Return true to accept the drop or false to reject it\n              return result === MessageDialog.yesButton;\n          },\n          beforeDragCreateEnd : async({ eventRecord }) => {\n              const result = await MessageDialog.confirm({\n                  title   : 'Please confirm',\n                  message : 'Want to create this event?'\n              });\n\n              // Return true to accept the drop or false to reject it\n              return result === MessageDialog.yesButton;\n          }\n      }\n });\n</code></pre>\n<p>This feature is <strong>enabled</strong> by default.</p>\n<p>The example below demonstrates configuration of the EventEdit feature and implements validation of\ndrag gestures so that no event interrupts fika from 9:30am to 10:30am.</p>",
      "extends": [
        "Calendar/feature/CalendarFeature"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarDrag.js",
      "path": "/Calendar/lib/Calendar/feature",
      "externalExamples": [
        "Calendar/feature/CalendarDrag.js"
      ],
      "classType": "drag",
      "typedefs": [
        {
          "name": "CalendarDragMode",
          "description": "<p>An immutable object that describes a calendar drag mode. These objects are used to simplify detecting the drag mode\nto apply appropriate actions.</p>",
          "properties": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>The value <code>'create'</code>, <code>'move'</code>, or <code>'resize'</code>.</p>"
            },
            {
              "name": "create",
              "type": "Boolean",
              "description": "<p>The value <code>true</code> if <code>type === 'create'</code>, otherwise <code>false</code>.</p>"
            },
            {
              "name": "move",
              "type": "Boolean",
              "description": "<p>The value <code>true</code> if <code>type === 'move'</code>, otherwise <code>false</code>.</p>"
            },
            {
              "name": "resize",
              "type": "Boolean",
              "description": "<p>The value <code>true</code> if <code>type === 'resize'</code>, otherwise <code>false</code>.</p>"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "beforeDragCreateEnd",
          "description": "<p>This event fires on the owning Calendar before a drag creation gesture is completed. Return <code>false</code> to immediately veto the operation\nor a Promise yielding <code>true</code> or <code>false</code> for async vetoing.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new <code>EventModel</code> record.</p>"
            },
            {
              "name": "feature",
              "type": "Calendar.feature.CalendarDrag",
              "description": "<p>The Calendar drag feature instance.</p>"
            },
            {
              "name": "validation",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>The result of the <a href=\"#Calendar/feature/CalendarDrag#config-validateCreateFn\">validateCreateFn</a> if one was provided.</p>"
            },
            {
              "name": "view",
              "type": "Core.widget.Widget",
              "description": "<p>The Calendar widget in which the drag completed.</p>"
            }
          ],
          "preventable": true,
          "async": true,
          "onOwner": true
        },
        {
          "name": "dragCreateEnd",
          "description": "<p>This event fires on the owning Calendar when a drag creation gesture is completed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new <code>EventModel</code> record.</p>"
            },
            {
              "name": "feature",
              "type": "Calendar.feature.CalendarDrag",
              "description": "<p>The Calendar drag feature instance.</p>"
            },
            {
              "name": "validation",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>The result of the <a href=\"#Calendar/feature/CalendarDrag#config-validateCreateFn\">validateCreateFn</a> if one was provided.</p>"
            },
            {
              "name": "view",
              "type": "Core.widget.Widget",
              "description": "<p>The Calendar widget in which the drag completed.</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeDragMoveEnd",
          "description": "<p>This event fires on the owning Calendar before a drag move gesture is completed. Return <code>false</code> to immediately veto the operation\nor a Promise yielding <code>true</code> or <code>false</code> for async vetoing.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new <code>EventModel</code> record.</p>"
            },
            {
              "name": "feature",
              "type": "Calendar.feature.CalendarDrag",
              "description": "<p>The Calendar drag feature instance.</p>"
            },
            {
              "name": "validation",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>The result of the <a href=\"#Calendar/feature/CalendarDrag#config-validateMoveFn\">validateMoveFn</a> if one was provided.</p>"
            },
            {
              "name": "view",
              "type": "Core.widget.Widget",
              "description": "<p>The Calendar widget in which the drag completed.</p>"
            }
          ],
          "preventable": true,
          "async": true,
          "onOwner": true
        },
        {
          "name": "dragMoveEnd",
          "description": "<p>This event fires on the owning Calendar when a drag move gesture is completed. The <code>eventRecord</code> has already been added\nto the <code>eventStore</code> of the owning calendar.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new <code>EventModel</code> record.</p>"
            },
            {
              "name": "feature",
              "type": "Calendar.feature.CalendarDrag",
              "description": "<p>The Calendar drag feature instance.</p>"
            },
            {
              "name": "validation",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>The result of the <a href=\"#Calendar/feature/CalendarDrag#config-validateMoveFn\">validateMoveFn</a> if one was provided.</p>"
            },
            {
              "name": "view",
              "type": "Core.widget.Widget",
              "description": "<p>The Calendar widget in which the drag completed.</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeDragResizeEnd",
          "description": "<p>This event fires on the owning Calendar before a drag resize gesture is completed. Return <code>false</code> to immediately veto the operation\nor a Promise yielding <code>true</code> or <code>false</code> for async vetoing.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new <code>EventModel</code> record.</p>"
            },
            {
              "name": "feature",
              "type": "Calendar.feature.CalendarDrag",
              "description": "<p>The Calendar drag feature instance.</p>"
            },
            {
              "name": "validation",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>The result of the <a href=\"#Calendar/feature/CalendarDrag#config-validateResizeFn\">validateResizeFn</a> if one was provided.</p>"
            },
            {
              "name": "view",
              "type": "Core.widget.Widget",
              "description": "<p>The Calendar widget in which the drag completed.</p>"
            }
          ],
          "preventable": true,
          "async": true,
          "onOwner": true
        },
        {
          "name": "dragResizeEnd",
          "description": "<p>This event fires on the owning Calendar when a drag resize gesture is completed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new <code>EventModel</code> record.</p>"
            },
            {
              "name": "feature",
              "type": "Calendar.feature.CalendarDrag",
              "description": "<p>The Calendar drag feature instance.</p>"
            },
            {
              "name": "validation",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>The result of the <a href=\"#Calendar/feature/CalendarDrag#config-validateResizeFn\">validateResizeFn</a> if one was provided.</p>"
            },
            {
              "name": "view",
              "type": "Core.widget.Widget",
              "description": "<p>The Calendar widget in which the drag completed.</p>"
            }
          ],
          "onOwner": true
        }
      ],
      "configs": [
        {
          "name": "creatable",
          "description": "<p>Specify <code>false</code> to disallow creating events by drag gestures.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "draggable",
          "description": "<p>Specify <code>false</code> to disallow dragging events to new times or days.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "footer",
          "description": "<p>A <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DOM config</a> object used to create an extra element\nduring event drag to contain the end time of the tentative event. This element contains the CSS class\n<code>'b-cal-event-footer'</code> which can be used for styling.</p>\n<p>Set this to <code>null</code> to remove the end time rendering during drag operations.</p>",
          "type": "Object",
          "scope": "inner",
          "defaultValue": "{\"className\":\"b-cal-event-footer\"}"
        },
        {
          "name": "gripper",
          "access": "private",
          "description": "<p>This is configured as a <a href=\"#Core/helper/DomHelper#function-createElement-static\">DomHelper</a>\nspecification and is promoted to an <code>HTMLElement</code> during initialization. This element is moved between\ncalendar event elements on hover in order to show drag handles on the event under the mouse.</p>",
          "type": [
            "HTMLElement",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "newName",
          "description": "<p>The name of new events or a function to call with the event record that will return the event name.</p>",
          "type": [
            "String",
            "function"
          ],
          "scope": "inner"
        },
        {
          "name": "recurrenceTip",
          "description": "<p>The text to display as a hint for creating recurring events during drag. This tip is displayed in the\n<a href=\"#Calendar/feature/CalendarDrag#config-tooltip\">tooltip</a> in the same place as the recurrence summary (when there is no recurrence to\ndisplay).</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "resizable",
          "description": "<p>Specify <code>false</code> to disallow dragging the edges of events to change their start or end.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "tooltip",
          "description": "<p>The tooltip to display during a drag create process. Disabled by\ndefault, set to <code>true</code>, or provide a tooltip / config object, to enable it.</p>",
          "type": [
            "Boolean",
            "Object",
            "Calendar.widget.EventTip"
          ],
          "scope": "inner"
        },
        {
          "name": "validateCreateFn",
          "description": "<p>An empty function by default that allows you to perform custom validation on an event being created by\na drag gesture.</p>\n<p>The <code>drag</code> context contains the following data items (see <a href=\"#Core/util/drag/DragContext#function-get\">get</a>):</p>\n<ul>\n<li><code>eventDragMode</code> : The <a href=\"#Calendar/feature/CalendarDrag#typedef-CalendarDragMode\">CalendarDragMode</a> object describing the drag operation.</li>\n<li><code>eventCreate</code> : The <a href=\"#Calendar/view/Calendar#typedef-CalendarHit\">CalendarHit</a> object that describes the target of the drag operation.</li>\n</ul>\n<p>Return <code>false</code> to cancel the create operation.</p>\n<p>This function can return a <code>Promise</code> (i.e., it can be <code>async</code>).</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let calendar = new Calendar({\n     features : {\n         drag : {\n             async validateCreateFn({ eventRecord, drag }) {\n                 // This method can be async so it can make ajax requests or interact\n                 // with the user...\n\n                 // if we return false, the event will be discarded\n\n                 // The following is equivalent to returning false:\n                 //\n                 // return {\n                 //     // Do not add the event to the store\n                 //     add  : false,\n                 //     // Do not display the edit dialog (in the eventEdit feature):\n                 //     edit : false\n                 // };\n                 //\n                 // This simply adds the event and does not display the editor:\n                 //\n                 return {\n                     edit : false\n                 };\n\n                 // To do delay adding the event until the editor is done (and\n                 // not via Cancel):\n                 // return {\n                 //     add : false\n                 // };\n             }\n         }\n     }\n });\n</code></pre>\n<p>or:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let calendar = new Calendar({\n     features : {\n         drag : {\n             // Will resolve on the Calendar\n             validateCreateFn : 'up.validateCreate'\n         }\n     },\n     validateCreate{ eventRecord, drag } {\n         ...\n     }\n });\n</code></pre>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "returns": {
            "type": [
              "Boolean",
              "Object"
            ],
            "description": "<p>Return <code>false</code> if this event should be rejected.</p>\n<p>Return <code>true</code> if the event should be added to the event store and to inform the\n<a href=\"#Calendar/feature/EventEdit\">eventEdit</a> feature to display the edit dialog.</p>\n<p>If this function returns an object, the <code>add</code> property can be set to <code>false</code>\nto prevent adding to the event store, and the <code>edit</code> property can be set to <code>false</code> to inform the\n<code>eventEdit</code> feature not to display the edit dialog.</p>"
          },
          "parameters": [
            {
              "name": "info",
              "type": "Object"
            },
            {
              "name": "info.drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>",
              "isSubParam": true
            },
            {
              "name": "info.event",
              "type": "Event",
              "description": "<p>The browser event object.</p>",
              "isSubParam": true
            },
            {
              "name": "info.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The Event record.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "validateMoveFn",
          "description": "<p>An empty function by default that allows you to perform custom validation on the event being moved to a\nnew date or time via a drag gesture.</p>\n<p>The <code>drag</code> context contains the following data items (see <a href=\"#Core/util/drag/DragContext#function-get\">get</a>):</p>\n<ul>\n<li><code>eventDragMode</code> : The <a href=\"#Calendar/feature/CalendarDrag#typedef-CalendarDragMode\">CalendarDragMode</a> object describing the drag operation.</li>\n<li><code>eventRecord</code> : The <a href=\"#Scheduler/model/EventModel\">event record</a> being moved.</li>\n<li><code>eventSourceHit</code> : The <a href=\"#Calendar/view/Calendar#typedef-CalendarHit\">CalendarHit</a> object that describes the source of the drag operation.</li>\n</ul>\n<p>Return <code>false</code> to cancel the operation.</p>\n<p>This function can return a <code>Promise</code> (i.e., it can be <code>async</code>).</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let calendar = new Calendar({\n     features : {\n         drag : {\n             async validateMoveFn({ eventRecord, drag }) {\n                 // This method can be async so it can make ajax requests or interact\n                 // with the user...\n\n                 // if we return false, the event move will be discarded\n             }\n         }\n     }\n });\n</code></pre>\n<p>or:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let calendar = new Calendar({\n     features : {\n         drag : {\n             // Will resolve on the Calendar\n             validateMoveFn : 'up.validateMove'\n         }\n     },\n     validateMove{ eventRecord, drag } {\n         ...\n     }\n });\n</code></pre>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "returns": {
            "type": "Boolean",
            "description": "<p>Return <code>false</code> if this event change should be rejected.</p>"
          },
          "parameters": [
            {
              "name": "info",
              "type": "Object"
            },
            {
              "name": "info.drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>",
              "isSubParam": true
            },
            {
              "name": "info.event",
              "type": "Event",
              "description": "<p>The browser event object.</p>",
              "isSubParam": true
            },
            {
              "name": "info.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The Event record.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "validateResizeFn",
          "description": "<p>An empty function by default that allows you to perform custom validation on the event whose <code>startDate</code>\nor <code>endDate</code> is being modified via drag gesture.</p>\n<p>The <code>drag</code> context contains the following data items (see <a href=\"#Core/util/drag/DragContext#function-get\">get</a>):</p>\n<ul>\n<li><code>eventDragMode</code> : The <a href=\"#Calendar/feature/CalendarDrag#typedef-CalendarDragMode\">CalendarDragMode</a> object describing the drag operation.</li>\n<li><code>eventSourceHit</code> : The <a href=\"#Calendar/view/Calendar#typedef-CalendarHit\">CalendarHit</a> object that describes the source of the drag operation.</li>\n</ul>\n<p>Return <code>false</code> to cancel the operation.</p>\n<p>This function can return a <code>Promise</code> (i.e., it can be <code>async</code>).</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let calendar = new Calendar({\n     features : {\n         drag : {\n             async validateResizeFn({ eventRecord, drag }) {\n                 // This method can be async so it can make ajax requests or interact\n                 // with the user...\n\n                 // if we return false, the event change will be discarded\n             }\n         }\n     }\n });\n</code></pre>\n<p>or:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let calendar = new Calendar({\n     features : {\n         drag : {\n             // Will resolve on the Calendar\n             validateResizeFn : 'up.validateResize'\n         }\n     },\n     validateResize{ eventRecord, drag } {\n         ...\n     }\n });\n</code></pre>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "returns": {
            "type": [
              "Boolean",
              "Object"
            ],
            "description": "<p>Return <code>false</code> if this event change should be rejected.</p>"
          },
          "parameters": [
            {
              "name": "info",
              "type": "Object"
            },
            {
              "name": "info.drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag create context.</p>",
              "isSubParam": true
            },
            {
              "name": "info.event",
              "type": "Event",
              "description": "<p>The browser event object.</p>",
              "isSubParam": true
            },
            {
              "name": "info.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The Event record.</p>",
              "isSubParam": true
            }
          ]
        }
      ]
    },
    {
      "name": "CalendarFeature",
      "modulePath": "Calendar/feature/CalendarFeature",
      "classDescription": "<p>The base abstract class for Calendar features.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarFeature.js",
      "path": "/Calendar/lib/Calendar/feature"
    },
    {
      "name": "EventEdit",
      "modulePath": "Calendar/feature/EventEdit",
      "classDescription": "<p>Feature that displays a popup containing fields for editing event data.</p>\n<p>To customize its contents you can:</p>\n<ul>\n<li>Reconfigure built in widgets by providing override configs in the <a href=\"#Scheduler/feature/base/EditBase#config-items\">items</a> config.</li>\n<li>Change the date format of the date &amp; time fields: <a href=\"#Scheduler/feature/base/EditBase#config-dateFormat\">dateFormat</a> and <a href=\"#Scheduler/feature/base/EditBase#config-timeFormat\">timeFormat</a></li>\n<li>Configure provided fields in the editor and add your own in the <a href=\"#Scheduler/feature/base/EditBase#config-items\">items</a> config.</li>\n<li>Remove fields related to recurring events configuration (such as <code>recurrenceCombo</code>) by setting <a href=\"#Scheduler/feature/mixin/RecurringEventEdit#config-showRecurringUI\">showRecurringUI</a> config to <code>false</code>.</li>\n<li>Advanced: Reconfigure the whole editor widget using <a href=\"#Scheduler/feature/EventEdit#config-editorConfig\">editorConfig</a></li>\n</ul>\n<p>For more info on customizing the event editor, please see <a href=\"#Calendar/guides/customization/eventedit.md\">Customize event editor</a> guide.</p>",
      "extends": [
        "Scheduler/feature/EventEdit"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventEdit.js",
      "path": "/Calendar/lib/Calendar/feature",
      "typings": {
        "Scheduler/feature/EventEdit": "Scheduler/feature/SchedulerEventEdit"
      },
      "demo": {
        "product": "calendar",
        "demo": "eventedit"
      },
      "externalExamples": [
        "Calendar/feature/EventEdit.js"
      ],
      "classType": "eventEdit",
      "functions": [
        {
          "name": "editEvent",
          "description": "<p>Opens an editor for the passed event. This function is exposed on Calendar and can be called as\n<code>calendar.editEvent()</code>.</p>\n<p>If the event is not present in the <code>eventStore</code>, the event will be added so that it becomes\nvisible in the UI. The editor will then shows a &quot;Cancel&quot; button which removes the event when\nclicked to abort a &quot;New Event&quot; operation.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event to edit</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Not used. Inherited from Scheduler.</p>",
              "optional": true
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to anchor editor to (defaults to events element)</p>",
              "optional": true
            }
          ],
          "scope": "inner"
        }
      ]
    },
    {
      "name": "EventMenu",
      "modulePath": "Calendar/feature/EventMenu",
      "classDescription": "<p>A feature which adds a context menu to the events in the calendar.</p>\n<p>There is one predefined <a href=\"#Calendar/feature/EventMenu#config-items\">item</a> provided by default:</p>\n<ul>\n<li><code>deleteEvent</code> Deleted the event clicked upon.</li>\n</ul>\n<p>The <a href=\"#Calendar/feature/EventMenu#config-items\">items</a> set can be reconfigured by providing an <code>items</code> property to this feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    eventMenu : {\n        items : {\n            // Knocks out the predefined deleteEvent item\n            deleteEvent : null,\n\n            // Add our own custom item\n            myMenuItem : {\n                 icon    : 'b-fa b-fa-clone',\n                 text    : 'Duplicate event',\n\n                 // Will look up ownership chain and find the Calendar\n                 handler : 'up.duplicateEvent'\n            }\n        }\n    }\n},\nduplicateEvent({ eventRecord }) {\n    const dupe = eventRecord.copy();\n\n    // In case it was a recurring event, the dupe will be a one-off.\n    dupe.recurrence = null;\n    this.eventStore.add(dupe);\n}\n</code></pre>\n<p>This feature is enabled by default.</p>",
      "extends": [
        "Scheduler/feature/EventMenu"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventMenu.js",
      "path": "/Calendar/lib/Calendar/feature",
      "typings": {
        "Scheduler/feature/EventMenu": "Scheduler/feature/SchedulerEventMenu"
      },
      "demo": {
        "product": "calendar",
        "demo": "custom-menus"
      },
      "classType": "eventMenu"
    },
    {
      "name": "EventTooltip",
      "modulePath": "Calendar/feature/EventTooltip",
      "classDescription": "<p>A feature which displays a <a href=\"#Calendar/feature/EventTooltip#config-tooltip\">tooltip</a> containing extra information. The tooltip can\nbe triggered by clicking or hovering an event bar element (see <a href=\"#Calendar/feature/EventTooltip#config-showOn\">showOn</a>).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n   features : {\n       eventTooltip : {\n           tooltip : {\n               tools : {\n                   // Do not show the Delete tool in the tooltip header\n                   delete : false,\n                   // Add a new tool for our own operation\n                   newTool : {\n                       cls     : 'b-icon-add',\n                       tooltip : 'Test',\n                       handler() {\n                           console.log(`Test ${this.eventRecord.name}`);\n                       }\n                   }\n               }\n           }\n       }\n   }\n})\n</code></pre>",
      "extends": [
        "Calendar/feature/CalendarFeature"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventTooltip.js",
      "path": "/Calendar/lib/Calendar/feature",
      "typings": {
        "Scheduler/feature/EventTooltip": "Scheduler/feature/SchedulerEventTooltip"
      },
      "demo": {
        "product": "calendar",
        "demo": "tooltips"
      },
      "externalExamples": [
        "Calendar/feature/EventTooltip.js"
      ],
      "classType": "eventTooltip",
      "configs": [
        {
          "name": "activeElement",
          "access": "private",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "showOn",
          "description": "<p>The gesture which activates the event tooltip. Defaults to <code>'click'</code>, but may be set to\n<code>'contextmenu'</code> or <code>'mouseover</code>'. The tip persists until closed.</p>\n<p>If set to <code>'hover'</code>, the tip shows on mouseover and hides on mouseout.</p>\n<p>If set to <code>'contextmenu'</code>, the tip shows at the mouse/touch contact point, otherwise\nit aligns to the target event bar.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "click"
        },
        {
          "name": "tooltip",
          "description": "<p>This config is used to directly configure the associated <a href=\"#Calendar/widget/EventTip\">tooltip</a>.</p>",
          "type": "Calendar.widget.EventTip",
          "scope": "inner"
        },
        {
          "name": "titleRenderer",
          "description": "<p>A function which, when passed the active <a href=\"#Scheduler/model/EventModel\">EventModel</a>, returns\na value to use as the tooltip's <a href=\"#Core/widget/Panel#config-title\">title</a>.</p>\n<p><em>Defaults to using the event <code>name</code></em></p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "recurrenceConfirmation",
          "access": "private",
          "description": "<p>This config is used to directly configure the associated recurrence confirmation popup used\nwhen a delete is requested.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "extendAllDayEndDay",
          "description": "<p>By default, the end date of an all day event is displayed in the tooltip UI as\nthe last calendar date on which the event falls. For most end users, this is the\nexpected value.</p>\n<p>Technically, the <a href=\"#Scheduler/model/EventModel#field-endDate\">endDate</a> is a timestamp\nwhich represents the exact point in time at which an event ends. To use this instead,\nconfigure <code>extendAllDayEndDay</code> as <code>true</code>.</p>\n<p>To be clear, this would mean that an <a href=\"#Scheduler/model/EventModel#field-allDay\">allDay</a>\nevent starting and ending on the 7th of February 2020, would show the end date in the\ntooltip as 8th of February 2020.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "align",
          "description": "<p>Defines how to align the EventTooltip to its event.</p>\n<p>The value can be either a simple string or a full configuration object.</p>\n<p>When using a simple string, the format is <code>'[trblc]n-[trblc]n'</code> and it specifies tooltip edge and\nthe event edge plus optional offsets from 0 to 100 along the edges to align to. Also supports direction\nindependent edges horizontally, <code>s</code> for start and <code>e</code> for end (maps to <code>l</code> and <code>r</code> for LTR, <code>r</code> and <code>l</code>\nfor RTL).</p>\n<p>For more details about using the object form, see <a href=\"#Core/widget/Widget#function-showBy\">showBy</a>.</p>\n<p>Once set, this is stored internally in object form.</p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "'t-b'"
        }
      ],
      "properties": [
        {
          "name": "tooltip",
          "description": "<p>Gets the Tooltip instance that this feature is using.</p>",
          "type": "Calendar.widget.EventTip",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "eventRecord",
          "description": "<p>The event which the tooltip feature has been activated for.</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner",
          "readonly": true
        }
      ]
    },
    {
      "name": "ExternalEventSource",
      "modulePath": "Calendar/feature/ExternalEventSource",
      "classDescription": "<p>A Calendar feature which allows new events to be dragged into the Calendar from an external source.</p>\n<p>The default source type is a Bryntum <a href=\"#Grid/view/Grid\">grid</a> which is loaded with\n<a href=\"#Scheduler/model/EventModel\">event records</a>.</p>\n<p>Optionally, the source can be specified by configuring a <a href=\"#Calendar/feature/ExternalEventSource#config-dragRootElement\">dragRootElement</a>\nand a <a href=\"#Calendar/feature/ExternalEventSource#config-dragItemSelector\">dragItemSelector</a> which together, identify elements which represent\ndraggable events.</p>\n<p>In this case, a <a href=\"#Calendar/feature/ExternalEventSource#config-getRecordFromElement\">getRecordFromElement</a> may be specified to yield the details of\nthe record to be dragged.</p>\n<p>In the simplest case the <code>textContent</code> of the identified element is used as the event name and\n<a href=\"#Calendar/feature/ExternalEventSource#config-getRecordFromElement\">getRecordFromElement</a> is not required. The event duration in this case will be\nthat specified in the receiving Calendar's <a href=\"#Calendar/view/Calendar#config-autoCreate\">autoCreate</a> setting.</p>\n<p>When dropping an unscheduled event (An event that has no start and end date specified) into\na day cell (For example a MonthView or YearView), the start <em>time</em> set within the day cell\nwill default to the <code>startHour</code> property of the receiving Calendar's <a href=\"#Calendar/view/Calendar#config-autoCreate\">autoCreate</a> setting.</p>",
      "extends": [
        "Calendar/feature/CalendarFeature"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ExternalEventSource.js",
      "path": "/Calendar/lib/Calendar/feature",
      "demo": {
        "product": "calendar",
        "demo": "dragfromgrid"
      },
      "externalExamples": [
        "Calendar/feature/ExternalEventSource.js"
      ],
      "classType": "externalEventSource",
      "configs": [
        {
          "name": "grid",
          "description": "<p>The grid, or <code>id</code> of a grid from which events are to be dragged.</p>",
          "type": [
            "Grid.view.Grid",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "dragRootElement",
          "description": "<p>If not dragging from a grid, which is the default mode, then an element from which\ndragging can take place must be supplied in the <code>dragRootElement</code> config.</p>\n<p>May also be specified as a selector which matches a unique element, or a simple element id.</p>\n<p>In this case a <a href=\"#Calendar/feature/ExternalEventSource#config-dragItemSelector\">dragItemSelector</a> string, and <a href=\"#Calendar/feature/ExternalEventSource#config-getRecordFromElement\">getRecordFromElement</a>\nfunction must be supplied to allow event records to be sourced from the element, for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    externalEventSource : {\n        dragRootElement  : '#mySourceElementId',\n        dragItemSelector : '.my-item-class'\n    }\n}```</code></pre>",
          "type": [
            "HTMLElement",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "dragItemSelector",
          "description": "<p>If not dragging from a grid, which is the default mode, then a selector which identifies\ndraggable elements within the <a href=\"#Calendar/feature/ExternalEventSource#config-dragRootElement\">dragRootElement</a>.</p>\n<p>In the simplest case, the identified element may contain simply a string which is used\nas the event name, for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    externalEventSource : {\n        dragRootElement  : '#mySourceElementId',\n        dragItemSelector : '.my-item-class'\n    }\n}```</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "getRecordFromElement",
          "description": "<p>If not dragging from a grid, which is the default mode, then a function which returns\nan event record to drag from a passed element must be supplied.</p>\n<p>In this case a <a href=\"#Calendar/feature/ExternalEventSource#config-dragRootElement\">dragRootElement</a> and a <a href=\"#Calendar/feature/ExternalEventSource#config-dragItemSelector\">dragItemSelector</a> string\nmay be supplied to allow event records to be sourced from the element.</p>\n<p>If the element identified by the <a href=\"#Calendar/feature/ExternalEventSource#config-dragItemSelector\">dragItemSelector</a> just contains an event\nname to create, this configuration is optional. A new event will be created by that name, for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    externalEventSource : {\n        dragRootElement  : '#mySourceElementId',\n        dragItemSelector : '.my-item-class',\n        getRecordFromElement(element) {\n            // Return an object from which an EventModel can be created.\n            // Same format as loading an EventStore. { name : 'name', startDate: ''} etc\n            return myController.createRecordFromElement(element);\n        }\n    }\n}```</code></pre>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "hideExternalProxy",
          "description": "<p>By default, the proxy shown when &quot;picking up&quot; the grid row is hidden\nwhen dragging over the calendar because the <a href=\"#Calendar/feature/CalendarDrag\">CalendarDrag</a>\nfeature automatically shows a drop position indicator which shows where the\nproposed new event will be.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "draggable",
          "description": "<p>An object which overrides or augments the default configuration for the\n<a href=\"#Core/mixin/Draggable\">Draggable</a> which handles picking up events.</p>\n<p>This is only necessary if there is no <a href=\"#Calendar/feature/ExternalEventSource#config-grid\">grid</a> specified.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "LoadOnDemand",
      "modulePath": "Calendar/feature/LoadOnDemand",
      "classDescription": "<p>Loads the host Calendar's <a href=\"#Scheduler/view/mixin/SchedulerStores#config-crudManager\">CrudManager</a> on demand\nas the date range required to produce the UI changes.</p>\n<p>Passes the <a href=\"#Calendar/view/Calendar#property-activeView\">activeView</a>'s <code>startDate</code> and <code>endDate</code> as\nextra HTTP parameters along with the load request.</p>\n<p>By default, the HTTP parameters are called <code>'startDate'</code> and <code>'endDate'</code>. This is configurable using the\n<a href=\"#Calendar/feature/LoadOnDemand#config-startDateParamName\">startDateParamName</a> and <a href=\"#Calendar/feature/LoadOnDemand#config-endDateParamName\">endDateParamName</a> configs.</p>\n<p>The date values are formatted according to the <a href=\"#Calendar/feature/LoadOnDemand#config-dateFormat\">dateFormat</a> config.</p>\n<p>Usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    features : {\n        loadOnDemand : true\n    }\n});\n</code></pre>\n<h2>Using recurring events</h2>\n<p>When using this feature when recurring events are in the database, <em>all recurring events</em> which\nstarted before the requested start date, and have not yet finished recurring MUST be sent as part\nof the return packet so that the Calendar is able to populate its UI.</p>\n<p>Only the base recurring event <em>definition</em> is stored in the Calendar's EventStore.</p>\n<p>When asked to yield a set of events for a certain date range for creating a UI, the EventStore\n<em>automatically</em> interpolates any occurrences of recurring events into the results. They do not\noccupy slots in the EventStore for every date in their repetition range (that would be very\ninefficient, and <em>might</em> be infinite).</p>",
      "extends": [
        "Calendar/feature/CalendarFeature"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "LoadOnDemand.js",
      "path": "/Calendar/lib/Calendar/feature",
      "classType": "loadOnDemand",
      "configs": [
        {
          "name": "startDateParamName",
          "description": "<p>The name of the HTTP parameter which contains the start date of the view requiring new data.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "startDate"
        },
        {
          "name": "endDateParamName",
          "description": "<p>The name of the HTTP parameter which contains the end date of the view requiring new data.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "endDate"
        },
        {
          "name": "dateFormat",
          "description": "<p>The <a href=\"#Core/helper/DateHelper#function-format-static\">DateHelper</a> format string to use to\nencode the start date end end date of the events to load when the view requires a new date range.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "YYYY-MM-DD"
        }
      ]
    },
    {
      "name": "ScheduleMenu",
      "modulePath": "Calendar/feature/ScheduleMenu",
      "classDescription": "<p>A feature which adds a context menu to the unoccupied parts of calendar views.</p>\n<p>There is one predefined <a href=\"#Calendar/feature/ScheduleMenu#config-items\">item</a> provided by default:</p>\n<ul>\n<li><code>addEvent</code> Adds an event at the time point indicated by the click</li>\n</ul>\n<p>If the timepoint has only date-level granularity (Such as when clicking in in a MonthView or\nAgendaView, or YearView), the start time of the event will default to the configured\n<a href=\"#Calendar/view/Calendar#config-autoCreate\">autoCreate</a>'s <code>startHour</code> property.</p>\n<p>If the <a href=\"#Calendar/feature/EventEdit\">EventEdit</a> feature is enabled, the new event is passed for editing.</p>\n<p>The <a href=\"#Calendar/feature/ScheduleMenu#config-items\">items</a> set can be reconfigured by providing an <code>items</code> property to this feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    scheduleMenu : {\n        items : {\n            // Knocks out the predefined addEvent item\n            addEvent : null,\n\n            // Add our own custom item\n            disableDate : {\n                 icon    : 'b-fa b-fa-calendar-times',\n                 text    : 'Mark date unavailable',\n\n                 // Will look up ownership chain and find the Calendar\n                 handler : 'up.makeDateUnavailable'\n            }\n        }\n    }\n},\nmakeDateUnavailable({ date }) {\n    // Pass to our own app logic\n    this.disableDate(date);\n}\n</code></pre>\n<p>This feature is <strong>not</strong> enabled by default. In order to use it, you must include it in your\n<code>features</code> configuration.</p>",
      "extends": [
        "Scheduler/feature/ScheduleMenu"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ScheduleMenu.js",
      "path": "/Calendar/lib/Calendar/feature",
      "typings": {
        "Scheduler/feature/ScheduleMenu": "Scheduler/feature/SchedulerScheduleMenu"
      },
      "demo": {
        "product": "calendar",
        "demo": "custom-menus"
      },
      "classType": "scheduleMenu"
    },
    {
      "name": "WeekExpander",
      "modulePath": "Calendar/feature/WeekExpander",
      "classDescription": "<p>A Feature which, when present, adds a week row expansion tool to week rows in\n<a href=\"#Calendar/widget/MonthView\">MonthView</a>s so that a row which contains overflowing cells\ncan be expanded to show all events with no overflow.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const calendar = new Calendar({\n    appendTo : 'container',\n\n    // Start life looking at this date\n    date : new Date(2020, 9, 12),\n\n    features : {\n        weekExpander : true\n    },\n\n    // CrudManager arranges loading and syncing of data in JSON form from/to a web service\n    crudManager : {\n        transport : {\n            load : {\n                url : 'data/data.json'\n            }\n        },\n        autoLoad : true\n    }\n});```\n\nNote that doing this may cause the MonthView itself to have vertical overflow.</code></pre>",
      "extends": [
        "Calendar/feature/CalendarFeature"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "WeekExpander.js",
      "path": "/Calendar/lib/Calendar/feature",
      "classType": "weekExpander"
    },
    {
      "name": "Print",
      "modulePath": "Calendar/feature/print/Print",
      "classDescription": "<p>This feature enables printing of the current Calendar mode.</p>\n<h2>Usage</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>const calendar = new Calendar({\n    features : {\n        print : true\n    }\n});\n\n\n// Simple print\ncalendar.print();\n</code></pre>",
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Print.js",
      "path": "/Calendar/lib/Calendar/feature/print",
      "demo": {
        "product": "calendar",
        "demo": "basic"
      },
      "classType": "print",
      "configs": [
        {
          "name": "printer",
          "access": "private",
          "description": "<p>Config for printer.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "wysiwyg",
          "description": "<p>By default, a <a href=\"#Calendar/widget/MonthView\">MonthView</a> is rendered with the week rows\nshrinkwrapping their event content. That is, rows with no events are small, and rows\ncontaining events are expanded to make all events visible.</p>\n<p>To duplicate the on-screen appearance in terms of week row heights where empty rows\nare flexed to consume an equal amount of height, configure this as <code>true</code>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "titleRenderer",
          "description": "<p>The function to use to create the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\">&lt;title&gt;</a> element for the print document.\nDefaults to using the <a href=\"#Calendar/widget/mixin/CalendarMixin#config-descriptionRenderer\">descriptionRenderer</a>\nof the active view. Note that this does not process HTML source.</p>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "printers",
          "access": "private",
          "description": "<p>Map of printer classes to use in print feature</p>",
          "type": "Map",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "print",
          "description": "<p>Prints the current active view of the Calendar</p>",
          "scope": "instance",
          "async": true
        }
      ],
      "events": [
        {
          "name": "beforePrint",
          "description": "<p>Fires on the owning Calendar before print starts. Return <code>false</code> to cancel the print.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Print config</p>"
            },
            {
              "name": "printer",
              "type": "Calendar.feature.print.printer.Printer",
              "description": "<p>The Printer object which will handle the printing.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "print",
          "description": "<p>Fires when print has finished</p>"
        }
      ]
    },
    {
      "name": "CalendarPrinter",
      "modulePath": "Calendar/feature/print/printer/CalendarPrinter",
      "classDescription": "<p>Helper class for the Calendar print feature.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarPrinter.js",
      "path": "/Calendar/lib/Calendar/feature/print/printer"
    },
    {
      "name": "Printer",
      "modulePath": "Calendar/feature/print/printer/Printer",
      "classDescription": "<p>Base class for all printers</p>",
      "extends": [
        "Grid/feature/export/exporter/Exporter"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Printer.js",
      "path": "/Calendar/lib/Calendar/feature/print/printer",
      "functions": [
        {
          "name": "pageTpl",
          "description": "<p>Template of an extracted page.</p>",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Data for the page template</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        }
      ]
    },
    {
      "name": "DayLayout",
      "modulePath": "Calendar/layout/day/DayLayout",
      "classDescription": "<p>The base class for <a href=\"#Calendar/widget/DayView\">DayView</a> layout algorithms.</p>",
      "extends": [
        "Core/Base"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "DayLayout.js",
      "path": "/Calendar/lib/Calendar/layout/day",
      "typedefs": [
        {
          "name": "DayLayoutItem",
          "access": "internal",
          "description": "<p>The item returned by the <code>layoutEvents</code> method.</p>",
          "properties": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The <code>event</code> being displayed.</p>"
            },
            {
              "name": "cluster",
              "type": "Calendar.layout.day.DayLayout#DayLayoutCluster",
              "description": "<p>The cluster of events with overlapping times.</p>"
            },
            {
              "name": "start",
              "type": "Number",
              "description": "<p>The start time (as the number seconds since midnight) of the item.</p>"
            },
            {
              "name": "end",
              "type": "Number",
              "description": "<p>The end time (as the number seconds since midnight) of the item.</p>"
            },
            {
              "name": "left",
              "type": "Number",
              "description": "<p>The left position of the item as a percentage.</p>"
            },
            {
              "name": "top",
              "type": "Number",
              "description": "<p>The top position of the item as a percentage.</p>"
            },
            {
              "name": "width",
              "type": "Number",
              "description": "<p>The width of the item as a percentage.</p>"
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>The height of the item as a percentage.</p>"
            },
            {
              "name": "startsBefore",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> if the event started in a previous day.</p>"
            },
            {
              "name": "endsAfter",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> if the event end in a future day.</p>"
            }
          ]
        },
        {
          "name": "DayLayoutCluster",
          "access": "internal",
          "description": "<p>A set of <code>items</code> that overlap. This object is passed to the <code>layoutCluster</code> method.</p>",
          "properties": [
            {
              "name": "items",
              "type": "Array.<Calendar.layout.day.DayLayout#DayLayoutItem>"
            },
            {
              "name": "start",
              "type": "Number",
              "description": "<p>The start time (as the number seconds since midnight) of the item.</p>"
            },
            {
              "name": "end",
              "type": "Number",
              "description": "<p>The end time (as the number seconds since midnight) of the item.</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "overlapTolerance",
          "access": "internal",
          "description": "<p>The minimum number of minutes an event must overlap another event before it is considered an overlap\nfor layout purposes.</p>\n<p>The default value of 0 treats any overlap in time as an overlap in the layout.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": "0"
        }
      ],
      "functions": [
        {
          "name": "clusterize",
          "access": "private",
          "description": "<p>This method packages items into clusters of overlapping items.</p>",
          "parameters": [
            {
              "name": "clusters",
              "type": "Array.<Calendar.layout.day.DayLayout#DayLayoutCluster>",
              "description": "<p>The cluster array being produced. This method adds to this array.</p>"
            },
            {
              "name": "items",
              "type": "Array.<Calendar.layout.day.DayLayout#DayLayoutItem>",
              "description": "<p>The items array being produced. This method adds <code>item</code> to this array.</p>"
            },
            {
              "name": "item",
              "type": "Calendar.layout.day.DayLayout#DayLayoutItem",
              "description": "<p>The item to add and pack into a cluster.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "layoutCluster",
          "access": "internal",
          "virtual": true,
          "description": "<p>The derived class implements this abstract method to finalize the position of the specified <code>cluster</code>. This is\ndone by storing position properties (<code>left</code> and <code>width</code>) on the items of the cluster.</p>",
          "parameters": [
            {
              "name": "cluster",
              "type": "Calendar.layout.day.DayLayout#DayLayoutCluster",
              "description": "<p>The cluster of items to position.</p>"
            },
            {
              "name": "scaleFn",
              "type": "function",
              "description": "<p>A function to scale numbers in the range of 0 to 1 into the desired percentage range.</p>"
            },
            {
              "name": "dayTime",
              "type": "Core.util.DayTime",
              "description": "<p>The day time range to layout.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "layoutEvents",
          "access": "internal",
          "description": "<p>Calculate the placements for the given events within the specified time range.</p>",
          "parameters": [
            {
              "name": "cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object containing information about the day cell being created.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Calendar.layout.day.DayLayout#DayLayoutItem>"
          }
        },
        {
          "name": "createLayoutItem",
          "access": "private",
          "description": "<p>Returns the base of a <a href=\"#Calendar/layout/day/DayLayout#typedef-DayLayoutItem\">DayLayoutItem</a> for the passed\nevent record.</p>",
          "parameters": [
            {
              "name": "dayTime",
              "type": "Core.util.DayTime",
              "description": "<p>The owning View's <a href=\"#Core/util/DayTime\">dayTime</a></p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record for which to create a layout item.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>A date from a <a href=\"#Calendar/widget/mixin/DayCellCollecter#typedef-DayCell\">DayCell</a>\nwhich is correctly offset to reflect the current view's dayStartShift setting</p>"
            },
            {
              "name": "dayEnd",
              "type": "Number"
            },
            {
              "name": "tomorrow",
              "type": "Date"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Calendar.layout.day.DayLayout#DayLayoutItem"
          }
        }
      ]
    },
    {
      "name": "FluidDayLayout",
      "modulePath": "Calendar/layout/day/FluidDayLayout",
      "classDescription": "<p>This class positions events for a <code>DayView</code> by maximizing the visible area of each event. When events overlap, this\nclass determines the minimum amount of horizontal indent required for the overlapping events so that as much of\ntheir content as possible is unobstructed.</p>",
      "extends": [
        "Calendar/layout/day/DayLayout"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "FluidDayLayout.js",
      "path": "/Calendar/lib/Calendar/layout/day",
      "configs": [
        {
          "name": "clearanceMinutes",
          "description": "<p>The number of minutes of an event that must be (vertically) cleared by another event before it is\nallowed to be significantly overlapped by it (horizontally).</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code>      >= clearanceMinutes          &lt; clearanceMinutes\n     +--------------+            +----------------+\n     | Event 1      |            | Event 3        |\n     | 9am-11am     |            | 9am-11am +-------------+\n     |  +----------------+       |          | Event 4     |\n     |  | Event 2        |       |          | 9:30am-12pm |\n     |  | 10am-12pm      |       |          |             |\n     |  |                |       |          |             |\n     +--|                |       +----------|             |\n        |                |                  |             |\n        +----------------+                  +-------------+\n</code></pre>\n<p>In the example above, the start time of Event 2 is more than <code>clearanceMinutes</code> after the start time of\nEvent 1, therefore it is displayed with a minimal indent from the left of Event 1. The start time of\nEvent 4, however, is less than <code>clearanceMinutes</code> after Event 3 and so they both share the space evenly.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 45
        },
        {
          "name": "complexityLimit",
          "access": "internal",
          "description": "<p>The maximum number of possible solutions to evaluate when calculating an event's width.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 2000
        },
        {
          "name": "escapeMinutes",
          "access": "internal",
          "description": "<p>The number of minutes of an overlapping event that must be (vertically) cleared by another event before\nit is allowed to be fully overlapped by it (horizontally). THis value is a number of minutes <em>beyond</em>\n<a href=\"#Calendar/layout/day/FluidDayLayout#config-clearanceMinutes\">clearanceMinutes</a>. In other words, if <code>clearanceMinutes</code> is 45 and this config is set to\n75, the start time of an event must be two hours (45+75 = 120 minutes) after the prior event to fully\noverlap it.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code>      >= escapeMinutes                    &lt; escapeMinutes\n     +----------------+                 +----------------+\n     | Event 1        |                 | Event 5        |\n     | 9am-11am +-------------+         | 9am-11am +-------------+\n     |          | Event 2     |         |          | Event 6     |\n     |          | 9:30am-12pm |         |          | 9:30am-12pm |\n     |          |             |         |          |  +-------------+\n     |  + --------------------+         |          |  | Event 7     |\n     +--| Event 3             |         +----------|  | 10:15am     |\n        | 10:30am             |                    |  |             |\n        |                     |                    +--|             |\n        +---------------------+                       +-------------+\n</code></pre>\n<p>In the example above, the start time of Event 3 is more than <code>escapeMinutes</code> after the start time of\nEvent 2, therefore it is allowed to fully overlap the bottom of Event 2. As can be seen above, this does\nnot allow Event 3 to overlap the top-most overlapping event (Event 1). In the case of Event 7, the event\nstarts less than <code>escapeMinutes</code> after Event 6 and so the left edge of Event 6 remains exposed. The\npositioning of Event 7 is determined by <a href=\"#Calendar/layout/day/FluidDayLayout#config-clearanceMinutes\">clearanceMinutes</a>.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "gutter",
          "description": "<p>Set to <code>false</code> to disable the gap on the right-most edge of events. See <a href=\"#Calendar/layout/day/FluidDayLayout#config-gutterWidth\">gutterWidth</a> to\ncontrol the size of the gutter.</p>\n<p>The gutter allows the user to select the times overlapped by events, for example, to create new events.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "gutterWidth",
          "description": "<p>The number of pixels or proportion of the overall width to allocate to the <a href=\"#Calendar/layout/day/FluidDayLayout#config-gutter\">gutter</a>.</p>\n<p>Values less than 1 are the fractional proportion of the width (for example, 0.04 is 4% of the width),\nwhile values greater than or equal to 1 are a number of pixels.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "indentWidth",
          "access": "internal",
          "description": "<p>The number of pixels or proportion of the overall width to indent overlapping events that overlap by at\nleast <a href=\"#Calendar/layout/day/FluidDayLayout#config-clearanceMinutes\">clearanceMinutes</a>. Events that overlap by less than <code>clearanceMinutes</code> will split\nthe available space.</p>\n<p>Values less than 1 are the fractional proportion of the width (for example, 0.04 is 4% of the width),\nwhile values greater than or equal to 1 are a number of pixels.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10
        },
        {
          "name": "staggerMaximum",
          "access": "internal",
          "description": "<p>The maximum amount of width reduction due to overlapping items. If <a href=\"#Calendar/layout/day/FluidDayLayout#config-gutterWidth\">gutterWidth</a> is a\nnumber of pixels, this value must also be in pixels (i.e., &gt;= 1). Otherwise, this value is a proportional\nvalue between 0 and 1.</p>\n<p>Even though this value limits the width reduction from overlapping items, it is possible that this\nvalue exceeds the event width due to its nesting level (the number of prior events this event overlaps).\nIn this case, the <a href=\"#Calendar/layout/day/FluidDayLayout#config-staggerMinimum\">staggerMinimum</a> value will prevent the width from becoming too small.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "staggerMinimum",
          "description": "<p>This is the minimum width to which <code>staggerWidth</code> will size an event. For example, if an event has many\noverlapping events, its width may be reduced a number of steps due to <code>staggerWidth</code>. This value limits\nhow much the event's width will be reduced.</p>\n<p>This value is expressed as a decimal proportion of the width of 1. For example, the value 0.4 is 40% of\nthe actual width. With this setting, the <code>staggerWidth</code> calculation will not reduce an event's width\nbelow 40%.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0.4
        },
        {
          "name": "staggerWidth",
          "description": "<p>When enabled, the width of an event is reduced in steps based on the number of events that overlap it.\nSet this config to <code>false</code> or 0 to disable this effect.</p>\n<p>If this value is a boolean, the <code>gutterWidth</code> is used for the size of the reduction. If this value is a\nnumber, it is the size of the reduction. For example, a value of 0.05 would cause an event to reduce in\nsteps of 5% width based on the number of events that overlap it. A number &gt;= 1 is a number of pixels,\nhowever, this is only valid if <code>gutterWidth</code> is also a number of pixels.</p>\n<p>By default, events are reduced by the <code>gutterWidth</code> based on the number of events that overlap them.</p>",
          "type": [
            "Boolean",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "stretch",
          "description": "<p>Set this to <code>true</code> to use the full day width for events. By default, overlapping events equally split the\nwidth.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "CalendarStores",
      "modulePath": "Calendar/mixin/CalendarStores",
      "description": "<p>Functions for store assignment and store event listeners.</p>",
      "extends": [
        "Scheduler/data/mixin/ProjectConsumer"
      ],
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarStores.js",
      "path": "/Calendar/lib/Calendar/mixin",
      "configs": [
        {
          "name": "defaultCalendar",
          "description": "<p>The calendar (<a href=\"#Scheduler/model/ResourceModel\">Resource</a>), (or its <code>id</code>) to use as the\ndefault calendar for new events created using <a href=\"#Calendar/view/Calendar#config-autoCreate\">dblclick</a>\nor <a href=\"#Calendar/feature/CalendarDrag\">drag-create</a>, or <a href=\"#Calendar/feature/ExternalEventSource\">dragging in</a>.</p>\n<p>May be specified as the <code>id</code> of an existing resource, or a resource record that is present in the project.</p>\n<p>If not specified, the first record in the <a href=\"#Calendar/mixin/CalendarStores#property-resourceStore\">resourceStore</a> will be used.</p>",
          "type": [
            "String",
            "Scheduler.model.ResourceModel"
          ],
          "scope": "inner"
        },
        {
          "name": "crudManagerClass",
          "description": "<p>Class that should be used to instantiate a CrudManager in case it's provided as a simple object to\n<a href=\"#Calendar/mixin/CalendarStores#config-crudManager\">crudManager</a> config.</p>",
          "type": "Scheduler.data.CrudManager",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "crudManager",
          "description": "<p>Supply a <a href=\"#Scheduler/data/CrudManager\">CrudManager</a> instance or a config object if you want to use\nCrudManager for handling data.</p>",
          "type": [
            "Object",
            "Scheduler.data.CrudManager"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "events",
          "description": "<p>Inline events, will be loaded into an internally created EventStore.</p>",
          "type": [
            "Array.<Scheduler.model.EventModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "eventStore",
          "description": "<p>The <a href=\"#Scheduler/data/EventStore\">EventStore</a> holding the events to be rendered into the Calendar (required).</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resources",
          "description": "<p>Inline resources, will be loaded into an internally created ResourceStore.</p>",
          "type": [
            "Array.<Scheduler.model.ResourceModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceStore",
          "description": "<p>The <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a> holding the resources to be rendered into the Calendar (required).</p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "inner",
          "category": "Data"
        }
      ],
      "properties": [
        {
          "name": "crudManager",
          "description": "<p>Get/set the CrudManager instance</p>",
          "type": "Scheduler.data.CrudManager",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "defaultCalendar",
          "description": "<p>The default Calendar to be used when creating new events which do not initially have a resource.</p>\n<p>This includes <a href=\"#Calendar/view/Calendar#config-autoCreate\">dblclick-created</a> events and\n<a href=\"#Calendar/feature/CalendarDrag\">drag-created</a> events and\n<a href=\"#Calendar/feature/ExternalEventSource\">dragged in</a> events.</p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "instance"
        },
        {
          "name": "events",
          "description": "<p>Get/set events, applies to the backing project's EventStore.</p>",
          "type": "Array.<Scheduler.model.EventModel>",
          "accepts": [
            "Scheduler.model.EventModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "eventStore",
          "description": "<p>Get/set the event store instance of the backing project.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resources",
          "description": "<p>Get/set resources, applies to the backing project's ResourceStore.</p>",
          "type": "Array.<Scheduler.model.ResourceModel>",
          "accepts": [
            "Scheduler.model.ResourceModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceStore",
          "description": "<p>Get/set the resource store instance of the backing project</p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "inner",
          "category": "Data"
        }
      ],
      "functions": [
        {
          "name": "removeEvents",
          "access": "internal",
          "description": "<p>Internal utility function to remove events. Used when pressing [DELETE] or [BACKSPACE] or when clicking the\ndelete button in the event editor. Triggers a preventable <code>beforeEventDelete</code> event.</p>",
          "parameters": [
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Records to remove</p>"
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>Optional callback executed after triggering the event but before deletion</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeEventDelete"
          ],
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>false</code> if the operation was prevented, otherwise <code>true</code></p>"
          }
        }
      ],
      "events": [
        {
          "name": "beforeEventDelete",
          "description": "<p>Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the\nevent editor. Can for example be used to display a custom dialog to confirm deletion, in which case\nrecords should be &quot;manually&quot; removed after confirmation:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>calendar.on({\n   beforeEventDelete({ eventRecords, context }) {\n       // Show custom confirmation dialog (pseudo code)\n       confirm.show({\n           listeners : {\n               onOk() {\n                   // Remove the events on confirmation\n                   context.finalize(true);\n               },\n               onCancel() {\n                   // do not remove the events if &quot;Cancel&quot; clicked\n                   context.finalize(false);\n               }\n           }\n       });\n\n       // Prevent default behaviour\n       return false;\n   }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The records about to be deleted</p>"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Additional removal context:</p>"
            },
            {
              "name": "context.finalize",
              "type": "function",
              "description": "<p>Function to call to finalize the removal.\nUsed to asynchronously decide to remove the records or not. Provide <code>false</code> to the function to prevent the removal.</p>",
              "isSubParam": true
            },
            {
              "name": "context.finalize.removeRecords",
              "type": "Boolean",
              "description": "<p>Provide <code>false</code> to the function to prevent the removal.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            }
          ],
          "preventable": true
        }
      ]
    },
    {
      "name": "SchedulerInterface",
      "modulePath": "Calendar/mixin/SchedulerInterface",
      "description": "<p>Exposes an interface similar to a <a href=\"#Scheduler/view/Scheduler\">Scheduler</a> so that Calendar Features which\nextend Scheduler Features can treat their client in a standard manner.</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerInterface.js",
      "path": "/Calendar/lib/Calendar/mixin",
      "functions": [
        {
          "name": "calendarHitTest",
          "description": "<p>Determines what is under the cursor of the specified event or what is described by the given element.</p>",
          "parameters": [
            {
              "name": "domEvent",
              "type": [
                "Event",
                "Element"
              ],
              "description": "<p>The event or element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Calendar.view.Calendar#CalendarHit"
          }
        },
        {
          "name": "resolveEventRecord",
          "description": "<p>Interface method required for navigation/selection.\nReturns the event record for a DOM element.</p>",
          "parameters": [
            {
              "name": "elementOrEvent",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The DOM node to lookup, or a DOM event whose target to lookup.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.EventModel",
            "description": "<p>The event record</p>"
          }
        },
        {
          "name": "resolveAssignmentRecord",
          "access": "private",
          "description": "<p>Interface method required for navigation/selection\nAssignment not supported in Calendar.</p>",
          "scope": "instance"
        },
        {
          "name": "resolveResourceRecord",
          "description": "<p>Interface method required for navigation/selection.\nReturns the resource (calendar) record for a DOM element.</p>",
          "parameters": [
            {
              "name": "elementOrEvent",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The DOM node to lookup, or a DOM event whose target to lookup.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.ResourceModel",
            "description": "<p>Any corresponding event record's resource if any.</p>"
          }
        }
      ]
    },
    {
      "name": "EventSlots",
      "modulePath": "Calendar/util/EventSlots",
      "classDescription": "<p>An encapsulation of an array which allows prefilling of some slots and automatic filling\nof vacant slots.</p>\n<p>Used by the Calendar to fill event slots in day cells in the MonthView</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventSlots.js",
      "path": "/Calendar/lib/Calendar/util"
    },
    {
      "name": "EventSorter",
      "modulePath": "Calendar/util/EventSorter",
      "classDescription": "<p>This class contains methods to sort events into appropriate order within a day for display\nin all contexts.</p>\n<p>Whenever a day's events are rendered, those events are sorted with <a href=\"#Calendar/util/EventSorter#function-defaultSorterFn-static\">defaultSorterFn</a> method.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventSorter.js",
      "path": "/Calendar/lib/Calendar/util",
      "functions": [
        {
          "name": "defaultSorterFn",
          "description": "<p>This sorting method implement following rules:</p>\n<ol start=\"0\">\n<li>Unscheduled events go before scheduled ones</li>\n<li>Compare by floored start date</li>\n<li>If equal, compare by floored duration</li>\n<li>If equal, compare by start date</li>\n<li>If equal, compare by duration</li>\n</ol>",
          "parameters": [
            {
              "name": "event1",
              "type": "Scheduler.model.EventModel"
            },
            {
              "name": "event2",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "interDaySorterFn",
          "access": "internal",
          "description": "<p>This sorting method implement following rules:</p>\n<ol start=\"0\">\n<li>Unscheduled events go before scheduled ones</li>\n<li>An <a href=\"#Scheduler/model/EventModel#property-isInterDay\">isInterDay</a> event sorts before events that are not.</li>\n<li>Compare floored start date, if the events have different values</li>\n<li>Compare floored duration, if the events have different values</li>\n<li>Compare start date, if the events have different values</li>\n<li>Compare duration</li>\n</ol>\n<p>This is used by <a href=\"#Calendar/widget/MonthView\">MonthView</a> and <a href=\"#Calendar/widget/AgendaView\">AgendaView</a> since these views mix\nboth interday and intraday events in the same view but render them differently.</p>",
          "parameters": [
            {
              "name": "event1",
              "type": "Scheduler.model.EventModel"
            },
            {
              "name": "event2",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number"
          }
        }
      ]
    },
    {
      "name": "Calendar",
      "modulePath": "Calendar/view/Calendar",
      "classDescription": "<p>A configurable, aggregated view of a <a href=\"#Scheduler/data/EventStore\">EventStore</a> which may comprise several\nview types to display the events in different ways.</p>\n<p>This is the primary way of creating a calendar UI.</p>\n<h2>Calendar modes</h2>\n<p>A Calendar may be configured with <a href=\"#Calendar/view/Calendar#config-modes\">modes</a> which describe the types of views of the\ncalendar data which should be shown.</p>\n<p>These are:</p>\n<ul>\n<li><code>'agenda'</code></li>\n<li><code>'year'</code></li>\n<li><code>'month'</code></li>\n<li><code>'week'</code></li>\n<li><code>'day'</code></li>\n<li><code>'list'</code></li>\n<li><code>'resource'</code></li>\n</ul>\n<p>All except <code>'list'</code> and <code>'resource'</code> are included by default.</p>\n<p>The modes are instances of the following classes:</p>\n<ul>\n<li><a href=\"#Calendar/widget/AgendaView\">AgendaView</a></li>\n<li><a href=\"#Calendar/widget/YearView\">YearView</a></li>\n<li><a href=\"#Calendar/widget/MonthView\">MonthView</a></li>\n<li><a href=\"#Calendar/widget/WeekView\">WeekView</a></li>\n<li><a href=\"#Calendar/widget/DayView\">DayView</a></li>\n<li><a href=\"#Calendar/widget/EventList\">EventList</a></li>\n<li><a href=\"#Calendar/widget/ResourceView\">ResourceView</a></li>\n</ul>\n<p>Each may be reconfigured from its default configuration by specifying its mode value as an object:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    appendTo : domElement,\n    modes : {\n        month : {\n            // Week number in a separate, clickable column\n            showWeekColumn : true\n        },\n        week : {\n            // Day columns start at 8am. No events shown before this\n            dayStartTime : 8\n        }\n    }\n});\n</code></pre>\n<p>Modes may be omitted from the view by specifying its mode value as <code>null</code>.\nTo specify the initial active mode, <a href=\"#Calendar/view/Calendar#config-mode\">mode</a> config should be used, to manage mode at runtime, <a href=\"#Calendar/view/Calendar#property-mode\">mode</a> property is available.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    appendTo : domElement,\n    mode  : 'week',\n    modes : {\n        agenda : null,\n        year   : null\n    }\n});\n</code></pre>\n<p>Other provided UI elements may be omitted from the view by specifying their configuration values as <code>null</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    appendTo : domElement,\n\n    // Do not show the top toolbar\n    tbar : null,\n\n    // So not show the sidebar\n    sidebar : null\n});\n</code></pre>\n<p>Or, for more granularity:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    appendTo : domElement,\n\n    tbar : {\n        items : {\n            // Do not show the &quot;Today&quot; button in the top toolbar\n            todayButton : null\n        }\n    },\n\n    sidebar : {\n        items : {\n            // Do not show the mini calendar in the sidebar\n            datePicker : null\n        }\n    }\n});\n</code></pre>\n<h2>Toolbar &amp; sidebar</h2>\n<p>A Calendar is basically a <a href=\"#Core/widget/Panel\">Panel</a> which contains nested widgets which implement\nthe complex UI. By default it has three immediate child widgets which may be accessed through the\nfollowing properties:</p>\n<ul>\n<li><a href=\"#Calendar/view/Calendar#property-tbar\">tbar</a> references the top toolbar, which is an instance of <a href=\"#Core/widget/Toolbar\">Toolbar</a>.</li>\n<li><a href=\"#Calendar/view/Calendar#property-sidebar\">sidebar</a> references the sidebar, which is an instance of <a href=\"#Calendar/widget/Sidebar\">Sidebar</a>.</li>\n<li><a href=\"#Calendar/view/Calendar#property-viewContainer\">viewContainer</a> references the subordinate <a href=\"#Core/widget/Container\">Container</a> which manages the modes\nand changes which mode is active through its <a href=\"#Core/widget/Container#property-layout\">layout</a>.</li>\n</ul>\n<h2>Loading data</h2>\n<p>A Calendar loads its data into an <a href=\"#Scheduler/data/EventStore\">EventStore</a>.</p>\n<p>The recommended way to load and sync data is to use a <a href=\"#Scheduler/data/CrudManager\">CrudManager</a> configured with\nthe URL of web services:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    appendTo : domElement,\n    crudManager : {\n        transport : {\n            load : {\n                url : '/data-providing-url'\n            }\n            sync : {\n                url : '/data-update-url'\n            }\n        },\n        autoLoad : true,\n        autoSync : true\n    }\n});\n</code></pre>\n<p>JSON data should use this format:</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n    &quot;success&quot; : true,\n    &quot;resources&quot; : {\n        &quot;rows&quot; : [\n            {\n                &quot;id&quot; : 1,\n                &quot;name&quot; : 'Default Calendar',\n                &quot;eventColor&quot; : 'green'\n            }\n        ]\n    },\n    &quot;events&quot; : {\n        &quot;rows&quot; : [\n            {\n                &quot;id&quot; : 1,\n                &quot;name&quot; : 'Meeting',\n                &quot;startDate&quot; : '2020-10-01T10:00:00',\n                &quot;endDate&quot; : '2020-10-01T11:00:00',\n                &quot;resourceId&quot; : 1\n            }\n        ]\n    }\n}\n</code></pre>\n<p>For more information on loading events and resources, see the <a href=\"#Scheduler/view/Scheduler\">Scheduler</a>\ndocumentation. Calendar uses the same data classes.</p>\n<h2>Listening to events</h2>\n<p>The events emitted by the Calendar are documented <a href=\"#Calendar/view/Calendar#event-eventClick\">here</a>. Note that in\naddition to <code>click</code>, all other mouse events are also covered and all significant UI elements\nare active, and follow the same naming convention.</p>\n<p>So there is a <code>dayNumberClick</code> event and a <code>weekNumberClick</code> event and a\n<code>monthNameClick</code> event and so on.</p>\n<h2>Specifying a default calendar</h2>\n<p>To set the default calendar for your events, please use the <a href=\"#Calendar/view/Calendar#config-defaultCalendar\">defaultCalendar</a> config.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    defaultCalendar : 123 // the id of your default calendar\n});\n</code></pre>",
      "extends": [
        "Core/widget/Panel"
      ],
      "mixes": [
        "Calendar/mixin/CalendarStores",
        "Scheduler/crud/mixin/CrudManagerView",
        "Calendar/view/mixin/EventNavigation",
        "Calendar/view/mixin/EventSelection"
      ],
      "features": [
        "Calendar/feature/CalendarDrag",
        "Calendar/feature/EventEdit",
        "Calendar/feature/EventMenu",
        "Calendar/feature/EventTooltip",
        "Calendar/feature/ExternalEventSource",
        "Calendar/feature/LoadOnDemand",
        "Calendar/feature/ScheduleMenu",
        "Calendar/feature/WeekExpander",
        "Calendar/feature/print/Print"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Calendar.js",
      "path": "/Calendar/lib/Calendar/view",
      "classType": "calendar",
      "externalExamples": [
        "Calendar/view/Calendar.js"
      ],
      "typedefs": [
        {
          "name": "CalendarHit",
          "properties": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>The type of the target: <code>'event'</code>, <code>'dayNumber'</code>, <code>'weekNumber'</code>, <code>'cellOverflow'</code>, or\n<code>'schedule'</code>.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date of the target.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The target event record.</p>"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "eventSelectionChange",
          "hide": true
        },
        {
          "name": "eventPropagate",
          "description": "<p>Fires when a day spanning event is found, and the date to which its encapsulating event bar\nextends has been calculated.</p>\n<p>The default result in the event's <code>propagateEndDate</code> property may be mutated by a listener.</p>\n<p>Note that this is an ending point in time, it does <em>not</em> refer to a 24 hour block. So setting\nthe <code>propagateEndDate</code> to <code>new Date(2022, 1, 10)</code> means that the event bar will occupy cells\nup to and including February 9 2022 and no further.</p>\n<p>This is relayed from all modes, so a single listener may be used, for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    listeners : {\n        eventPropagate(eventData) {\n            // If the event spills into the next day but not further\n            // then we do not want an extended event bar.\n            // An arrow will indicate that it continues rightwards.\n            if (eventData.eventEndDate &lt; DateHelper.add(eventData.date, 2, 'd')) {\n                eventData.propagateEndDate = DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n            }\n        }\n    }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "eventEndDate",
              "type": "Date",
              "description": "<p>The end date for which to calculate the propagate end date.</p>"
            },
            {
              "name": "propagateEndDate",
              "type": "Date",
              "description": "<p>The system-calculated end point of the event bar.</p>"
            },
            {
              "name": "isAllDay",
              "type": "Boolean",
              "description": "<p><code>true</code> if the event is an all day event, or spans multiple days.</p>"
            },
            {
              "name": "isOverflow",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is being called as part of further propagation.</p>"
            },
            {
              "name": "overflows",
              "type": "Boolean",
              "description": "<p><code>true</code> if the event extends into future cells.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record being propagated.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date from which the event is being propagated.</p>"
            }
          ]
        },
        {
          "name": "eventMouseOver",
          "description": "<p>Fires when an event bar is mouseovered in any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event mouseovered.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "eventMouseDown",
          "description": "<p>Fires when an event bar is mousedowned in any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event mousedowned on.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "eventMouseUp",
          "description": "<p>Fires when an event bar is mouseupped in any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event mouseupped.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "eventClick",
          "description": "<p>Fires when an event bar is clicked in any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event clicked on.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "eventDblClick",
          "description": "<p>Fires when an event bar is double clicked in any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event double clicked on.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "eventMouseOut",
          "description": "<p>Fires when an event bar is mouseouted in any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event mouseouted.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "eventContextMenu",
          "description": "<p>Fires when an event bar is right clicked in any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event right clicked on.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "dayNumberClick",
          "description": "<p>Fires when a day number is clicked in a view which shows day numbers. This will include\nthe cells of a <a href=\"#Calendar/widget/YearView\">YearView</a>, the cell header of cells\nin a <a href=\"#Calendar/widget/MonthView\">MonthView</a>, and the day header in a\n<a href=\"#Calendar/widget/DayView\">DayView</a>.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date clicked on.</p>"
            },
            {
              "name": "fromOverflowPopup",
              "type": "Boolean",
              "description": "<p><code>true</code> if the interaction was through the source view's\n<a href=\"#Calendar/widget/mixin/DayCellRenderer#property-overflowPopup\">overflowPopup</a>.</p>"
            }
          ]
        },
        {
          "name": "weekNumberClick",
          "description": "<p>Fires when a week number is clicked. This will include the week number cells of a\n<a href=\"#Calendar/widget/YearView\">YearView</a>, the week number in the first cell\nin each row of a <a href=\"#Calendar/widget/MonthView\">MonthView</a></p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "week",
              "type": "Array.<Number>",
              "description": "<p>The <code>[year, week]</code> clicked on.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date clicked on.</p>"
            }
          ]
        },
        {
          "name": "monthNameClick",
          "description": "<p>Fires when a month name header in a <a href=\"#Calendar/widget/YearView\">YearView</a> is clicked on.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "month",
              "type": "Number",
              "description": "<p>The month index <em>(zero based)</em> clicked on.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date of the first of the month clicked on.</p>"
            }
          ]
        },
        {
          "name": "cellOverflowClick",
          "description": "<p>Fires when a cell overflow indicator is clicked in any view. This will include\nthe cells of a <a href=\"#Calendar/widget/YearView\">YearView</a> and the <code>+ n more</code> overflow\nindicator of cells in a <a href=\"#Calendar/widget/MonthView\">MonthView</a>, and &quot;all day&quot; events section\nof a <a href=\"#Calendar/widget/DayView\">DayView</a>.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date clicked on.</p>"
            }
          ]
        },
        {
          "name": "scheduleMouseOver",
          "description": "<p>Fires when a mouseover made its way through to an empty part of any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date mouseovered. _Note that in a <a href=\"#Calendar/widget/DayView\">DayView</a>,\nthis will include granular time information. For other views, this is the <em>start</em> of the date.</p>"
            }
          ]
        },
        {
          "name": "scheduleMouseDown",
          "description": "<p>Fires when a mousedown made its way through to an empty part of any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date mousedowned on. _Note that in a <a href=\"#Calendar/widget/DayView\">DayView</a>,\nthis will include granular time information. For other views, this is the <em>start</em> of the date.</p>"
            }
          ]
        },
        {
          "name": "scheduleMouseUp",
          "description": "<p>Fires when a mouseup made its way through to an empty part of any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date mouseupped on. _Note that in a <a href=\"#Calendar/widget/DayView\">DayView</a>,\nthis will include granular time information. For other views, this is the <em>start</em> of the date.</p>"
            }
          ]
        },
        {
          "name": "scheduleClick",
          "description": "<p>Fires when a click made its way through to an empty part of any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date clicked on. _Note that in a <a href=\"#Calendar/widget/DayView\">DayView</a>,\nthis will include granular time information. For other views, this is the <em>start</em> of the date.</p>"
            }
          ]
        },
        {
          "name": "scheduleDblClick",
          "description": "<p>Fires when a dblclick made its way through to an empty part of any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date double clicked on. _Note that in a <a href=\"#Calendar/widget/DayView\">DayView</a>,\nthis will include granular time information. For other views, this is the <em>start</em> of the date.</p>"
            }
          ]
        },
        {
          "name": "scheduleMouseOut",
          "description": "<p>Fires when a mouseout made its way through to an empty part of any view.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which triggered the event.</p>"
            },
            {
              "name": "domEvent",
              "type": "Event",
              "description": "<p>The initiating DOM event.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date mouseouted. _Note that in a <a href=\"#Calendar/widget/DayView\">DayView</a>,\nthis will include granular time information. For other views, this is the <em>start</em> of the date.</p>"
            }
          ]
        },
        {
          "name": "refresh",
          "description": "<p>Fires when one of the views in this Calendar refreshes.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The view which refreshed.</p>"
            }
          ]
        },
        {
          "name": "eventAutoCreated",
          "description": "<p>Fired when an <a href=\"#Calendar/widget/mixin/CalendarMixin#config-autoCreate\">autoCreate</a> gesture has\ncreated a new event and added it to the event store.</p>\n<p>If the <a href=\"#Calendar/feature/EventEdit\">EventEdit</a> feature is present, it listens for\nthis event and initiates an edit operation. Adding a high <code>prio</code> listener which\nreturns <code>false</code> can prevent this event from reaching the <code>eventEdit</code> processing.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The child view on which the event was initiated.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new event record.</p>"
            }
          ]
        },
        {
          "name": "beforeActiveItemChange",
          "description": "<p>Fired before a change of view is initiated.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>This Calendar instance.</p>"
            },
            {
              "name": "prevActiveItem",
              "type": "Core.widget.Widget",
              "description": "<p>The previously active view.</p>"
            },
            {
              "name": "activeItem",
              "type": "Core.widget.Widget",
              "description": "<p>The new active view.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "activeItemChange",
          "description": "<p>Fired when a change of view has completed. By default, view changes are animated and this\nevent fires when the view is fully visible.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>This Calendar instance.</p>"
            },
            {
              "name": "prevActiveItem",
              "type": "Core.widget.Widget",
              "description": "<p>The previously active view.</p>"
            },
            {
              "name": "activeItem",
              "type": "Core.widget.Widget",
              "description": "<p>The new active view.</p>"
            }
          ]
        },
        {
          "name": "dateChange",
          "description": "<p>Fires when the calendar changes the date that it orientates its views around.</p>\n<p>The Calendar tracks which date the user interacts with so that on mode change,\nthe user is shown the view for the date being interacted with.</p>\n<p>This is updated on any interaction with the UI. Clicking in the\n<a href=\"#Calendar/view/Calendar#property-sidebar\">sidebar</a>'s date picker, clicking on an event, or clicking on a\nday cell in any view updates the date which the Calendar is using as its orientating date.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>This Calendar.</p>"
            },
            {
              "name": "oldDate",
              "type": "Date",
              "description": "<p>The previous Calendar date.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The new Calendar date.</p>"
            }
          ]
        },
        {
          "name": "dateRangeChange",
          "description": "<p>Fired when the range of dates required to produce the UI changes. This will be when\nmoving to a different view, or moving a view in time.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>This Calendar instance.</p>"
            },
            {
              "name": "old",
              "type": "Object",
              "description": "<p>The old date range</p>"
            },
            {
              "name": "old.startDate",
              "type": "Date",
              "description": "<p>the old start date.</p>",
              "isSubParam": true
            },
            {
              "name": "old.endDate",
              "type": "Date",
              "description": "<p>the old end date.</p>",
              "isSubParam": true
            },
            {
              "name": "new",
              "type": "Object",
              "description": "<p>The new date range</p>"
            },
            {
              "name": "new.startDate",
              "type": "Date",
              "description": "<p>the new start date.</p>",
              "isSubParam": true
            },
            {
              "name": "new.endDate",
              "type": "Date",
              "description": "<p>the new end date.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "viewPaint",
          "description": "<p>Fires when one of the child views is painted. That is when it becomes visible.\nNote that due to the slide-in animation, while the view is visible, it will not\nyet be in its final position.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget being painted.</p>"
            },
            {
              "name": "firstPaint",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is the first paint.</p>"
            }
          ]
        }
      ],
      "hideConfigs": [
        "htmlCls",
        "autoUpdateRecord",
        "record",
        "textContent",
        "content",
        "html"
      ],
      "hideProperties": [
        "content",
        "html"
      ],
      "configs": [
        {
          "name": "tbar",
          "description": "<p>A config object containing definitions of the toolbar of the Calendar.</p>\n<p>Its <code>items</code> property defines the buttons and informational widgets\nprovided by default.</p>\n<p>There are several provided widgets, each of which may be reconfigured using\nan object, or disabled by configuring them as <code>null</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>tbar : {\n    items : {\n        prevButton    : null,\n        toggleSidebar : null\n    }\n}\n</code></pre>\n<p>Provided widgets include:</p>\n<ul>\n<li><code>toggleSidebar</code> A button to collapse and expand the <a href=\"#Calendar/view/Calendar#config-sidebar\">sidebar</a></li>\n<li><code>todayButton</code> A button which moves the active view to include today's date.</li>\n<li><code>prevButton</code> A button which moves the active view to its previous time span.</li>\n<li><code>nextButton</code> A button which moves the active view to its next time span.</li>\n<li><code>viewDescription</code> A widget which is used to display the <code>description</code> property of the active view.</li>\n<li><code>spacer</code> A spacer widget which pushes following items to be aligned to the right.</li>\n<li><code>modeSelector</code> A ButtonGroup which contains buttons for selecting which view is active.\n(This is hidden if only one <code>mode</code> is enabled in the Calendar)</li>\n</ul>\n<p>These have <code>weight</code> values 100 to 800. New items can be inserted at any position by\nconfiguring them with an appropriate <code>weight</code>.</p>\n<p>Configure this as <code>null</code> to remove the toolbar entirely.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "items",
          "description": "<p>The child items of the Calendar view.</p>\n<p>The Calendar contains two child items:</p>\n<ul>\n<li><code>sidebar</code> The sidebar which by default contains a clickable date picker to show and/or select\nthe active date, and a Calendar filter UI to filter events belonging to the calendars\ndefined in the <a href=\"#Calendar/mixin/CalendarStores#config-resourceStore\">resourceStore</a>.</li>\n<li><code>viewContainer</code> A <a href=\"#Core/widget/layout/Card\">card layout</a>\n<a href=\"#Core/widget/Container\">container</a> which contains the enabled <a href=\"#Calendar/view/Calendar#config-modes\">modes</a>.</li>\n</ul>\n<p>These items may be reconfigured by specifying them as an object, for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    appendTo : document.body,\n\n    crudManager : {\n        transport : {\n            load : {\n                url : '/data-providing-url'\n            }\n            sync : {\n                url : '/data-update-url'\n            }\n        },\n        autoLoad : true,\n        autoSync : true\n    },\n\n    // Reconfigure our viewContainer to change which &quot;mode&quot; is active upon startup\n    items : {\n        viewContainer : {\n            // Start looking at the week - its the fourth &quot;mode&quot; by default.\n            layout : {\n                activeIndex : 3\n            }\n        }\n    }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "modes",
          "description": "<p>Configures the possible view modes.</p>\n<p>Each entry may be a config object to configure the specified view type, or\n<code>null</code> to omit a view type.</p>\n<p>Non-standard types, outside of the five types below may be specified, but those\nobjects must contain a <code>type</code> property which defines the widget type to create\nand they must yield a <code>title</code> property for the view's activation button and a\n<code>description</code> property to be used in the Calendar view's toolbar.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>modes : {\n    agenda : {\n        title : 'Conference events'\n    },\n    // Disable year view completely\n    year : null,\n    // We want to see the events as a list\n    list : {\n        range : 'month'\n    }\n}\n</code></pre>\n<p>Note that the default order of the modes can be changed by configuring the modes\nwith a <code>weight</code> value which causes them to be sorted into ascending weight order.</p>",
          "type": "Object",
          "scope": "inner",
          "properties": [
            {
              "name": "modes.agenda",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>Settings specific to <code>agenda</code> mode. Specify <code>null</code> to disable this mode.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "modes.year",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>Settings specific to <code>year</code> mode. Specify <code>null</code> to disable this mode.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "modes.month",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>Settings specific to <code>month</code> mode. Specify <code>null</code> to disable this mode.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "modes.week",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>Settings specific to <code>week</code> mode. Specify <code>null</code> to disable this mode.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "modes.day",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>Settings specific to <code>day</code> mode. Specify <code>null</code> to disable this mode.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "modes.list",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>Settings specific to <code>list</code> mode. This mode is disabled by default.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "mode",
          "description": "<p>Which of the built-in <a href=\"#Calendar/view/Calendar#config-modes\">modes</a> should be the initially active view.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "week"
        },
        {
          "name": "modeDefaults",
          "description": "<p>An object to use to configure common properties for all <a href=\"#Calendar/view/Calendar#config-modes\">modes</a> prior to their construction.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "sidebar",
          "description": "<p>An optional config object to configure the <a href=\"#Calendar/widget/Sidebar\">Sidebar</a> which is\nshown next to the calendar views specified by the <a href=\"#Calendar/view/Calendar#config-modes\">modes</a>.</p>\n<p>To disable the sidebar, configure it as <code>null</code>.</p>\n<p>To reconfigure it, specify this config value as an object. The following parameters include\nseveral commonly reconfigured properties.</p>",
          "type": [
            "Object",
            "Boolean"
          ],
          "scope": "inner",
          "parameters": [
            {
              "name": "side",
              "type": "String",
              "description": "<p>Which <a href=\"#Calendar/widget/Sidebar#config-side\">side</a> to dock to.</p>"
            },
            {
              "name": "collapsed",
              "type": "Boolean",
              "description": "<p>May be initially <a href=\"#Calendar/widget/Sidebar#config-collapsed\">collapsed</a>.</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Reconfigure or add to the sidebar UI.</p>"
            },
            {
              "name": "items.datePicker",
              "type": "Object",
              "description": "<p>The <a href=\"#Core/widget/DatePicker\">DatePicker</a> may be reconfigured using an object, or\nconfigured away using <code>null</code>. Its default <a href=\"#Core/widget/Widget#config-weight\">weight</a> is 100.</p>",
              "isSubParam": true
            },
            {
              "name": "items.eventFilter",
              "type": "Object",
              "description": "<p>The eventFilter is a <a href=\"#Core/widget/TextField\">TextField</a> which may be used\nto filter the events by matched name. It may be reconfigured using an object, or configured away using <code>null</code>.\nIts default <a href=\"#Core/widget/Widget#config-weight\">weight</a> is 150.</p>",
              "isSubParam": true
            },
            {
              "name": "items.resourceFilter",
              "type": "Object",
              "description": "<p>The <a href=\"#Scheduler/widget/ResourceFilter\">ResourceFilter</a> may be reconfigured using\nan object, or configured away using <code>null</code>. Its default <a href=\"#Core/widget/Widget#config-weight\">weight</a> is 200.</p>",
              "isSubParam": true
            },
            {
              "name": "items.resourceFilter.scrollable",
              "type": "Object",
              "description": "<p>By default it scrolls in the Y axis.</p>",
              "isSubParam": true
            },
            {
              "name": "items.resourceFilter.flex",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>By default it uses flex <code>1 1 auto</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "items.resourceFilter.masterFilter",
              "type": "function",
              "description": "<p>The filter function to apply when loading resources\nfrom the project's <code>resourceStore</code>. Defaults to only including resources which are filtered into the Project's\n<code>resourceStore</code>. Configure this as <code>() =&gt; true</code> to always include all resources.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "datePicker",
          "description": "<p>An optional config object to configure the <a href=\"#Scheduler/widget/SchedulerDatePicker\">SchedulerDatePicker</a> which is\nshown in the <a href=\"#Calendar/view/Calendar#property-sidebar\">sidebar</a> next to the calendar views.</p>\n<p>To disable the datePicker, configure it as <code>null</code>.</p>\n<p>To reconfigure it, specify this config value as an object.</p>\n<p>Note that when <code>events</code> are included in the <code>datePicker</code>, the cells are slightly larger,\ntherefore the <code>datePicker</code> takes up more space and so will make the\n<a href=\"#Calendar/view/Calendar#property-sidebar\">sidebar</a> a little wider than normal.</p>",
          "type": [
            "Object",
            "Boolean"
          ],
          "scope": "inner",
          "parameters": [
            {
              "name": "datePicker.events",
              "type": [
                "String",
                "Boolean"
              ],
              "description": "<p>Displays the presence of events in each cell.\nvalues may be</p>\n<ul>\n<li><code>true</code> - Show a themeable bullet to indicate the presence of events for a date.</li>\n<li><code>'count'</code> - Show a themeable badge containing the event count for a date.</li>\n</ul>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "datePicker.collapsible",
              "type": "Boolean",
              "description": "<p><code>true</code> to enable collapse into a header.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "datePicker.title",
              "type": "String",
              "description": "<p>The text to place in a header above the picker.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "overlaySidebar",
          "description": "<p>By default the <a href=\"#Calendar/view/Calendar#property-sidebar\">sidebar</a> expands and collapses taking width from the\ncalendar UI. Configure <code>overlaySidebar</code> as <code>true</code> to have it start collapsed, and then\n<strong>overlay</strong> the calendar UI when the expand/collapse button is toggled.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "date",
          "description": "<p>The date which the Calendar, its <a href=\"#Calendar/view/Calendar#property-sidebar\">sidebar</a>'s date picker, and\nits active view should encapsulate upon creation. Defaults to current date.</p>",
          "type": "Date",
          "scope": "inner",
          "defaultValue": "{\"$config\":\"\",\"value\":\"\"}"
        },
        {
          "name": "dateFormat",
          "description": "<p>A <a href=\"#Core/helper/DateHelper\">DateHelper</a> format string to use to create date output for\nview descriptions.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "readOnly",
          "description": "<p>Configure as <code>true</code> to make the calendar read-only, by disabling any UIs for modifying data.</p>\n<p><strong>Note that checks MUST always also be applied at the server side.</strong></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "allowOverlap",
          "description": "<p>Set to false if you don't want to allow events overlapping times for any one resource (defaults to true).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "highlightDate",
          "description": "<p>Configure this as <code>true</code> to make picking a date in the <a href=\"#Calendar/view/Calendar#config-sidebar\">sidebar</a>'s\ndate picker highlight the date cell in the active view.</p>\n<p>May also be specified as a function which will be passed the date cell element to enable\nperforming customized highlighting.</p>",
          "type": [
            "Boolean",
            "function"
          ],
          "scope": "inner"
        },
        {
          "name": "autoCreate",
          "description": "<p>If this config is set, then the <code>gesture</code> configured (which defaults to <code>dblclick</code>) creates a\nnew event at the event's time point.</p>\n<p>The exact time is rounded to the closest specified <code>step</code> value.</p>\n<p>The duration of the created event is the specified <code>duration</code> value.</p>\n<p>If this is specified as a string, the string becomes the <code>gesture</code>, and the other properties\nare the default values listed below.</p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "{\"gesture\":\"dblclick\",\"newName\":\"L{Object.newEvent}\",\"step\":\"15 minutes\",\"duration\":\"1 hour\",\"startHour\":8}",
          "properties": [
            {
              "name": "autoCreate.gesture",
              "type": "String",
              "description": "<p>The event name which should trigger event creation at the event's position.</p>",
              "default": "'dblclick'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.newName",
              "type": "String",
              "description": "<p>The name of an event created using <code>autoCreate</code> or a function to call which yields the name.</p>",
              "default": "'New Event'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.step",
              "type": "String",
              "description": "<p>The time unit by which to round the start click point of auto created events.\n<em>Only for views which have a granularity of less than one day such as <code>WeekView</code> and `DayView'</em>.</p>\n<p>For views which show whole days, the start defaults to 8am.</p>\n<p>This is a string in the format required by <a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a>.</p>",
              "default": "'15 minutes'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.duration",
              "type": "String",
              "description": "<p>The default duration for auto created events.</p>",
              "default": "'1 hour'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.startHour",
              "type": "Number",
              "description": "<p>The default start hour for auto created events\nin views where the time granularity is one day. In a DayView or WeekView where a mouse event position\nwill translate to a time of day, this is not used.</p>\n<p>This is the hour of the day to start the event at. It may be fractional.</p>\n<p>This is a string in the format required by <a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a>.</p>",
              "default": 8,
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "weekStartDay",
          "description": "<p>The week start day to be used throughout this Calendar, 0 meaning Sunday, 6 meaning Saturday.</p>\n<p>This propagates into all owned <a href=\"#Calendar/view/Calendar#config-modes\">modes</a>.</p>\n<p>Defaults to <a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>. When the default value is used, changing locale\nwill dynamically change the week start day for the calendar and all <a href=\"#Calendar/view/Calendar#config-modes\">modes</a>.</p>\n<p><strong>If</strong> this is configured in from the start, then locale values for the week start day\nwill <strong>not</strong> apply.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    // Apply to this Calendar only\n    weekStartDay : 1 // Week starts on Monday\n    //....\n});\n</code></pre>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "nonWorkingDays",
          "description": "<p>Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is <code>true</code>.</p>\n<p>This propagates into all owned <a href=\"#Calendar/view/Calendar#config-modes\">modes</a>.</p>\n<p>Defaults to <a href=\"#Core/helper/DateHelper#property-nonWorkingDays-static\">nonWorkingDays</a>. When the default value is used, changing locale\nwill dynamically change the week start day for the calendar and all <a href=\"#Calendar/view/Calendar#config-modes\">modes</a>.</p>\n<p><strong>If</strong> this is configured in from the start, then locale values for the week start day\nwill <strong>not</strong> apply.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    // Apply to this Calendar only\n    nonWorkingDays : {\n        0 : true // Only Sunday is non-working day\n    },\n    //....\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "contextMenuTriggerEvent",
          "description": "<p>Event which is used to show context menus via the context menu features\n<a href=\"#Calendar/feature/EventMenu\">EventMenu</a> and <a href=\"#Calendar/feature/ScheduleMenu\">ScheduleMenu</a>.\nAvailable options are: 'contextmenu', 'click', 'dblclick'.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "contextmenu",
          "category": "Misc"
        },
        {
          "name": "enableUndoRedoKeys",
          "description": "<p>Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is pressed).\nOnly applicable when using a <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "resourceImagePath",
          "description": "<p>Path to load resource images from. Used by the resource headers in ResourceView and by\n<a href=\"#Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars\">showResourceAvatars</a> in event-displaying\nmodes.</p>\n<p>This is used to show resource avatars using the resource's\n<a href=\"#Scheduler/model/ResourceModel#field-image\">image</a> or\n<a href=\"#Scheduler/model/ResourceModel#field-imageUrl\">imageUrl</a> fields:</p>\n<ul>\n<li><code>image</code> represents image name inside the specified <code>resourceImagePath</code>,</li>\n<li><code>imageUrl</code> represents fully qualified image URL.</li>\n</ul>\n<p>If an image is not specified for a resource, or the image is not found, the resource's\ninitials will be displayed.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "smallUIWidth",
          "access": "private",
          "description": "<p>A temporary responsive breakpoint. The width below which the <a href=\"#Calendar/view/Calendar#config-sidebar\">sidebar</a>\nwill be placed into <a href=\"#Calendar/view/Calendar#config-overlaySidebar\">overlaySidebar</a> mode.</p>\n<p>This will be replaced by configurable responsiveness in a future version.</p>",
          "scope": "inner",
          "defaultValue": "700"
        },
        {
          "name": "minDate",
          "description": "<p>The minimum date to which the <code>startDate</code> of any child view may be navigated.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "maxDate",
          "description": "<p>The maximum date to which the <code>endDate</code> of any child view may be navigated.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "modes",
          "description": "<p>The <a href=\"#Calendar/view/Calendar#config-modes\">modes</a> as widget instances.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "modeDefaults",
          "description": "<p>The default settings applied to all child views.</p>\n<p>This is a dynamic object, and mutations of it will reapply the new value to all\nchild views.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "sidebar",
          "description": "<p>The <a href=\"#Calendar/view/Calendar#config-sidebar\">sidebar</a> as an instance of <a href=\"#Calendar/widget/Sidebar\">Sidebar</a>.</p>",
          "type": "Core.widget.Container",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "date",
          "description": "<p>The date which this Calendar encapsulates as its active date.</p>\n<p>This is usually selected by clicking in the <a href=\"#Calendar/view/Calendar#property-sidebar\">sidebar</a>'s date picker\nor by navigating the view forwards or backwards in time.</p>\n<p>This is also changed by clicking in day cells of the active view.</p>\n<p>This may be set programatically which will cause the currently active view to navigate to\nencapsulate that date.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "readOnly",
          "description": "<p>Get/set the calendar's read-only state. When set to <code>true</code>, any UIs for modifying data are disabled.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "minDate",
          "description": "<p>The minimum date to which the <code>startDate</code> of any child view may be navigated.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "maxDate",
          "description": "<p>The maximum date to which the <code>endDate</code> of any child view may be navigated.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "views",
          "description": "<p>The <a href=\"#Calendar/view/Calendar#property-modes\">modes</a> as an Array.</p>",
          "type": "Array.<Core.widget.Widget>",
          "scope": "instance"
        },
        {
          "name": "activeView",
          "description": "<p>Returns the currently active mode as a <a href=\"#Core/widget/Widget\">Widget</a> instance.</p>\n<p>Similar to the <a href=\"#Calendar/view/Calendar#property-mode\">mode</a> property which is the active mode's name as a string.</p>",
          "type": "Core.widget.Widget",
          "scope": "instance"
        },
        {
          "name": "mode",
          "description": "<p>Sets and gets which of the configured <a href=\"#Calendar/view/Calendar#property-modes\">modes</a> is the current active view.</p>\n<p>When read, this yields the string name of the currently active mode.</p>\n<p>When setting, this accepts either the name, or the actual widget instance:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>calendar.mode = 'week';\n</code></pre>\n<p>or</p>\n<pre class=\"prettyprint source lang-javascript\"><code>calendar.mode = calendar.modes.agenda;\n</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "datePicker",
          "description": "<p>The <a href=\"#Calendar/view/Calendar#config-datePicker\">datePicker</a> as an instance of <a href=\"#Scheduler/widget/SchedulerDatePicker\">SchedulerDatePicker</a>.</p>",
          "type": "Scheduler.widget.SchedulerDatePicker",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "viewContainer",
          "description": "<p>A <a href=\"#Core/widget/Container\">Container</a> which contains the configured <a href=\"#Calendar/view/Calendar#config-modes\">modes</a> and\nmanages the currently active mode through its <a href=\"#Core/widget/Container#property-layout\">layout</a>.</p>",
          "type": "Core.widget.Container",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "eventSource",
          "description": "<p>When a child calendar view is being interacted with, this property\nyields a reference to the child being interacted with.</p>",
          "type": "Calendar.widget.mixin.CalendarMixin",
          "scope": "inner",
          "readonly": true,
          "typings": {
            "returns": "typeof CalendarMixin"
          }
        }
      ],
      "functions": [
        {
          "name": "refresh",
          "description": "<p>Schedules a refresh of the UI for the next animation frame. This is a useful method to call when\nmaking multiple data changes, so that each change merely <em>schedules</em> a refresh for the next AF and\nDOM churn is kept to a minimum.</p>",
          "scope": "instance"
        },
        {
          "name": "getEventRecord",
          "description": "<p>Returns the event record for a DOM element or DOM event.</p>",
          "parameters": [
            {
              "name": "elementOrEvent",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The DOM node to lookup, or a DOM event whose target to lookup.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.EventModel",
            "description": "<p>The event record</p>"
          }
        },
        {
          "name": "resolveEventRecord",
          "description": "<p>Returns the event record for a DOM element or DOM event.</p>",
          "parameters": [
            {
              "name": "elementOrEvent",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The DOM node to lookup, or a DOM event whose target to lookup.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.EventModel",
            "description": "<p>The event record</p>"
          }
        },
        {
          "name": "shiftToNow",
          "description": "<p>Navigates Calendar's <a href=\"#Calendar/view/Calendar#property-activeView\">active view</a> to the current local date</p>",
          "scope": "instance"
        },
        {
          "name": "shiftPrevious",
          "description": "<p>Navigates back in time in a step unit specific to the Calendar's <a href=\"#Calendar/view/Calendar#property-activeView\">active view</a></p>",
          "scope": "instance"
        },
        {
          "name": "shiftNext",
          "description": "<p>Navigates forward in time in a step unit specific to the Calendar's <a href=\"#Calendar/view/Calendar#property-activeView\">active view</a></p>",
          "scope": "instance"
        },
        {
          "name": "eachView",
          "description": "<p>Executes the passed function for each child calendar view in <a href=\"#Calendar/view/Calendar#config-modes\">modes</a></p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "args",
              "type": "Array.<Object>",
              "description": "<p>The arguments to pass. Defaults to the view being called.</p>",
              "optional": true
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for the function. Defaults to the view being called.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "createEvent",
          "description": "<p>Uses the current active mode to create an event on the specified date which conforms to that mode's\n<a href=\"#Calendar/widget/mixin/CalendarMixin#config-autoCreate\">autoCreate</a> setting.</p>\n<p>This method may be called programmatically by application code if the <code>autoCreate</code> setting\nis <code>false</code>, in which case the default values for <code>autoCreate</code> will be used.</p>\n<p>If the <a href=\"#Calendar/feature/EventEdit\">EventEdit</a> feature is active, the new event\nwill be displayed in the event editor.</p>\n<p>This is a utility method to use as a shortcut to <a href=\"#Calendar/widget/mixin/CalendarMixin#function-createEvent\">createEvent</a></p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Optionally, the date to add the event at. Uses the Calendar's currently\nactive date, as set in the <a href=\"#Calendar/view/Calendar#config-sidebar\">sidebar</a>'s date picker.</p>\n<p>If there's no time component, and the current active mode is a calendar view, the\n<a href=\"#Calendar/widget/mixin/CalendarMixin#config-autoCreate\">autoCreate</a>'s <code>startHour</code> will be used.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "EventNavigation",
      "modulePath": "Calendar/view/mixin/EventNavigation",
      "description": "<p>Mixin that tracks event selection by clicking on one or more events in the calendar.</p>",
      "extends": [
        "Scheduler/view/mixin/EventNavigation"
      ],
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventNavigation.js",
      "path": "/Calendar/lib/Calendar/view/mixin",
      "typings": {
        "Scheduler/view/mixin/EventNavigation": "Scheduler/view/mixin/SchedulerEventNavigation"
      },
      "functions": [
        {
          "name": "beforeAssignmentDelete",
          "scope": "inner",
          "hide": true
        }
      ],
      "configs": [
        {
          "name": "navigator",
          "access": "internal",
          "description": "<p>A config object to use when creating the <a href=\"#Core/helper/util/Navigator\">Navigator</a>\nto use to perform keyboard navigation in the timeline.</p>",
          "type": "Object",
          "scope": "inner",
          "defaultValue": "{\"allowCtrlKey\":true,\"scrollSilently\":true,\"datasetIdProperty\":\"eventId\",\"keys\":\"\"}",
          "category": "Misc"
        }
      ],
      "properties": [
        {
          "name": "activeEvent",
          "description": "<p>The currently focused event record.</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "EventSelection",
      "modulePath": "Calendar/view/mixin/EventSelection",
      "description": "<p>Mixin that tracks event selection by clicking on one or more events in the calendar.</p>",
      "extends": [
        "Scheduler/view/mixin/EventSelection"
      ],
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventSelection.js",
      "path": "/Calendar/lib/Calendar/view/mixin",
      "typings": {
        "Scheduler/view/mixin/EventSelection": "Scheduler/view/mixin/SchedulerEventSelection"
      },
      "events": [
        {
          "name": "eventSelectionChange",
          "hide": true
        },
        {
          "name": "assignmentSelectionChange",
          "hide": true
        },
        {
          "name": "selectionChange",
          "description": "<p>Fired any time there is a change to the events selected in the Calendar.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.view.Calendar",
              "description": "<p>The Calendar instance.</p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>One of the actions 'select', 'deselect', 'update', 'clear'</p>"
            },
            {
              "name": "selected",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>An array of the Events added to the selection.</p>"
            },
            {
              "name": "deselected",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>An array of the Event removed from the selection.</p>"
            },
            {
              "name": "selection",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The new selection.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "selectedAssignments",
          "type": "Array.<Scheduler.model.AssignmentModel>",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "selectedEvents",
          "description": "<p>The <a href=\"#Scheduler/model/EventModel\">events</a> which are selected.</p>",
          "type": "Array.<Scheduler.model.EventModel>",
          "scope": "instance",
          "category": "Selection"
        }
      ],
      "configs": [
        {
          "name": "eventAssignHighlightCls",
          "type": "String",
          "scope": "inner",
          "hide": true
        }
      ],
      "functions": [
        {
          "name": "deselectAssignment",
          "parameters": [
            {
              "name": "assignment",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment to deselect</p>"
            }
          ],
          "scope": "inner",
          "hide": true
        },
        {
          "name": "deselectAssignments",
          "parameters": [
            {
              "name": "assignments",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignments  to be deselected</p>"
            }
          ],
          "scope": "inner",
          "hide": true
        },
        {
          "name": "isAssignmentSelected",
          "parameters": [
            {
              "name": "assignment",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment</p>"
            }
          ],
          "scope": "inner",
          "hide": true
        },
        {
          "name": "selectAssignment",
          "parameters": [
            {
              "name": "assignment",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment to select</p>"
            },
            {
              "name": "preserveSelection",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to preserve any other selected assignments</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "hide": true
        },
        {
          "name": "selectAssignments",
          "parameters": [
            {
              "name": "assignments",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignments to be selected</p>"
            }
          ],
          "scope": "inner",
          "hide": true
        },
        {
          "name": "onSelectedCollectionChange",
          "access": "private",
          "description": "<p>Responds to mutations of the underlying selection Collection.\nKeeps the UI synced, selectionChange event is fired when <code>me.silent</code> is falsy.</p>",
          "scope": "instance"
        },
        {
          "name": "clearEventSelection",
          "description": "<p>Deselects all <a href=\"#Scheduler/model/EventModel\">events</a>.</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "isEventSelected",
          "description": "<p>Returns <code>true</code> if the <a href=\"#Scheduler/model/EventModel\">event</a> is selected.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the event is selected</p>"
          }
        },
        {
          "name": "select",
          "description": "<p>Selects the passed <a href=\"#Scheduler/model/EventModel\">event</a> <em>if it is not selected</em>.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event to select</p>"
            },
            {
              "name": "preserveSelection",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to preserve any other selected events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectEvent",
          "description": "<p>Selects the passed <a href=\"#Scheduler/model/EventModel\">event</a> <em>if it is not selected</em>.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event select</p>"
            },
            {
              "name": "preserveSelection",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to preserve any other selected events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselect",
          "description": "<p>Deselects the passed <a href=\"#Scheduler/model/EventModel\">event</a><em>if it is selected</em>.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event to deselect.</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectEvent",
          "description": "<p>Deselects the passed <a href=\"#Scheduler/model/EventModel\">event</a> <em>if it is selected</em>.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event to deselect.</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectEvents",
          "description": "<p>Adds <a href=\"#Scheduler/model/EventModel\">events</a> to the selection.</p>",
          "parameters": [
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Events to be selected</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectEvents",
          "description": "<p>Removes <a href=\"#Scheduler/model/EventModel\">events</a> from the selection.</p>",
          "parameters": [
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Events to be deselected</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "onEventSelectionClick",
          "access": "private",
          "description": "<p>Mouse listener to update selection.</p>",
          "scope": "instance"
        },
        {
          "name": "onEventNavigate",
          "access": "private",
          "description": "<p>Navigation listener to update selection.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "AgendaView",
      "modulePath": "Calendar/widget/AgendaView",
      "classDescription": "<p>This is normally used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar\nbut may be used standalone as a regular Widget.</p>\n<p>As a standalone widget, it will lack the capabilities of the <a href=\"#Calendar/view/Calendar\">Calendar</a>\nclass, such as keyboard-based event to event navigation and drag/drop features.</p>\n<p>A Grid which displays an agenda view of the events in an EventStore.</p>\n<p>When used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar, the configured\n<a href=\"#Calendar/widget/AgendaView#config-range\">range</a> is snapped to encapsulate the Calendar's current\n<a href=\"#Calendar/view/Calendar#config-date\">date</a>.</p>\n<p>The AgendaView offers a floating settings button to allow the user to change the range type.</p>",
      "extends": [
        "Calendar/widget/EventList"
      ],
      "mixes": [
        "Calendar/widget/mixin/DayCellCollecter"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AgendaView.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "agendaview",
      "externalExamples": [
        "Calendar/widget/AgendaView.js"
      ],
      "configs": [
        {
          "name": "hideEventOverflow",
          "description": "<p>By default, long running events are repeated in all rows that the event covers.</p>\n<p>Configure this as <code>true</code> to only see the start of a long running event in its\nstart day.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "dayCellRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it.</p>\n<p>This function is called for each cell rendered to allow developers to mutate the cell metadata, or\nthe CSS classes to be applied to the cell.</p>\n<p>The cellData (a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a>) object parameter may be mutated to\ncustomize the cell appearance via <code>style</code> and <code>className</code> properties.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dayCellRenderer : function(cellData) {\n    // I don't like Mondays!\n    if (cellData.day === 1) {\n        cellData.cls['hackathon-dayoff'] = true;\n        cellData.style.fontWeight = 'bold';\n\n        cellData.isNonWorking = true;\n\n        return `${cellData.date.getDate()} Day off yay!`;\n    }\n}\n\n</code></pre>\n<p>A non-null return value from the renderer is used as the content of the day number element.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object that contains data about the cell.</p>"
            }
          ]
        },
        {
          "name": "eventRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it.</p>\n<p>This function is called each time an event is rendered to to allow developers to mutate\nthe cell metadata, or the CSS classes to be applied to the event element.</p>\n<p>It's called with the event record, and a eventData object which allows you to mutate event metadata\nsuch as 'cls', 'style'.</p>\n<p>The cls property is an object whose property names will be added to the event element if the property value is truthy.</p>\n<p>The style property is an object containing style properties for the event element.</p>\n<p>A non-null return value from the renderer is used as the event body content. A nullish\nreturn value causes the default renderer to be used which just uses the event name.</p>\n<p>If a string is returned, it is used as the HTML content of the event body element.</p>\n<p>If an object is returned, it is used as a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object to\ncreate complex content in the event body element.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer(eventRecord, eventData) {\n     if (eventRecord.name === 'Doctors appointment') {\n         eventData.style.fontWeight = 'bold';\n         eventData.cls['custom-cls'] = 1;\n\n         return 'Special doctors appointment';\n     }\n }\n</code></pre>\n<p>IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n(Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\nthe event's <code>name</code>. The function <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> as well as\n<a href=\"#Core/helper/StringHelper#function-xss-static\">xss</a> can be helpful in these cases.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer(eventRecord, eventData) {\n     return StringHelper.xss`Event: ${eventRecord.name}`;\n }\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "detail",
              "type": "Object",
              "description": "<p>An object that contains data about the event being rendered.</p>"
            },
            {
              "name": "detail.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData",
              "type": "Object",
              "description": "<p>A data object containing properties that will be used to create the event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.style",
              "type": "Object",
              "description": "<p>The style property is an object containing style properties for\nthe event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.cls",
              "type": "Object",
              "description": "<p>The cls property is an object whose property names will be added to\nthe event element if the property value is truthy.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventColor",
              "type": "String",
              "description": "<p>Color to be applied to the event</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventHeight",
              "type": "Number",
              "description": "<p>The current view's configured <a href=\"#Calendar/widget/mixin/CalendarMixin#config-eventHeight\">eventHeight</a>.\nFor the AgendaView, the renderer may modify this to a different value. <code>'auto'</code> means that the\ncontent returned by the renderer will determine the height.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "hideHeaders",
          "description": "<p>Specify <code>false</code> to display column headers</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "eventTimeRenderer",
          "description": "<p>A function, or name of a function in the ownership hierarchy which is used to create\nthe time output next to event bars in an agenda cell.</p>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record for which to create a time string.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date of the cell in which the event is being rendered.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "alignIconOfStartsBeforeEvents",
          "access": "internal",
          "description": "<p>This view lines up the icons in the events by shifting &quot;starts-before&quot;\nevents leftwards by the arrow width.</p>",
          "scope": "inner"
        },
        {
          "name": "resource",
          "description": "<p>Returns the resource associated with this agenda view when used inside a <a href=\"#Calendar/widget/ResourceView\">ResourceView</a></p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner",
          "readonly": true
        }
      ],
      "events": [
        {
          "name": "refresh",
          "description": "<p>Fires when this AgendaView refreshes.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.AgendaView",
              "description": "<p>The triggering instance.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "CalendarRow",
      "modulePath": "Calendar/widget/CalendarRow",
      "classDescription": "<p>This is normally used as the &quot;All day events&quot; section of a <a href=\"#Calendar/widget/DayView\">DayView</a> or\n<a href=\"#Calendar/widget/WeekView\">WeekView</a>. But it may be used standalone as a regular Widget.</p>\n<p>As a standalone widget, it will lack the capabilities of the <a href=\"#Calendar/view/Calendar\">Calendar</a>\nclass, such as keyboard-based event to event navigation and drag/drop features.</p>\n<p>A Widget which displays a single row of calendar cells for a configured range of dates.</p>\n<p>Cell rendering can be customized using the <a href=\"#Calendar/widget/CalendarRow#config-dayCellRenderer\">dayCellRenderer</a> method.</p>\n<p>Event rendering can be customized using the <a href=\"#Calendar/widget/CalendarRow#config-eventRenderer\">eventRenderer</a> method.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "mixes": [
        "Calendar/widget/mixin/DayCellRenderer",
        "Calendar/widget/mixin/CalendarMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarRow.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "calendarrow",
      "configs": [
        {
          "name": "dayCellRenderer",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "animate",
          "description": "<p>Set this to <code>false</code> to not use transition for this Widget as it changes height</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "autoHeight",
          "description": "<p>By default, this widget displays a maximum of <a href=\"#Calendar/widget/CalendarRow#config-defaultEventRowCount\">defaultEventRowCount</a> events\nbefore showing overflow indicators, and becoming <a href=\"#Calendar/widget/CalendarRow#function-toggleExpandCollapse\">expandable</a>.</p>\n<p>Configuring this as <code>true</code> makes this widget accommodate all events with no overflow.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "dayStartShift",
          "description": "<p>Either the start hour of the day, or a <em>24 hour</em> <code>HH:MM</code> string denoting the start of the first rendered\ndaily time block.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": "0"
        },
        {
          "name": "defaultEventRowCount",
          "description": "<p>The number of events to show to define the height of this widget by default if this widget\n<a href=\"#Calendar/widget/CalendarRow#config-autoHeight\">autoHeight</a> is <em>not</em> defined as <code>true</code>. The widget may be expanded to accommodate all\nthe events if there are overflowing events.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 3
        },
        {
          "name": "minDayWidth",
          "description": "<p>By default, the day columns flex to all fit within the width of this widget.</p>\n<p>configuring a <code>minDayWidth</code> means that if the day columns do not fit within this\nwidget's width, it becomes horizontally scrollable.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "eventRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it.</p>\n<p>This function is called each time an event is rendered to to allow developers to mutate\nthe cell metadata, or the CSS classes to be applied to the event element.</p>\n<p>It's called with the event record, and a eventData object which allows you to mutate event metadata\nsuch as 'cls', 'style'.</p>\n<p>The cls property is an object whose property names will be added to the event element if the property value is truthy.</p>\n<p>The style property is an object containing style properties for the event element.</p>\n<p>A non-null return value from the renderer is used as the event body content. A nullish\nreturn value causes the default renderer to be used which just uses the event name.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer({ eventRecord, eventData }) {\n     if (eventRecord.name === 'Doctors appointment') {\n         eventData.style.fontWeight = 'bold';\n         eventData.cls['custom-cls'] = 1;\n\n         return 'Special doctors appointment';\n     }\n }\n</code></pre>\n<p>IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n(Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\nthe event's <code>name</code>. The function <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> as well as\n<a href=\"#Core/helper/StringHelper#function-xss-static\">xss</a> can be helpful in these cases.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer({ eventRecord, eventData }) {\n     return StringHelper.xss`Event: ${eventRecord.name}`;\n }\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "detail",
              "type": "Object",
              "description": "<p>An object that contains data about the event being rendered.</p>"
            },
            {
              "name": "detail.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData",
              "type": "Object",
              "description": "<p>A data object containing properties that will be used to create the event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.style",
              "type": "Object",
              "description": "<p>The style property is an object containing style properties for\nthe event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.cls",
              "type": "Object",
              "description": "<p>The cls property is an object whose property names will be added to\nthe event element if the property value is truthy.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventColor",
              "type": "String",
              "description": "<p>Color to be applied to the event</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "gutterHeight",
          "description": "<p>How much extra space in pixels or other DOM units to allow below the event bars to\nfacilitate drag-create gestures.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "overflowClickAction",
          "description": "<p>How the view responds to clicking on a <code>+n more</code> button in an overflowing day cell.</p>\n<p>The default value, <code>'popup'</code>, means that a small dialog box showing the full complement\nof events for that cell is shown aligned to the cell.</p>\n<p>When set to <code>'expand'</code>, then clicking the <code>+n more</code> button causes the encapsulating\nrow to expand to accommodate all events in that row with no overflow.</p>\n<p>Navigating to a new month resets the row to its default, flexed height.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dayHeaderRenderer",
          "description": "<p>A function, or name of a function which is passed the <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object which\nwill be used to sync with a day cell header.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dayHeaderRenderer : function(headerDomConfig, cellData) {\n    if (this.isSpecialDate(cellData.date)) {\n        headerDomConfig.className['b-is-special-date'] = 1;\n\n        // Add to the content element's children\n        headerDomConfig.children.push({\n            text : 'Special day',\n            className : 'b-special-day\n        });\n    }\n}\n</code></pre>\n<p>The result is used to sync the DOM of the day column.</p>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "parameters": [
            {
              "name": "headerDomConfig",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>A <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> config object which is used to sync the day header element.</p>"
            },
            {
              "name": "headerDomConfig.className",
              "type": "Object",
              "description": "<p>An object who's truthy property names will be applied as class names.</p>",
              "isSubParam": true
            },
            {
              "name": "headerDomConfig.style",
              "type": "Object",
              "description": "<p>A CSS style defintion object.</p>",
              "isSubParam": true
            },
            {
              "name": "headerDomConfig.dataset",
              "type": "Object",
              "description": "<p>The DOM data properties to set.</p>",
              "isSubParam": true
            },
            {
              "name": "headerDomConfig.children",
              "type": "Array.<Core.helper.DomHelper#DomConfig>",
              "description": "<p>The <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> definitions the header content.\nThere will be 2 <code>children</code> encapsulating the day name and the date.</p>",
              "isSubParam": true
            },
            {
              "name": "cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object that contains data about the cell.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "heightAnimation",
          "description": "<p>A Promise which will be in <em>Pending</em> state only when the <code>minHeight</code> is animating to a new value.</p>",
          "type": "Promise",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "scrollTo",
          "description": "<p>Brings an event or a time into view.</p>",
          "parameters": [
            {
              "name": "target",
              "type": [
                "Scheduler.model.EventModel",
                "Date",
                "Number"
              ],
              "description": "<p>The event to scroll to or\na <code>Date</code> to read the hour value from, or an hour number.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the target: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the target to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the target when it is in view, <em>if the target is an <code>EventModel</code></em>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the target when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.x",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>X</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.y",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>Y</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the target has been scrolled into view.</p>"
          }
        },
        {
          "name": "toggleExpandCollapse",
          "description": "<p>If not <a href=\"#Calendar/widget/CalendarRow#config-autoHeight\">autoHeight</a>, this toggles between the collapsed state where it shows\nthe <a href=\"#Calendar/widget/CalendarRow#config-defaultEventRowCount\">defaultEventRowCount</a> even if more event rows exist, and the expanded state\n(which is equivalent to <a href=\"#Calendar/widget/CalendarRow#config-autoHeight\">autoHeight</a>) where all event rows are shown.</p>",
          "scope": "instance",
          "async": true
        }
      ],
      "events": [
        {
          "name": "heightChange",
          "description": "<p>Fires when this CalendarRow has completely changed its height.\nThis fires <em>after</em> the animation has finished.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.CalendarRow",
              "description": "<p>The triggering instance.</p>"
            },
            {
              "name": "oldHeight",
              "type": "Number",
              "description": "<p>The old height.</p>"
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>The new height.</p>"
            }
          ]
        },
        {
          "name": "refresh",
          "description": "<p>Fires when this CalendarRow refreshes.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.CalendarRow",
              "description": "<p>The triggering instance.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "DayView",
      "modulePath": "Calendar/widget/DayView",
      "classDescription": "<p>This is normally used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar\nbut may be used standalone as a regular Widget.</p>\n<p>As a standalone widget, it will lack the capabilities of the <a href=\"#Calendar/view/Calendar\">Calendar</a>\nclass, such as keyboard-based event to event navigation and drag/drop features.</p>\n<p>A Panel which displays one or more columns of days with events for each day arranged in ascending\ntime order in each column.</p>\n<p>This view is <em>not</em> limited to showing weeks. The <a href=\"#Calendar/widget/DayView#config-startDate\">startDate</a> and <a href=\"#Calendar/widget/DayView#config-endDate\">endDate</a>\nmay be configured to any date value. When the <a href=\"#Calendar/widget/DayView#config-startDate\">startDate</a> is changed dynamically,\nthe duration remains the same.</p>\n<p>This view can be configured to scroll to the specific time on first render, which defaults to 7 AM. This behavior\nis controlled by the <a href=\"#Calendar/widget/DayView#config-visibleStartTime\">visibleStartTime</a> config.</p>\n<p>A <a href=\"#Calendar/widget/WeekView\">WeekView</a> is a subclass of this view which is tied to showing\nweeks as defined by the <a href=\"#Calendar/widget/mixin/CalendarMixin#config-weekStartDay\">weekStartDay</a>.</p>\n<h2>Multi day events.</h2>\n<p>All day events, and multi day events are displayed in a <a href=\"#Calendar/widget/DayView#config-allDayEvents\">row at the top</a>.</p>\n<p>Intraday events are arranged in ascending time order down day columns from the <a href=\"#Calendar/widget/DayView#config-dayStartTime\">dayStartTime</a> to\nthe <a href=\"#Calendar/widget/DayView#config-dayEndTime\">dayEndTime</a>.</p>\n<p>The <a href=\"#Calendar/widget/DayView#config-showAllDayHeader\">showAllDayHeader</a> config option can be used to <em>not</em> show multi day events at\nthe top, but have them wrap across multiple day columns.</p>\n<p>The following configs which apply to the all day row are passed into the configuration of the\n<a href=\"#Calendar/widget/DayView#config-allDayEvents\">allDayEvents</a> widget:</p>\n<ul>\n<li><a href=\"#Calendar/widget/CalendarRow\">#config-overflowPopup</a></li>\n<li><a href=\"#Calendar/widget/CalendarRow\">#config-overflowButtonRenderer</a></li>\n<li><a href=\"#Calendar/widget/CalendarRow\">#config-overflowClickAction</a></li>\n<li><a href=\"#Calendar/widget/CalendarRow\">#config-dayCellRenderer</a></li>\n</ul>\n<p>Event rendering can be customized using the <a href=\"#Calendar/widget/DayView#config-eventRenderer\">eventRenderer</a> method.</p>",
      "extends": [
        "Core/widget/Panel"
      ],
      "mixes": [
        "Calendar/widget/mixin/CalendarMixin",
        "Calendar/widget/mixin/DayCellCollecter"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DayView.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "dayview",
      "externalExamples": [
        "Calendar/widget/DayView.js"
      ],
      "configs": [
        {
          "name": "eventRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it.</p>\n<p>This function is called each time an event is rendered to to allow developers to mutate\nthe cell metadata, or the CSS classes to be applied to the event element.</p>\n<p>It's called with the event record, and a eventData object which allows you to mutate event metadata\nsuch as 'cls', 'style'.</p>\n<p>The cls property is an object whose property names will be added to the event element if the property value is truthy.</p>\n<p>The style property is an object containing style properties for the event element.</p>\n<p>A non-null return value from the renderer is used as the event body content. A nullish\nreturn value causes the default renderer to be used which just uses the event name.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer(eventRecord, eventData) {\n     if (eventRecord.name === 'Doctors appointment') {\n         eventData.style.fontWeight = 'bold';\n         eventData.cls['custom-cls'] = 1;\n\n         return 'Special doctors appointment';\n     }\n }\n</code></pre>\n<p>IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n(Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\nthe event's <code>name</code>. The function <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> as well as\n<a href=\"#Core/helper/StringHelper#function-xss-static\">xss</a> can be helpful in these cases.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer(eventRecord, eventData) {\n     return StringHelper.xss`Event: ${eventRecord.name}`;\n }\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "detail",
              "type": "Object",
              "description": "<p>An object that contains data about the event being rendered.</p>"
            },
            {
              "name": "detail.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData",
              "type": "Object",
              "description": "<p>A data object containing properties that will be used to create the event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.style",
              "type": "Object",
              "description": "<p>The style property is an object containing style properties for\nthe event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.cls",
              "type": "Object",
              "description": "<p>The cls property is an object whose property names will be added to\nthe event element if the property value is truthy.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventColor",
              "type": "String",
              "description": "<p>Color to be applied to the event</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "hourHeight",
          "description": "<p>The height <strong>in pixels</strong> of one hour cell in a day column.</p>\n<p>Hour cells are bounded by lines, and there is a fainter half hour line in the middle.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 42
        },
        {
          "name": "date",
          "description": "<p>Sets the <a href=\"#Calendar/widget/DayView#config-startDate\">startDate</a> of this view. All Calendar views have a <code>date</code> property.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "startDate",
          "description": "<p>The start date (Time component is zeroed) of this view.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "endDate",
          "description": "<p>The end date (Time component is zeroed) of this view. Note that in terms of full days,\nthis is exclusive, ie: 2020-01-012 to 2020-01-08 is <em>seven</em> days. The end is 00:00:00 on\nthe 8th</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "fixedDuration",
          "description": "<p>By default, reconfiguring the <a href=\"#Calendar/widget/DayView#config-startDate\">startDate</a> maintains the current duration\nof the view and moves the <a href=\"#Calendar/widget/DayView#config-endDate\">endDate</a>.</p>\n<p>But for flexibility, reconfiguring the <a href=\"#Calendar/widget/DayView#config-endDate\">endDate</a> changes the duration.</p>\n<p>Setting <code>fixedDuration</code> to <code>true</code> locks this down to changing either end just moves\nthe view.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "visibleStartTime",
          "description": "<p>Either the start hour of the day, or a <em>24 hour</em> <code>HH:MM</code> string denoting the initially visible start time of the day.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": 7
        },
        {
          "name": "dayStartShift",
          "description": "<p>Either the start hour of the day, or a <em>24 hour</em> <code>HH:MM</code> string denoting the start time for days. This\nis midnight by default.</p>\n<p>Setting this value to 12, for example, indicates that the 24 hour &quot;day&quot; runs from noon on one day, to\nnoon on the following day. This causes events in this span of time to layout in the same day column. In\nthis example, a two hour event that spanned midnight would be rendered in the same way a normal, 2 hour\nevent spanning noon would be rendered without this option.</p>\n<p>When this config is non-zero, the headings that display the day name and number are adjusted to indicate\nthe range of days for the column. For example, the &quot;Wed&quot; column for the 12th of the month will now show\n&quot;Wed-Thu&quot; for the day name and &quot;12-13&quot; for the day number.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": "0"
        },
        {
          "name": "dayStartTime",
          "description": "<p>Either the start hour of the day, or a <em>24 hour</em> <code>HH:MM</code> string denoting the start of the first rendered\ndaily time block. You can also set this value to a ms timestamp representing time from midnight.</p>\n<p>This config, along with <a href=\"#Calendar/widget/DayView#config-dayEndTime\">dayEndTime</a> determines which hours are displayed in a day column.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": "0"
        },
        {
          "name": "dayEndTime",
          "description": "<p>Either the end hour of the day, or a <em>24 hour</em> <code>HH:MM</code> string denoting the end date of the last rendered time block.\nYou can also set this value to a ms timestamp representing time from midnight.</p>\n<p>This config, along with <a href=\"#Calendar/widget/DayView#config-dayStartTime\">dayStartTime</a> determines which hours are displayed in a day column.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": "24"
        },
        {
          "name": "increment",
          "description": "<p>A millisecond value by which to round times when clicking or dragging within a day column.</p>\n<p>May be specified in string form eg: <code>'15 minutes'</code></p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner"
        },
        {
          "name": "showTime",
          "description": "<p>Configure as <code>false</code> to hide the start time normally shown at the top of the events.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "minDayWidth",
          "description": "<p>The minimum width of a day column.</p>\n<p>If this is set, and the day columns overflow the horizontal space available, the columns\nwill be scrollable horizontally in the normal way.</p>\n<p>There is a <a href=\"#Calendar/widget/DayView#property-horizontalScroller\">horizontalScroller</a> property which handles scrolling in this\ndimension.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "allDayEvents",
          "description": "<p>A <a href=\"#Calendar/widget/CalendarRow\">CalendarRow</a> widget containing the horizontal series of calendar cells with the\nday headers and any all-day, or day-spanning events which fall inside this view's time range.</p>\n<p>Note that this component calculates its height depending on its\n<a href=\"#Calendar/widget/CalendarRow#config-eventHeight\">eventHeight</a>,\n<a href=\"#Calendar/widget/CalendarRow#config-defaultEventRowCount\">defaultEventRowCount</a> and\n<a href=\"#Calendar/widget/CalendarRow#config-autoHeight\">autoHeight</a> settings, therefore any configured <code>height</code>\nand <code>flex</code> values will be ignored.</p>",
          "type": [
            "Calendar.widget.CalendarRow",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "overflowPopup",
          "description": "<p>A config object used to create the <a href=\"#Calendar/widget/OverflowPopup\">OverflowPopup</a> that the\n<a href=\"#Calendar/widget/DayView#property-allDayEvents\">allDayEvents</a> may show when events for one day overflow the available space.</p>\n<p>For example</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    modes : {\n        week : {\n            overflowPopup : {\n                closable   : false,\n                dateFormat : 'dddd, MMM M',\n                eventRenderer({ eventRecord, renderData }) {\n                    if (calendarUtils.isImportantEvent(eventRecord)) {\n                        // Add CSS class to important events\n                        renderData.cls['b-important'] = 1;\n                    }\n                }\n            }\n        }\n    }\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "showAllDayHeader",
          "description": "<p>Shows an all day header above the main schedule for All Day events.\nSet to <code>false</code> to not show all day, or multi-day events in an all day header, but\nto have them showing wrapping through the day cells.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "eventSpacing",
          "description": "<p>Number of pixels to reduce the height of events with, to leave a gap between them.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        },
        {
          "name": "maxAllDayHeight",
          "description": "<p>The maximum height the all day event row is allowed to grow within this view\nwhen it is expanded to show all its &quot;all day&quot; events.</p>\n<p>This defaults to <code>50%</code>, but can also be set to any CSS size value. A numeric\nvalue will be taken as pixels.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "50%"
        },
        {
          "name": "fitHours",
          "description": "<p>When set to <code>true</code>, the hours in the day will be sized so that they fit in the available\nheight.</p>\n<p>In the Object form, the value may contain <code>minHeight</code> as the minimum hour height to which\nthe hour cells may shrink:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>fitHours : {\n    minHeight : 31\n}\n</code></pre>\n<p>Note that if the all day events row at the top changes size, the space available for the\nhours will change too, and the hour cell height will change.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "dayCellRenderer",
          "description": "<p>A function, or name of a function which is passed the <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object which\nwill be used to sync with a day column.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dayCellRenderer : function(domConfig, cellData) {\n    if (this.isSpecialDate(cellData.date)) {\n        domConfig.className['b-fa'] =\n        domConfig.className['b-fa-birthday-cake'] = 1;\n    }\n    return domConfig;\n}\n</code></pre>\n<p>The result is used to sync the DOM of the day column.</p>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "parameters": [
            {
              "name": "domConfig",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>A <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> config object which is used to sync the day column element.</p>"
            },
            {
              "name": "domConfig.className",
              "type": "Object",
              "description": "<p>An object who's truthy property names will be applied as class names.</p>",
              "isSubParam": true
            },
            {
              "name": "domConfig.style",
              "type": "Object",
              "description": "<p>A CSS style definition object.</p>",
              "isSubParam": true
            },
            {
              "name": "domConfig.dataset",
              "type": "Object",
              "description": "<p>The DOM data properties to set.</p>",
              "isSubParam": true
            },
            {
              "name": "children",
              "type": "Array.<Core.helper.DomHelper#DomConfig>",
              "description": "<p>The <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> definitions for the events in the day.</p>"
            },
            {
              "name": "cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object that contains data about the cell.</p>"
            }
          ]
        },
        {
          "name": "coreHours",
          "description": "<p>An object containing two properties, <code>start</code> and <code>end</code> representing the start and\nend of core working hours.</p>\n<p>This causes the non core hours to be covered by a themeable translucent grey mask\nin the time axis.</p>\n<p>This may be configured to also mask the non core hours in the day part of the view\nby setting the <code>overlayDay</code> property.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    start      : 9,\n    end        : 17,\n    overlayDay : true\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "parameters": [
            {
              "name": "coreHours.start",
              "type": "Number",
              "description": "<p>The start hour of the core working hours.</p>",
              "isSubParam": true
            },
            {
              "name": "coreHours.end",
              "type": "Number",
              "description": "<p>The end hour of the core working hours.</p>",
              "isSubParam": true
            },
            {
              "name": "coreHours.overlayDay",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to have the greyed zone\ncover the day part of the view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "zoomOnMouseWheel",
          "description": "<p>If true, you can zoom in and out on the the time axis using CTRL-key + mouse wheel.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "properties": [
        {
          "name": "dayStartTime",
          "description": "<p>The <strong>configured</strong> start time of the day, expressed in ms (8am would be represented as 8 * 60 * 60 * 1000).\nYou can set this value to either an hour value (0-23), a <em>24 hour</em> <code>HH:MM</code> string denoting the start of\nthe first rendered daily time block or to a ms timestamp representing time from midnight.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "dayEndTime",
          "description": "<p>The <strong>configured</strong> end time of the day, expressed in ms (6pm would be represented as 18 * 60 * 60 * 1000).\nYou can set this value to either an hour value (1-24), a <em>24 hour</em> <code>HH:MM</code> string denoting the end of\nthe last rendered daily time block or to a ms timestamp representing time from midnight.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner"
        },
        {
          "name": "allDayEvents",
          "description": "<p>If <a href=\"#Calendar/widget/DayView#config-showAllDayHeader\">showAllDayHeader</a> is not set to <code>false</code>, then this will be an instance\nof <a href=\"#Calendar/widget/CalendarRow\">CalendarRow</a> which encapsulates the all day events at the top\nof this view.</p>",
          "type": "Calendar.widget.CalendarRow",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "fitHours",
          "description": "<p>When set to <code>true</code>, the hours in the day will be sized so that they fit in the available\nheight.</p>\n<p>In the Object form, the value may contain <code>minHeight</code> as the minimum hour height to which\nthe hour cells may shrink:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myCalendar.fitHours = {\n    minHeight : 31\n};\n</code></pre>\n<p>Note that if the all day events row at the top changes size, the space available for the\nhours will change too, and the hour cell height will change.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "resource",
          "description": "<p>Returns the resource associated with this day view when used inside a <a href=\"#Calendar/widget/ResourceView\">ResourceView</a></p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "lastVisibleDate",
          "description": "<p>The date of the last <em>visible</em> column in the view. So if the last day defined in the\nrange is a Sunday, and <a href=\"#Calendar/widget/DayView#config-hideNonWorkingDays\">hideNonWorkingDays</a> is set, then the last visible\ndate will be the date of the Friday.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "overflowPopup",
          "description": "<p>The <a href=\"#Calendar/widget/OverflowPopup\">OverflowPopup</a> instance that the <a href=\"#Calendar/widget/DayView#property-allDayEvents\">allDayEvents</a>\nmay show when events for one day overflow the available space.</p>",
          "type": "Calendar.widget.OverflowPopup",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "dayStartOffset",
          "access": "internal",
          "description": "<p>This is the increment in milliseconds from the floored day start hour to the configured day start time.</p>\n<p>This is used to calculate the offset by which to move the timeAxis ticks when the start is not on an hour boundary.</p>",
          "scope": "instance"
        },
        {
          "name": "horizontalScroller",
          "description": "<p>A Scroller which encapsulates horizontal scrolling of the view in case a <a href=\"#Calendar/widget/DayView#config-minDayWidth\">minDayWidth</a>\nsetting causes the days to overflow the available width.</p>",
          "type": "Core.helper.util.Scroller",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "scrollTo",
          "description": "<p>Scrolls vertically to bring an event or a time into view.</p>",
          "parameters": [
            {
              "name": "target",
              "type": [
                "Scheduler.model.EventModel",
                "Date",
                "Number"
              ],
              "description": "<p>The event to scroll to or\na <code>Date</code> to read the hour value from, or an hour number.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the target: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the target to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the target when it is in view, <em>if the target is an <code>EventModel</code></em>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the target when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.x",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>X</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.y",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>Y</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the target has been scrolled into view.</p>"
          }
        },
        {
          "name": "getPositionFromTime",
          "access": "internal",
          "description": "<p>Returns the pixel coordinate on the time axis for the passed time of day.</p>",
          "parameters": [
            {
              "name": "time",
              "type": [
                "Date",
                "Number",
                "String"
              ],
              "description": "<p>The hour number, 'HH:MM' time or a <code>Date</code> instance.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "refreshDayEvents",
          "access": "internal",
          "description": "<p>Refreshes the event layout inside a day column in case the stacking order becomes incorrect.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "renderEvents",
          "access": "internal",
          "description": "<p>Pushes event bar DomConfig definitions into the <code>children</code> property of the passed\n<code>dayDomConfig</code> object</p>",
          "parameters": [
            {
              "name": "cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object containing information about the day cell being created.</p>"
            },
            {
              "name": "The",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>DomConfig element definition for the day cell.</p>"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "refresh",
          "description": "<p>Fires when this DayView refreshes.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.DayView",
              "description": "<p>The triggering instance.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "EventEditor",
      "modulePath": "Calendar/widget/EventEditor",
      "classDescription": "<p>Provided event editor dialog. This is not supposed to be used directly.</p>\n<p>Using the <a href=\"#Scheduler/feature/EventEdit#config-items\">items</a> config of the EventEdit feature\nit is possible to reconfigure the layout of the event editor. See the {@lin Calendar.feature.EventEdit}\nfor more information and an example of doing this.</p>",
      "extends": [
        "Scheduler/view/EventEditor"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventEditor.js",
      "path": "/Calendar/lib/Calendar/widget",
      "typings": {
        "Scheduler/view/EventEditor": "Scheduler/view/SchedulerEventEditor"
      }
    },
    {
      "name": "EventList",
      "modulePath": "Calendar/widget/EventList",
      "classDescription": "<p>A Grid view of the EventStore.</p>\n<p>This shows a configured range of events from the event store.</p>\n<p>When used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar, the configured\n<a href=\"#Calendar/widget/EventList#config-range\">range</a> is snapped to encapsulate the Calendar's current\n<a href=\"#Calendar/view/Calendar#config-date\">date</a>.</p>\n<p>The EventList's header context menu is extended to allow the user to change the range type.</p>",
      "extends": [
        "Grid/view/Grid"
      ],
      "mixes": [
        "Calendar/widget/mixin/CalendarMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventList.js",
      "path": "/Calendar/lib/Calendar/widget",
      "demo": {
        "product": "calendar",
        "demo": "listview"
      },
      "classType": "eventlist",
      "externalExamples": [
        "Calendar/widget/ListView.js"
      ],
      "configs": [
        {
          "name": "eventFilter",
          "description": "<p>A function to filter which events are collected into the day cell data blocks.\nReturn <code>true</code> to include the passed event, or a <em>falsy</em> value to exclude the event.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "range",
          "description": "<p>The time range around the <a href=\"#Calendar/widget/EventList#config-date\">date</a> to display events for.</p>\n<p>Valid values are:</p>\n<ul>\n<li>day</li>\n<li>week</li>\n<li>month</li>\n<li>year</li>\n<li>decade</li>\n</ul>\n<p>This may also be specified as a duration with a magnitude part and a unit part. For\nexample <code>'1m'</code> would mean one month, and <code>'4w'</code> would mean four weeks.\nSee <a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a> for details\nof syntax.</p>\n<p>When using a range of weeks, months, years or decades, then when this widget's\n<a href=\"#Calendar/widget/EventList#config-date\">date</a> is synced with its owning <a href=\"#Calendar/view/Calendar\">Calendar</a>'s\n<a href=\"#Calendar/view/Calendar#property-date\">date</a>, this widget's <a href=\"#Calendar/widget/EventList#config-startDate\">startDate</a>\nis snapped to the closest start point of the range which encompasses that date.</p>\n<p>So if using <code>range : '1w'</code>, then setting the date to Thursday, 28th October 2021\nWould mean that the <code>startDate</code> snaps to Sunday 24th October 2021 (Assuming the locale\nuses Sunday as the week start day).</p>\n<p>If configured to use a range of <em>days</em>, no snapping is done. There's no defined start point\nSo the <a href=\"#Calendar/widget/EventList#config-startDate\">startDate</a> is set to the incoming Calendar date.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "1 month"
        },
        {
          "name": "date",
          "description": "<p>The date to orient this view's <a href=\"#Calendar/widget/EventList#config-range\">range</a> around.</p>\n<p>When using a <a href=\"#Calendar/widget/EventList#config-range\">range</a> of weeks, months, years or decades, the <a href=\"#Calendar/widget/EventList#config-startDate\">startDate</a> snaps\nto the closest lower range boundary, and the end date snaps to the closest larger\nrange boundary.</p>\n<p>When using a <a href=\"#Calendar/widget/EventList#config-range\">range</a> of days, the <a href=\"#Calendar/widget/EventList#config-startDate\">startDate</a> is set to the passed date.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "startDate",
          "access": "internal",
          "description": "<p>Sets the start date of the <a href=\"#Calendar/widget/EventList#config-range\">range</a> that this view covers.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "endDate",
          "access": "internal",
          "description": "<p>Sets the end date of the <a href=\"#Calendar/widget/EventList#config-range\">range</a> that this view covers.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "columns",
          "description": "<p>Column definitions to add to the default columns, or column definitions which override\nthe provided, default columns.</p>\n<p>By default, the <code>EventList</code> shows three columns:</p>\n<pre class=\"prettyprint source lang-javascript:\"><code>columns : [{\n    text  : 'Name',\n    field : 'name\n}, {\n    text  : 'Start',\n    field : 'startDate\n}, {\n    text  : 'End',\n    field : 'endDate\n}]\n</code></pre>\n<p>Your <code>columns</code> config is appended to the default columns <em>unless you provide\ncolumns for the <code>name</code>, <code>startDate</code> and <code>endDate</code> fields</em>, in which case your\ncolumn definitions are merged into the default column definitions.</p>\n<p>In this way you can provide a <code>renderer</code> for the default columns, or otherwise\nconfigure them in a customizable way.</p>",
          "type": "Array.<Object>",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "date",
          "description": "<p>Setting this property may change the encapsulated range if the date is outside the current\nrange.</p>\n<p>It also causes this view to scroll the view to the passed date, or closest date.\nSee <a href=\"#Calendar/widget/EventList#function-scrollTo\">scrollTo</a></p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "startDate",
          "description": "<p>Gets the start date of the <a href=\"#Calendar/widget/EventList#config-range\">range</a> that this view covers.</p>",
          "type": "Date",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "endDate",
          "description": "<p>Gets the end date of the <a href=\"#Calendar/widget/EventList#config-range\">range</a> that this view covers.\nNote that Date objects are time points, not a representation of a 24 hour period,\nSo <code>{startDate : '2022-10-24', endDate : '2020-10-25' }</code> spans the <strong>single</strong> day\n24th October 2022. The end point is <code>2022-10-25T00:00:00</code></p>",
          "type": "Date",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "resource",
          "description": "<p>Returns the resource associated with this event list when used inside a <a href=\"#Calendar/widget/ResourceView\">ResourceView</a></p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "listRangeMenu",
          "description": "<p>This property yields a <a href=\"#Core/widget/Menu\">Menu</a> config object which encapsulates the range choices\nwhich this widget may be set to encapsulate:</p>\n<ul>\n<li>day</li>\n<li>week</li>\n<li>month</li>\n<li>year</li>\n<li>decade\nBy default a <code>list</code> view adds these choices to the header context menu.\nAn <code>agenda</code> view creates a floating settings button which offers this menu.\nThe property may be used to create a custom UI for changing the range.</li>\n</ul>",
          "type": "Object",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "count",
          "description": "<p>The number of events that this View currently encapsulates in its <a href=\"#Calendar/widget/EventList#config-range\">date range</a>.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "scrollTo",
          "description": "<p>Scrolls vertically to bring an event or a time into view.</p>",
          "parameters": [
            {
              "name": "target",
              "type": [
                "Scheduler.model.EventModel",
                "Date"
              ],
              "description": "<p>The event to scroll to or a <code>Date</code> to scroll to.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the target: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the target to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": [
                "Boolean",
                "function"
              ],
              "description": "<p>Set to <code>true</code> to highlight the resulting element\nwhen it is in view. May be a function which is called passing the resulting element\nto provide customized highlighting.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.y",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>Y</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the target has been scrolled into view.</p>"
          }
        },
        {
          "name": "previous",
          "description": "<p>Interface method used by an encapsulating Calendar view to implement the &quot;prev&quot; button.</p>",
          "scope": "instance"
        },
        {
          "name": "next",
          "description": "<p>Interface method used by an encapsulating Calendar view to implement the &quot;next&quot; button.</p>",
          "scope": "instance"
        },
        {
          "name": "updateEventStore",
          "description": "<p>When an EventStore arrives, chain off a slave store from that which we can then\nfilter to only show the week we are focused upon.</p>",
          "scope": "instance"
        },
        {
          "name": "populateStoreSoon",
          "access": "private",
          "description": "<p>This is called when our store needs to be repopulated from the eventStore</p>",
          "scope": "instance"
        },
        {
          "name": "updateDate",
          "description": "<p>When we have our date set, pass it right on to the Month. It will react if that means that\nwe are looking at a different week. We just react to our month's weekChange event.</p>",
          "scope": "instance"
        },
        {
          "name": "changeMonth",
          "description": "<p>Creates the Month utility object. We use it to track what week we are looking at.</p>",
          "scope": "instance"
        },
        {
          "name": "onMonthChange",
          "description": "<p>When the date we have been told to look at changes, recalculate the date range.\nThis will cause a refill of our grid store from the master event store.</p>",
          "scope": "instance"
        },
        {
          "name": "onCalendarStoreChange",
          "description": "<p>This is added as a listener by the CalendarStores mixin.</p>\n<p>Our store is chained off of the EventStore; refill it if the EventStore changes.\nThe store will fire events which cause UI update.\nWe must fire a refresh event so that the encapsulating Calendar view knows about this.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "EventTip",
      "modulePath": "Calendar/widget/EventTip",
      "classDescription": "<p>Displays a tooltip containing extra info and options on either event click or event hover.</p>\n<p>See the <a href=\"#Calendar/feature/EventTooltip\">EventTooltip</a> feature for more information and an example of\ncustomizing the displayed event tooltip.</p>\n<p>The EventTip is provided with two standard <a href=\"#Calendar/widget/EventTip#config-tools\">tools</a>:</p>\n<ul>\n<li><code>edit</code> - A tool which is linked to the <a href=\"#Calendar/feature/EventEdit\">EventEdit</a> feature\nto initiate editing when clicked.</li>\n<li><code>delete</code> - A tool which removes the current event record\nfunction of the active view to enable event deletion.</li>\n</ul>\n<p>New tools may be added, or properties of existing tools may be changed by configuring the\n<a href=\"#Calendar/feature/EventTooltip\">EventTooltip</a> feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    features : {\n        eventTooltip : {\n            tools : {\n                // Just override handler of existing tool - all else is OK\n                edit : {\n                    handler : () => console.log(`Handle editing ${this.eventRecord.name} our way`);\n                },\n                // Add a new tool for our own operation\n                newTool : {\n                    cls     : 'b-icon-add',\n                    tooltip : 'Test',\n                    handler() {\n                        console.log(`Test ${this.eventRecord.name}`);\n                    }\n                }\n            }\n        }\n    }\n</code></pre>",
      "extends": [
        "Core/widget/Tooltip"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventTip.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "eventTooltip",
      "properties": [
        {
          "name": "eventRecord",
          "description": "<p>The event which the tooltip feature has been shown for.</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "eventRecord",
          "description": "<p>The event record for this tip to display</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner"
        },
        {
          "name": "extendAllDayEndDay",
          "description": "<p>By default, the end date of an all day event is displayed in the tooltip UI as\nthe last calendar date on which the event falls. For most end users, this is the\nexpected value.</p>\n<p>Technically, the <a href=\"#Scheduler/model/EventModel#field-endDate\">endDate</a> is a timestamp\nwhich represents the exact point in time at which an event ends. To use this instead,\nconfigure <code>extendAllDayEndDay</code> as <code>true</code>.</p>\n<p>To be clear, this would mean that an <a href=\"#Scheduler/model/EventModel#field-allDay\">allDay</a>\nevent starting and ending on the 7th of February 2020, would show the end date in the\ntooltip as 8th of February 2020.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "MonthView",
      "modulePath": "Calendar/widget/MonthView",
      "classDescription": "<p>This is normally used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar\nbut may be used standalone as a regular Widget.</p>\n<p>As a standalone widget, it will lack the capabilities of the <a href=\"#Calendar/view/Calendar\">Calendar</a>\nclass, such as keyboard-based event to event navigation and drag/drop features.</p>\n<p>A Panel which displays a single month in a calendar like view.</p>\n<p>Cell rendering can be customized using the <a href=\"#Calendar/widget/MonthView#config-dayCellRenderer\">dayCellRenderer</a> method.</p>\n<p>Event rendering can be customized using the <a href=\"#Calendar/widget/MonthView#config-eventRenderer\">eventRenderer</a> method.</p>",
      "extends": [
        "Core/widget/CalendarPanel"
      ],
      "mixes": [
        "Calendar/widget/mixin/DayCellCollecter",
        "Calendar/widget/mixin/DayCellRenderer",
        "Calendar/widget/mixin/CalendarMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "MonthView.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "monthview",
      "externalExamples": [
        "Calendar/widget/MonthView.js"
      ],
      "configs": [
        {
          "name": "eventHeight",
          "description": "<p>The height of event bars in this view. May be a numeric value in pixels or a CSS\nunit measure such as <code>'2em'</code>.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": 20
        },
        {
          "name": "autoRowHeight",
          "description": "<p>By default, weeks rows all flex to share the available height equally.</p>\n<p>To make them shrinkwrap their events to show all events in every row, configure this as <code>true</code></p>\n<p><strong>Note:</strong> When rows shrinkwrap their events, rows with no events will shrink in size to\nonly show their header and a small, clickable area. Use the <a href=\"#Calendar/widget/MonthView#config-minRowHeight\">minRowHeight</a>\nconfig if you want to avoid this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>   // 1/6 as a percentage - the default height of a calendar row\n   minRowHeight : `${1/6*100}%`\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "maxEventsPerCell",
          "description": "<p>The maximum number of events to show in a cell when the row is shrinkwrapped.\nUse this to keep rows to a sane size when using <a href=\"#Calendar/widget/MonthView#config-autoRowHeight\">autoRowHeight</a>,\nor the <a href=\"#Calendar/feature/WeekExpander\">WeekExpander</a> feature.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 100
        },
        {
          "name": "minRowHeight",
          "description": "<p>By default, week rows flex to share available Panel height equally.</p>\n<p>This may be configured as a number, in which case it means pixels, or a CSS length.</p>\n<p>The non-standard unit <code>ev</code> may also be specified to mean &quot;events&quot;. For example\n<code>'3ev'</code> means rows will always be three events bars (plus the day header)\ntall.</p>\n<p>This is a useful config when using <a href=\"#Calendar/widget/MonthView#config-autoRowHeight\">autoRowHeight</a>, or using\n<a href=\"#Calendar/widget/MonthView#config-overflowClickAction\">overflowClickAction</a> when rows may be switched to shrinkwrapping\ntheir event content and may shrink in height.</p>\n<p>Setting this config causes the month grid to become scrollable in the <code>Y</code> axis.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "overflowClickAction",
          "description": "<p>How the view responds to clicking on a <code>+n more</code> button in an overflowing day cell.</p>\n<p>The default value, <code>'popup'</code>, means that a small dialog box showing the full complement\nof events for that cell is shown aligned to the cell.</p>\n<p>When set to <code>'expand'</code>, then clicking the <code>+n more</code> button causes the encapsulating\nrow to expand to accommodate all events in that row with no overflow.</p>\n<p>Navigating to a new month resets the row to its default, flexed height.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "resource",
          "description": "<p>Returns the resource associated with this month view when used inside a <a href=\"#Calendar/widget/ResourceView\">ResourceView</a></p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "getEventsPerCell",
          "access": "internal",
          "description": "<p>Returns the number of complete event bars which will fit inside the referenced cell.</p>\n<p>It's only in MonthView when some rows are shrinkwrapped round their event content (meaning\neither expanded or contracted away from the 1/6 height default) that there may be a customized\neventsPerCell for a certain date.</p>",
          "scope": "instance"
        },
        {
          "name": "shrinkwrapWeekRow",
          "description": "<p>Causes the week row referenced by the parameter (Either a Date, or the <strong>zero based</strong> row index)\nto size itself to exactly wrap the maximum number of events for any day of that week.</p>\n<p>If there are a <em>lot</em> of events, the row may grow in height. If few, or none, the row will shrink\nin height. The day name header along the top will always be visible by default.</p>\n<p>The row has the CSS class <code>'b-shrinkwrapped'</code> added when it is in the shrinkwrapped state\nto allow querying, and custom styling.</p>\n<p>See <a href=\"#Calendar/widget/MonthView#function-flexWeekRow\">flexWeekRow</a> for the converse operation.</p>",
          "parameters": [
            {
              "name": "week",
              "type": [
                "Date",
                "Number"
              ],
              "description": "<p>Either the date of a day within the week, or the <strong>zero based</strong> week row\nto shrinkwrap.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "flexWeekRow",
          "description": "<p>Causes the week row referenced by the parameter (Either a Date, or the <strong>zero-based</strong> row index)\nto become flexed in height to share the available height of the Calendar equally with other\nflexed rows.</p>\n<p>See <a href=\"#Calendar/widget/MonthView#function-shrinkwrapWeekRow\">shrinkwrapWeekRow</a> for the converse operation.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "Number"
              ],
              "description": "<p>Either the date of a day within the week, or the <strong>zero based</strong> week row\nto flex.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "calendarHitTest",
          "description": "<p>Determines what is under the cursor of the specified event or what is described by the given element.</p>",
          "parameters": [
            {
              "name": "domEvent",
              "type": [
                "Event",
                "Element"
              ],
              "description": "<p>The event or element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Calendar.view.Calendar#CalendarHit"
          }
        },
        {
          "name": "getWeekElementFor",
          "access": "internal",
          "description": "<p>Determines the week container element of the specified event or the given element.</p>",
          "parameters": [
            {
              "name": "domEvent",
              "type": [
                "Event",
                "Element"
              ],
              "description": "<p>The event or element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Element"
          }
        }
      ],
      "events": [
        {
          "name": "weekShrinkwrap",
          "description": "<p>This event is fired as soon as a week row is requested to be shrinkwrapped.</p>\n<p>It's not called if we are just re-synching the height of shrinkwrapped rows\nwhich needs to be done if the shape of the data changes.</p>\n<p>The animated transition to the new height will still be in progress, but the row's\nflex style is set to its calculated height.</p>\n<p>To wait until the animated transition is finished, use the Promise returned\nfrom <a href=\"#Calendar/widget/MonthView#function-shrinkwrapWeekRow\">shrinkwrapWeekRow</a></p>\n<pre class=\"prettyprint source lang-javascript\"><code>    monthView.shrinkwrapWeekRow(0).then() => Toast.show('Row zero shrinkwraps event content);\n</code></pre>",
          "parameters": [
            {
              "name": "weekStart",
              "type": "Date",
              "description": "<p>The start date of the week being shrinkwrapped.</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The week row being shrinkwrapped.</p>"
            }
          ]
        },
        {
          "name": "weekFlex",
          "description": "<p>This event is fired as soon as a week row is requested to be flexed. The animated\ntransition to the new height will still be in progress, but the row's flex style is\nset to its evenly shared flex value.</p>\n<p>To wait until the animated transition is finished, use the Promise returned\nfrom <a href=\"#Calendar/widget/MonthView#function-flexWeekRow\">flexWeekRow</a></p>\n<pre class=\"prettyprint source lang-javascript\"><code>    monthView.flexWeekRow(0).then() => Toast.show('Row zero flexed);\n</code></pre>",
          "parameters": [
            {
              "name": "weekStart",
              "type": "Date",
              "description": "<p>The start date of the week being reverted to a flexed height.</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The week row being reverted to a flexed height.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "OverflowPopup",
      "modulePath": "Calendar/widget/OverflowPopup",
      "classDescription": "<p>This class is not supposed to be used directly. It is used by Calendar views which need to show\nmore events than will fit into a day cell.</p>\n<p>A Popup which displays events which will not fit into their container in a View</p>",
      "extends": [
        "Core/widget/Popup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "OverflowPopup.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "overflowpopup",
      "configs": [
        {
          "name": "eventRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it.</p>\n<p>This function is called each time an event is rendered to to allow developers to mutate\nthe cell metadata, or the CSS classes to be applied to the event element.</p>\n<p>It's called with the event record, and a eventData object which allows you to mutate event metadata\nsuch as 'cls', 'style'.</p>\n<p>The cls property is an object whose property names will be added to the event element if the property\nvalue is truthy.</p>\n<p>The style property is an object containing style properties for the event element.</p>\n<p>A non-null return value from the renderer is used as the event body content. A nullish\nreturn value causes the default renderer to be used which just uses the event name.</p>\n<p>If a string is returned, it is used as the HTML content of the event body element.</p>\n<p>If an object is returned, it is used as a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object to\ncreate complex content in the event body element.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer({ eventRecord, renderData }) {\n     if (eventRecord.name === 'Doctors appointment') {\n         eventData.style.fontWeight = 'bold';\n         eventData.cls['custom-cls'] = 1;\n\n         return 'Special doctors appointment';\n     }\n }\n</code></pre>\n<p>IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n(Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\nthe event's <code>name</code>. The function <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> as well as\n<a href=\"#Core/helper/StringHelper#function-xss-static\">xss</a> can be helpful in these cases.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer({ eventRecord }) {\n     return StringHelper.xss`Event: ${eventRecord.name}`;\n }\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "detail",
              "type": "Object",
              "description": "<p>An object that contains data about the event being rendered.</p>"
            },
            {
              "name": "detail.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData",
              "type": "Object",
              "description": "<p>A data object containing properties that will be used to create the event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.style",
              "type": "Object",
              "description": "<p>The style property is an object containing style properties for\nthe event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.cls",
              "type": "Object",
              "description": "<p>The cls property is an object whose property names will be added to\nthe event element if the property value is truthy.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventColor",
              "type": "String",
              "description": "<p>Color to be applied to the event</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "eventList",
          "description": "<p>A <a href=\"#Core/widget/Widget\">Widget</a> config object used to show the inner list of overflowing events\nshown in this popup.</p>\n<p>This widget has a <a href=\"#Core/widget/Widget#config-weight\">weight</a> of <code>500</code>, so to insert widgets above\nthis, use <code>weight</code> less than 500, and to insert widgets below it use <code>weight</code> greater than 500.</p>",
          "type": "Object",
          "scope": "inner",
          "defaultValue": "{\"type\":\"widget\",\"cls\":\"b-cal-event-bar-container\",\"weight\":500}"
        },
        {
          "name": "dateFormat",
          "description": "<p>The <a href=\"#Core/helper/DateHelper#function-format-static\">DateHelper</a> format string to use to\ncreate the <a href=\"#Calendar/widget/OverflowPopup#config-title\">title</a> of this dialog.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "dddd, MMM DD"
        },
        {
          "name": "onlyShowOverflow",
          "description": "<p>By default an event overflow popup shows all the events for the activated date.</p>\n<p>Configure this as <code>true</code> to only display the events which were hidden due to overflow.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "activeDate",
          "description": "<p>The date for which overflow is being shown.</p>",
          "type": "Date",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "cellData",
          "description": "<p>A data block containing information about the day for which overflow is being shown.</p>",
          "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
          "scope": "inner",
          "readonly": true
        }
      ]
    },
    {
      "name": "ResourceView",
      "modulePath": "Calendar/widget/ResourceView",
      "classDescription": "<p>A Calendar view which encapsulates a series of child Calendar views, one for each resource (often\nreferred to as &quot;calendar&quot;) in the project.</p>\n<p>The type of view displayed defaults to <code>'week'</code>, but this can be changed using the <a href=\"#Calendar/widget/ResourceView#config-view\">view</a>\nconfig object.</p>\n<p>Usage :</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    appendTo : domElement,\n\n    // Resource avatar images are loaded from this path\n    resourceImagePath : '../_shared/images/users/',\n\n    modes : {\n        // Let's not show the default views\n        day    : null,\n        week   : null,\n        month  : null,\n        year   : null,\n        agenda : null,\n\n        // Mode name can be anything if it contains a &quot;type&quot; property.\n        monthResourceview : {\n            // Type has the final say over which view type is created\n            type : 'resource',\n\n            // This is a config object for the subviews; one for each resource\n            view : {\n                // We show a month view for each resource in the project\n                type : 'month'\n            }\n        }\n    }\n});\n</code></pre>",
      "extends": [
        "Core/widget/Panel"
      ],
      "mixes": [
        "Calendar/widget/mixin/CalendarMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceView.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "resourceview",
      "configs": [
        {
          "name": "view",
          "description": "<p>A config object used to configure the sub views. The default <code>type</code> used is <code>'weekview'</code></p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "stableResourceOrder",
          "description": "<p>By default, the resource views are displayed in the order that the resources appear\nin the project's <code>resourceStore</code>, so they will appear in a stable position, meaning\nwhen a view is filtered out, then filtering it in will replace it in the same position.</p>\n<p>If this config is <code>false</code>, re-adding a view will place it at the end.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "resourceWidth",
          "description": "<p>The width of a resource calendar panel (view always stretches to fill window)</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "hideNonWorkingDays",
          "description": "<p>Set to true to hide non-working days</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "meta",
          "description": "<p>A field name or a function returning a string to be displayed below resource name in the resource view\nheaders.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const calendar = new Calendar({\n    modes : {\n        // Mode name can be anything if it contains a &quot;type&quot; property.\n        weekResources : {\n            type  : 'resource',\n            // Get meta string to display\n            meta : resource => resource.title\n        }\n    }\n});\n</code></pre>",
          "type": [
            "String",
            "function"
          ],
          "scope": "inner"
        },
        {
          "name": "showAvatars",
          "description": "<p>Display an avatar in the resource view headers, either as an image or using resource initials.</p>\n<p>Looks for an image name in the <a href=\"#Scheduler/model/ResourceModel#field-imageUrl\">imageUrl</a> and\n<a href=\"#Scheduler/model/ResourceModel#field-image\">image</a> fields on the resource. Set\n<a href=\"#Calendar/view/Calendar#config-resourceImagePath\">resourceImagePath</a> on Calendar to specify where to load images from.\nIf no image is found, resource initials are displayed.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "properties": [
        {
          "name": "resourceWidth",
          "description": "<p>The width of a resource calendar panel (view always stretches to fill window)</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "hideNonWorkingDays",
          "description": "<p>Set to true to hide non-working days</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "dayViewTimeAxis",
          "access": "private",
          "description": "<p>This creates a specially styled DayView which matches the view config (so that\ndayStartTime, hourHeight etc is synced) which shows nothing but its time axis.\nThis acts as the single visible time axis on the left.</p>",
          "scope": "instance"
        },
        {
          "name": "dayViewScroller",
          "access": "private",
          "description": "<p>This creates a specially styled DayView which matches the view config (so that\ndayStartTime, hourHeight etc is synced) which shows nothing but its scrollbar.\nThis acts as the single visible scrollbar on the right of the ResourceView.\nWe cannot have the last DayView <code>overflowY : true</code> because then its flexed width\nbeing equal to the others, its content area would be <scrollBarWidth> narrower\nthan the others.</p>",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "eachView",
          "description": "<p>Executes the passed function for each child calendar view in <a href=\"#Calendar/view/Calendar#config-modes\">modes</a></p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "args",
              "type": "Array.<Object>",
              "description": "<p>The arguments to pass. Defaults to the view being called followed by its index.</p>",
              "optional": true
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for the function. Defaults to the view being called.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "refresh",
          "access": "internal",
          "description": "<p>This is the method which responds to store changes, so this is the equivalent of the <code>refresh</code> method\nin other Calendar views. Therefore it is implemented in the same way. It only responds with an\nimmediate recalculation of the UI if this view is visible, otherwise, it is deferred until the next\ntime this view becomes visible.</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "refresh",
          "description": "<p>Fires when this ResourceView refreshes.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.ResourceView",
              "description": "<p>The triggering instance.</p>"
            }
          ]
        },
        {
          "name": "viewCreate",
          "description": "<p>Fires when a new sub view is created.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.ResourceView",
              "description": "<p>The triggering instance.</p>"
            },
            {
              "name": "view",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>The newly created sub view.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Sidebar",
      "modulePath": "Calendar/widget/Sidebar",
      "classDescription": "<p>This class is not supposed to be used directly. This widget provides the utility UI as the\n<a href=\"#Calendar/view/Calendar#config-sidebar\">sidebar</a> of a <a href=\"#Calendar/view/Calendar\">Calendar</a> widget.</p>\n<p>Sidebar items provided by default:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>datePicker</code></td>\n<td><a href=\"#Scheduler/widget/SchedulerDatePicker\">SchedulerDatePicker</a></td>\n<td>100</td>\n<td>Used to pick Calendar's active date</td>\n</tr>\n<tr>\n<td><code>eventFilter</code></td>\n<td><a href=\"#Core/widget/FilterField\">FilterField</a></td>\n<td>150</td>\n<td>Used to filter events by name</td>\n</tr>\n<tr>\n<td><code>resourceFilter</code></td>\n<td><a href=\"#Scheduler/widget/ResourceFilter\">ResourceFilter</a></td>\n<td>200</td>\n<td>Used to select resources to show events for</td>\n</tr>\n</tbody>\n</table>\n<p>The configuration of any of these may be overridden:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    sidebar : {\n        items : {\n            datePicker : {\n                // Never go to dates in the past\n                minDate : new Date()\n            },\n            eventFilter : {\n                // Let's have this at the top\n                weight : 50\n            },\n            resourceFilter : {\n                store : {\n                    sorters : [{\n                        field     : 'name',\n                        // By default this is in ascending name order\n                        // Let's change that round.\n                        ascending : false\n                    }]\n                }\n            }\n        }\n    }\n});\n</code></pre>",
      "extends": [
        "Core/widget/Panel"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Sidebar.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "sidebar",
      "externalExamples": [
        "Calendar/widget/Sidebar.js"
      ],
      "configs": [
        {
          "name": "side",
          "description": "<p>May be configured with <code>'left'</code> or <code>'right'</code> to dock the Sidebar to either side.</p>\n<p>Defaults to <code>'left'</code>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "left"
        }
      ]
    },
    {
      "name": "WeekView",
      "modulePath": "Calendar/widget/WeekView",
      "classDescription": "<p>This is normally used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar\nbut may be used standalone as a regular Widget.</p>\n<p>As a standalone widget, it will lack the capabilities of the <a href=\"#Calendar/view/Calendar\">Calendar</a>\nclass, such as keyboard-based event to event navigation and drag/drop features.</p>\n<p>A Panel which displays up to 7 columns of days with events for each day arranged in ascending\ntime order in each column.</p>\n<p>All day events, and multi day events which intersect that day are displayed in a row at the top.</p>\n<p>Intra day events are arranged in ascending time order down the column from the <a href=\"#Calendar/widget/DayView#config-dayStartTime\">dayStartTime</a> to\nthe <a href=\"#Calendar/widget/DayView#config-dayEndTime\">dayEndTime</a></p>\n<p>Event rendering can be customized using the <a href=\"#Calendar/widget/WeekView#config-eventRenderer\">eventRenderer</a> method.</p>",
      "extends": [
        "Calendar/widget/DayView"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "WeekView.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "weekview",
      "externalExamples": [
        "Calendar/widget/WeekView.js"
      ],
      "properties": [
        {
          "name": "resource",
          "description": "<p>Returns the resource associated with this week view when used inside a <a href=\"#Calendar/widget/ResourceView\">ResourceView</a></p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner",
          "readonly": true
        }
      ]
    },
    {
      "name": "YearView",
      "modulePath": "Calendar/widget/YearView",
      "classDescription": "<p>This is normally used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar\nbut may be used standalone as a regular Widget.</p>\n<p>As a standalone widget, it will lack the capabilities of the <a href=\"#Calendar/view/Calendar\">Calendar</a>\nclass, such as keyboard-based event to event navigation and drag/drop features.</p>\n<p>A Panel which displays a year's worth of months with days which have events highlighted.</p>",
      "extends": [
        "Core/widget/Panel"
      ],
      "mixes": [
        "Calendar/widget/mixin/CalendarMixin",
        "Calendar/widget/mixin/DayCellCollecter",
        "Calendar/widget/mixin/DayCellRenderer"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "YearView.js",
      "path": "/Calendar/lib/Calendar/widget",
      "classType": "yearview",
      "externalExamples": [
        "Calendar/widget/YearView.js"
      ],
      "configs": [
        {
          "name": "date",
          "description": "<p>A date which specifies the year to display. All types of calendar view have a <code>date</code>\nconfig which they use to set their visible date range according to their configuration\nand type.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "year",
          "description": "<p>The year to display</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "otherMonthCls",
          "access": "private",
          "description": "<p>The class name to add to calendar cells which are in the previous or next month.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "sixWeeks",
          "description": "<p>By default, all months show six week rows. Pass <code>false</code> to only render as many rows\nas needed.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "dayCellRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it.</p>\n<p>This function is called for each cell rendered to allow developers to mutate the cell metadata, or\nthe CSS classes to be applied to the cell.</p>\n<p>The cellConfig (a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a>) definition passed as part of the single\nparameter may be mutated to add <code>style</code> and <code>className</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dayCellRenderer : function(cellData) {\n    // I don't like Mondays!\n    if (cellData.date === 1) {\n        cellData.cls['dayoff'] = true;\n    }\n}\n\n</code></pre>\n<p>A non-null return value from the renderer is used as the content of the day cell element.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "dayCellRenderer.cellData",
              "type": "Object",
              "description": "<p>An object that contains data about the cell.</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellRenderer.cellData.date",
              "type": "Date",
              "description": "<p>The Date of this cell</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellRenderer.cellData.events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The array of events in this cell</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellRenderer.cellData.cellConfig",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>A <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object that contains data about the cell.</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellRenderer.cellData.cellConfig.style",
              "type": "String",
              "description": "<p>The style property is an object containing style properties for the cell header element.</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellRenderer.cellData.cellConfig.cls",
              "type": "String",
              "description": "<p>The cls property is an object whose property names will be added to the cell element if the property value is truthy.</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "resource",
          "description": "<p>Returns the resource associated with this year view when used inside a <a href=\"#Calendar/widget/ResourceView\">ResourceView</a></p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "startDate",
          "access": "internal",
          "description": "<p>For a consistent API, allow startDate to set the year</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "refresh",
          "description": "<p>Fires when this YearView refreshes.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.YearView",
              "description": "<p>The triggering instance.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "CalendarMixin",
      "modulePath": "Calendar/widget/mixin/CalendarMixin",
      "description": "<p>Mixin that provides common handling methods and configs for Calendar widgets.</p>\n<p>This mixin also brings in the <a href=\"#Core/mixin/Featureable\">Featureable</a> mixin.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarMixin.js",
      "path": "/Calendar/lib/Calendar/widget/mixin",
      "events": [
        {
          "name": "eventSelectionChange",
          "hide": true
        },
        {
          "name": "beforeChangeDate",
          "description": "<p>Triggered before a view's orientating date changes.</p>\n<p>return <code>false</code> from an event handler to veto the temporal navigation.</p>",
          "parameters": [
            {
              "name": "oldDate",
              "type": "Date",
              "description": "<p>The current orientating date of this view.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The new date to which this view is to be orientated.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "eventAutoCreated",
          "description": "<p>Fired when an <a href=\"#Calendar/widget/mixin/CalendarMixin#config-autoCreate\">autoCreate</a> gesture has created a new event\nand added it to the event store.</p>\n<p>If the <a href=\"#Calendar/feature/EventEdit\">EventEdit</a> feature is present, it listens for\nthis event and initiates an edit operation. Adding a high <code>prio</code> listener which\nreturns <code>false</code> can prevent this event from reaching the <code>eventEdit</code> processing.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.mixin.CalendarMixin",
              "description": "<p>This Calendar view instance.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new event record.</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "htmlCls",
          "type": "String",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "autoUpdateRecord",
          "type": "Boolean",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "record",
          "type": "Object",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "textContent",
          "type": "Boolean",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "content",
          "type": "String",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "html",
          "type": "String",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "eventRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it.</p>\n<p>This function is called each time an event is rendered to to allow developers to mutate\nthe cell metadata, or the CSS classes to be applied to the event element.</p>\n<p>It's called with the event record, and a eventData object which allows you to mutate event metadata\nsuch as 'cls', 'style'.</p>\n<p>The cls property is an object whose property names will be added to the event element if the property\nvalue is truthy.</p>\n<p>The style property is an object containing style properties for the event element.</p>\n<p>A non-null return value from the renderer is used as the event body content. A nullish\nreturn value causes the default renderer to be used which just uses the event name.</p>\n<p>If a string is returned, it is used as the HTML content of the event body element.</p>\n<p>If an object is returned, it is used as a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object to\ncreate complex content in the event body element.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer({ eventRecord, renderData }) {\n     if (eventRecord.name === 'Doctors appointment') {\n         eventData.style.fontWeight = 'bold';\n         eventData.cls['custom-cls'] = 1;\n\n         return 'Special doctors appointment';\n     }\n }\n</code></pre>\n<p>IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n(Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\nthe event's <code>name</code>. The function <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> as well as\n<a href=\"#Core/helper/StringHelper#function-xss-static\">xss</a> can be helpful in these cases.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer({ eventRecord }) {\n     return StringHelper.xss`Event: ${eventRecord.name}`;\n }\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "detail",
              "type": "Object",
              "description": "<p>An object that contains data about the event being rendered.</p>"
            },
            {
              "name": "detail.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The event record</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData",
              "type": "Object",
              "description": "<p>A data object containing properties that will be used to create the event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.style",
              "type": "Object",
              "description": "<p>The style property is an object containing style properties for\nthe event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.cls",
              "type": "Object",
              "description": "<p>The cls property is an object whose property names will be added to\nthe event element if the property value is truthy.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventColor",
              "type": "String",
              "description": "<p>Color to be applied to the event</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.dataset",
              "type": "Object",
              "description": "<p>An object which produces the <code>dataset</code> of the resulting event bar.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.solidBar",
              "type": "Boolean",
              "description": "<p>This is valid for views which create event bars\nsuch as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups.</p>\n<p>This is set to <code>true</code> by default for all day and interday events so that these appear as a\nsolid block of background colour.</p>\n<p>An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as\na solid bar of colour, or using the foreground colour (text and icons).</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "hideNonWorkingDays",
          "description": "<p>Configure as <code>true</code> to hide <a href=\"#Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays\">nonWorkingDays</a></p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "weekStartDay",
          "description": "<p>The week start day, 0 meaning Sunday, 6 meaning Saturday.\nDefaults to <a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "nonWorkingDays",
          "description": "<p>Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is <code>true</code>.\nDefaults to <a href=\"#Core/helper/DateHelper#property-nonWorkingDays-static\">nonWorkingDays</a>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "nonWorkingDayCls",
          "access": "private",
          "description": "<p>The class name to add to calendar cells which are non working days.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dayCellCls",
          "access": "private",
          "description": "<p>The class name to add to calendar cells.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "weekendCls",
          "access": "private",
          "description": "<p>The class name to add to calendar cells which are weekend days.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "shortEventCls",
          "description": "<p>The class name to add to events which have duration less than or equal to\n<a href=\"#Calendar/widget/mixin/CalendarMixin#config-shortEventDuration\">shortEventDuration</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "shortEventDuration",
          "description": "<p>The duration at which below and equal to this value, an event's encapsulating element gets\nthe <a href=\"#Calendar/widget/mixin/CalendarMixin#config-shortEventCls\">shortEventCls</a> added to it so that small event bars can have style rearrangements.</p>\n<p>In <a href=\"#Calendar/widget/DayView\">DayView</a>s, short events have compressed layout so that the event name is\nvisible on the top line next to the start time.</p>\n<p>This may be a string in the format required by <a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a>.</p>\n<p>It may also be configured as a millisecond value.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": "30 minutes"
        },
        {
          "name": "eventHeight",
          "description": "<p>The height of event bars if this view creates event bars.</p>\n<p><a href=\"#Calendar/widget/MonthView\">MonthView</a>, <a href=\"#Calendar/widget/MonthView\">CalendarRow</a>\n(the <a href=\"#Calendar/widget/DayView#config-allDayEvents\">all day row</a> in a\n<a href=\"#Calendar/widget/WeekView\">WeekView</a>) and <a href=\"#Calendar/widget/AgendaView\">AgendaView</a>\nuse this config.</p>\n<p>In <a href=\"#Calendar/widget/DayView\">DayView</a> and <a href=\"#Calendar/widget/WeekView\">WeekView</a>,\nthe event element's height is part of the widget's layout and signifies the event's duration,\nso these use a default value of <code>'auto'</code>.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": 25
        },
        {
          "name": "timeFormat",
          "description": "<p>A <a href=\"#Core/helper/DateHelper\">DateHelper</a> format string used to format the time displayed in events</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "LT"
        },
        {
          "name": "dateFormat",
          "description": "<p>A <a href=\"#Core/helper/DateHelper\">DateHelper</a> format string to use to create date output for\nview descriptions.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "MMMM d, YYYY"
        },
        {
          "name": "shortDateFormat",
          "description": "<p>A <a href=\"#Core/helper/DateHelper\">DateHelper</a> format string to use to create date output for\nabbreviated view descriptions.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "ll"
        },
        {
          "name": "shortDateTimeFormat",
          "description": "<p>A <a href=\"#Core/helper/DateHelper\">DateHelper</a> format string to use to create date and time output for\nabbreviated view descriptions.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "ll LT"
        },
        {
          "name": "readOnly",
          "description": "<p>Configure as <code>true</code> to make the view read-only, by disabling any UIs for modifying data.</p>\n<p><strong>Note that checks MUST always also be applied at the server side.</strong></p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "autoCreate",
          "description": "<p>If this config is set, then the <code>gesture</code> configured (which defaults to <code>dblclick</code>) creates a\nnew event at the event's time point.</p>\n<p>The exact time is rounded to the closest specified <code>step</code> value.</p>\n<p>The duration of the created event is the specified <code>duration</code> value.</p>\n<p>If this is specified as <code>true</code>, the <code>gesture</code> becomes <code>dblclick</code>, and the other properties\nare the default values listed below.</p>\n<p>If this is specified as a string, the string becomes the <code>gesture</code>, and the other properties\nare the default values listed below.</p>",
          "type": [
            "Object",
            "String",
            "Boolean"
          ],
          "scope": "inner",
          "defaultValue": "{\"gesture\":\"dblclick\",\"newName\":\"L{Object.newEvent}\",\"step\":\"15 minutes\",\"duration\":\"1 hour\",\"startHour\":8}",
          "properties": [
            {
              "name": "autoCreate.gesture",
              "type": "String",
              "description": "<p>The event name which should trigger event creation at the event's position.</p>",
              "default": "'dblclick'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.newName",
              "type": "String",
              "description": "<p>The name of an event created using <code>autoCreate</code> or a function to call which yields the name.</p>",
              "default": "'New Event'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.step",
              "type": "String",
              "description": "<p>The time unit by which to round the start click point of auto created events.\n<em>Only for views which have a granularity of less than one day such as <code>WeekView</code> and `DayView'</em>.</p>\n<p>For views which show whole days, the start defaults to 8am.</p>\n<p>This is a string in the format required by <a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a>.</p>",
              "default": "'15 minutes'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.duration",
              "type": "String",
              "description": "<p>The default duration for auto created events.</p>",
              "default": "'1 hour'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "autoCreate.startHour",
              "type": "Number",
              "description": "<p>The default start hour for auto created events\nin views where the time granularity is one day. In a DayView or WeekView where a mouse event position\nwill translate to a time of day, this is not used.</p>\n<p>This is the hour of the day to start the event at. It may be fractional.</p>",
              "default": 8,
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "allowOverlap",
          "access": "private",
          "description": "<p>Set to false if you don't want to allow events overlapping times for any one resource (defaults to true).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "descriptionRenderer",
          "description": "<p>A function that provides the textual description for the encapsulating Calendar's toolbar.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>descriptionRenderer() {\n    const\n        eventsInView = this.eventStore.records.filter(eventRec => DateHelper.intersectSpans(this.startDate, this.endDate, eventRec.startDate, eventRec.endDate)).length,\n        sd = DateHelper.format(this.startDate, 'DD/MM/YYY'),\n        ed = DateHelper.format(this.endDate, 'DD/MM/YYY');\n\n    return `${sd} - ${ed}, ${eventsInView} event${eventsInView === 1 ? '' : 's'}`;\n}\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "view",
              "type": "Core.widget.Widget",
              "description": "<p>The active view in case the function is in another scope.</p>"
            }
          ]
        },
        {
          "name": "syncViewDate",
          "description": "<p>When used as a <a href=\"#Calendar/view/Calendar#config-modes\">mode</a> of a Calendar, the\ndate will automatically be kept synced with the Calendar's\n<a href=\"#Calendar/view/Calendar#property-date\">date</a>.</p>\n<p>Configure this as <code>false</code> to opt out of this.</p>\n<p><strong>Note that this places the onus on the application developer to control the\nviewed date range in this widget.</strong></p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "showResourceAvatars",
          "description": "<p>Configure as <code>true</code> to show avatars of the assigned resources (calendars) at the\nstart of the event bar.</p>\n<p>Configure as <code>'last'</code> to show avatars of the assigned resources (calendars) at the\nend of the event bar.</p>\n<p>Note that the avatars are <code>2.22em</code> diameter circles, and this may not be suitable\nfor rendering in short events inside a DayView.</p>\n<p>In a view which renders event bars, the <a href=\"#Calendar/widget/mixin/CalendarMixin#config-eventHeight\">eventHeight</a> should be\nincreased from the default to accommodate the extra information.</p>\n<p>Note that you must set <a href=\"#Calendar/widget/mixin/CalendarMixin#config-resourceImagePath\">resourceImagePath</a> in order that the system\nknows where to access the resource's image file from.</p>\n<p>If no image is set, or the image is not found, the resource's initials are shown instead.</p>\n<p>By default it is inherited from the owning Calendar:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    resourceImagePath   : 'images/resources/'\n    modes : {\n        month : {\n            showResourceAvatars : true,\n        },\n        week : {\n            // Images go at the end of the body with name first\n            showResourceAvatars : 'last,\n        }\n    }\n});\n</code></pre>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "resourceImagePath",
          "description": "<p>Path to load resource images from. Used by the <a href=\"#Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars\">showResourceAvatars</a> config\nto create URLs using the resource's\n<a href=\"#Scheduler/model/ResourceModel#field-image\">image</a> or\n<a href=\"#Scheduler/model/ResourceModel#field-imageUrl\">imageUrl</a> fields:</p>\n<ul>\n<li><code>image</code> represents image name inside the specified <code>resourceImagePath</code>,</li>\n<li><code>imageUrl</code> represents fully qualified image URL.</li>\n</ul>\n<p><strong>NOTE</strong>: The path should end with a <code>/</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    modeDefaults : {\n        showResourceAvatars : true,\n        resourceImagePath   : 'images/resources/'\n    }\n});\n</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "minDate",
          "description": "<p>The minimum date to which the <code>startDate</code> of this view may be navigated.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "maxDate",
          "description": "<p>The maximum date to which the <code>endDate</code> of this view may be navigated.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "content",
          "type": "String",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "html",
          "type": "String",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "dayCellCls",
          "description": "<p>The class name to add to calendar cells.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "minDate",
          "description": "<p>The minimum date to which the <code>startDate</code> of this view may be navigated.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "maxDate",
          "description": "<p>The maximum date to which the <code>endDate</code> of this view may be navigated.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "eventHeightInPixels",
          "access": "private",
          "description": "<p>Returns the pixel value of the <a href=\"#Calendar/widget/mixin/CalendarMixin#config-eventHeight\">eventHeight</a> in case it was configured as a\nCSS measurement in other units.</p>",
          "scope": "instance"
        },
        {
          "name": "visibleCellSelector",
          "description": "<p>This property yields the base selector to use to find visible cell elements in this view.</p>\n<p>It's based upon the <a href=\"#Calendar/widget/mixin/CalendarMixin#property-dayCellCls\">dayCellCls</a>, but also takes into account the\n<a href=\"#Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays\">hideNonWorkingDays</a> setting.</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "activeView",
          "access": "internal",
          "description": "<p>This property yields this widget. This is to enable Calendar Features to be able to attach\nto standalone Calendar widgets as their owning client, and to access a currently active view\nin a standard way.</p>",
          "type": "Calendar.widget.mixin.CalendarMixin",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "eachView",
          "access": "internal",
          "description": "<p>This function allows a Calendar widget to act as a Feature host by exposing the same interface\nas a <a href=\"#Calendar/view/Calendar\">Calendar</a>. It executes the passed function on this widget.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "args",
              "type": "Array.<Object>",
              "description": "<p>The arguments to pass. Defaults to this view.</p>",
              "optional": true
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for the function. Defaults to this view.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "refresh",
          "description": "<p>Refreshes the UI after a change to the EventStore, or to a configuration that requires\nthe UI to change.</p>\n<p>Only updates the UI if this widget is visible. If it is not visible, the refresh is\ndeferred until it next becomes visible.</p>",
          "scope": "instance"
        },
        {
          "name": "scrollTo",
          "description": "<p>Brings an event or a time into view. Optionally visually highlights the target.</p>\n<p><strong>This may change the date range encompassed by this view to bring the date or event into its\nownership</strong>.</p>\n<p>Scrolling may or may not be required, depending on the type and size constraints of the view.</p>",
          "parameters": [
            {
              "name": "target",
              "type": [
                "Scheduler.model.EventModel",
                "Date"
              ],
              "description": "<p>The event or Date to scroll to.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the target: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the target to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": [
                "Boolean",
                "function"
              ],
              "description": "<p>Set to <code>true</code> to highlight the resulting element\nwhen it is in view. May be a function which is called passing the resulting element\nto provide customized highlighting.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.x",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>X</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.y",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>Y</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the target has been scrolled into view.</p>"
          }
        },
        {
          "name": "createEvent",
          "description": "<p>Creates an event on the specified date which conforms to this view's <a href=\"#Calendar/widget/mixin/CalendarMixin#config-autoCreate\">autoCreate</a>\nsetting.</p>\n<p>This method may be called programmatically by application code if the <code>autoCreate</code> setting\nis <code>false</code>, in which case the default values for <code>autoCreate</code> will be used.</p>\n<p>If the <a href=\"#Calendar/feature/EventEdit\">EventEdit</a> feature is active, the new event\nwill be displayed in the event editor.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to add the event at. If there's no time component, the\n<a href=\"#Calendar/widget/mixin/CalendarMixin#config-autoCreate\">autoCreate</a>'s <code>startHour</code> will be used.</p>"
            }
          ],
          "scope": "instance",
          "async": true
        },
        {
          "name": "refreshSoon",
          "description": "<p>Schedules a refresh of the UI for the next animation frame. This is a useful method to call when\nmaking multiple data changes, so that each change merely <em>schedules</em> a refresh for the next AF and\nDOM churn is kept to a minimum.</p>\n<p>Calling <a href=\"#Calendar/widget/mixin/CalendarMixin#function-refresh\">refresh</a> directly cancels any scheduled refresh operation and updates\nthe UI immediately</p>",
          "scope": "instance"
        },
        {
          "name": "onEventCreated",
          "description": "<p>Called when new event is created.\nСan be overridden to supply default record values etc.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Newly created event</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getEventRecord",
          "description": "<p>Returns the event record for a DOM element or DOM event.</p>",
          "parameters": [
            {
              "name": "elementOrEvent",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The DOM node to lookup, or a DOM event whose target to lookup.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.EventModel",
            "description": "<p>The event record</p>"
          }
        },
        {
          "name": "resolveEventRecord",
          "description": "<p>Returns the event record for a DOM element or DOM event.</p>",
          "parameters": [
            {
              "name": "elementOrEvent",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The DOM node to lookup, or a DOM event whose target to lookup.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.EventModel",
            "description": "<p>The event record</p>"
          }
        },
        {
          "name": "getDayElement",
          "description": "<p>Returns the cell associated with the passed date.</p>\n<p>In certain views, the strict definition if whether the view owns the date may be optionally enforced.</p>\n<p>For example, in a YearView or MonthView, dates outside the configured year or month may be displayed.</p>\n<p>To exclude these, pass the <code>strict</code> parameter as <code>true</code></p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "String"
              ],
              "description": "<p>The date to find the element for or a key in the format <code>YYYY-MM-DD</code></p>"
            },
            {
              "name": "strict",
              "type": "Boolean",
              "description": "<p>Only return the element if this view <em>owns</em> the date. (MonthView and YearView)</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getEventElement",
          "description": "<p>Returns the outermost element which represents the first block of the passed event in the view. <em>If the\nevent is represented within the view</em>.</p>\n<p><em>Note</em> if the event covers multiple weeks, this will only return the first element.</p>\n<p>To return all elements use <a href=\"#Calendar/widget/mixin/CalendarMixin#function-getEventElements\">getEventElements</a>.</p>\n<p>To return an event element at a particular date, pass the date as the second parameter.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ],
              "description": "<p>The event, or event ID to find the element for.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Optionally, the event element at the specified date.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>The first element which corresponds to the event. Note that <em>some</em> views,\nsuch as <a href=\"#Calendar/widget/MonthView\">MonthView</a> and <a href=\"#Calendar/widget/CalendarRow\">CalendarRow</a>\nmay render multiple elements for long events.</p>"
          }
        },
        {
          "name": "getEventElements",
          "description": "<p>Returns all outermost elements which represents the passed event in the view. <em>If the\nevent is represented within the view</em></p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ],
              "description": "<p>The event, or event ID to find the elements for.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<HTMLElement>",
            "description": "<p>The elements which corresponds to the event. Note that <em>some</em> views,\nsuch as <a href=\"#Calendar/widget/MonthView\">MonthView</a> and <a href=\"#Calendar/widget/CalendarRow\">CalendarRow</a>\nmay render multiple elements for long events.</p>"
          }
        },
        {
          "name": "calendarHitTest",
          "description": "<p>Determines what is under the cursor of the specified event or what is described by the given element.</p>",
          "parameters": [
            {
              "name": "domEvent",
              "type": [
                "Event",
                "Element"
              ],
              "description": "<p>The event or element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Calendar.view.Calendar#CalendarHit"
          }
        }
      ]
    },
    {
      "name": "DayCellCollecter",
      "modulePath": "Calendar/widget/mixin/DayCellCollecter",
      "description": "<p>Mixin that provides the ability to collect <a href=\"#Calendar/widget/mixin/DayCellCollecter#typedef-DayCell\">day cell</a> data containing the events\nof interest to a Calendar widget.</p>\n<p>This is used by all implemented Calendar widgets Except <a href=\"#Calendar/widget/AgendaView\">AgendaView</a>\nwhich creates its cellMap from the events it finds in the eventStore.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "DayCellCollecter.js",
      "path": "/Calendar/lib/Calendar/widget/mixin",
      "typedefs": [
        {
          "name": "DayCell",
          "description": "<p>A data block created by all <a href=\"#Calendar/widget/mixin/DayCellCollecter\">DayCellCollecter</a> Calendar views to\nencapsulate occupied day cells and the events which intersect with each date to be shown in the UI.\nAll useful data about the date and the shape of the UI is included.</p>",
          "properties": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date of the cell.</p>"
            },
            {
              "name": "key",
              "type": "String",
              "description": "<p>a <code>YYYY-MM-DD</code> formatted date key for the cell.</p>"
            },
            {
              "name": "cellIndex",
              "type": "Number",
              "description": "<p>The overall cell index in the cell-based UI being created.</p>"
            },
            {
              "name": "day",
              "type": "Number",
              "description": "<p>The day of week for the cell: 0=Sunday, 6=Saturday</p>"
            },
            {
              "name": "columnIndex",
              "type": "Number",
              "description": "<p>The column index in the cell-based UI being created.</p>"
            },
            {
              "name": "visibleColumnIndex",
              "type": "Number",
              "description": "<p>The visible column index (eg 0 for a Monday if Sunday is the week start day, but was hidden)</p>"
            },
            {
              "name": "isNonWorking",
              "type": "Boolean",
              "description": "<p><code>true</code> if the owning view considers the date a non-working day.</p>"
            },
            {
              "name": "week",
              "type": "Array.<Number>",
              "description": "<p>The <code>[year, week]</code> encapsulating the cell.</p>"
            },
            {
              "name": "isOtherMonth",
              "type": "Boolean",
              "description": "<p>The cell is outside the view's primary time range. Only significant\nwhen used by a CalendarPanel which encapsulates a single month.</p>"
            },
            {
              "name": "visible",
              "type": "Boolean",
              "description": "<p><code>true</code> if the date cell is not for a hidden day.</p>"
            },
            {
              "name": "tomorrow",
              "type": "Date",
              "description": "<p>The date of the following cell.</p>"
            },
            {
              "name": "isRowStart",
              "type": "Boolean",
              "description": "<p><code>true</code> if the cell is at the start of a visible row.</p>"
            },
            {
              "name": "isRowEnd",
              "type": "Boolean",
              "description": "<p><code>true</code> if the cell is at the end of a visible row.</p>"
            },
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The events which are to be shown for this date.</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "eventFilter",
          "description": "<p>A function to filter which events are collected into the day cell data blocks.\nReturn <code>true</code> to include the passed event, or a <em>falsy</em> value to exclude the event.</p>",
          "type": "function",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "calculatePropagateEndDate",
          "access": "internal",
          "description": "<p>Calculates the end date (EXCLUSIVE) to which an event must be propagated based upon the\nevent's data in order to create a day-spanning event bar.</p>\n<p>If an event overflows into 2011-01-02T01:00, then the exclusive propagateEndDate\nis 2011-01-03T00:00:00 so the event will be propagated into 2011-01-02.</p>\n<p>But if an event ends on 2011-01-02T00:00:00, its propagateEndDate will be 2011-01-02T00:00:00\nso it will be propagated as far as 2011-01-01</p>\n<p>This may be overridden in subclasses to customize how events are propagated forwards.</p>\n<p>example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class OvernightEventMonthView extends MonthView {\n    static get name() {\n        return 'OvernightEventMonthView';\n    }\n\n    static get type() {\n        return 'overnighteventmonthview';\n    }\n\n    calculatePropagateEndDate(eventData) {\n        // If the event only spills into the next day but not further\n        // then we do not want an extended event bar.\n        // It will still get an arrow indicating that it continues rightwards.\n        if (eventData.eventEndDate &lt; DateHelper.add(eventData.date, 1, 'd')) {\n            return DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n        }\n        // Default case, propagate event into the future as usual\n        return super.calculatePropagateEndDate(eventData);\n    }\n}\n// Register the type name\nOvernightEventMonthView.initClass();\n\nnew Calendar({\n    modes : {\n        // Use our MonthView subclass as the month mode.\n        month : {\n            type :'overnighteventmonthview'\n        }\n    }\n})\n</code></pre>\n<p>Note that this is implemented by both <a href=\"#Calendar/widget/MonthView\">MonthView</a> and {Calendar.widget.CalendarRow}\nwhich is the &quot;all day&quot; row in a week or day view.</p>",
          "parameters": [
            {
              "name": "eventData",
              "type": "Object",
              "description": "<p>A data block describing the time context of an event.</p>"
            },
            {
              "name": "eventData.eventEndDate",
              "type": "Date",
              "description": "<p>The end date for which to calculate the propagate end date.</p>",
              "isSubParam": true
            },
            {
              "name": "eventData.isAllDay",
              "type": "Boolean",
              "description": "<p><code>true</code> if the event is an all day event, or spans multiple days.</p>",
              "isSubParam": true
            },
            {
              "name": "eventData.isOverflow",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is being called as part of further propagation.</p>",
              "isSubParam": true
            },
            {
              "name": "eventData.overflows",
              "type": "Boolean",
              "description": "<p><code>true</code> if the event extends into future cells.</p>",
              "isSubParam": true
            },
            {
              "name": "eventData.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record being propagated.</p>",
              "isSubParam": true
            },
            {
              "name": "eventData.date",
              "type": "Date",
              "description": "<p>The date from which the event is being propagated.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Date",
            "description": "<p>The date (as a timepoint, <em>not</em> a reference to a 24 hour time block)\nto which the event bar should be propagated</p>"
          }
        },
        {
          "name": "sortEvents",
          "access": "internal",
          "description": "<p>Sort the given array of <code>events</code> in the desired order for this view.</p>",
          "parameters": [
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "eventPropagate",
          "description": "<p>Fires when a day spanning event is found, and the date to which its encapsulating event bar\nextends has been calculated.</p>\n<p>The default result in the event's <code>propagateEndDate</code> property may be mutated by a listener.</p>\n<p>Note that this is an ending point in time, it does <em>not</em> refer to a 24 hour block. So setting\nthe <code>propagateEndDate</code> to <code>new Date(2022, 1, 10)</code> means that the event bar will occupy cells\nup to and including February 9 2022 and no further.</p>\n<p>This is relayed through the owning <a href=\"#Calendar/view/Calendar\">Calendar</a>, so a single listener\nmay be used, for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Calendar({\n    listeners : {\n        eventPropagate(eventData) {\n            // If the event only spills into the next day but not further\n            // then we do not want an extended event bar.\n            // An arrow will indicate that it continues rightwards.\n            if (eventData.eventEndDate &lt; DateHelper.add(eventData.date, 2, 'd')) {\n                eventData.propagateEndDate = DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n            }\n        }\n    }\n})\n</code></pre>",
          "parameters": [
            {
              "name": "eventEndDate",
              "type": "Date",
              "description": "<p>The end date for which to calculate the propagate end date.</p>"
            },
            {
              "name": "propagateEndDate",
              "type": "Date",
              "description": "<p>The system-calculated end point of the event bar.</p>"
            },
            {
              "name": "isAllDay",
              "type": "Boolean",
              "description": "<p><code>true</code> if the event is an all day event, or spans multiple days.</p>"
            },
            {
              "name": "isOverflow",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is being called as part of further propagation.</p>"
            },
            {
              "name": "overflows",
              "type": "Boolean",
              "description": "<p><code>true</code> if the event extends into future cells.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record being propagated.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date from which the event is being propagated.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "DayCellRenderer",
      "modulePath": "Calendar/widget/mixin/DayCellRenderer",
      "description": "<p>Mixin that provides the ability to render a calendar cell.</p>\n<p>This is used by the MonthView and also CalendarRow. It expects its\nhost class to include the <a href=\"#Calendar/widget/mixin/CalendarMixin\">CalendarMixin</a> mixin.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "DayCellRenderer.js",
      "path": "/Calendar/lib/Calendar/widget/mixin",
      "configs": [
        {
          "name": "dayCellRenderer",
          "description": "<p>This may be specified to create the content for the date and day name section of calendar cells.</p>\n<p>This function is called for each cell rendered. It can return an HTML string which will become the\ncontent of the header section of the cell above any events.</p>\n<p>It can also return a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> element creation object (or array of\nsame) to specify content to create in the header section of the cell.</p>\n<p>It also allows developers to mutate the cell metadata, or the CSS classes to be applied to the cell.</p>\n<p>The <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> definition passed as the first parameter may be\nmutated to create a different cell header.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dayCellRenderer : function(cellData, dayCellDomConfig) {\n    // I don't like Mondays!\n    if (cellData.day === 1) {\n        dayCellDomConfig.className['hackathon-dayoff'] = true;\n        dayCellDomConfig.style.fontWeight = 'bold';\n\n        cellData.isNonWorking = true;\n\n        return `${cellData.date.getDate()} Day off yay!`;\n    }\n}\n</code></pre>\n<p>A non-null return value from the renderer is used as the content of the day number element.</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": [
              "String",
              "Object",
              "Array.<Object>"
            ],
            "description": "<p>The definition of the cell header content.</p>"
          },
          "parameters": [
            {
              "name": "dayCellRenderer.cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object that contains data about the cell.</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellDomConfig",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>An object to sync the day cell element.</p>"
            },
            {
              "name": "dayCellDomConfig.className",
              "type": "Object",
              "description": "<p>An object who's truthy property names will be applied as class\nnames.</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellDomConfig.style",
              "type": "Object",
              "description": "<p>A CSS style defintion object.</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellDomConfig.dataset",
              "type": "Object",
              "description": "<p>The DOM data properties to set.</p>",
              "isSubParam": true
            },
            {
              "name": "dayCellDomConfig.children",
              "type": "Array.<Core.helper.DomHelper#DomConfig>",
              "description": "<p>The <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> definitions for the content of the\ncell.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "overflowPopup",
          "description": "<p>A config object used to create the <a href=\"#Calendar/widget/OverflowPopup\">OverflowPopup</a> that this view\nmay show when events for one day overflow the available space.</p>\n<p>For example</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    modes : {\n        month : {\n            overflowPopup : {\n                closable   : false,\n                dateFormat : 'dddd, MMM M',\n                eventRenderer({ eventRecord, renderData }) {\n                    if (calendarUtils.isImportantEvent(eventRecord)) {\n                        // Add CSS class to important events\n                        renderData.cls['b-important'] = 1;\n                    }\n                }\n            }\n        }\n    }\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "overflowPopupTrigger",
          "description": "<p>The pointer gesture which shows the popup containing any overflowing events\nin the current view.</p>\n<p>This means events which will not fit into a <code>MonthView</code> day cell, or <em>all</em> events\nfor a <code>YearView</code> cell.</p>\n<p>Useful values are <code>'click'</code> (the default), and <code>'mouseover'</code></p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "click"
        },
        {
          "name": "overflowButtonRenderer",
          "description": "<p>A function, or name of a function which is passed the <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object which\nwill be used to create the &quot;+n more&quot; button which indicates that a day cell has\noverflowing events.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>overflowButtonRenderer : function(domConfig) {\n    domConfig.className['b-fa'] = domConfig.className['b-fa-list'] = 1;\n    return domConfig;\n}\n</code></pre>\n<p>The result is used to create the overflow button element.</p>\n<p>To target the element using custom CSS, use the class name <code>b-cal-cell-overflow</code>.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "domConfig",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>A <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> config object which is used to\ncreate the overflow button.</p>"
            },
            {
              "name": "domConfig.tag",
              "type": "String",
              "description": "<p>The tag name of the element to create.</p>",
              "default": "button",
              "isSubParam": true
            },
            {
              "name": "domConfig.className",
              "type": "Object",
              "description": "<p>An object who's truthy property names will be applied as class names.</p>",
              "isSubParam": true
            },
            {
              "name": "domConfig.text",
              "type": "String",
              "description": "<p>The inner content of the element. <strong>Note that this\nwill be HTML encoded for XSS safety</strong></p>",
              "isSubParam": true
            },
            {
              "name": "domConfig.style",
              "type": "Object",
              "description": "<p>A CSS style defintion object.</p>",
              "isSubParam": true
            },
            {
              "name": "domConfig.dataset",
              "type": "Object",
              "description": "<p>The DOM data properties to set.</p>",
              "isSubParam": true
            },
            {
              "name": "overflowCount",
              "type": "Number",
              "description": "<p>The number of overflowing events.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "overflowPopup",
          "description": "<p>The <a href=\"#Calendar/widget/OverflowPopup\">OverflowPopup</a> instance that this view may show when events\nfor one day overflow the available space.</p>",
          "type": "Calendar.widget.OverflowPopup",
          "scope": "inner",
          "readonly": true
        }
      ],
      "events": [
        {
          "name": "showOverflowPopup",
          "description": "<p>Fired after an <a href=\"#Calendar/widget/OverflowPopup\">OverflowPopup</a> has been shown when an a\n&quot;+ n more&quot; overflow button is activated by an <a href=\"#Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger\">overflowPopupTrigger</a> event.</p>",
          "parameters": [
            {
              "name": "cell",
              "type": "HTMLElement",
              "description": "<p>The day cell for which the overflow popup is going to be shown.</p>"
            },
            {
              "name": "cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object that contains data about the cell.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date which has overflowing events</p>"
            },
            {
              "name": "overflowPopup",
              "type": "Calendar.widget.OverflowPopup",
              "description": "<p>The overflow <code>Popup</code>.</p>"
            }
          ]
        },
        {
          "name": "beforeShowOverflowPopup",
          "description": "<p>Fired before an <a href=\"#Calendar/widget/OverflowPopup\">OverflowPopup</a> is shown when an a\n&quot;+ n more&quot; overflow button is activated by an <a href=\"#Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger\">overflowPopupTrigger</a> event.</p>",
          "parameters": [
            {
              "name": "cell",
              "type": "HTMLElement",
              "description": "<p>The day cell for which the overflow popup is going to be shown.</p>"
            },
            {
              "name": "cellData",
              "type": "Calendar.widget.mixin.DayCellCollecter#DayCell",
              "description": "<p>An object that contains data about the cell.</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date which has overflowing events</p>"
            },
            {
              "name": "overflowPopup",
              "type": "Calendar.widget.OverflowPopup",
              "description": "<p>The overflow <code>Popup</code>.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "eventsPerCellChange",
          "access": "private",
          "description": "<p>Fires when number of events which could be placed in one cell is changed.\nHas place when the height of the Month view is changed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Calendar.widget.MonthView",
              "description": "<p>This <code>MonthView</code> instance.</p>"
            },
            {
              "name": "value",
              "type": "Number",
              "description": "<p>New number of events per cell.</p>"
            },
            {
              "name": "oldValue",
              "type": "Number",
              "description": "<p>Previous number of events per cell.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getEventsPerCell",
          "access": "internal",
          "description": "<p>Returns the number of complete event bars which will fit inside the referenced cell.</p>\n<p>The base implementation assumes all cells are the same height. In most views, most of the time,\nthis is true.</p>\n<p>It's only in MonthView when some rows are shrinkwrapped round their event content (meaning\neither expanded or contracted away from the 1/6 height default) that there may be a customized\neventsPerCell for a certain date. So only MonthView has an overriding implementation.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Base",
      "modulePath": "Core/Base",
      "classDescription": "<p>Base class for all configurable classes.</p>\n<p>Subclasses do not have to implement a constructor with its restriction of having to call super()\nbefore there is a <code>this</code> reference. Subclasses instead implement a <code>construct</code> method which is\ncalled by the <code>Base</code> constructor. This may call its <code>super</code> implementation at any time.</p>\n<p>The <code>Base</code> constructor applies all configs to properties of the new instance. The instance\nwill have been configured after the <code>super.construct(config)</code> is called.</p>\n<p>See the Class System documentation in the guides for more information.</p>",
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Base.js",
      "path": "/Calendar/lib/Core",
      "properties": [
        {
          "name": "declarable",
          "access": "internal",
          "description": "<p>A class property getter to add additional, special class properties.</p>\n<p>For example, a class adds a <code>declarable</code> class property like so:</p>\n<pre class=\"prettyprint source\"><code> class Something extends Base {\n     static get declarable() {\n         return ['extra'];\n     }\n\n     static setupExtra(cls, meta) {\n         // use cls.extra\n     }\n }\n</code></pre>\n<p>A derived class can then specify this property like so:</p>\n<pre class=\"prettyprint source\"><code> class Derived extends Something {\n     static get extra() {\n         // return extra information\n     }\n }\n</code></pre>\n<p>When the <code>Derived</code> class is initialized, the <code>setupExtra()</code> method is called and <code>Derived</code> is passed as the\nargument. It is also the <code>this</code> pointer, but the parameter is minifiable. The second argument passed is the\n<code>$meta</code> object for the class.</p>\n<p>Classes are initialized at the first occurrence of the following:</p>\n<ul>\n<li>An instance is created</li>\n<li>The class <code>$meta</code> property is accessed</li>\n</ul>",
          "type": "Array.<String>",
          "scope": "static",
          "category": "Configuration"
        },
        {
          "name": "configurable",
          "access": "internal",
          "description": "<p>A class property getter for the configuration properties of the class, which can be overridden by\nconfigurations passed at construction time.</p>\n<p>Unlike a normal <code>static</code> property, this property is only ever used for the class that defines it (as in,\n<code>hasOwnProperty</code>). It is retrieved for all classes in a class hierarchy, to gather their configs\nindividually and then combine them with those of derived classes.</p>\n<p>For example, a <code>Label</code> might declare a <code>text</code> config like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Label extends Base {\n     static get configurable() {\n         return {\n             text : null\n         };\n     }\n }\n</code></pre>\n<p>The <code>text</code> config is automatically inherited by classes derived from Label. By implementing\n<code>get configurable()</code>, derived classes can change the default value of inherited configs, or define new\nconfigs, or both.</p>\n<p>When a config property is declared in this way, the class author can also implement either of two\nspecial methods that will be called when the config property is assigned a new value:</p>\n<ul>\n<li><code>changeText()</code></li>\n<li><code>updateText()</code></li>\n</ul>\n<p>In the example above, the <code>Label</code> class could implement a <code>changeText()</code> method, an <code>updateText()</code>\nmethod, or both. The generated property setter ensures these methods will be called when the <code>text</code>\nproperty is assigned.</p>\n<p>The generated setter (for <code>text</code> in this example) performs the following steps:</p>\n<ul>\n<li>If the class defines a <code>changeText()</code> method, call it passing the new value and the current value:\n<code>changeText(newText, oldText)</code>.<br>\nThen:\n<ul>\n<li>If <code>changeText()</code> exits without returning a value (i.e., <code>undefined</code>), exit and do nothing\nfurther. The assumption is that the changer method has done all that is required.</li>\n<li>Otherwise, the return value of <code>changeText()</code> replaces the incoming value passed to the setter.</li>\n</ul>\n</li>\n<li>If the new value (or the value returned by <code>changeText()</code>) is <code>!==</code> to the current value:\n<ul>\n<li>Update the stored config value in <code>this._text</code>.</li>\n<li>If the class defines an <code>updateText()</code> method, call it passing the new value and the previous value.\n<code>updateText(newText, oldText)</code></li>\n</ul>\n</li>\n</ul>\n<h4>Resolving a value from an owner</h4>\n<p>By specifying a value starting with <code>'up.'</code> for a config, the config system will resolve that value by\nexamining the ownership hierarchy. It will walk up the hierarchy looking for a property matching the name\n(or dot separated path) after 'up.'. If one is found, the value will be read and used as the initial\nvalue.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Parent extends Base {\n    static get configurable() {\n        return [\n          'importantValue'\n        ]\n    }\n}\n\nclass Child extends Base {\n    static get configurable() {\n        return [\n          'value'\n        ]\n    }\n}\n\nconst parent = new Parent({\n    importantValue : 123\n});\n\nconst child = new Child({\n    owner : parent,\n    // Will be resolved from the owner\n    value : 'up.importantValue'\n});\n\nconsole.log(child.value); // logs 123\n</code></pre>\n<p>Please note that this is for now a one way one time binding, the value will only be read initially and\nnot kept up to date on later changes.</p>\n<h4>Value Merging</h4>\n<p>When a config property value is an object, the value declared by the base class is merged with values\ndeclared by derived classes and the value passed to the constructor.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Example extends Base {\n     static get configurable() {\n         return {\n             config : {\n                 foo : 1,\n                 bar : 2\n             }\n         };\n     }\n }\n\n class Example2 extends Example {\n     static get configurable() {\n         return {\n             config : {\n                 bar : 42,\n                 zip : 'abc'\n             }\n         };\n     }\n }\n\n let ex = new Example2({\n     config : {\n         zip : 'xyz'\n     }\n });\n</code></pre>\n<p>The result of the merge would set <code>config</code> to:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> ex.foo = {\n     foo : 1,    // from Example\n     bar : 42,   // from Example2\n     zip : 'xyz' // from constructor\n }\n</code></pre>\n<h4>Config Options</h4>\n<p>Some config properties require additional options such as declarative information about the config that\nmay be useful to automate some operation. Consider a <code>Button</code>. It could declare that its <code>text</code> config\naffects the rendered HTML by applying a <code>render</code> property to the config definition. Its base class could\nthen examine the config definition to find this property.</p>\n<p>To support this, config options ca be declared like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     static get configurable() {\n         return {\n             text : {\n                 value   : null,\n                 $config : {\n                     render : true\n                 }\n             }\n         };\n     }\n }\n</code></pre>\n<p>The <code>$config</code> property can alternatively be just the names of the options that should be enabled (set\nto <code>true</code>).</p>\n<p>For example, the following is equivalent to the above:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     static get configurable() {\n         return {\n             text : {\n                 value   : null,\n                 $config : 'render'\n             }\n         };\n }\n</code></pre>\n<h4>Default Value</h4>\n<p>It is common to set a config to a <code>null</code> value to take advantage of internal optimizations for <code>null</code>\nvalues. In most cases the fact that this produces <code>undefined</code> as the actual initial value of the config\nis acceptable. When this is not acceptable, a config can be declared like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Widget {\n     static get configurable() {\n         return {\n             disabled : {\n                 $config : null,\n                 value   : null,\n                 default : false\n             }\n         };\n }\n</code></pre>\n<p>The <code>default</code> property above determines the value of the config while still gaining the benefits of\nminimal processing due to the <code>null</code> value of the <code>value</code> property.</p>",
          "type": "Object",
          "scope": "static",
          "category": "Configuration"
        },
        {
          "name": "defaultConfig",
          "access": "internal",
          "description": "<p>A class property getter for the default configuration of the class, which can be overridden by\nconfigurations passed at construction time.</p>\n<p>Unlike a normal <code>static</code> property, this property is only ever used for the class that defines it (as in,\n<code>hasOwnProperty</code>). It is retrieved for all classes in a class hierarchy, to gather their configs\nindividually and then combine them with those of derived classes.</p>\n<p>For example, a <code>Store</code> might declare its <code>url</code> config like so:</p>\n<pre class=\"prettyprint source\"><code> class Store extends Base {\n     static get defaultConfig() {\n         return {\n             url : null\n         };\n     }\n }\n</code></pre>\n<p>The <code>url</code> config is automatically inherited by classes derived from Store. By implementing\n<code>get defaultConfig()</code>, derived classes can change the default value of inherited configs, or define new\nconfigs, or both. When defining new configs, however, <code>configurable</code> is preferred.</p>\n<p>Config properties introduced to a class by this declaration do not participate in value merging and do\nnot get a generated setter. Config properties introduced by a base class using <code>configurable</code> can be\nset to a different value using <code>defaultConfig</code> and in doing so, the values will be merged as appropriate\nfor <code>configurable</code>.</p>",
          "type": "Object",
          "scope": "static",
          "category": "Configuration"
        },
        {
          "name": "properties",
          "access": "internal",
          "description": "<p>A class property getter for the default values of internal properties for this class.</p>",
          "type": "Object",
          "scope": "static",
          "category": "Configuration"
        },
        {
          "name": "config",
          "description": "<p>Returns a <em>copy</em> of the full configuration which was used to configure this object.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Lifecycle"
        },
        {
          "name": "$meta",
          "access": "internal",
          "description": "<p>The class's <a href=\"#Core/Base#property-$meta-static\">meta</a> object.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "$meta",
          "access": "internal",
          "description": "<p>An object owned by this class that does not share properties with its super class.</p>\n<p>This object may contain other properties which are added as needed and are not documented here.</p>",
          "scope": "static",
          "category": "Misc",
          "properties": [
            {
              "name": "$meta",
              "type": "Object",
              "description": "<p>The class meta object.</p>"
            },
            {
              "name": "$meta.class",
              "type": "function",
              "description": "<p>The class constructor that owns the meta object.</p>",
              "isSubParam": true
            },
            {
              "name": "$meta.super",
              "type": "Object",
              "description": "<p>The <code>$meta</code> object for the super class. This is <code>null</code> for <code>Base</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "$meta.config",
              "type": "Object",
              "description": "<p>The object holding the default configuration values for this class.</p>",
              "isSubParam": true
            },
            {
              "name": "$meta.configs",
              "type": "Object",
              "description": "<p>An object keyed by config name that holds the defined configs for the class.\nThe value of each property is a <a href=\"#Core/Config\">Config</a> instance.</p>",
              "isSubParam": true
            },
            {
              "name": "$meta.forkConfigs",
              "type": "Boolean",
              "description": "<p>This will be <code>true</code> if the default configuration values for this class\n(in the <code>config</code> property of the meta object) must be forked to avoid object sharing, or if the object can be\npassed to <code>Object.create()</code> for efficiency.</p>",
              "isSubParam": true
            },
            {
              "name": "$meta.hierarchy",
              "type": "Array.<function()>",
              "description": "<p>The array of classes in the ancestry of this class. This will start with\n<code>Base</code> at index 0 and ends with this class.</p>",
              "isSubParam": true
            },
            {
              "name": "$meta.properties",
              "type": "Array.<function()>",
              "description": "<p>The array of classes that define a &quot;static get properties()&quot; getter.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "isConstructing",
          "description": "<p>This property is set to <code>true</code> before the <code>constructor</code> returns.</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true,
          "category": "Lifecycle"
        },
        {
          "name": "isDestroyed",
          "description": "<p>This property is set to <code>true</code> by <a href=\"#Core/Base#function-destroy\">destroy</a> after the <a href=\"#Core/Base#function-doDestroy\">doDestroy</a> method returns.\nIt is also one of the few properties that remains on the object after returning from <code>destroy()</code>. This property\nis often checked in code paths that may encounter a destroyed object (like some event handlers) or in the\ndestruction path during cleanup.</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true,
          "category": "Lifecycle"
        },
        {
          "name": "isDestroying",
          "description": "<p>This property is set to <code>true</code> on entry to the <a href=\"#Core/Base#function-destroy\">destroy</a> method. It remains on the objects after\nreturning from <code>destroy()</code>. If <a href=\"#Core/Base#property-isDestroyed\">isDestroyed</a> is <code>true</code>, this property will also be <code>true</code>, so\nthere is no need to test for both (for example, <code>comp.isDestroying || comp.isDestroyed</code>).</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true,
          "category": "Lifecycle"
        }
      ],
      "functions": [
        {
          "name": "constructor",
          "description": "<p>Base constructor, passes arguments to <a href=\"#Core/Base#function-construct\">construct</a>.</p>",
          "parameters": [
            {
              "name": "args",
              "type": "Object",
              "description": "<p>Usually called with a config object, but accepts any params</p>",
              "optional": true,
              "isRestParam": true
            }
          ],
          "scope": "inner",
          "category": "Lifecycle"
        },
        {
          "name": "new",
          "access": "private",
          "description": "<p>Factory version of the Base constructor. Merges all arguments to create a config object that is passed along to\nthe constructor.</p>",
          "parameters": [
            {
              "name": "configs",
              "type": "Object",
              "description": "<p>Allows passing multiple config objects</p>",
              "optional": true,
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.Base",
            "description": "<p>New instance</p>"
          }
        },
        {
          "name": "construct",
          "description": "<p>Base implementation applies configuration.</p>\n<p>Subclasses need only implement this if they have to initialize instance specific\nproperties required by the class. Often a <code>construct</code> method is\nunnecessary. All initialization of incoming configuration properties can be\ndone in a <code>set propName</code> implementation.</p>",
          "parameters": [
            {
              "name": "args",
              "type": "Object",
              "description": "<p>Usually called with a config object, but accepts any params</p>",
              "optional": true,
              "isRestParam": true
            }
          ],
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "destroy",
          "description": "<p>Destroys the provided objects by calling their <a href=\"#Core/Base#function-destroy\">destroy</a> method.\nSkips empty values or objects that are already destroyed.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>Base.destroy(myButton, toolbar1, helloWorldMessageBox);\n</code></pre>",
          "parameters": [
            {
              "name": "args",
              "type": "Object",
              "description": "<p>Objects to be destroyed</p>",
              "optional": true,
              "isRestParam": true
            }
          ],
          "scope": "static",
          "category": "Lifecycle"
        },
        {
          "name": "destroy",
          "description": "<p>Destroys this object. This is primarily accomplished by calling <a href=\"#Core/Base#function-doDestroy\">doDestroy</a>, however, prior to\ncalling <code>doDestroy</code>, <a href=\"#Core/Base#property-isDestroying\">isDestroying</a> is set to <code>true</code>. After <a href=\"#Core/Base#function-doDestroy\">doDestroy</a> returns,\n<a href=\"#Core/Base#property-isDestroyed\">isDestroyed</a> is set to <code>true</code>.</p>\n<p>Do not override this method in subclasses. To provide class-specific cleanup, implement <a href=\"#Core/Base#function-doDestroy\">doDestroy</a>\ninstead.</p>",
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "_thisIsAUsedExpression",
          "access": "internal",
          "description": "<p>This method is required to help <code>unused</code> getters to survive production build process. Some tools, like angular,\nwill remove <code>unused</code> code in production build, making our side-effected getters behind, breaking code heavily.</p>",
          "parameters": [
            {
              "name": "getter",
              "description": "<p>Getter to evaluate</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "startConfigure",
          "access": "internal",
          "description": "<p>Base implementation so that all subclasses and mixins may safely call super.startConfigure.</p>\n<p>This is called by the Base class before setting configuration properties, but after\nthe active initial getters have been set, so all configurations are available.</p>\n<p>This method allows all classes in the hierarchy to force some configs to be evaluated before others.</p>",
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "finishConfigure",
          "access": "internal",
          "description": "<p>Base implementation so that all subclasses and mixins may safely call super.finishConfigure.</p>\n<p>This is called by the Base class before exiting the <a href=\"#Core/Base#function-configure\">configure</a> method.</p>\n<p>At this point, all configs have been applied, but the <code>isConfiguring</code> property is still set.</p>\n<p>This method allows all classes in the hierarchy to inject functionality\ninto the config phase.</p>",
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "afterConfigure",
          "access": "internal",
          "description": "<p>Base implementation so that all subclasses and mixins may safely call <code>super.afterConfigure</code>. This is called by the Base class after the <a href=\"#Core/Base#function-configure\">configure</a> method has been\ncalled. At this point, all configs have been applied.</p>\n<p>This method allows all classes in the hierarchy to inject functionality\neither before or after the super.afterConstruct();</p>",
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "afterConstructor",
          "access": "internal",
          "description": "<p>Base implementation so that all subclasses and mixins may safely call super.afterConstruct.</p>\n<p>This is called by the Base class after the <a href=\"#Core/Base#function-construct\">construct</a> method has been\ncalled.</p>\n<p>At this point, all configs have been applied.</p>\n<p>This method allows all classes in the hierarchy to inject functionality\neither before or after the super.afterConstruct();</p>",
          "scope": "inner",
          "category": "Lifecycle"
        },
        {
          "name": "callback",
          "description": "<p>Provides a way of calling callbacks which may have been specified as the <em>name</em> of a function\nand optionally adds scope resolution.</p>\n<p>For example, if the callback is specified as a string, then if it is prefixed with <code>'this.'</code>\nthen the function is resolved in this object. This is useful when configuring listeners\nat the class level.</p>\n<p>If the callback name is prefixed with <code>'up.'</code> then the ownership hierarchy is queried\nusing the <code>owner</code> property until an object with the named function is present, then the\nnamed function is called upon that object.</p>\n<p>If a named function is not found, an error is thrown. If the function should be only called when present,\nand may not be present, add a <code>?</code> as a suffix.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The function to call, or the name of the function to call.</p>"
            },
            {
              "name": "thisObject",
              "type": "Object",
              "description": "<p>The <code>this</code> object of the function.</p>"
            },
            {
              "name": "args",
              "type": "Array.<Object>",
              "description": "<p>The argument list to pass.</p>"
            }
          ],
          "scope": "instance",
          "category": "Misc"
        },
        {
          "name": "resolveCallback",
          "description": "<p>Provides a way of locating callbacks which may have been specified as the <em>name</em> of a function\nand optionally adds scope resolution.</p>\n<p>For example, if the callback is specified as a string, then if it is prefixed with <code>'this.'</code>\nthen the function is resolved in this object. This is useful when configuring listeners\nat the class level.</p>\n<p>If the callback name is prefixed with <code>'up.'</code> then the ownership hierarchy is queried\nusing the <code>owner</code> property until an object with the named function is present, then the\nnamed function is called upon that object.</p>",
          "parameters": [
            {
              "name": "handler",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The function to call, or the name of the function to call.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> object of the function.</p>"
            },
            {
              "name": "enforceCallability",
              "type": "Boolean",
              "description": "<p>Pass <code>false</code> if the function may not exist, and a null return value is acceptable.</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Misc",
          "returns": {
            "type": "Object",
            "description": "<p><code>{ handler, thisObj }</code></p>"
          }
        },
        {
          "name": "delay",
          "access": "private",
          "description": "<p>Delays the execution of the passed function by the passed time quantum, or if the time is omitted\nor not a number, delays until the next animation frame. Note that this will use\n<a href=\"#Core/mixin/Delayable#function-setTimeout\">setTimeout</a> || <a href=\"#Core/mixin/Delayable#function-requestAnimationFrame\">requestAnimationFrame</a>\nif this class mixes in <code>Delayable</code>, otherwise it uses the global methods. The function will\nbe called using <code>this</code> object as its execution scope.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call on a delay.</p>"
            },
            {
              "name": "delay",
              "type": "Number",
              "description": "<p>The number of milliseconds to delay.</p>",
              "optional": true
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of delay</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>The created timeout id.</p>"
          }
        },
        {
          "name": "doDestroy",
          "description": "<p>Classes implement this method to provide custom cleanup logic before calling <code>super.doDestroy()</code>. The general\npattern is as follows:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Foo extends Base {\n     doDestroy() {\n         // perform custom cleanup\n\n         super.doDestroy();\n     }\n }\n</code></pre>\n<p>This method is called by <a href=\"#Core/Base#function-destroy\">destroy</a> which also prevents multiple calls from reaching <code>doDestroy</code>.\nPrior to calling <code>doDestroy</code>, <a href=\"#Core/Base#property-isDestroying\">isDestroying</a> is set to <code>true</code>. Upon return, the object is fully\ndestructed and <a href=\"#Core/Base#property-isDestroyed\">isDestroyed</a> is set to <code>true</code>.</p>\n<p>Do not call this method directly. Instead call <a href=\"#Core/Base#function-destroy\">destroy</a>.</p>",
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "destroyProperties",
          "access": "internal",
          "description": "<p>Destroys the named properties if they have been initialized, and if they have a <code>destroy</code> method.\nDeletes the property from this object. For example:</p>\n<pre><code> this.destroyProperties('store', 'resourceStore', 'eventStore', 'dependencyStore', 'assignmentStore');\n</code></pre>",
          "parameters": [
            {
              "name": "properties",
              "type": "String",
              "description": "<p>The names of the properties to destroy.</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "configure",
          "access": "private",
          "description": "<p>Called by the Base constructor to apply configs to this instance. This must not be called.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The configuration object from which instance properties are initialized.</p>"
            }
          ],
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "getConfig",
          "access": "internal",
          "description": "<p>Returns the value of the specified config property. This is a method to allow\nproperty getters to be explicitly called in a way that does not get optimized out.</p>\n<p>The following triggers the getter call, but optimizers will remove it:</p>\n<pre><code> inst.foo;   // also raises &quot;expression has no side-effects&quot; warning\n</code></pre>\n<p>Instead, do the following to trigger a getter:</p>\n<pre><code> inst.getConfig('foo');\n</code></pre>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "scope": "instance",
          "category": "Configuration"
        },
        {
          "name": "setConfig",
          "description": "<p>Sets configuration options this object with all the properties passed in the parameter object.\nTiming is taken care of. If the setter of one config is called first, and references\nthe value of another config which has not yet been set, that config will be set just\nin time, and the <em>new</em> value will be used.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>An object containing configurations to change.</p>"
            }
          ],
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "hasConfig",
          "access": "internal",
          "description": "<p>Returns <code>true</code> if this instance has a non-null value for the specified config. This will not activate a lazy\nconfig.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the config property.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "peekConfig",
          "access": "internal",
          "description": "<p>Returns the value of an uningested config <em>without</em> ingesting the config or transforming\nit from its raw value using its <code>changeXxxxx</code> method.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the config property.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*",
            "description": "<p>The raw incoming config value.</p>"
          }
        },
        {
          "name": "triggerConfig",
          "access": "internal",
          "description": "<p>Ensures that the specified config is initialized if it is needed. If there is a config value specified, and it\nwas initialized by this call, this method returns <code>true</code>. If there was a config value specified, and it was\nalready initialized, this method returns <code>false</code>. If there was no value specified for the given config, this\nmethod returns <code>null</code>.</p>\n<p>This is different than just reading the property because some property getters exist that do not actually just\nread the config value back, but instead produce some result. Reading such properties to incidentally trigger a\npossible config initializer can lead to incorrect results. For example, the Combo items config.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the config property.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "onConfigChange",
          "access": "internal",
          "description": "<p>This method is called when any config changes.</p>",
          "parameters": [
            {
              "name": "info",
              "type": "Object",
              "description": "<p>Object containing information regarding the config change.</p>"
            },
            {
              "name": "info.name",
              "type": "String",
              "description": "<p>The name of the config that changed.</p>",
              "isSubParam": true
            },
            {
              "name": "info.value",
              "type": "*",
              "description": "<p>The new value of the config.</p>",
              "isSubParam": true
            },
            {
              "name": "info.was",
              "type": "*",
              "description": "<p>The previous value of the config.</p>",
              "isSubParam": true
            },
            {
              "name": "info.config",
              "type": "Core.Config",
              "description": "<p>The <code>Config</code> object for the changed config property.</p>",
              "isSubParam": true
            }
          ],
          "scope": "inner",
          "category": "Configuration"
        },
        {
          "name": "downloadTestCase",
          "description": "<p>Experimental helper function, extracts the currently used configs and wraps them as an app, downloading the\nresulting JS file.</p>\n<p>This function is intended to simplify creating test cases for issue reporting on Bryntum's support forum.</p>",
          "scope": "instance"
        },
        {
          "name": "initClass",
          "description": "<p>Registers this class type with its Factory</p>",
          "scope": "static"
        },
        {
          "name": "onClassMixedIn",
          "access": "internal",
          "description": "<p>This optional class method is called when a class is mixed in using the <a href=\"#Core/Base#function-mixin-static\">mixin()</a>\nmethod.</p>",
          "scope": "static"
        },
        {
          "name": "mergeConfigs",
          "access": "internal",
          "description": "<p>Returns the merge of the <code>baseConfig</code> and <code>config</code> config objects based on the configs defined by this class.</p>",
          "parameters": [
            {
              "name": "baseConfig",
              "type": "Object",
              "description": "<p>The base config or defaults.</p>"
            },
            {
              "name": "configs",
              "type": "Object",
              "description": "<p>One or more config objects that takes priority over <code>baseConfig</code>.</p>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "mixin",
          "description": "<p>Applies one or more <code>mixins</code> to this class and returns the produced class constructor.</p>\n<p>For example, instead of writing this:</p>\n<pre class=\"prettyprint source\"><code> class A extends Delayable(Events(Localizable(Base))) {\n     // ...\n }\n</code></pre>\n<p>Using this method, one would write this:</p>\n<pre class=\"prettyprint source\"><code> class A extends Base.mixin(Localizable, Events, Delayable) {\n     // ...\n }\n</code></pre>\n<p>If one of the mixins specified has already been mixed into the class, it will be ignored and not mixed in a\nsecond time.</p>",
          "parameters": [
            {
              "name": "mixins",
              "type": "function",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function"
          }
        },
        {
          "name": "setupClass",
          "access": "internal",
          "description": "<p>This method is called only once for any class. This can occur when the first instance is created or when the\n<code>$meta</code> object is first requested.</p>",
          "parameters": [
            {
              "name": "meta",
              "type": "Object",
              "description": "<p>The <code>$meta</code> object for the class.</p>"
            }
          ],
          "scope": "static",
          "category": "Misc"
        },
        {
          "name": "setupConfigs",
          "access": "private",
          "description": "<p>This method is called as part of <code>setupClass()</code>. It will process the <code>configurable()</code> return object and the\n<code>defaultConfig</code> return object.</p>",
          "parameters": [
            {
              "name": "meta",
              "type": "Object",
              "description": "<p>The <code>meta</code> object for this class.</p>"
            },
            {
              "name": "configs",
              "type": "Object",
              "description": "<p>The config definition object.</p>"
            },
            {
              "name": "simple",
              "type": "Boolean",
              "description": "<p><code>true</code> when processing <code>defaultConfig</code> and <code>false</code> when processing <code>configurable</code>.</p>"
            }
          ],
          "scope": "static",
          "category": "Configuration"
        },
        {
          "name": "getDefaultConfiguration",
          "access": "private",
          "description": "<p>Gets the full <a href=\"#Core/Base#property-defaultConfig-static\">defaultConfig</a> block for this object's entire inheritance chain\nall the way up to but not including <a href=\"#Core/Base\">Base</a></p>",
          "scope": "instance",
          "category": "Configuration",
          "returns": {
            "type": "Object",
            "description": "<p>All default config values for this class.</p>"
          }
        },
        {
          "name": "getDefaultConfiguration",
          "access": "private",
          "description": "<p>Gets the full <a href=\"#Core/Base#property-defaultConfig-static\">defaultConfig</a> block for the entire inheritance chain for this class\nall the way up to but not including <a href=\"#Core/Base\">Base</a></p>",
          "scope": "static",
          "category": "Configuration",
          "returns": {
            "type": "Object",
            "description": "<p>All default config values for this class.</p>"
          }
        },
        {
          "name": "getProperties",
          "access": "private",
          "description": "<p>Gets the full <a href=\"#Core/Base#property-properties-static\">properties</a> block for this class's entire inheritance chain\nall the way up to but not including <a href=\"#Core/Base\">Base</a></p>",
          "scope": "instance",
          "category": "Configuration",
          "returns": {
            "type": "Object",
            "description": "<p>All default config values for this class.</p>"
          }
        },
        {
          "name": "classHierarchy",
          "access": "private",
          "description": "<p>Used by the Widget and GridFeatureManager class internally. Returns the class hierarchy of this object\nstarting from the <code>topClass</code> class (which defaults to <code>Base</code>).</p>\n<p>For example <code>classHierarchy(Widget)</code> on a Combo would yield <code>[Widget, Field, TextField, PickerField, Combo]</code></p>",
          "parameters": [
            {
              "name": "topClass",
              "type": "function",
              "description": "<p>The topmost class constructor to start from.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Configuration",
          "returns": {
            "type": "Array.<function()>",
            "description": "<p>The class hierarchy of this instance.</p>"
          }
        },
        {
          "name": "isOfTypeName",
          "description": "<p>Checks if an obj is of type using object's $$name property and doing string comparison of the property with the\ntype parameter.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "detachListeners",
          "description": "<p>Removes all event listeners that were registered with the given <code>name</code>.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the event listeners to be removed.</p>"
            }
          ],
          "scope": "instance",
          "category": "Events"
        },
        {
          "name": "trackDetacher",
          "access": "private",
          "description": "<p>Tracks a detacher function for the specified listener name.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name assigned to the associated listeners.</p>"
            },
            {
              "name": "detacher",
              "type": "function",
              "description": "<p>The detacher function.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "untrackDetachers",
          "access": "private",
          "description": "<p>Removes all detacher functions for the specified <code>Events</code> object. This is called\nby the <code>removeAllListeners</code> method on that object which is typically called by its\n<code>destroy</code> invocation.</p>",
          "parameters": [
            {
              "name": "eventer",
              "type": "Core.mixin.Events",
              "description": "<p>The <code>Events</code> instance to untrack.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Config",
      "modulePath": "Core/Config",
      "classDescription": "<p>This class holds the description of a config property. Only one instance of this class is needed for each config\nname (e.g., &quot;text&quot;). If config options are supplied, however, they also contribute to the cached instance.</p>\n<p>Instances should always be retrieved by calling <code>Config.get()</code>.</p>\n<p>The <strong>Configs</strong> of this class correspond to <code>options</code> that can be supplied to the <code>get()</code> method. These affect the\nbehavior of the config property in some way, as descried by their respective documentation.</p>\n<p>This class is not used directly.</p>\n<h2>The Setter</h2>\n<p>The primary functionality provided by <code>Config</code> is its standard setter. This setter function ensures consistent\nbehavior when modifying config properties.</p>\n<p>The standard setter algorithm is as follows (using the <code>'text'</code> config for illustration):</p>\n<ul>\n<li>If the class defines a <code>changeText()</code> method, call it passing the new value and the current value:\n<code>changeText(newText, oldText)</code>.<br>\nThen:\n<ul>\n<li>If <code>changeText()</code> exits without returning a value (i.e., <code>undefined</code>), exit and do nothing further. The\nassumption is that the changer method has done all that is required.</li>\n<li>Otherwise, the return value of <code>changeText()</code> replaces the incoming value passed to the setter.</li>\n</ul>\n</li>\n<li>If the new value (or the value returned by <code>changeText()</code>) is <code>!==</code> to the current value:\n<ul>\n<li>Update the stored config value in <code>this._text</code>.</li>\n<li>If the class defines an <code>updateText()</code> method, call it passing the new value and the previous value.\n<code>updateText(newText, oldText)</code></li>\n<li>If the class defines an <code>onConfigChange()</code> method, call it passing an object with the following properties:\n<ul>\n<li><code>name</code> - The config's name</li>\n<li><code>value</code> - The new value</li>\n<li><code>was</code> - The previous value</li>\n<li><code>config</code> - The <code>Config</code> instance.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>NOTE: unlike <code>changeText()</code> and <code>updateText()</code>, the name of the <code>onConfigChange()</code> method is unaffected by the\nconfig's name.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Config.js",
      "path": "/Calendar/lib/Core",
      "functions": [
        {
          "name": "get",
          "access": "internal",
          "description": "<p>Returns the <code>Config</code> instance for the given <code>name</code> and <code>options</code>.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the config (e.g., 'text' for the text config).</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Config behavior options.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.Config"
          }
        },
        {
          "name": "equal",
          "access": "internal",
          "description": "<p>This method compares two values for semantic equality. By default, this is based on the <code>===</code> operator. This\nis often overridden for configs that accept <code>Date</code> or array values.</p>",
          "parameters": [
            {
              "name": "value1",
              "type": "*"
            },
            {
              "name": "value2",
              "type": "*"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "extend",
          "access": "internal",
          "description": "<p>Extends this config with a given additional set of options. These objects are just prototype extensions of this\ninstance.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.Config"
          }
        },
        {
          "name": "define",
          "access": "internal",
          "description": "<p>Defines the property on a given target object via <code>Reflect.defineProperty()</code>. If the object has its own getter,\nit will be preserved. It is invalid to define a setter.</p>",
          "parameters": [
            {
              "name": "target",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "defineInitter",
          "access": "internal",
          "description": "<p>Defines the property initter on the <code>target</code>. This is a property getter/setter that propagates the configured\nvalue when the property is read.</p>",
          "parameters": [
            {
              "name": "target",
              "type": "Object"
            },
            {
              "name": "value",
              "type": "*"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "makeArrayEquals",
          "access": "private",
          "description": "<p>Returns an equality function for arrays of a base type, for example <code>'date'</code>.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to use to compare array elements. By default, operator <code>===</code> is used.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function"
          }
        },
        {
          "name": "makeCacheKey",
          "access": "private",
          "description": "<p>Returns the key to use in the Config <code>cache</code>.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the config property.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The config property options.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "makeDescriptor",
          "access": "private",
          "description": "<p>Creates and returns a property descriptor for this config suitable to be passed to <code>Reflect.defineProperty()</code>.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "makeInitter",
          "access": "private",
          "description": "<p>Creates and returns a property descriptor for this config's initter suitable to pass to\n<code>Reflect.defineProperty()</code>.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "removeInitter",
          "access": "private",
          "description": "<p>Removes the property initter and restores the instance to its original form.</p>",
          "parameters": [
            {
              "name": "instance",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "merge",
          "access": "internal",
          "description": "<p>This method combines (merges) two config values. This is called in two cases:</p>\n<ul>\n<li>When a derived class specifies the value of a config defined in a super class.</li>\n<li>When a value is specified in the instance config object.</li>\n</ul>",
          "parameters": [
            {
              "name": "newValue",
              "type": "*",
              "description": "<p>In the case of derived classes, this is the config value of the derived class. In the case\nof the instance config, this is the instance config value.</p>"
            },
            {
              "name": "currentValue",
              "type": "*",
              "description": "<p>In the case of derived classes, this is the config value of the super class. In the case\nof the instance config, this is the class config value.</p>"
            },
            {
              "name": "meta",
              "type": "Object",
              "description": "<p>The class meta object from which the <code>newValue</code> is coming. This parameter is <code>null</code> if the\n<code>newValue</code> is from an instance configuration.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*"
          }
        }
      ],
      "properties": [
        {
          "name": "descriptor",
          "access": "private",
          "description": "<p>The descriptor to use with <code>Reflect.defineProperty()</code> for defining this config's getter and setter.</p>",
          "type": "Object",
          "scope": "instance"
        },
        {
          "name": "initDescriptor",
          "access": "private",
          "description": "<p>The descriptor to use with <code>Reflect.defineProperty()</code> for defining this config's initter.</p>",
          "type": "Object",
          "scope": "instance"
        },
        {
          "name": "cache",
          "access": "private",
          "description": "<p>This object holds <code>Config</code> instances keyed by their name. For example:</p>\n<pre class=\"prettyprint source\"><code> Config.cache = {\n     disabled : Config.get('disabled'),\n     text     : Config.get('text'),\n     title    : Config.get('title')\n };\n</code></pre>",
          "type": "Object",
          "scope": "static"
        },
        {
          "name": "equalityMethods",
          "access": "private",
          "description": "<p>This object holds config value equality methods. By default, the <code>===</code> operator is used to compare config values for\nsemantic equality. When an <code>equal</code> option is specified as a string, that string is used as a key into this object.</p>\n<p>All equality methods in this object have the same signature as the <a href=\"#Core/Config#function-equal\">equal()</a> method.</p>\n<p>This object has the following equality methods:</p>\n<ul>\n<li><code>array</code> : Compares arrays of values using <code>===</code> on each element.</li>\n<li><code>date</code> : Compares values of <code>Date</code> type.</li>\n<li><code>strict</code> : The default equal algorithm based on <code>===</code> operator.</li>\n</ul>",
          "type": "Object",
          "scope": "static"
        },
        {
          "name": "mergeMethods",
          "access": "internal",
          "description": "<p>This object holds config value merge methods. By default, <a href=\"#Core/helper/ObjectHelper#function-merge-static\">merge</a> is\nused to merge object's by their properties. Config merge methods are used to combine config values from derived\nclasses with config values from super classes, as well as instance config values with those of the class.</p>\n<p>All merge methods in this object have the same signature as the <a href=\"#Core/Config#function-merge\">merge()</a> method.</p>\n<p>This object has the following merge methods:</p>\n<ul>\n<li><code>distinct</code>   : Combines arrays of values ensuring that no value is duplicated. When given an object, its truthy\nkeys are included, while its falsy keys are removed from the result.</li>\n<li><code>merge</code>      : The default merge algorithm for <code>configurable()</code> properties, based on\n<a href=\"#Core/helper/ObjectHelper#function-merge-static\">merge</a>.</li>\n<li><code>items</code>      : Similar to <code>merge</code>, but allows reordering (see <code>Objects.mergeItems</code>).</li>\n<li><code>objects</code>    : The same as to <code>merge</code> except this method promotes <code>true</code> to an empty object.</li>\n<li>'classList'  : Incoming strings are converted to an object where the string is a property name with a truthy value.</li>\n<li><code>replace</code>    : Always returns <code>newValue</code> to replace the super class value with the derived class value, or the\nclass value with the instance value.</li>\n</ul>",
          "type": "Object",
          "scope": "static"
        }
      ],
      "configs": [
        {
          "name": "equal",
          "access": "internal",
          "description": "<p>A function that compares values for equality. This test is used to determine if the <code>update</code> method should be\ncalled when the setter is invoked.</p>\n<p>To handle <code>Date</code> values:</p>\n<pre class=\"prettyprint source\"><code> class Foo extends Base {\n     static get configurable() {\n         return {\n             date : {\n                 $config : {\n                     equal : 'date'\n                 },\n\n                 value : null\n             }\n         }\n     }\n\n     updateDate(date) {\n         // date has changed\n     }\n }\n</code></pre>\n<p>Also useful for some configs:</p>\n<pre class=\"prettyprint source\"><code> class Foo extends Base {\n     static get configurable() {\n         return {\n             bar : {\n                 $config : {\n                     equal : ObjectHelper.isEqual\n                 },\n\n                 value : null\n             }\n         }\n     }\n\n     updateBar(value) {\n         // value has changed\n     }\n }\n</code></pre>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "lazy",
          "access": "internal",
          "description": "<p>Indicates that this config property should not automatically initialize during construction, but instead should\nwait for the first explicit use of the property getter.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "nullify",
          "access": "internal",
          "description": "<p>Indicates that this config property should automatically be set to <code>null</code> on destroy.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "render",
          "access": "internal",
          "description": "<p>Indicates that this config participates in rendering. This has does not affect the behavior of the property\ndirectly, but allows classes that perform rendering to detect which config changes will affect the rendered\nresult.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "GlobalEvents",
      "modulePath": "Core/GlobalEvents",
      "description": "<p>A singleton firing global application level events like 'theme'.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>GlobalEvents.on({\n   theme() {\n       // react to theme changes here\n   }\n});\n</code></pre>",
      "mixes": [
        "Core/mixin/Events"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "GlobalEvents.js",
      "path": "/Calendar/lib/Core",
      "singleton": true,
      "events": [
        {
          "name": "theme",
          "description": "<p>Fired after the theme is changed</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.GlobalEvents"
            },
            {
              "name": "theme",
              "type": "String",
              "description": "<p>The new theme name</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "WidgetTag",
      "modulePath": "Core/customElements/WidgetTag",
      "classDescription": "<p>A base class for a custom web component element wrapping one <a href=\"#Core/widget/Widget\">Widget</a>.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "WidgetTag.js",
      "path": "/Calendar/lib/Core/customElements",
      "properties": [
        {
          "name": "widget",
          "description": "<p>The widget instance rendered in the shadow root</p>",
          "type": "Core.widget.Widget",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "stylesheet",
          "description": "<p>Path to theme to use within the web component.</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-grid stylesheet=&quot;resources/grid.stockholm.css&quot;>\n&lt;/bryntum-grid>\n</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "faPath",
          "description": "<p>Path to folder containing Font Awesome 6 Free.</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-grid fa-path=&quot;resources/fonts&quot;>\n&lt;/bryntum-grid>\n</code></pre>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "destroy",
          "description": "<p>Destroys the inner widget instance and cleans up</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "AjaxStore",
      "modulePath": "Core/data/AjaxStore",
      "classDescription": "<p>Store that uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">Fetch API</a> to read data\nfrom a remote server, and optionally sends synchronization requests to the server containing information about\nlocally created, modified and deleted records.</p>\n<h2>Create</h2>\n<p>Posts array of JSON data for newly added records to <a href=\"#Core/data/AjaxStore#config-createUrl\">createUrl</a>, expects response containing an array\nof JSON objects in same order with id set (uses Model#idField as id).</p>\n<h2>Read</h2>\n<p>Reads array of JSON data from the data packet returned from the <a href=\"#Core/data/AjaxStore#config-readUrl\">readUrl</a>. Unique id for each row is\nrequired.</p>\n<p>By default looks in field 'id' but can be configured by setting <a href=\"#Core/data/Model#property-idField-static\">idField</a>.</p>\n<h2>Update</h2>\n<p>Posts array of JSON data containing modified records to <a href=\"#Core/data/AjaxStore#config-updateUrl\">updateUrl</a>. By default, only changed fields\nand any fields configured with <a href=\"#Core/data/field/DataField#config-alwaysWrite\">alwaysWrite</a> are sent.\nIf you want all fields to always be sent, please see <a href=\"#Core/data/AjaxStore#config-writeAllFields\">writeAllFields</a></p>\n<h2>Delete</h2>\n<p>Posts to <a href=\"#Core/data/AjaxStore#config-deleteUrl\">deleteUrl</a> with removed records ids (for example id=1,4,7).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new AjaxStore({\n  createUrl  : 'php/create',\n  readUrl    : 'php/read',\n  updateUrl  : 'php/update',\n  deleteUrl  : 'php/delete',\n  modelClass : Customer\n});\n</code></pre>\n<h2>Pagination</h2>\n<p>Configuring an <code>AjaxStore</code> with <a href=\"#Core/data/AjaxStore#config-pageParamName\">pageParamName</a> or <a href=\"#Core/data/AjaxStore#config-pageStartParamName\">pageStartParamName</a> means that the\nstore requests <strong>pages</strong> of data from the remote source, sending the configured <a href=\"#Core/data/AjaxStore#config-pageParamName\">pageParamName</a> or\n<a href=\"#Core/data/AjaxStore#config-pageStartParamName\">pageStartParamName</a> to request the page along with the <a href=\"#Core/data/AjaxStore#config-pageSizeParamName\">pageSizeParamName</a>.</p>\n<p>If <code>pageParamName</code> is set, that is passed with the requested page number <strong>(one based)</strong>, along with the\n<a href=\"#Core/data/AjaxStore#config-pageSizeParamName\">pageSizeParamName</a>.</p>\n<p>If <code>pageStartParamName</code> is set, that is passed with the requested page starting record index <strong>(zero based)</strong>, along\nwith the <a href=\"#Core/data/AjaxStore#config-pageSizeParamName\">pageSizeParamName</a>.</p>\n<h2>Remote filtering</h2>\n<p>To specify that filtering is the responsibility of the server, configure the store with\n<code><a href=\"#Core/data/AjaxStore#config-filterParamName\">filterParamName</a>: 'nameOfFilterParameter'</code></p>\n<p>When this is set, any <a href=\"#Core/data/mixin/StoreFilter#function-filter\">filter</a> operation causes the store to reload\nitself, encoding the filters as JSON representations in the <a href=\"#Core/data/AjaxStore#config-filterParamName\">filterParamName</a> HTTP parameter.</p>\n<p>The filters will look like this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    &quot;field&quot;: &quot;country&quot;,\n    &quot;operator&quot;: &quot;=&quot;,\n    &quot;value&quot;: &quot;sweden&quot;,\n    &quot;caseSensitive&quot;: false\n}\n</code></pre>\n<p>The encoding may be overridden by configuring an implementation of <a href=\"#Core/data/AjaxStore#function-encodeFilterParams\">encodeFilterParams</a>\ninto the store which returns the value for the <a href=\"#Core/data/AjaxStore#config-filterParamName\">filterParamName</a> when passed an <em>Iterable</em> of filters.</p>\n<h2>Remote sorting</h2>\n<p>To specify that sorting is the responsibility of the server, configure the store with\n<code><a href=\"#Core/data/AjaxStore#config-sortParamName\">sortParamName</a>: 'nameOfSortParameter'</code></p>\n<p>When this is set, any <a href=\"#Core/data/mixin/StoreSort#function-sort\">sort</a> operation causes the store to\nreload itself, encoding the sorters as JSON representations in the <a href=\"#Core/data/AjaxStore#config-sortParamName\">sortParamName</a> HTTP\nparameter.</p>\n<p>The sorters will look like this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    &quot;field&quot;: &quot;name&quot;,\n    &quot;ascending&quot;: true\n}\n</code></pre>\n<p>The encoding may be overridden by configuring an implementation of <a href=\"#Core/data/AjaxStore#function-encodeSorterParams\">encodeSorterParams</a>\ninto the store which returns the value for the <a href=\"#Core/data/AjaxStore#config-sortParamName\">sortParamName</a> when passed an <em>Iterable</em> of sorters.</p>\n<h2>Passing HTTP headers</h2>\n<p>As mentioned above <code>AjaxStore</code> uses the Fetch API under the hood. Specify <a href=\"#Core/data/AjaxStore#config-fetchOptions\">fetchOptions</a> and/or\n<a href=\"#Core/data/AjaxStore#config-headers\">headers</a> to have control over the options passed with all fetch calls. For example to pass along an\nauthorization header:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new AjaxStore({\n   headers : {\n       Authorization : 'auth-contents-goes-here'\n   }\n});\n</code></pre>\n<p>Learn more about the Fetch API over at <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">MDN</a>.</p>",
      "extends": [
        "Core/data/Store"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AjaxStore.js",
      "path": "/Calendar/lib/Core/data",
      "events": [
        {
          "name": "exception",
          "description": "<p>Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid\nresponse.</p>\n<p>Note that when a <a href=\"#Core/data/AjaxStore#function-commit\">commit</a> fails, more than one exception event will be triggered. The individual\noperation, <code>create</code>, <code>update</code> or <code>delete</code> will trigger their own <code>exception</code> event, but the encapsulating commit\noperation will also trigger an <code>exception</code> event when all the operations have finished, so if exceptions are\ngoing to be handled gracefully, the event's <code>action</code> property must be examined, and the constituent operations of\nthe event must be examined.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "exception",
              "type": "Boolean",
              "description": "<p><code>true</code></p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Action that failed, <code>'create'</code>, <code>'read'</code>, <code>'update'</code> or <code>'delete'</code>. May also be fired\nwith '<code>commit'</code> to indicate the failure of an aggregated <code>create</code>, <code>update</code> and <code>delete</code> operation. In this case,\nthe event will contain a property for each operation of the commit named <code>'create'</code>, <code>'update'</code> and <code>'delete'</code>,\neach containing the individual <code>exception</code> events.</p>"
            },
            {
              "name": "exceptionType",
              "type": "String",
              "description": "<p>The type of failure, <code>'network'</code> or <code>'server'</code></p>"
            },
            {
              "name": "response",
              "type": "Response",
              "description": "<p>the <code>Response</code> object</p>"
            },
            {
              "name": "json",
              "type": "Object",
              "description": "<p>The decoded response object <em>if the exceptionType is <code>'server'</code></em></p>"
            }
          ]
        },
        {
          "name": "commitAdded",
          "description": "<p>Fired after committing added records</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            }
          ]
        },
        {
          "name": "commitModified",
          "description": "<p>Fired after committing modified records</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            }
          ]
        },
        {
          "name": "load",
          "description": "<p>Fired on successful load</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "data",
              "type": "Array.<Object>",
              "description": "<p>Data loaded</p>"
            },
            {
              "name": "response",
              "type": "Response",
              "description": "<p>the <code>Response</code> object</p>"
            },
            {
              "name": "json",
              "type": "Object",
              "description": "<p>The decoded response object.</p>"
            }
          ]
        },
        {
          "name": "loadChildren",
          "description": "<p>Fired on successful load of remote child nodes for a tree node.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "data",
              "type": "Array.<Object>",
              "description": "<p>Data loaded</p>"
            },
            {
              "name": "json",
              "type": "Object",
              "description": "<p>The decoded response object.</p>"
            }
          ]
        },
        {
          "name": "commitRemoved",
          "description": "<p>Fired after committing removed records</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            }
          ]
        },
        {
          "name": "beforeLoad",
          "description": "<p>Fired before loading starts. Allows altering parameters and is cancelable</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>An object containing property/name pairs which are the parameters.\nThis may be mutated to affect the parameters used in the Ajax request.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "beforeLoadChildren",
          "description": "<p>Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>An object containing property/name pairs which are the parameters.\nThis may be mutated to affect the parameters used in the Ajax request.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "beforeLoadPage",
          "description": "<p>When the store <a href=\"#Core/data/AjaxStore#property-isPaged\">is paged</a>, this is fired before loading a page and is cancelable</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>An object containing property/name pairs which are the parameters.\nThis may be mutated to affect the parameters used in the Ajax request.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "loadStart",
          "description": "<p>Fired when loading is beginning. This is not cancelable. Parameters in the event may still be\nmutated at this stage.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>An object containing property/name pairs which are the parameters.\nThis may be mutated to affect the parameters used in the Ajax request.</p>"
            }
          ]
        },
        {
          "name": "loadChildrenStart",
          "description": "<p>Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the\nevent may still be mutated at this stage.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>An object containing property/name pairs which are the parameters.\nThis may be mutated to affect the parameters used in the Ajax request.</p>"
            }
          ]
        },
        {
          "name": "beforeRequest",
          "description": "<p>Fired before any remote request is initiated.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>An object containing key/value pairs that are passed on the request query string</p>"
            },
            {
              "name": "body",
              "type": "Object",
              "description": "<p>The body of the request to be posted to the server.</p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Action that is making the request, <code>'create'</code>, <code>'read'</code>, <code>'update'</code> or <code>'delete'</code></p>"
            }
          ]
        },
        {
          "name": "afterRequest",
          "description": "<p>Fired after any remote request has finished whether successfully or unsuccessfully.</p>",
          "parameters": [
            {
              "name": "exception",
              "type": "Boolean",
              "description": "<p><code>true</code>. <em>Only present if the request triggered an exception.</em></p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Action that has finished, <code>'create'</code>, <code>'read'</code>, <code>'update'</code> or <code>'delete'</code></p>"
            },
            {
              "name": "exceptionType",
              "type": "String",
              "description": "<p>The type of failure, <code>'network'</code> or <code>'server'</code>. <em>Only present if the request\ntriggered an exception.</em></p>"
            },
            {
              "name": "response",
              "type": "Response",
              "description": "<p>The <code>Response</code> object</p>"
            },
            {
              "name": "json",
              "type": "Object",
              "description": "<p>The decoded response object if there was no <code>'network'</code> exception.</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "headers",
          "description": "<p>A string keyed object containing the HTTP headers to add to each server request issued by this store.</p>\n<p><code>AjaxStore</code> uses the Fetch API under the hood, read more about headers on\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers\">MDN</a></p>\n<p>Example usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new AjaxStore({\n   headers : {\n       Authorization : 'auth-contents-goes-here'\n   }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Remote"
        },
        {
          "name": "fetchOptions",
          "description": "<p>An object containing the Fetch options to pass to each server request issued by this store. Use this to\ncontrol if credentials are sent and other options, read more at\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options\">MDN</a>.</p>\n<p>Example usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new AjaxStore({\n   fetchOptions : {\n       credentials : 'omit',\n       redirect    : 'error'\n   }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Remote"
        },
        {
          "name": "sendAsFormData",
          "description": "<p>Specify <code>true</code> to send payloads as form data, <code>false</code> to send as regular JSON.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Remote"
        },
        {
          "name": "writeAllFields",
          "description": "<p>Specify <code>true</code> to send all model fields when committing modified records (as opposed to just the\nmodified fields)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Remote"
        },
        {
          "name": "parentIdParamName",
          "description": "<p>The name of the HTTP parameter passed to this Store's <a href=\"#Core/data/AjaxStore#config-readUrl\">readUrl</a> to indicate the node <code>id</code>\nto load when loading child nodes on demand if the node being expanded was created with data containing\n<code>children: true</code>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "id",
          "category": "Remote"
        },
        {
          "name": "responseSuccessProperty",
          "description": "<p>The optional property name in JSON responses from the server that contains a boolean\nsuccess/fail status.</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n  &quot;responseMeta&quot; : {\n  {\n    &quot;success&quot; : true,\n    &quot;count&quot; : 100\n  },\n  // The property name used here should match that of 'responseDataProperty'\n  &quot;data&quot; : [\n    ...\n  ]\n}\n</code></pre>\n<p>The store would be configured with:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     ...\n     successDataProperty : 'responseMeta.success',\n     responseTotalProperty : 'responseMeta.count'\n     ...\n }\n\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "success",
          "category": "Remote"
        },
        {
          "name": "responseDataProperty",
          "description": "<p>The property name in JSON responses from the server that contains the data for the records</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n  &quot;success&quot; : true,\n  // The property name used here should match that of 'responseDataProperty'\n  &quot;data&quot; : [\n    ...\n  ]\n}\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "data",
          "category": "Remote"
        },
        {
          "name": "responseTotalProperty",
          "description": "<p>The property name in JSON responses from the server that contains the dataset total size\n<strong>when this store <a href=\"#Core/data/AjaxStore#property-isPaged\">is paged</a></strong></p>\n<pre class=\"prettyprint source lang-json\"><code>{\n  &quot;success&quot; : true,\n  // The property name used here should match that of 'responseDataProperty'\n  &quot;data&quot; : [\n    ...\n  ],\n  // The property name used here should match that of 'responseTotalProperty'\n  &quot;total&quot; : 65535\n}\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "total",
          "category": "Remote"
        },
        {
          "name": "filterParamName",
          "description": "<p>The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a\nfiltered response is required.</p>\n<p><strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value\nto compare, <strong>not</strong> a comparison function.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Remote"
        },
        {
          "name": "restfulFilter",
          "description": "<p>Set this flag to true if you are filtering remote using restful URLs (e.g.\nhttps://nominatim.openstreetmap.org/search/paris?format=json)</p>\n<p><strong>Note:</strong> When this is set, the filter string is appended to the readUrl.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Remote"
        },
        {
          "name": "sortParamName",
          "description": "<p>The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a\nsorted response is required.</p>\n<p><strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,\n<strong>not</strong> a sort function.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Remote"
        },
        {
          "name": "pageParamName",
          "description": "<p>The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number\nrequired.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Paging"
        },
        {
          "name": "pageStartParamName",
          "description": "<p>The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the\nrequired page's starting record.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Paging"
        },
        {
          "name": "pageSizeParamName",
          "description": "<p>The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the\nrequired page's starting record.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "pageSize",
          "category": "Paging"
        },
        {
          "name": "pageSize",
          "description": "<p>When paging of data is requested by setting <em>either</em> the <a href=\"#Core/data/AjaxStore#config-pageParamName\">pageParamName</a> <em>or</em> the\n<a href=\"#Core/data/AjaxStore#config-pageStartParamName\">pageStartParamName</a>, this is the value to send in the <a href=\"#Core/data/AjaxStore#config-pageSizeParamName\">pageSizeParamName</a>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 50,
          "category": "Paging"
        },
        {
          "name": "useRestfulMethods",
          "description": "<p>Set to ´true´ to use restful <a href=\"#Core/data/AjaxStore#config-httpMethods\">httpMethods</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Remote"
        },
        {
          "name": "httpMethods",
          "description": "<p>The HTTP methods to use for CRUD requests when <a href=\"#Core/data/AjaxStore#config-useRestfulMethods\">useRestfulMethods</a> is enabled.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new AjaxStore({\n   useRestfulMethods : true,\n   httpMethods : {\n       create : 'POST',\n       read : 'POST',\n       update : 'PATCH',\n       delete : 'DELETE'\n   }\n});\n\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "defaultValue": "{\"create\":\"POST\",\"read\":\"GET\",\"update\":\"PUT\",\"delete\":\"DELETE\"}",
          "category": "Remote"
        },
        {
          "name": "params",
          "description": "<p>An object containing key/value pairs that are passed on the request query string.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Remote"
        },
        {
          "name": "createUrl",
          "description": "<p>Url to post newly created records to.</p>\n<p>The response must be in the form:</p>\n<pre><code>{\n    &quot;success&quot;: true,\n    &quot;data&quot;: [{\n        &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;\n    }, {\n        &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;\n    }]\n}\n</code></pre>\n<p>Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\nserver.</p>\n<p>If the server encountered an error, the packet would look like this:</p>\n<pre><code>{\n    &quot;success&quot;: false,\n    &quot;message&quot;: &quot;Some kind of database error&quot;\n}\n</code></pre>\n<p>And that packet would be available in the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> handler in the <code>response</code> property of the\nevent.</p>\n<p>The <code>success</code> property may be omitted, it defaults to <code>true</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "CRUD"
        },
        {
          "name": "readUrl",
          "description": "<p>Url to read data from.</p>\n<p>The response must be in the form:</p>\n<pre><code>{\n    &quot;success&quot;: true,\n    &quot;data&quot;: [{\n        &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;\n    }, {\n        &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;\n    }]\n}\n</code></pre>\n<p>If the store <a href=\"#Core/data/AjaxStore#property-isPaged\">is paged</a>, the total dataset size must be returned in the\n<a href=\"#Core/data/AjaxStore#config-responseTotalProperty\">responseTotalProperty</a> property:</p>\n<pre><code>{\n    &quot;success&quot;: true,\n    &quot;data&quot;: [{\n        &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;\n    }, {\n        &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;\n    }],\n    &quot;total&quot;: 65535\n}\n</code></pre>\n<p>Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\nserver.</p>\n<p>If the server encountered an error, the packet would look like this:</p>\n<pre><code>{\n    &quot;success&quot;: false,\n    &quot;message&quot;: &quot;Some kind of database error&quot;\n}\n</code></pre>\n<p>And that packet would be available in the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> handler in the <code>response</code> property of the\nevent.</p>\n<p>The <code>success</code> property may be omitted, it defaults to <code>true</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "CRUD"
        },
        {
          "name": "updateUrl",
          "description": "<p>Url to post record modifications to.</p>\n<p>The response must be in the form:</p>\n<pre><code>{\n    &quot;success&quot;: true,\n    &quot;data&quot;: [{\n        &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;\n    }, {\n        &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;\n    }]\n}\n</code></pre>\n<p>Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\nserver.</p>\n<p>If the server encountered an error, the packet would look like this:</p>\n<pre><code>{\n    &quot;success&quot;: false,\n    &quot;message&quot;: &quot;Some kind of database error&quot;\n}\n</code></pre>\n<p>And that packet would be available in the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> handler in the <code>response</code> property of the\nevent.</p>\n<p>The <code>success</code> property may be omitted, it defaults to <code>true</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "CRUD"
        },
        {
          "name": "deleteUrl",
          "description": "<p>Url for deleting records.</p>\n<p>The response must be in the form:</p>\n<pre><code>{\n    &quot;success&quot;: true\n}\n</code></pre>\n<p>If the server encountered an error, the packet would look like this:</p>\n<pre><code>{\n    &quot;success&quot;: false,\n    &quot;message&quot;: &quot;Some kind of database error&quot;\n}\n</code></pre>\n<p>And that packet would be available in the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> handler in the <code>response</code> property of the\nevent.</p>\n<p>The <code>success</code> property may be omitted, it defaults to <code>true</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "CRUD"
        },
        {
          "name": "autoLoad",
          "description": "<p>True to initiate a load when the store is instantiated</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "properties": [
        {
          "name": "params",
          "description": "<p>An object containing key/value pairs that are passed on the request query string.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Remote"
        },
        {
          "name": "isLoading",
          "description": "<p>Returns true if the Store is currently loading</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "CRUD"
        },
        {
          "name": "isCommitting",
          "description": "<p>Returns true if the Store is currently committing</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "CRUD"
        },
        {
          "name": "isPaged",
          "description": "<p>Yields true if this Store is loaded page by page. This yields <code>true</code> if either of the\n<a href=\"#Core/data/AjaxStore#config-pageParamName\">pageParamName</a> of <a href=\"#Core/data/AjaxStore#config-pageStartParamName\">pageStartParamName</a> configs are set.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Paging"
        },
        {
          "name": "allCount",
          "description": "<p>Yields the complete dataset size. If the store is <a href=\"#Core/data/AjaxStore#property-isPaged\">is paged</a> this is the value\nreturned in the last loaded data block in the <a href=\"#Core/data/AjaxStore#config-responseTotalProperty\">responseTotalProperty</a> property. Otherwise it is\nthe number of records in the store's underlying storage collection.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Paging"
        },
        {
          "name": "lastPage",
          "description": "<p><strong>If the store <a href=\"#Core/data/AjaxStore#property-isPaged\">is paged</a></strong>, yields the highest page number in the dataset as calculated\nfrom the <a href=\"#Core/data/AjaxStore#config-responseTotalProperty\">responseTotalProperty</a>\nreturned in the last page data block loaded.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Paging"
        }
      ],
      "functions": [
        {
          "name": "encodeFilterParams",
          "description": "<p>A provided function which creates an array of values for the <a href=\"#Core/data/AjaxStore#config-filterParamName\">filterParamName</a> to pass\nany filters to the server upon load.</p>\n<p>By default, this creates a JSON string containing the following properties:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>   [{\n       field         : &lt;theFieldName>\n       operator      : May be: `'='`, `'!='`, `'>'`, `'>='`, `'&lt;'`, `'&lt;='`, `'*'`, `'startsWith'`, `'endsWith'`\n       value         : The value to compare\n       caseSensitive : true for case sensitive comparisons\n   }]\n</code></pre>",
          "parameters": [
            {
              "name": "filters",
              "type": "Array.<Core.util.CollectionFilter>",
              "description": "<p>The filters to encode.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "encodeSorterParams",
          "description": "<p>A provided function which creates an array of values for the {#config-sortParamName} to pass\nany sorters to the server upon load.</p>\n<p>By default, this creates a JSON string containing the following properties:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>   [{\n       field     : &lt;theFieldName>\n       ascending : true/false\n   }]\n</code></pre>",
          "parameters": [
            {
              "name": "sorters",
              "type": "Array.<Object>",
              "description": "<p>The sorters to encode.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "load",
          "description": "<p>Load data from the <a href=\"#Core/data/AjaxStore#config-readUrl\">readUrl</a>.</p>",
          "parameters": [
            {
              "name": "params",
              "type": "Object",
              "description": "<p>A hash of parameters to append to querystring (will also append Store#params)</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeLoad",
            "event:loadStart",
            "event:beforeRequest",
            "event:load",
            "event:exception",
            "event:afterRequest"
          ],
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which will be resolved if the load succeeds, and rejected if the load is\nvetoed by a <a href=\"#Core/data/AjaxStore#event-beforeLoad\">beforeLoad</a> handler, or if an <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> is detected.\nThe resolved function is passed the event object passed to any event handlers.\nThe rejected function is passed the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> event if an exception occurred,\nor <code>false</code> if the load was vetoed by a <a href=\"#Core/data/AjaxStore#event-beforeLoad\">beforeLoad</a> handler.</p>"
          }
        },
        {
          "name": "loadChildren",
          "description": "<p>Loads children into specified parent record. Parent records id is sent as a param (param name configured with\n<a href=\"#Core/data/AjaxStore#config-parentIdParamName\">parentIdParamName</a>.</p>",
          "parameters": [
            {
              "name": "parentRecord",
              "type": "Core.data.Model",
              "description": "<p>Parent record</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeLoadChildren",
            "event:loadChildrenStart",
            "event:beforeRequest",
            "event:loadChildren",
            "event:exception",
            "event:afterRequest"
          ],
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which will be resolved if the load succeeds, and rejected if the load is\nvetoed by a <a href=\"#Core/data/AjaxStore#event-beforeLoadChildren\">beforeLoadChildren</a> handler, or if an <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> is detected.\nThe resolved function is passed the event object passed to any event handlers.\nThe rejected function is passed the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> event if an exception occurred,\nor <code>false</code> if the load was vetoed by a <a href=\"#Core/data/AjaxStore#event-beforeLoadChildren\">beforeLoadChildren</a> handler.</p>"
          }
        },
        {
          "name": "loadPage",
          "description": "<p>Loads a page of data from the <a href=\"#Core/data/AjaxStore#config-readUrl\">readUrl</a>.</p>",
          "parameters": [
            {
              "name": "page",
              "type": "Number",
              "description": "<p>The <em>one based</em> page number to load.</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>A hash of parameters to append to querystring (will also append Store#params)</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeLoadPage",
            "event:loadPageStart",
            "event:beforeRequest",
            "event:loadPage",
            "event:exception",
            "event:afterRequest"
          ],
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which will be resolved if the load succeeds, and rejected if the load is\nvetoed by a <a href=\"#Core/data/AjaxStore#event-beforeLoadPage\">beforeLoadPage</a> handler, or if an <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> is detected.\nThe resolved function is passed the event object passed to any event handlers.\nThe rejected function is passed the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> event if an exception occurred,\nor <code>false</code> if the load was vetoed by a <a href=\"#Core/data/AjaxStore#event-beforeLoadPage\">beforeLoadPage</a> handler.</p>"
          }
        },
        {
          "name": "nextPage",
          "description": "<p>If this store <a href=\"#Core/data/AjaxStore#property-isPaged\">is paged</a>, and is not already at the <a href=\"#Core/data/AjaxStore#property-lastPage\">lastPage</a>\nthen this will load the next page of data.</p>",
          "scope": "instance",
          "fires": [
            "event:beforeLoadPage",
            "event:loadPageStart",
            "event:beforeRequest",
            "event:loadPage",
            "event:exception",
            "event:afterRequest"
          ],
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the Ajax request completes and has been processed.</p>"
          }
        },
        {
          "name": "previousPage",
          "description": "<p>If this store <a href=\"#Core/data/AjaxStore#property-isPaged\">is paged</a>, and is not already at the first page\nthen this will load the previous page of data.</p>",
          "scope": "instance",
          "fires": [
            "event:beforeLoadPage",
            "event:loadPageStart",
            "event:beforeRequest",
            "event:loadPage",
            "event:exception",
            "event:afterRequest"
          ],
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the Ajax request completes and has been processed.</p>"
          }
        },
        {
          "name": "commit",
          "description": "<p>Commits all changes (added, modified and removed) using corresponding urls (<a href=\"#Core/data/AjaxStore#config-createUrl\">createUrl</a>,\n<a href=\"#Core/data/AjaxStore#config-updateUrl\">updateUrl</a> and <a href=\"#Core/data/AjaxStore#config-deleteUrl\">deleteUrl</a>)</p>",
          "scope": "instance",
          "fires": [
            "event:beforeCommit"
          ],
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which is resolved only if all pending changes (Create, Update and Delete)\nsuccessfully resolve. Both the resolve and reject functions are passed a <code>commitState</code> object which is stored the\n<a href=\"#Core/data/AjaxStore#event-afterRequest\">afterRequest</a> event for each request. Each event contains the <code>exception</code>, <code>request</code> and <code>response</code>\nproperties eg:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n     // If *all* commits succeeded\n     success: true,\n     changes: {\n         added: [records...],\n         modified: [records...],\n         removed: [records...],\n     },\n     added: {\n         source: theStore,\n\n         // Only if the add request triggered an exception\n         exception: true,\n\n         // Only if the add request triggered an exception\n         exceptionType: 'server', // Or 'network'\n\n         response: Response,\n         json: parsedResponseObject\n     },\n     // Same format as added\n     modified: {},\n     removed: {}\n}\n</code></pre>\n<p>If there were no pending changes, the resolve and reject functions are passed no parameters.</p>\n<p>Returns <code>false</code> if a commit operation is already in progress.\nThe resolved function is passed the event object passed to any event handlers.\nThe rejected function is passed the <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> event if an exception occurred,</p>"
          }
        },
        {
          "name": "commitAdded",
          "access": "private",
          "description": "<p>Commits added records by posting to <a href=\"#Core/data/AjaxStore#config-createUrl\">createUrl</a>.\nServer should return a JSON object with a 'success' property indicating whether the operation was successful.</p>",
          "parameters": [
            {
              "name": "commitState",
              "type": "Object",
              "description": "<p>An object into which is added a <code>delete</code> property being the\n<a href=\"#Core/data/AjaxStore#event-afterRequest\">afterRequest</a> event.</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeRequest",
            "event:commitAdded",
            "event:refresh",
            "event:exception",
            "event:afterRequest"
          ],
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>If there are added records, a Promise which will be resolved whether the commit\nsucceeds or fails. The resulting event is placed into the <code>add</code> property of the passed <code>commitState</code>\nparameter. If there are no added records, <code>null</code> is returned.\nThe resolved function is passed the event object passed to any event handlers.</p>"
          }
        },
        {
          "name": "commitModified",
          "access": "private",
          "description": "<p>Commits modified records by posting to <a href=\"#Core/data/AjaxStore#config-updateUrl\">updateUrl</a>.\nServer should return a JSON object with a 'success' property indicating whether the operation was successful.</p>",
          "parameters": [
            {
              "name": "commitState",
              "type": "Object",
              "description": "<p>An object into which is added a <code>delete</code> property being the\n<a href=\"#Core/data/AjaxStore#event-afterRequest\">afterRequest</a> event.</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeRequest",
            "event:commitModified",
            "event:refresh",
            "event:exception",
            "event:afterRequest"
          ],
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>If there are added records, a Promise which will be resolved whether the commit\nsucceeds or fails. The resulting event is placed into the <code>update</code> property of the passed <code>commitState</code>\nparameter. If there are no added records, <code>null</code> is returned.\nThe resolved function is passed the event object passed to any event handlers.</p>"
          }
        },
        {
          "name": "commitRemoved",
          "access": "private",
          "description": "<p>Commits removed records by posting to <a href=\"#Core/data/AjaxStore#config-deleteUrl\">deleteUrl</a>.\nServer should return a JSON object with a 'success' property indicating whether the operation was successful.</p>",
          "parameters": [
            {
              "name": "commitState",
              "type": "Object",
              "description": "<p>An object into which is added a <code>delete</code> property being the\n<a href=\"#Core/data/AjaxStore#event-afterRequest\">afterRequest</a> event.</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforerequest",
            "event:commitremoved",
            "event:refresh",
            "event:exception",
            "event:afterrequest"
          ],
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>If there are added records, a Promise which will be resolved whether the commit\nsucceeds or fails. The resulting event is placed into the <code>delete</code> property of the passed <code>commitState</code>\nparameter. If there are no added records, <code>null</code> is returned.\nThe resolved function is passed the event object passed to any event handlers.</p>"
          }
        }
      ]
    },
    {
      "name": "DomDataStore",
      "modulePath": "Core/data/DomDataStore",
      "classDescription": "<p>Stores data on a dom element (by setting element._domData).\nInstead of using HTML5:s element.dataset, which turned out to be slow.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DomDataStore.js",
      "path": "/Calendar/lib/Core/data",
      "functions": [
        {
          "name": "get",
          "description": "<p>Get data that is connected to specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>DOM element</p>"
            },
            {
              "name": "key",
              "type": "String",
              "description": "<p>The name of the property in the element data to return</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Data</p>"
          }
        },
        {
          "name": "remove",
          "description": "<p>Remove data connected to specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>DOM element</p>"
            },
            {
              "name": "key",
              "type": "String",
              "description": "<p>The name of the property in the element data to remove.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "set",
          "description": "<p>Set data connected to specified element (completely replacing any existing).\nTo update data, use DomDataStore#assign instead.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>DOM element</p>"
            },
            {
              "name": "data",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>Data object to set, or property name to set</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>If the previous parameter was a property name, this is the value to set.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "assign",
          "description": "<p>Updates data connected to specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>DOM element</p>"
            },
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Data to assign</p>"
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "Duration",
      "modulePath": "Core/data/Duration",
      "classDescription": "<p>Class which represents a duration object. A duration consists of a <code>magnitude</code> and a <code>unit</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n   unit      : String,\n   magnitude : Number\n}\n</code></pre>\n<p>Valid values are:</p>\n<ul>\n<li>&quot;millisecond&quot; - Milliseconds</li>\n<li>&quot;second&quot; - Seconds</li>\n<li>&quot;minute&quot; - Minutes</li>\n<li>&quot;hour&quot; - Hours</li>\n<li>&quot;day&quot; - Days</li>\n<li>&quot;week&quot; - Weeks</li>\n<li>&quot;month&quot; - Months</li>\n<li>&quot;quarter&quot; - Quarters</li>\n<li>&quot;year&quot;- Years</li>\n</ul>",
      "description": "<p>Duration constructor.</p>",
      "constructor": {
        "name": "constructor",
        "parameters": [
          {
            "name": "magnitude",
            "type": [
              "Number",
              "String"
            ],
            "description": "<p>Duration magnitude value or a duration + magnitude string ('2h', '4d')</p>"
          },
          {
            "name": "unit",
            "type": "String",
            "description": "<p>Duration unit value</p>",
            "optional": true
          }
        ]
      },
      "filename": "Duration.js",
      "path": "/Calendar/lib/Core/data",
      "properties": [
        {
          "name": "magnitude",
          "description": "<p>Get/Set numeric magnitude <code>value</code>.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "unit",
          "description": "<p>Get/Set duration unit to use with the current magnitude value.\nValid values are:</p>\n<ul>\n<li>&quot;millisecond&quot; - Milliseconds</li>\n<li>&quot;second&quot; - Seconds</li>\n<li>&quot;minute&quot; - Minutes</li>\n<li>&quot;hour&quot; - Hours</li>\n<li>&quot;day&quot; - Days</li>\n<li>&quot;week&quot; - Weeks</li>\n<li>&quot;month&quot; - Months</li>\n<li>&quot;quarter&quot; - Quarters</li>\n<li>&quot;year&quot;- Years</li>\n</ul>",
          "type": "String",
          "scope": "instance"
        },
        {
          "name": "milliseconds",
          "description": "<p>The <code>milliseconds</code> property is a read only property which returns the number of milliseconds in this Duration</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "isEqual",
          "description": "<p>Returns truthy value if this Duration equals the passed value.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Core.data.Duration"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "Model",
      "modulePath": "Core/data/Model",
      "classDescription": "<p>A Model is the definition of a record which can be added to (or loaded into) a <a href=\"#Core/data/Store\">Store</a>. It defines\nwhich fields the data contains and exposes an interface to access and manipulate that data. The Model data is\npopulated through simple a JSON object.</p>\n<p>By default a Model stores a shallow copy of its raw json, but for records in stores configured with\n<code>useRawData: true</code> it stores the supplied json object as is.</p>\n<h2>Defining fields</h2>\n<p>A Model can either define its fields explicitly (see <a href=\"#Core/data/Model#property-fields-static\">fields</a>) or have them created from its\ndata (see <a href=\"#Core/data/Model#property-autoExposeFields-static\">autoExposeFields</a>). This snippet shows a model with 4 fields defined explicitly:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' },\n            { name : 'shoeSize', type : 'number', defaultValue : 11 },\n            { name : 'age', readOnly : true }\n        ];\n    }\n}\n</code></pre>\n<p>The first field (name) has an unspecified type, which means the field's value is held as received with no conversion\napplied. The second field (birthday) is defined to be a date, which will make the model parse any supplied value into\nan actual date. The parsing is handled by <a href=\"#Core/helper/DateHelper#function-parse-static\">DateHelper.parse()</a>\nusing the specified <code>format</code>, or if no format is specified using\n<a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">DateHelper.defaultFormat</a>.</p>\n<p>The set of standard field types is as follows:</p>\n<ul>\n<li><a href=\"#Core/data/field/ArrayDataField\"><code>array</code></a></li>\n<li><a href=\"#Core/data/field/BooleanDataField\"><code>boolean</code></a></li>\n<li><a href=\"#Core/data/field/DateDataField\"><code>date</code></a></li>\n<li><a href=\"#Core/data/field/IntegerDataField\"><code>integer</code></a></li>\n<li><a href=\"#Core/data/field/ObjectDataField\"><code>object</code></a></li>\n<li><a href=\"#Core/data/field/NumberDataField\"><code>number</code></a></li>\n<li><a href=\"#Core/data/field/StringDataField\"><code>string</code></a></li>\n</ul>\n<p>You can also set a <code>defaultValue</code> that will be used if the data does not contain a value for the field:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{ name : 'shoeSize', type : 'number', defaultValue : 11 }\n</code></pre>\n<p>To create a record from a Model, supply data to its constructor:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let guy = new Person({\n    id       : 1,\n    name     : 'Dude',\n    birthday : '2014-09-01'\n});\n</code></pre>\n<p>If no id is specified, a temporary id will be generated.</p>\n<p>Please avoid using reserved names for your fields (such as <code>parent</code>, <code>children</code> and others that are used as Model\nproperties) to avoid possible data collisions and bugs.</p>\n<h2>Nested fields</h2>\n<p>Model supports mapping fields to nested data structures using dot <code>.</code> separated paths as the <code>dataSource</code>. For\nexample given this JSON object:</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n    name : 'Borje Salming',\n    team : {\n        name   : 'Toronto Maple Leafs',\n        league : 'NHL\n    }\n}\n</code></pre>\n<p>A field can be mapped to the nested team name by using <code>dataSource : 'team.name'</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Player extends Model {\n    static get fields() {\n        return [\n            'name',\n            // Field mapped to a property on a nested object\n            { name : 'teamName', dataSource : 'team.name' }\n        ]\n    }\n}\n</code></pre>\n<p>Usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const player = new Player(json);\n\nconsole.log(player.teamName); // > Toronto Maple Leafs\nplayer.teamName = 'Detroit Red Wings'; // The name property of the team object is updated\n</code></pre>\n<h3>Updating a nested object</h3>\n<p>Note that directly altering a property of the nested object wont register as an update of the record, record does not\ntrack changes deeply. If nested fields (as described above) is not enough for your usecase you can map a field\ndirectly to the nested object and then assign a shallow copy of it to the record on changes:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Player extends Model {\n    static get fields() {\n        return [\n            ...,\n            // Field mapped directly to the nested object\n            { name : 'team', type : 'object' }\n        ]\n    }\n}\n\n// &quot;External object&quot; to nest\nconst team = {\n    name   : 'Brynas',\n    league : 'SHL'\n}\n\nconst player = new Player({\n    name : 'Borje Salming',\n    team\n});\n\n// This will not flag player as dirty\nteam.league = 'CHL';\n\n// Instead you have to reassign the mapped field\nplayer.team = { ...player.team };\n</code></pre>\n<h2>Array fields</h2>\n<p>When a field holds an array we recommend using the <a href=\"#Core/data/field/ArrayDataField\"><code>array</code></a> type for the field:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class GroceryList extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'items', type : 'array' }\n        ];\n    }\n}\n</code></pre>\n<div class=\"note\">\nModifying items in the array will not flag the field as updated, since the array itself does not change. For it to\nregister a change, you must assign it a new array (could be a copy of the old one). For more info, see\n<a href=\"#Core/data/field/ArrayDataField\">ArrayDataField</a>\n</div>\n<h2>Persisting fields</h2>\n<p>By default all fields are persisted. If you don't want particular field to get saved to the server, configure it with\n<code>persist: false</code>. In this case field will not be among changes which are sent by\n<a href=\"#Core/data/AjaxStore#function-commit\">store.commit()</a>, otherwise its behavior doesn't change.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'age', persist : false }\n        ];\n    }\n}\n</code></pre>\n<h2>The <code>idField</code></h2>\n<p>By default Model expects its id to be stored in a field named &quot;id&quot;. The name of the field can be customized by\nsetting <a href=\"#Core/data/Model#property-idField-static\">idField</a>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'age', persist : false },\n            { name : 'personId' },\n            { name : 'birthday', type : 'date' }\n        ];\n    }\n}\n\n// Id drawn from 'id' property by default; use custom field here\nPerson.idField = 'personId';\n\nlet girl = new Person({\n    personId : 2,\n    name     : 'Lady',\n    birthday : '2011-11-05'\n});\n</code></pre>\n<h2>Getting and setting values</h2>\n<p>Fields are used to generate getters and setters on the records. Use them to access or modify values (they are\nreactive):</p>\n<pre class=\"prettyprint source lang-javascript\"><code>console.log(guy.name);\ngirl.birthday = new Date(2011,10,6);\n</code></pre>\n<p>NOTE: In an application with multiple different models you should subclass Model, since the prototype is decorated\nwith getters and setters. Otherwise you might get unforeseen collisions.</p>\n<h2>Field data mapping</h2>\n<p>By default fields are mapped to data using their name. If you for example have a &quot;name&quot; field it expects data to be\n<code>{ name: 'Some name' }</code>. If you need to map it to some other property, specify <code>dataSource</code> in your field definition:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields {\n        return [\n            { name : 'name', dataSource : 'TheName' }\n        ];\n    }\n}\n\n// This is now OK:\nlet dude = new Person({ TheName : 'Manfred' });\nconsole.log(dude.name); // --> Manfred\n</code></pre>\n<h2>Field inheritance</h2>\n<p>Fields declared in a derived model class are added to those from its superclass. If a field declared by a derived\nclass has also been declared by its super class, the field properties of the super class are merged with those of\nthe derived class.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Person extends Model {\n     static get fields() {\n         return [\n             'name',\n             { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' }\n         ];\n     }\n }\n\n class User extends Person {\n     static get fields() {\n         return [\n             { name : 'birthday', dataSource : 'dob' },\n             { name : 'lastLogin', type : 'date' }\n         ];\n     }\n }\n</code></pre>\n<p>In the above, the <code>Person</code> model declares the <code>birthday</code> field as a <code>date</code> with a specified <code>format</code>. The <code>User</code>\nmodel extends <code>Person</code> and also declares the <code>birthday</code> field. This redeclared field only specifies <code>dataSource</code>, so\nall of the other fields are preserved from <code>Person</code>. The <code>User</code> model also adds a <code>lastLogin</code> field.</p>\n<p>The <code>User</code> from above could have been declared like so to achieve the same <code>fields</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class User extends Model {\n     static get fields() {\n         return [\n             'name',\n             { name : 'birthday', type : 'date', format : 'YYYY-MM-DD', dataSource : 'dob' },\n             { name : 'lastLogin', type : 'date' }\n         ];\n     }\n }\n</code></pre>\n<h2>Override default values</h2>\n<p>In case you need to define default value for a specific field, or override an existing default value, you can\ndefine a new or re-define an existing field definition in <a href=\"#Core/data/Model#property-fields-static\">fields</a> static getter:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            { name : 'username', defaultValue : 'New person' },\n            { name : 'birthdate', type : 'date' }\n        ];\n    }\n}\n\nclass Bot extends Person {\n    static get fields() {\n        return [\n            { name : 'username', defaultValue : 'Bot' } // default value of 'username' field is overridden\n        ];\n    }\n}\n</code></pre>\n<h2>Read-only records</h2>\n<p>Model has a default field called <a href=\"#Core/data/Model#field-readOnly\">readOnly</a>, which is used to make the record read-only in the UI while\nstill allowing programmatic changes to it. Setting it to <code>true</code> will prevent it from being edited by the built in\nediting features (cell editing in Grid, event draging in Scheduler, task editor in Gantt etc). Please note that it is\nnot made read-only on the data level, the record can still be manipulated by application code.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Prevent record from being manipulated by the user\nrecord.readOnly = true;\n\n// Programmatic manipulation is still allowed\nrecord.remove();\n</code></pre>\n<h2>Tree API</h2>\n<p>This class mixes in the <a href=\"#Core/data/mixin/TreeNode\">TreeNode</a> mixin which provides an API for tree related\nfunctionality (only relevant if your store is configured to be a <a href=\"#Core/data/Store#config-tree\">tree</a>).</p>",
      "mixes": [
        "Core/data/mixin/TreeNode",
        "Core/data/stm/mixin/ModelStm"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Model.js",
      "path": "/Calendar/lib/Core/data",
      "properties": [
        {
          "name": "fields",
          "description": "<p>Array of defined fields for this model class. Subclasses add new fields by implementing this static\ngetter:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Model defining two fields\nclass Person extends Model {\n    static get fields() {\n        return [\n            { name : 'username', defaultValue : 'New person' },\n            { name : 'birthdate', type : 'date' }\n        ];\n    }\n}\n\n// Subclass overriding one of the fields\nclass Bot extends Person {\n    static get fields() {\n        return [\n            // Default value of 'username' field is overridden, any other setting from the parents\n            // definition is preserved\n            { name : 'username', defaultValue : 'Bot' }\n        ];\n    }\n}\n</code></pre>\n<p>Fields in a subclass are merged with those from the parent class, making it easy to override mappings,\nformats etc.</p>",
          "type": [
            "Array.<String>",
            "Array.<Object>",
            "Array.<Core.data.field.DataField>"
          ],
          "scope": "static",
          "readonly": true,
          "category": "Fields"
        },
        {
          "name": "defaults",
          "description": "<p>Template static getter which is supposed to be overridden to define default field values for the Model class.\nOverrides <code>defaultValue</code> config specified by the <a href=\"#Core/data/Model#property-fields-static\">fields</a> getter.\nReturns a named object where key is a field name and value is a default value for the field.</p>\n<p>NOTE: This is a legacy way of defining default values, we recommend using <a href=\"#Core/data/Model#property-fields-static\">fields</a> moving\nforward.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            { name : 'username', defaultValue : 'New person' }\n        ];\n    }\n}\n\nclass Bot extends Person {\n    static get defaults() {\n        return {\n            username : 'Bot' // default value of 'username' field is overridden\n        };\n    }\n}\n</code></pre>",
          "type": "Object",
          "scope": "static",
          "category": "Fields"
        },
        {
          "name": "idField",
          "description": "<p>The name of the data field which provides the ID of instances of this Model.</p>",
          "type": "String",
          "scope": "static",
          "category": "Fields"
        },
        {
          "name": "childrenField",
          "description": "<p>The name of the data field which holds children of this Model when used in a tree structure</p>\n<pre class=\"prettyprint source lang-javascript\"><code>MyModel.childrenField = 'kids';\nconst parent = new MyModel({\n    name : 'Dad',\n    kids : [\n        { name : 'Daughter' },\n        { name : 'Son' }\n    ]\n});\n</code></pre>",
          "type": "String",
          "scope": "static",
          "category": "Fields"
        },
        {
          "name": "indexPath",
          "access": "private",
          "description": "<p>Returns index path to this node. This is the index of each node in the node path\nstarting from the topmost parent. (only relevant when its part of a tree store).</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Array.<Number>"
                ]
              },
              "description": "<p>The index of each node in the path from the topmost parent to this node.</p>"
            }
          ],
          "category": "Parent & children"
        },
        {
          "name": "isCreating",
          "description": "<p>Set this property to <code>true</code> when adding a record on a conditional basis, that is, it is yet\nto be confirmed as an addition.</p>\n<p>When this is set, the <a href=\"#Core/data/Model#property-isPersistable\">isPersistable</a> value of the record is <strong>false</strong>, and upon being\nadded to a Store it will <em>not</em> be eligible to be synced with the server as an added record.</p>\n<p>Subsequently <em>clearing</em> this property means this record will become persistable and eligible\nfor syncing as an added record.</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "allFields",
          "description": "<p>An array containing all the <em>defined</em> fields for this Model class. This will include all superclass's\ndefined fields.</p>",
          "type": "Array.<Core.data.field.DataField>",
          "scope": "static",
          "readonly": true,
          "category": "Fields"
        },
        {
          "name": "allFields",
          "description": "<p>Same as <a href=\"#Core/data/Model#property-allFields-static\">allFields</a>.</p>",
          "type": "Array.<Core.data.field.DataField>",
          "scope": "instance",
          "readonly": true,
          "category": "Fields"
        },
        {
          "name": "fieldMap",
          "description": "<p>An object containing all the <em>defined</em> fields for this Model class. This will include all superclass's\ndefined fields through its prototype chain. So be aware that <code>Object.keys</code> and <code>Object.entries</code> will only\naccess this class's defined fields.</p>",
          "type": "Object",
          "scope": "static",
          "readonly": true,
          "category": "Fields"
        },
        {
          "name": "fieldMap",
          "description": "<p>Same as <a href=\"#Core/data/Model#property-fieldMap-static\">fieldMap</a>.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Fields"
        },
        {
          "name": "autoExposeFields",
          "description": "<p>Flag checked from Store when loading data that determines if fields found in first records should be exposed in\nsame way as predefined fields.</p>",
          "type": "Boolean",
          "scope": "static",
          "category": "Fields"
        },
        {
          "name": "fields",
          "description": "<p>Convenience getter to get field definitions from class.</p>",
          "type": "Array.<Core.data.field.DataField>",
          "scope": "instance",
          "readonly": true,
          "category": "Fields"
        },
        {
          "name": "fieldNames",
          "description": "<p>Get the names of all fields in data.</p>",
          "type": "Array.<String>",
          "scope": "instance",
          "readonly": true,
          "category": "Fields"
        },
        {
          "name": "isPersistable",
          "description": "<p>This yields <code>true</code> if this record is eligible for syncing with the server.\nIt can yield <code>false</code> if the record is in the middle of a <a href=\"#Core/data/Model#property-isBatchUpdating\">batched update</a>,\nor if it is a <a href=\"#Core/data/Model#property-isCreating\">tentative record</a> yet to be confirmed as a new addition.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isModified",
          "description": "<p>True if this model has any uncommitted changes.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Editing"
        },
        {
          "name": "modifications",
          "description": "<p>Get a map of the modified fields in form of an object. The field <em>names</em> are used as the property names\nin the returned object.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Editing"
        },
        {
          "name": "modificationData",
          "description": "<p>Get a map of the modified fields in form of an object. The field´s <a href=\"#Core/data/field/DataField#config-dataSource\">dataSource</a>\nis used as the property name in the returned object. The record´s id is always included.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Editing"
        },
        {
          "name": "rawModificationData",
          "access": "internal",
          "description": "<p>Returns a map of the modified persistable fields</p>",
          "type": "Object",
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "modificationDataToWrite",
          "description": "<p>Get a map of the modified data fields along with any <a href=\"#Core/data/field/DataField#config-alwaysWrite\">alwaysWrite</a> fields, in\nform of an object. The field´s <em>dataSource</em> is used as the property name in the returned object.\nUsed internally by AjaxStore / CrudManager when sending updates.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Editing"
        },
        {
          "name": "persistableData",
          "access": "internal",
          "description": "<p>Returns data for <strong>all</strong> <a href=\"#Core/data/field/DataField#config-persist\">persistable</a> fields in form of an\nobject, using dataSource if present.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Editing"
        },
        {
          "name": "isCommitting",
          "description": "<p>True if this models changes are currently being committed.</p>",
          "type": "Boolean",
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "internalId",
          "description": "<p>Gets the records internalId. It is assigned during creation, guaranteed to be globally unique among models.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Identification"
        },
        {
          "name": "isPhantom",
          "description": "<p>Returns true if the record is new and has not been persisted (and received a proper id).</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Identification"
        },
        {
          "name": "hasGeneratedId",
          "description": "<p>Checks if record has a generated id. New records are assigned a generated id (starting with _generated), which should be\nreplaced on commit.</p>",
          "type": "Boolean",
          "scope": "instance",
          "category": "Identification"
        },
        {
          "name": "json",
          "description": "<p>Get the records data as a json string.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const record = new Model({\n    title    : 'Hello',\n    children : [\n        ...\n    ]\n});\n\nconst jsonString = record.json;\n\n//jsonString:\n'{&quot;title&quot;:&quot;Hello&quot;,&quot;children&quot;:[...]}'\n</code></pre>",
          "type": "String",
          "scope": "instance",
          "category": "JSON"
        },
        {
          "name": "isBatchUpdating",
          "description": "<p>True if this Model is currently batching its changes.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Editing"
        },
        {
          "name": "firstStore",
          "description": "<p>Get the first store that this model is assigned to.</p>",
          "type": "Core.data.Store",
          "scope": "instance",
          "readonly": true,
          "category": "Misc"
        },
        {
          "name": "isValid",
          "description": "<p>Check if record has valid data. Default implementation returns true, override in your model to do actual validation.</p>",
          "type": "Boolean",
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "isRemoved",
          "access": "internal",
          "description": "<p>Returns true if this record is not part of any store.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ],
      "fields": [
        {
          "name": "readOnly",
          "description": "<p>Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing\nfeatures such as cell editing and event dragging.</p>\n<p>Does not prevent altering the record programmatically, it can still be manipulated by application code.</p>\n<p>For more info, see the &quot;Read-only records&quot; section above.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "id",
          "description": "<p>Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as\nrecord.id. Will get a generated value if none is specified in records data.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "constructor",
          "description": "<p>Constructs a new record from the supplied data.</p>",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Raw data</p>",
              "optional": true
            },
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>Data store</p>",
              "optional": true
            },
            {
              "name": "meta",
              "type": "Object",
              "description": "<p>Meta data</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Lifecycle"
        },
        {
          "name": "equals",
          "description": "<p>Compares this Model instance to the passed instance. If they are of the same type, and all fields\n(except, obviously, <code>id</code>) are equal, this returns <code>true</code>.</p>",
          "parameters": [
            {
              "name": "other",
              "type": "Core.data.Model",
              "description": "<p>The record to compare this record with.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the other is of the same class and has all fields equal.</p>"
          }
        },
        {
          "name": "processData",
          "access": "private",
          "description": "<p>Processes raw data, converting values and setting defaults.</p>",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Raw data</p>"
            },
            {
              "name": "ignoreDefaults",
              "type": "Boolean",
              "description": "<p>Ignore setting default values, used when updating</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Fields",
          "returns": {
            "type": "Object",
            "description": "<p>Processed data</p>"
          }
        },
        {
          "name": "exposeProperties",
          "access": "internal",
          "description": "<p>Makes getters and setters for fields (from definitions and data). Called once when class is defined and once when\ndata is loaded first time.</p>",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Raw data</p>",
              "optional": true
            },
            {
              "name": "raw",
              "type": "Boolean",
              "description": "<p>True if data is raw (contains data sources), False if data contains field names</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Fields"
        },
        {
          "name": "addField",
          "description": "<p>Add a field definition in addition to those predefined in <code>fields</code>.</p>",
          "parameters": [
            {
              "name": "fieldDef",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A field name or definition</p>"
            }
          ],
          "scope": "static",
          "category": "Fields"
        },
        {
          "name": "removeField",
          "description": "<p>Remove a field definition by name.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field name</p>"
            }
          ],
          "scope": "static",
          "category": "Fields"
        },
        {
          "name": "exposeRelations",
          "access": "internal",
          "description": "<p>Makes getters and setters for related records. Populates a Model#relation array with the relations, to allow it\nto be modified later when assigning stores.</p>",
          "scope": "static",
          "category": "Relations"
        },
        {
          "name": "getFieldDefinition",
          "description": "<p>Convenience function to get the definition for a field from class.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field name</p>"
            }
          ],
          "scope": "instance",
          "category": "Fields",
          "returns": {
            "type": "Core.data.field.DataField"
          }
        },
        {
          "name": "getFieldDefinition",
          "description": "<p>Get the definition for a field by name. Caches results.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field name</p>"
            }
          ],
          "scope": "static",
          "category": "Fields",
          "returns": {
            "type": "Core.data.field.DataField",
            "description": "<p>Field definition or null if none found</p>"
          }
        },
        {
          "name": "getFieldDataSource",
          "access": "internal",
          "description": "<p>Returns dataSource configuration for a given field name</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>Field <code>dataSource</code> mapping</p>"
          }
        },
        {
          "name": "getDataSource",
          "description": "<p>Get the data source used by specified field. Returns the fieldName if no data source specified.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field name</p>"
            }
          ],
          "scope": "instance",
          "category": "Fields",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "processField",
          "description": "<p>Processes input to a field, converting to expected type.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field dataSource</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to process</p>"
            }
          ],
          "scope": "static",
          "category": "Fields",
          "returns": {
            "type": "*",
            "description": "<p>Converted value</p>"
          }
        },
        {
          "name": "initRelations",
          "access": "private",
          "description": "<p>Initializes model relations. Called from store when adding a record.</p>",
          "scope": "instance",
          "category": "Relations"
        },
        {
          "name": "initRelation",
          "access": "private",
          "description": "<p>Initializes/updates a single relation.</p>",
          "parameters": [
            {
              "name": "config",
              "description": "<p>Relation config</p>"
            }
          ],
          "scope": "instance",
          "category": "Relations",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Related record</p>"
          }
        },
        {
          "name": "get",
          "description": "<p>Get value for specified field name. You can also use the generated getters if loading through a Store.\nIf model is currently in batch operation this will return updated batch values which are not applied to Model\nuntil endBatch() is called.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field name to get value from</p>"
            }
          ],
          "scope": "instance",
          "category": "Fields",
          "returns": {
            "type": "*",
            "description": "<p>Fields value</p>"
          }
        },
        {
          "name": "setData",
          "access": "internal",
          "description": "<p>Internal function used to update a records underlying data block (record.data) while still respecting field\nmappings. Needed in cases where a field needs setting without triggering any associated behaviour and it has a\ndataSource with a different name.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// startDate mapped to data.beginDate\n{ name : 'startDate', dataSource : 'beginDate' }\n\n// Some parts of our code needs to update the data block without triggering any of the behaviour associated with\n// calling set. This would then not update &quot;beginDate&quot;:\nrecord.data.startDate = xx;\n\n// But this would\nrecord.setData('startDate', xx);\n</code></pre>",
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "getData",
          "description": "<p>Returns raw data from the encapsulated data object for the passed field name</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>The field to get data for.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*",
            "description": "<p>The raw data value for the field.</p>"
          }
        },
        {
          "name": "syncId",
          "access": "private",
          "description": "<p>Silently updates record's id with no flagging the property as modified.\nTriggers onModelChange event for changed id.</p>",
          "parameters": [
            {
              "name": "value",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>id value</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "set",
          "description": "<p>Set value for the specified field. You can also use the generated setters if loading through a Store.</p>\n<p>Setting a single field, supplying name and value:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>record.set('name', 'Clark');\n</code></pre>\n<p>Setting multiple fields, supplying an object:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>record.set({\n    name : 'Clark',\n    city : 'Metropolis'\n});\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The field to set value for, or an object with multiple values to set in one call</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to set</p>",
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "Store#event:idChange",
            "Store#event:update",
            "Store#event:change"
          ],
          "category": "Editing"
        },
        {
          "name": "isFieldModified",
          "description": "<p>Returns true if this model has uncommitted changes for the provided field.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field name</p>"
            }
          ],
          "scope": "instance",
          "category": "Editing",
          "returns": {
            "type": "Boolean",
            "description": "<p>True if the field is changed</p>"
          }
        },
        {
          "name": "getFieldPersistentValue",
          "access": "private",
          "description": "<p>Returns field value that should be persisted, or <code>undefined</code> if field is configured with <code>persist: false</code>.</p>",
          "parameters": [
            {
              "name": "nameOrField",
              "type": [
                "String",
                "Core.data.field.DataField"
              ],
              "description": "<p>Name of the field to get value for, or its field definition</p>"
            }
          ],
          "scope": "instance",
          "category": "Fields"
        },
        {
          "name": "clearChanges",
          "description": "<p>Clear stored changes, used on commit. Does not revert changes.</p>",
          "parameters": [
            {
              "name": "includeDescendants",
              "type": "Boolean",
              "description": "<p>Supply <code>false</code> to not clear node descendants</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "revertChanges",
          "description": "<p>Reverts changes in this back to their original values.</p>",
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "generateId",
          "description": "<p>Generates id for new record which starts with _generated.</p>",
          "scope": "instance",
          "category": "Identification",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "asId",
          "description": "<p>Gets the id of specified model or model data object, or the value if passed string/number.</p>",
          "parameters": [
            {
              "name": "model",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "static",
          "category": "Identification",
          "returns": {
            "type": [
              "String",
              "Number"
            ],
            "description": "<p>id</p>"
          }
        },
        {
          "name": "toJSON",
          "description": "<p>Used by <code>JSON.stringify()</code> to correctly convert this record to json.</p>\n<p>In most cases no point in calling it directly.</p>\n<pre class=\"prettyprint source\"><code>// This will call `toJSON()`\nconst json = JSON.stringify(record);\n</code></pre>\n<p>If called manually, the resulting object is a clone of <code>record.data</code> + the data of any children:</p>\n<pre class=\"prettyprint source\"><code>const record = new Model({\n    title    : 'Hello',\n    children : [\n        ...\n    ]\n});\n\nconst jsonObject = record.toJSON();\n\n// jsonObject:\n{\n    title : 'Hello',\n    children : [\n        ...\n    ]\n}\n</code></pre>",
          "scope": "instance",
          "category": "JSON",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "toString",
          "description": "<p>Represent the record as a string, by default as a JSON string. Tries to use an abbreviated version of the objects\ndata, using id + name/title/text/label/description. If no such field exists, the full data is used.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const record = new Model({ id : 1, name : 'Steve Rogers', alias : 'Captain America' });\nconsole.log(record.toString()); // logs { &quot;id&quot; : 1, &quot;name&quot; : &quot;Steve Rogers&quot; }\n</code></pre>",
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "hasBatchedChange",
          "description": "<p>Returns <code>true</code> if this Model currently has outstanding batched changes for the specified field name.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>The field name to check for batched updates on.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "beginBatch",
          "description": "<p>Begin a batch, which stores changes and commits them when the batch ends.\nPrevents events from being fired during batch.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>record.beginBatch();\nrecord.name = 'Mr Smith';\nrecord.team = 'Golden Knights';\nrecord.endBatch();\n</code></pre>\n<p>Please note that you can also set multiple fields in a single call using <a href=\"#Core/data/Model#function-set\">set</a>, which in many\ncases can replace using a batch:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>record.set({\n  name : 'Mr Smith',\n  team : 'Golden Knights'\n});\n</code></pre>",
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "endBatch",
          "description": "<p>End a batch, triggering events if data has changed.</p>",
          "parameters": [
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to not trigger events. If event is recurring, occurrences won't be updated automatically.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "cancelBatch",
          "description": "<p>Cancels current batch operation. Any changes during the batch are discarded.</p>",
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "triggerBeforeUpdate",
          "access": "private",
          "description": "<p>Triggers beforeUpdate event for each store and checks if changes can be made from event return value.</p>",
          "parameters": [
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Data changes</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>returns true if data changes are accepted</p>"
          }
        },
        {
          "name": "copy",
          "description": "<p>Makes a copy of this model, assigning the specified id or a generated id and also allowing you to pass field values to\nthe created copy.</p>\n<pre class=\"prettyprint source\"><code>const record = new Model({ name : 'Super model', hairColor : 'Brown' });\nconst clone = record.copy({ name : 'Super model clone' });\n</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": [
                "Number",
                "String",
                "Object"
              ],
              "description": "<p>The id for the copied instance, or any field values to apply\n(overriding the values from the source record). If no id provided, one will be auto-generated</p>",
              "optional": true
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>True to also clone children</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Editing",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Copy of this model</p>"
          }
        },
        {
          "name": "remove",
          "description": "<p>Removes this record from all stores (and in a tree structure, also from its parent if it has one).</p>",
          "parameters": [
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to not trigger events. If event is recurring, occurrences won't be updated automatically.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Editing"
        },
        {
          "name": "getRelationConfig",
          "access": "private",
          "description": "<p>Get a relation config by name, from the first store.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "scope": "instance",
          "category": "Relations",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "joinStore",
          "access": "internal",
          "description": "<p>Joins this record and any children to specified store, if not already joined.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>Store to join</p>"
            }
          ],
          "scope": "instance",
          "category": "Misc"
        },
        {
          "name": "unjoinStore",
          "access": "internal",
          "description": "<p>Unjoins this record and any children from specified store, if already joined.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>Store to join</p>"
            },
            {
              "name": "isReplacing",
              "type": "Boolean",
              "description": "<p><code>true</code> if this record is being replaced</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Misc"
        },
        {
          "name": "isPartOfStore",
          "access": "internal",
          "description": "<p>Returns true if this record is contained in the specified store, or in any store if store param is omitted.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>Store to join</p>"
            }
          ],
          "scope": "instance",
          "category": "Misc",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "instanceMeta",
          "access": "private",
          "description": "<p>Used to set per external instance meta data. For example useful when using a record in multiple grids to store some state\nper grid.</p>",
          "parameters": [
            {
              "name": "instanceOrId",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>External instance id or the instance itself, if it has id property</p>"
            }
          ],
          "scope": "instance",
          "category": "Misc"
        }
      ]
    },
    {
      "name": "Store",
      "modulePath": "Core/data/Store",
      "classDescription": "<p>The Store represents a data container which holds flat data or tree structures. An item in the Store is often called\na ´record´ and it is simply an instance of the <a href=\"#Core/data/Model\">Model</a> (or any subclass thereof).</p>\n<p>Typically you load data into a store to display it in a Grid or a ComboBox. The Store is the backing data component\nfor any component that is showing data in a list style UI.</p>\n<h2>Data format</h2>\n<p>Data is store in a JSON array the Store offers an API to edit, filter, group and sort the records.</p>\n<h2>Store with flat data</h2>\n<p>To create a flat store simply provide an array of objects that describe your records</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    data : [\n        { id : 1, name : 'ABBA', country : 'Sweden' },\n        { id : 2, name : 'Beatles', country : 'UK' }\n    ]\n});\n\n// retrieve record by id\nconst beatles = store.getById(2);\n</code></pre>\n<h2>Store with tree data</h2>\n<p>To create a tree store use <code>children</code> property for descendant records</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    tree: true,\n    data : [\n        { id : 1, name : 'ABBA', country : 'Sweden', children: [\n            { id: 2, name: 'Agnetha' },\n            { id: 3, name: 'Bjorn' },\n            { id: 4, name: 'Benny' },\n            { id: 5, name: 'Anni-Frid' }\n        ]},\n    ]\n});\n\n// retrieve record by id\nlet benny = store.getById(4);\n</code></pre>\n<p>Optionally a tree store can consume a flat dataset with nodes that have a <code>parentId</code> property. By configuring the\nstore with <code>tree : true</code> and <code>transformFlatData : true</code>, the flat data is transformed into tree data:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    tree              : true,\n    transformFlatData : true,\n    data              : [\n        { id : 1, name : 'ABBA', country : 'Sweden' },\n        { id : 2, name : 'Agnetha', parentId : 1 },\n        { id : 3, name : 'Bjorn', parentId : 1 },\n        { id : 4, name : 'Benny', parentId : 1 },\n        { id : 5, name : 'Anni-Frid', parentId : 1 }\n    ]\n});\n</code></pre>\n<h3>Retrieving and consuming JSON</h3>\n<p>For both flat stores or tree stores it is possible to retrieve the data of all records in JSON format:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const jsonString = store.json;\n\n// or\n\nconst jsonArray = store.toJSON();\n</code></pre>\n<p>To plug the JSON data back in later:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.data = JSON.parse(jsonString);\n\n// or\n\nstore.data = jsonArray;\n</code></pre>\n<h2>Sharing stores</h2>\n<p>You cannot directly share a Store between widgets, but the data in a Store can be shared. There are two different\napproaches depending on your needs, sharing data and chaining stores:</p>\n<h3>Shared data</h3>\n<p>To create 2 widgets that share data, you can create 2 separate stores and pass records of the first store as the\ndataset of the second store.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let combo1 = new Combo({\n    appendTo : document.body,\n    store    : new Store({\n        data : [\n            { id : 1, name : 'ABBA', country : 'Sweden' },\n            { id : 2, name : 'Beatles', country : 'UK' }\n        ]\n    }),\n    valueField   : 'id',\n    displayField : 'name'\n});\n\nlet combo2 = new Combo({\n    appendTo : document.body,\n    store    : new Store({\n        data : combo1.store.records\n    }),\n    valueField   : 'id',\n    displayField : 'name'\n});\n\ncombo1.store.first.name = 'foo';\ncombo2.store.first.name; // &quot;foo&quot;\n</code></pre>\n<h3>Chained stores</h3>\n<p>Another more powerful option to share data between widgets is to create <a href=\"#Core/data/mixin/StoreChained\">chained</a>\nstores. The easiest way to create a chained store is to call <a href=\"#Core/data/Store#function-chain\">chain</a> function.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let combo1 = new Combo({\n    appendTo : document.body,\n    store    : new Store({\n        data : [\n            { id : 1, name : 'ABBA', country : 'Sweden' },\n            { id : 2, name : 'Beatles', country : 'UK' }\n        ]\n    }),\n    valueField   : 'id',\n    displayField : 'name'\n});\n\nlet combo2 = new Combo({\n    appendTo     : document.body,\n    store        : combo1.store.chain(),\n    valueField   : 'id',\n    displayField : 'name'\n});\n\ncombo1.store.first.name = 'foo';\ncombo2.store.first.name; // &quot;foo&quot;\n</code></pre>\n<p>A chained store can optionally be created with a filtering function, to only contain a subset of the records from\nthe main store. In addition, the chained store will reflect record removals/additions to the master store, something\nthe shared data approach will not.</p>",
      "extends": [
        "Core/Base"
      ],
      "mixes": [
        "Core/mixin/Events",
        "Core/data/mixin/StoreFilter",
        "Core/data/mixin/StoreCRUD",
        "Core/data/mixin/StoreSum",
        "Core/data/mixin/StoreSearch",
        "Core/data/mixin/StoreSort",
        "Core/data/mixin/StoreGroup",
        "Core/data/mixin/StoreChained",
        "Core/data/mixin/StoreState",
        "Core/data/mixin/StoreTree",
        "Core/data/stm/mixin/StoreStm",
        "Core/data/mixin/StoreSync"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Store.js",
      "path": "/Calendar/lib/Core/data",
      "properties": [
        {
          "name": "id",
          "description": "<p>Store's unique identifier.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "readonly": true,
          "category": "Common"
        },
        {
          "name": "modelClass",
          "description": "<p>Class used to represent records. Defaults to class Model.</p>",
          "type": "Core.data.Model",
          "scope": "inner",
          "category": "Records",
          "typings": {
            "returns": "typeof Model"
          }
        },
        {
          "name": "allRecords",
          "description": "<p>Returns all records (not filtered) from the store.</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "instance",
          "readonly": true,
          "category": "Records"
        },
        {
          "name": "stores",
          "description": "<p>Get all registered stores</p>",
          "type": "Array.<Core.data.Store>",
          "scope": "static"
        },
        {
          "name": "rootNode",
          "description": "<p>The invisible root node of this tree.</p>",
          "type": "Core.data.Model",
          "scope": "instance",
          "readonly": true,
          "category": "Tree"
        },
        {
          "name": "data",
          "description": "<p>Sets data in the store.</p>\n<p>Expects an array of JavaScript objects, with properties matching store's fields (defined on its\n<a href=\"#Core/data/Store#config-modelClass\">model</a> or in the <a href=\"#Core/data/Store#config-fields\">fields</a> config).</p>\n<p>Called on initialization if data is in config otherwise call it yourself after ajax call etc. Can also be used to\nget the raw original data.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.data = [\n    { id : 1, name : 'Linda', city : 'NY' },\n    { id : 2, name : 'Olivia', city : 'Paris' },\n    ...\n];\n</code></pre>",
          "type": "Array.<Object>",
          "scope": "instance",
          "category": "Records"
        },
        {
          "name": "originalCount",
          "description": "<p>Record count, for data records. Not including records added for group headers etc.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Records"
        },
        {
          "name": "count",
          "description": "<p>Record count, including records added for group headers etc.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Records"
        },
        {
          "name": "allCount",
          "description": "<p>Returns the complete dataset size regardless of tree node collapsing or filtering</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Records"
        },
        {
          "name": "records",
          "description": "<p>Returns all &quot;visible&quot; records.\n<strong>Note:</strong> The returned value <strong>may not</strong> be mutated!</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "instance",
          "readonly": true,
          "category": "Records"
        },
        {
          "name": "first",
          "description": "<p>Get the first record in the store.</p>",
          "type": "Core.data.Model",
          "scope": "instance",
          "readonly": true,
          "category": "Records"
        },
        {
          "name": "last",
          "description": "<p>Get the last record in the store.</p>",
          "type": "Core.data.Model",
          "scope": "instance",
          "readonly": true,
          "category": "Records"
        },
        {
          "name": "json",
          "description": "<p>Retrieve or set the data of all records as a JSON string</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    data : [\n        { id : 1, name : 'Superman' },\n        { id : 2, name : 'Batman' }\n    ]\n});\n\nconst jsonString = store.json;\n\n//jsonString:\n'[{&quot;id&quot;:1,&quot;name&quot;:&quot;Superman&quot;},{&quot;id&quot;:2,&quot;name&quot;:&quot;Batman&quot;}]\n</code></pre>",
          "type": "String",
          "scope": "instance"
        },
        {
          "name": "formattedJSON",
          "description": "<p>Pretty printed version of <a href=\"#Core/data/Store#property-json\">json</a></p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "id",
          "description": "<p>Store's unique identifier. When set the store is added to a store map accessible through\n<code>Store.getStore(id)</code>.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "modelClass",
          "description": "<p>Class used to represent records in the store, should be a subclass of <a href=\"#Core/data/Model\">Model</a>. Only\napplies when supplying data to the store (load, add), any supplied record instances are kept as is.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyModel extends Model {\n    static get fields() {\n        return [\n            'name',\n            'city',\n            'company'\n        ]\n    }\n}\n\nconst store = new Store({\n    modelClass : MyModel,\n    data : [\n        { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },\n        ...\n    ]\n});\n</code></pre>",
          "type": "Core.data.Model",
          "scope": "inner",
          "category": "Common",
          "typings": {
            "returns": "typeof Model"
          }
        },
        {
          "name": "fields",
          "description": "<p>An array of field definitions used to create a <a href=\"#Core/data/Model\">Model</a> (modelClass) subclass. Optional.\nIf the Model already has fields defined, these fields will extend those.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    fields : ['name', 'city', 'company'],\n    data   : [\n        { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },\n        ...\n    ]\n});\n</code></pre>\n<p>See <a href=\"#Core/data/Model\">Model</a> for more info on defining fields, changing data source and mapping fields to\nnested objects.</p>\n<p>Note that pre-created record instances supplied to the store are kept as is and thus these fields will\nnot apply to them.</p>",
          "type": [
            "Array.<String>",
            "Array.<Object>",
            "Array.<Core.data.field.DataField>"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "autoTree",
          "description": "<p>Automatically detect from set data if used as tree store or flat store</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Tree"
        },
        {
          "name": "data",
          "description": "<p>Raw data to load initially.</p>\n<p>Expects an array of JavaScript objects, with properties matching store's fields (defined on its\n<a href=\"#Core/data/Store#config-modelClass\">model</a> or in the <a href=\"#Core/data/Store#config-fields\">fields</a> config).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    data : [\n        { id : 1, name : 'Linda', city : 'NY' },\n        { id : 2, name : 'Olivia', city : 'Paris' },\n        ...\n    ]\n});\n</code></pre>",
          "type": [
            "Array.<Object>",
            "Array.<Core.data.Model>"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "tree",
          "description": "<p><code>true</code> to act as a tree store.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Tree"
        },
        {
          "name": "storage",
          "description": "<p>A <a href=\"#Core/util/Collection\">Collection</a>, or Collection config object\nto use to contain this Store's constituent records.</p>",
          "type": [
            "Core.util.Collection",
            "Object"
          ],
          "scope": "inner",
          "category": "Advanced"
        },
        {
          "name": "useRawData",
          "description": "<p>Retools the loaded data objects instead of making shallow copies of them. This increases performance but\npollutes the incoming data and does not allow remapping of fields (dataSource).</p>\n<p>Also allows disabling certain steps in data loading, to further improve performance. Either accepts an\nobject with the params described below or <code>true</code> which equals <code>disableDuplicateIdCheck</code> and\n<code>disableTypeConversion</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// No duplicate id checking, no type conversions\nnew Store({ useRawData : true });\n\nnew Store({\n  // No type conversions only\n  useRawData : {\n    disableTypeConversion : true\n  }\n});\n</code></pre>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "category": "Advanced",
          "parameters": [
            {
              "name": "disableDuplicateIdCheck",
              "type": "Boolean",
              "description": "<p>Data must not contain duplicate ids, check is bypassed.</p>",
              "optional": true
            },
            {
              "name": "disableDefaultValue",
              "type": "Boolean",
              "description": "<p>Default values will not be applied to record fields.</p>",
              "optional": true
            },
            {
              "name": "disableTypeConversion",
              "type": "Boolean",
              "description": "<p>No type conversions will be performed on record data.</p>",
              "optional": true
            }
          ]
        },
        {
          "name": "allowNoId",
          "description": "<p>Specify <code>false</code> to prevent loading records without ids, a good practise to enforce when syncing with a\nbackend.</p>\n<p>By default Store allows loading records without ids, in which case a generated id will be assigned.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Advanced"
        },
        {
          "name": "preventSubClassingModel",
          "access": "private",
          "description": "<p>Prevent dynamically subclassing the modelClass. It does so by default to not pollute it when exposing\nproperties. Should rarely need to be used.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Advanced"
        }
      ],
      "events": [
        {
          "name": "idChange",
          "description": "<p>Fired when the id of a record has changed</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Modified record</p>"
            },
            {
              "name": "oldValue",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>Old id</p>"
            },
            {
              "name": "value",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>New id</p>"
            }
          ]
        },
        {
          "name": "beforeUpdate",
          "description": "<p>Fired before record is modified in this store.\nModification may be vetoed by returning <code>false</code> from a handler.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Modified record</p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Modification data</p>"
            }
          ]
        },
        {
          "name": "update",
          "description": "<p>Fired when a record is modified</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Modified record</p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Modification data</p>"
            }
          ]
        },
        {
          "name": "batchedUpdate",
          "access": "private",
          "description": "<p>Fired when one of this Store's constituent records is modified while in\n<a href=\"#Core/data/Model#function-beginBatch\">batched</a> state. This may be used to keep\nUIs up to date while &quot;tentative&quot; changes are made to a record which must not be synced with a server.</p>"
        },
        {
          "name": "rootChange",
          "description": "<p>Fired when the root node is set</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "oldRoot",
              "type": "Core.data.Model",
              "description": "<p>The old root node.</p>"
            },
            {
              "name": "rootNode",
              "type": "Core.data.Model",
              "description": "<p>The new root node.</p>"
            }
          ]
        },
        {
          "name": "change",
          "description": "<p>Data in the store was changed. This is a catch-all event which is fired for all changes\nwhich take place to the store's data.</p>\n<p>This includes mutation of individual records, adding and removal of records, as well as\nsetting a new data payload using the <a href=\"#Core/data/Store#property-data\">data</a> property, sorting, filtering,\nand calling <a href=\"#Core/data/mixin/StoreCRUD#function-removeAll\">removeAll</a>.</p>\n<p>Simple databound widgets may use to the <code>change</code> event to refresh their UI without having to add multiple\nlisteners to the <a href=\"#Core/data/Store#event-update\">update</a>, <a href=\"#Core/data/mixin/StoreCRUD#event-add\">add</a>,\n<a href=\"#Core/data/mixin/StoreCRUD#event-remove\">remove</a>, <a href=\"#Core/data/Store#event-refresh\">refresh</a> and\n<a href=\"#Core/data/mixin/StoreCRUD#event-removeAll\">removeAll</a> events.</p>\n<p>A more complex databound widget such as a grid may use the more granular events to perform less\ndestructive updates more appropriate to each type of change. The properties will depend upon the value of the\n<code>action</code> property.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store.</p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Name of action which triggered the change. May be one of:</p>\n<ul>\n<li><code>'remove'</code></li>\n<li><code>'removeAll'</code></li>\n<li><code>'add'</code></li>\n<li><code>'updatemultiple'</code></li>\n<li><code>'clearchanges'</code></li>\n<li><code>'filter'</code></li>\n<li><code>'update'</code></li>\n<li><code>'dataset'</code></li>\n<li><code>'replace'</code></li>\n</ul>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Changed record, for actions that affects exactly one record (<code>'update'</code>)</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Changed records, passed for all actions except <code>'removeAll'</code></p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Passed for the <code>'update'</code> action, info on which record fields changed</p>"
            }
          ]
        },
        {
          "name": "refresh",
          "description": "<p>Data in the store has completely changed, such as by a filter, or sort or load operation.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store.</p>"
            },
            {
              "name": "batch",
              "type": "Boolean",
              "description": "<p>Flag set to <code>true</code> when the refresh is triggered by ending a batch</p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Name of action which triggered the change. May be one of:</p>\n<ul>\n<li><code>'dataset'</code></li>\n<li><code>'sort'</code></li>\n<li><code>'clearchanges'</code></li>\n<li><code>'filter'</code></li>\n<li><code>'create'</code></li>\n<li><code>'update'</code></li>\n<li><code>'delete'</code></li>\n<li><code>'group'</code>.</li>\n</ul>"
            }
          ]
        },
        {
          "name": "addConfirmed",
          "description": "<p>Fired when a temporary record with the <a href=\"#Core/data/Model#property-isCreating\">isCreating</a> property set\nhas been confirmed as a part of this store by having its <a href=\"#Core/data/Model#property-isCreating\">isCreating</a>\nproperty cleared.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store.</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record confirmed as added.</p>"
            }
          ]
        },
        {
          "name": "move",
          "description": "<p>Fired when a block of records has been moved within this Store</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>(DEPRECATED) The first record moved (The\n<a href=\"#Core/data/mixin/StoreCRUD#function-move\">move</a> API now accepts an array of records to move).</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The records moved.</p>"
            },
            {
              "name": "from",
              "type": "Number",
              "description": "<p>The index from which the record was removed (applicable only for flat store).</p>"
            },
            {
              "name": "to",
              "type": "Number",
              "description": "<p>The index at which the record was inserted (applicable only for flat store).</p>"
            },
            {
              "name": "newParent",
              "type": "Core.data.Model",
              "description": "<p>The new parent record for the dragged records (applicable only for tree stores)</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "from",
          "access": "private",
          "description": "<p>Retrieves/creates a store based on the passed config.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Core.data.Store</td>\n<td>Returns supplied store as is</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Retrieves an existing store by id</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>Creates a new store using supplied config object</td>\n</tr>\n<tr>\n<td>Object[]</td>\n<td>Creates a new store, populated with records created from supplied data</td>\n</tr>\n<tr>\n<td>Core.data.Model[]</td>\n<td>Creates a new store, populated with supplied records</td>\n</tr>\n</tbody>\n</table>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "Core.data.Store",
                "Object",
                "String",
                "Array.<Object>",
                "Array.<Core.data.Model>"
              ]
            },
            {
              "name": "defaults",
              "type": "Object",
              "description": "<p>Config object to apply when creating a new store for passed data</p>",
              "optional": true
            },
            {
              "name": "converterFn",
              "type": "function",
              "description": "<p>Function called for each data object prior to creating a record from it. The\nreturn value is used to create a record.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "beginBatch",
          "description": "<p>Stops this store from firing events until <a href=\"#Core/data/Store#function-endBatch\">endBatch</a> is called. Multiple calls to <code>beginBatch</code>\nstack up, and will require an equal number of <code>endBatch</code> calls to resume events.</p>\n<p>Upon call of <a href=\"#Core/data/Store#function-endBatch\">endBatch</a>, a <a href=\"#Core/data/Store#event-refresh\">refresh</a> event is triggered to allow UIs to\nupdate themselves based upon the new state of the store.</p>\n<p>This is extremely useful when making a large number of changes to a store. It is important not to trigger\ntoo many UI updates for performance reasons. Batching the changes ensures that UIs attached to this\nstore are only updated once at the end of the updates.</p>",
          "scope": "instance"
        },
        {
          "name": "endBatch",
          "description": "<p>Ends event suspension started by <a href=\"#Core/data/Store#function-beginBatch\">beginBatch</a>. Multiple calls to <a href=\"#Core/data/Store#function-beginBatch\">beginBatch</a>\nstack up, and will require an equal number of <code>endBatch</code> calls to resume events.</p>\n<p>Upon call of <code>endBatch</code>, a <a href=\"#Core/data/Store#event-refresh\">refresh</a> event with <code>action: batch</code> is triggered to allow UIs to update\nthemselves based upon the new state of the store.</p>\n<p>This is extremely useful when making a large number of changes to a store. It is important not to trigger\ntoo many UI updates for performance reasons. Batching the changes ensures that UIs attached to this\nstore are only updated once at the end of the updates.</p>",
          "scope": "instance"
        },
        {
          "name": "onIsCreatingToggle",
          "access": "internal",
          "description": "<p>Called by owned record when the record has its <a href=\"#Core/data/Model#property-isCreating\">isCreating</a>\nproperty toggled.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record that is being changed.</p>"
            },
            {
              "name": "isCreating",
              "type": "Boolean",
              "description": "<p>The new value of the <a href=\"#Core/data/Model#property-isCreating\">isCreating</a> property.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onDataChange",
          "access": "protected",
          "description": "<p>Responds to mutations of the underlying storage Collection</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onModelChange",
          "access": "private",
          "description": "<p>This is called from Model after mutating any fields so that Stores can take any actions necessary at that point,\nand distribute mutation event information through events.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record which has just changed</p>"
            },
            {
              "name": "toSet",
              "type": "Object",
              "description": "<p>A map of the field names and values that were passed to be set</p>"
            },
            {
              "name": "wasSet",
              "type": "Object",
              "description": "<p>A map of the fields that were set. Each property is a field name, and\nthe property value is an object containing two properties: <code>oldValue</code> and <code>value</code> eg:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    {\n        name {\n            oldValue : 'Rigel',\n            value : 'Nigel'\n        }\n    }</code></pre>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Do not trigger events</p>"
            },
            {
              "name": "fromRelationUpdate",
              "type": "Boolean",
              "description": "<p>Update caused by a change in related model</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getStore",
          "description": "<p>Get a store from the store map by id.</p>",
          "parameters": [
            {
              "name": "id",
              "type": [
                "String",
                "Number",
                "Array.<Object>"
              ],
              "description": "<p>The id of the store to retrieve, or an array of objects\nfrom which to create the contents of a new Store.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.data.Store",
            "description": "<p>The store with the specified id</p>"
          }
        },
        {
          "name": "getRange",
          "description": "<p>Creates an array of records from this store from the <code>start</code> to the `end' - 1</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Number",
              "description": "<p>The index of the first record to return</p>",
              "optional": true
            },
            {
              "name": "end",
              "type": "Number",
              "description": "<p>The index <em>after</em> the last record to return <code>(start + length)</code></p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Array.<Core.data.Model>",
            "description": "<p>The requested records.</p>"
          }
        },
        {
          "name": "createRecord",
          "description": "<p>Creates a model instance, used internally when data is set/added. Override this in a subclass to do your own custom\nconversion from data to record.</p>",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Json data</p>"
            },
            {
              "name": "skipExpose",
              "type": "Boolean",
              "description": "<p>Supply true when batch setting to not expose properties multiple times</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Records"
        },
        {
          "name": "getCount",
          "description": "<p>Number of records in the store</p>",
          "parameters": [
            {
              "name": "countProcessed",
              "type": "Boolean",
              "description": "<p>Count processed (true) or real records (false)</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Number",
            "description": "<p>Record count</p>"
          }
        },
        {
          "name": "getAt",
          "description": "<p>Get the record at the specified index</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index for the record</p>"
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Record at the specified index</p>"
          }
        },
        {
          "name": "getById",
          "description": "<p>Get a record by id. Find the record even if filtered out, part of collapsed group or collapsed node</p>",
          "parameters": [
            {
              "name": "id",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Id of record to return.</p>"
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>A record with the specified id</p>"
          }
        },
        {
          "name": "isAvailable",
          "description": "<p>Checks if a record is available, in the sense that it is not filtered out,\nhidden in a collapsed group or in a collapsed node.</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record to check</p>"
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "getByInternalId",
          "description": "<p>Get a record by internalId.</p>",
          "parameters": [
            {
              "name": "internalId",
              "type": "Number",
              "description": "<p>The internalId of the record to return</p>"
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>A record with the specified internalId</p>"
          }
        },
        {
          "name": "includes",
          "description": "<p>Checks if the specified record is contained in the store</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record, or <code>id</code> of record</p>"
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "indexOf",
          "description": "<p>Returns the index of the specified record/id, or <code>-1</code> if not found.</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record, or <code>id</code> of record to return the index of.</p>"
            },
            {
              "name": "visibleRecords",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to find the visible index.\nas opposed to the dataset index. This omits group header records.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Records",
          "returns": {
            "type": "Number",
            "description": "<p>Index for the record/id, or <code>-1</code> if not found.</p>"
          }
        },
        {
          "name": "getDistinctValues",
          "description": "<p>Returns an array of distinct values for the specified field.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.getDistinctValues('age'); // Returns an array of the unique age values\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to extract values for</p>"
            },
            {
              "name": "searchAllRecords",
              "type": "Boolean",
              "description": "<p>True to ignore any applied filters</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Values",
          "returns": {
            "type": "Array",
            "description": "<p>Array of values</p>"
          }
        },
        {
          "name": "getValueCount",
          "description": "<p>Counts how many times specified value appears in the store</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to look in</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to look for</p>"
            }
          ],
          "scope": "instance",
          "category": "Values",
          "returns": {
            "type": "Number",
            "description": "<p>Found count</p>"
          }
        },
        {
          "name": "toJSON",
          "description": "<p>Retrieve the data of all (unfiltered) records as an array of JSON objects.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    data : [\n        { id : 1, name : 'Superman' },\n        { id : 2, name : 'Batman' }\n    ]\n});\n\nconst jsonArray = store.toJSON();\n\n//jsonArray:\n[{id:1,name:&quot;Superman&quot;},{id:2,name:&quot;Batman&quot;}]\n</code></pre>",
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>"
          }
        },
        {
          "name": "forEach",
          "description": "<p>Iterates over all normal records in store. Omits group header and footer records if this store is grouped.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function that is called for each record. Returning <code>false</code> from that function cancels\niteration. It is called with the following arguments:</p>"
            },
            {
              "name": "fn.record",
              "type": "Core.data.Model",
              "description": "<p>Current record</p>",
              "isSubParam": true
            },
            {
              "name": "fn.index",
              "type": "Number",
              "description": "<p>Current index</p>",
              "isSubParam": true
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>",
              "optional": true
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>A boolean for <code>includeFilteredOutRecords</code>, or detailed options for\nexclude/include records</p>",
              "optional": true
            },
            {
              "name": "options.includeFilteredOutRecords",
              "type": "Boolean",
              "description": "<p><code>true</code> to also include filtered out records</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.includeCollapsedGroupRecords",
              "type": "Boolean",
              "description": "<p><code>true</code> to also include records from collapsed groups of\ngrouped store</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Iteration"
        },
        {
          "name": "map",
          "description": "<p>Equivalent to Array.map(). Creates a new array with the results of calling a provided function on every record</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "scope": "instance",
          "category": "Iteration",
          "returns": {
            "type": "Array"
          }
        },
        {
          "name": "reduce",
          "description": "<p>Equivalent to Array.reduce(). Applies a function against an accumulator and each record (from left to right) to\nreduce it to a single value.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            },
            {
              "name": "initialValue",
              "type": "*"
            }
          ],
          "scope": "instance",
          "category": "Iteration",
          "returns": {
            "type": "*"
          }
        },
        {
          "name": "traverse",
          "description": "<p>Traverse all tree nodes (only applicable for Tree Store)</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call on visiting each node.</p>"
            },
            {
              "name": "topNode",
              "type": "Core.data.Model",
              "description": "<p>The top node to start the traverse at.</p>",
              "default": "this.rootNode",
              "optional": true
            },
            {
              "name": "skipTopNode",
              "type": "Boolean",
              "description": "<p>Pass true to not call <code>fn</code> on the top node, but proceed directly to its children.</p>",
              "optional": true
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>A boolean for includeFilteredOutRecords, or detailed options for exclude/include records</p>",
              "optional": true
            },
            {
              "name": "options.includeFilteredOutRecords",
              "type": "Boolean",
              "description": "<p>True to also include filtered out records</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.includeCollapsedGroupRecords",
              "type": "Boolean",
              "description": "<p>True to also include records from collapsed groups of grouped store</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Traverse"
        },
        {
          "name": "traverseWhile",
          "description": "<p>Traverse all tree nodes while the passed <code>fn</code> returns true</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call on visiting each node. Returning <code>false</code> from it stops the traverse.</p>"
            },
            {
              "name": "topNode",
              "type": "Core.data.Model",
              "description": "<p>The top node to start the traverse at.</p>",
              "default": "this.rootNode",
              "optional": true
            },
            {
              "name": "skipTopNode",
              "type": "Boolean",
              "description": "<p>Pass true to not call <code>fn</code> on the top node, but proceed directly to its children.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Traverse"
        },
        {
          "name": "getNext",
          "description": "<p>Finds the next record.</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Current record or its id</p>"
            },
            {
              "name": "wrap",
              "type": "Boolean",
              "description": "<p>Wrap at start/end or stop there</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "skipSpecialRows",
              "type": "Boolean",
              "description": "<p>True to not return specialRows like group headers</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Traverse",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Next record or null if current is the last one</p>"
          }
        },
        {
          "name": "getPrev",
          "description": "<p>Finds the previous record.</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Current record or its id</p>"
            },
            {
              "name": "wrap",
              "type": "Boolean",
              "description": "<p>Wrap at start/end or stop there</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "skipSpecialRows",
              "type": "Boolean",
              "description": "<p>True to not return specialRows like group headers</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Traverse",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Previous record or null if current is the last one</p>"
          }
        },
        {
          "name": "getAdjacent",
          "access": "internal",
          "description": "<p>Gets the next or the previous record. Optionally wraps from first -&gt; last and vice versa</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "String",
                "Core.data.Model"
              ],
              "description": "<p>Record or records id</p>"
            },
            {
              "name": "next",
              "type": "Boolean",
              "description": "<p>Next (true) or previous (false)</p>",
              "default": true
            },
            {
              "name": "wrap",
              "type": "Boolean",
              "description": "<p>Wrap at start/end or stop there</p>",
              "default": false
            },
            {
              "name": "skipSpecialRows",
              "type": "Boolean",
              "description": "<p>True to not return specialRows like group headers</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Traverse",
          "returns": {
            "type": "Core.data.Model"
          }
        },
        {
          "name": "getNextLeaf",
          "access": "internal",
          "description": "<p>Finds the next record among leaves (in a tree structure)</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Current record or its id</p>"
            },
            {
              "name": "wrap",
              "type": "Boolean",
              "description": "<p>Wrap at start/end or stop there</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Traverse",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Next record or null if current is the last one</p>"
          }
        },
        {
          "name": "getPrevLeaf",
          "access": "internal",
          "description": "<p>Finds the previous record among leaves (in a tree structure)</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Current record or its id</p>"
            },
            {
              "name": "wrap",
              "type": "Boolean",
              "description": "<p>Wrap at start/end or stop there</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Traverse",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Previous record or null if current is the last one</p>"
          }
        },
        {
          "name": "getAdjacentLeaf",
          "access": "internal",
          "description": "<p>Gets the next or the previous record among leaves (in a tree structure). Optionally wraps from first -&gt; last and\nvice versa</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "String",
                "Core.data.Model"
              ],
              "description": "<p>Record or record id</p>"
            },
            {
              "name": "next",
              "type": "Boolean",
              "description": "<p>Next (true) or previous (false)</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "wrap",
              "type": "Boolean",
              "description": "<p>Wrap at start/end or stop there</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Traverse",
          "returns": {
            "type": "Core.data.Model"
          }
        }
      ]
    },
    {
      "name": "ArrayDataField",
      "modulePath": "Core/data/field/ArrayDataField",
      "classDescription": "<p>This field class handles fields that hold an array.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Task extends Model {\n    static get fields() {\n        return [\n            'name',\n            // Array field\n            { name : 'todo', type : 'array' }\n        ];\n    }\n}\n</code></pre>\n<p>A record can be constructed like this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const task = new Task({\n    name : 'Task 1',\n    todo : [\n        { text : 'Something', done : false },\n        { text : 'Some other thing', done : true }\n    ]\n};\n</code></pre>\n<p>Or by populating a store:</p>\n<pre class=\"prettyprint source\"><code>const store = new Store({\n    modelClass : Task,\n    data : [\n        {\n            name : 'Task 1',\n            todo : [\n                { text : 'Something', done : false },\n                { text : 'Some other thing', done : true }\n            ]\n        },\n        ...\n    ]\n});\n\n</code></pre>\n<p>For the field to count as modified, the whole array has to be replaced:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// This wont be detected as a modification\ntask.todo[0].done = true;\n// task.isModified === false\n\n// But this will\nconst todo = task.todo.slice(); // Create a new array with same contents\ntodo[0].done = true;\ntask.todo = todo;\n// task.isModified === true\n</code></pre>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ArrayDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "array"
    },
    {
      "name": "BooleanDataField",
      "modulePath": "Core/data/field/BooleanDataField",
      "classDescription": "<p>This field class handles field of type <code>Boolean</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'active', type : 'boolean' }\n        ];\n    }\n}\n</code></pre>\n<p>When a field is declared as a <code>'boolean'</code>, non-null values are promoted to <code>Boolean</code> type. This is seldom required,\nbut can be useful if a field value is received as a number but should be treated as a boolean.</p>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "BooleanDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "boolean",
      "configs": [
        {
          "name": "nullValue",
          "description": "<p>The value to replace <code>null</code> when the field is not <code>nullable</code>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "DataField",
      "modulePath": "Core/data/field/DataField",
      "classDescription": "<p>This is the base class for Model field classes. A field class defines how to handle the data for a particular type\nof field. Many of these behaviors can be configured on individual field instances.</p>",
      "extends": [
        "Core/Base"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "configs": [
        {
          "name": "name",
          "description": "<p>The name of the field.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "label",
          "description": "<p>The label text for a form item generated for this field. This is also used to create\na column header for a <a href=\"#Core/data/field/DataField#config-column\">column</a> for this field.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "column",
          "description": "<p>A column config object for a column to display this field in a grid. For simple, atomic\ndata types, such as <code>date</code>, <code>string</code>, <code>boolean</code>, <code>number</code> and <code>integer</code>, this is optional\nand the appropriate column type can be inferred.</p>\n<p>This also provides default values for column configuration if a configured column definition\nfor a grid lacks a property.</p>\n<p>For complex fields, such as identifiers which link to other records, a more capable\ncolumn type may be specified, for example a <code>type : </code>number'` field may be configured\nwith</p>\n<pre class=\"prettyprint source lang-javascript\"><code>column : 'percent'\n</code></pre>\n<p>or</p>\n<pre class=\"prettyprint source lang-javascript\"><code>column : {\n    type : 'percent',\n    width : 100\n}\n</code></pre>\n<p>if it represents a percentage vaue and needs appropriate rendering and editing.</p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "editor",
          "access": "private",
          "description": "<p>A config object for a widget to edit this field in a form. For simple, atomic\ndata types, such as <code>date</code>, <code>string</code>, <code>boolean</code>, <code>number</code> and <code>integer</code>, this is optional\nand the appropriate input widget type can be inferred.</p>\n<p>For complex fields, such as identifiers which link to other records, a more capable\nwidget may be specified.</p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "compare",
          "description": "<p>A function that compares two values and returns a value &lt; 0 if the first is less than the second, or 0\nif the values are equal, or a value &gt; 0 if the first is greater than the second.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "compareItems",
          "access": "internal",
          "description": "<p>A function that compares two objects or records using the <code>compare</code> function on the properties of each\nobjects based on the <code>name</code> of this field.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "dataSource",
          "description": "<p>The property in a record's data object that contains the field's value.\nDefaults to the field's <code>name</code>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "defaultValue",
          "description": "<p>The default value to assign to this field in a record if no value is provided.</p>",
          "type": "*",
          "scope": "inner"
        },
        {
          "name": "alwaysWrite",
          "description": "<p>Setting to <code>true</code> will ensure this field is included in any update/insert request payload\nwhen a Store / Project / CrudManager performs a request.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "nullable",
          "description": "<p>Setting to <code>false</code> indicates that <code>null</code> is not a valid value.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "nullText",
          "description": "<p>The value to return from <a href=\"#Core/data/field/DataField#function-print\">print</a> for a <code>null</code> or <code>undefined</code> value.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "nullValue",
          "description": "<p>The value to replace <code>null</code> when the field is not <code>nullable</code>.</p>",
          "type": "*",
          "scope": "inner"
        },
        {
          "name": "persist",
          "description": "<p>Set to <code>false</code> to exclude this field when saving records to a server.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "readOnly",
          "description": "<p>Set to <code>true</code> for the field's set accessor to ignore attempts to set this field.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "internal",
          "description": "<p>By default, defined <a href=\"#Core/data/Model\">Model</a> fields may be used to create a grid column\nsuitable for diplaying that field in a grid cell. Some fields may not be suitable for\nfeatures which automatically generate columns for view. These fields are created using\n<code>internal : true</code>. Some examples are the <code>expanded</code> and <code>rowHeight</code> fields which are used\ninternally.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "properties": [
        {
          "name": "definedBy",
          "access": "private",
          "description": "<p>The class that first defined this field. Derived classes that override a field do not change this property.</p>",
          "type": "Core.data.Model",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "owner",
          "access": "private",
          "description": "<p>The class that most specifically defined this field. Derived classes that override a field set this property to\nthemselves.</p>",
          "type": "Core.data.Model",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "convert",
          "description": "<p>This method transforms a data value into the desired form for storage in the record's data object.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>export default class Task extends TaskModel {\n   static get fields() {\n       return [\n           {\n               name    : 'status',\n               convert : value => {\n                   if (value >= 100) {\n                       return 'done';\n                   }\n                   else if (value > 0) {\n                       return 'started';\n                   }\n               }\n           }\n       ];\n   }\n}\n```</code></pre>",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to convert for storage in a record.</p>"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "*",
            "description": "<p>The converted value.</p>"
          }
        },
        {
          "name": "serialize",
          "description": "<p>This method transforms a data value into the desired form for transmitting to a server.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to serialize</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record that contains the value being serialized.</p>"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "*",
            "description": "<p>The serialized value.</p>"
          }
        },
        {
          "name": "defineAccessor",
          "access": "internal",
          "description": "<p>Create getter and setter functions for the specified field name under the specified key.</p>",
          "scope": "instance"
        },
        {
          "name": "isEqual",
          "description": "<p>Compares two values for this field and returns <code>true</code> if they are equal, and <code>false</code> if not.</p>",
          "parameters": [
            {
              "name": "first",
              "type": "*",
              "description": "<p>The first value to compare for equality.</p>"
            },
            {
              "name": "second",
              "type": "*",
              "description": "<p>The second value to compare for equality.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if <code>first</code> and <code>second</code> are equal.</p>"
          }
        },
        {
          "name": "print",
          "description": "<p>Returns the given field value as a <code>String</code>. If <code>value</code> is <code>null</code> or <code>undefined</code>, the value specified by\n<a href=\"#Core/data/field/DataField#config-nullText\">nullText</a> is returned.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to convert to a string.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "printValue",
          "access": "protected",
          "description": "<p>Returns the given, non-null field value as a <code>String</code>.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to convert to a string (will not be <code>null</code> or <code>undefined</code>).</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        }
      ]
    },
    {
      "name": "DateDataField",
      "modulePath": "Core/data/field/DateDataField",
      "classDescription": "<p>This field class handles field of type <code>Date</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' },\n            { name : 'age', readOnly : true }\n        ];\n    }\n}\n</code></pre>\n<p>When a field is declared as a <code>'date'</code>, non-null values are promoted to <code>Date</code> type. This is frequently needed due\nto how date types are serialized to JSON strings.</p>\n<p>Date fields can have a special <code>defaultValue</code> of <code>'now'</code> which will convert to the current date/time.</p>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DateDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "date",
      "configs": [
        {
          "name": "format",
          "description": "<p>The format of the date field.</p>\n<p>See <a href=\"#Core/helper/DateHelper\">DateHelper</a> for details.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "DateHelper.defaultFormat"
        }
      ]
    },
    {
      "name": "DurationUnitDataField",
      "modulePath": "Core/data/field/DurationUnitDataField",
      "classDescription": "<p>This field class handles field of type <code>durationunit</code> (string type). See <a href=\"#Core/data/Duration\">Duration</a> for more information.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Event extends Model {\n    static get fields() {\n        return [\n            { name : 'durationUnit', type : 'durationunit' }\n        ];\n    }\n}\n</code></pre>",
      "extends": [
        "Core/data/field/StringDataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DurationUnitDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "durationunit"
    },
    {
      "name": "IntegerDataField",
      "modulePath": "Core/data/field/IntegerDataField",
      "classDescription": "<p>This field class handles field of type <code>Number</code> with no decimal digits.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'age', type : 'int' }\n        ];\n    }\n}\n</code></pre>\n<p>When a field is declared as a <code>'int'</code>, non-null values are promoted to <code>Number</code> type and decimals are removed using\na specified <code>rounding</code>. This field type can be useful if a field value is received as a string but should be stored\nas a number or has a fractional component that must be rounded or truncated.</p>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "IntegerDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "integer",
      "configs": [
        {
          "name": "nullValue",
          "description": "<p>The value to replace <code>null</code> when the field is not <code>nullable</code>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "rounding",
          "description": "<p>The <code>Math</code> method to use to ensure fractional component is removed.\nThis can be <code>'round'</code> (the default value), <code>'floor'</code> or <code>'ceil'</code>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "round"
        }
      ]
    },
    {
      "name": "ModelDataField",
      "modulePath": "Core/data/field/ModelDataField",
      "classDescription": "<p>This field class handles fields that hold other records.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'address', type : 'model' }\n        ];\n    }\n}\n</code></pre>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ModelDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "model"
    },
    {
      "name": "NumberDataField",
      "modulePath": "Core/data/field/NumberDataField",
      "classDescription": "<p>This field class handles field of type <code>Number</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'age', type : 'number' }\n        ];\n    }\n}\n</code></pre>\n<p>When a field is declared as a <code>'number'</code>, non-null values are promoted to <code>Number</code> type. This is seldom required, but\ncan be useful if a field value is received as a string but should be treated as a number.</p>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "NumberDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "number",
      "configs": [
        {
          "name": "nullValue",
          "description": "<p>The value to replace <code>null</code> when the field is not <code>nullable</code>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "precision",
          "description": "<p>The numeric precision of this field. Values are rounded to the specified number of digits. If <code>null</code>,\nthe default, no rounding is performed.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "ObjectDataField",
      "modulePath": "Core/data/field/ObjectDataField",
      "classDescription": "<p>This field class handles fields that hold an object.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            'name',\n            { name : 'address', type : 'object' }\n        ];\n    }\n}\n</code></pre>\n<p>For the field to count as modified, the whole object has to be replaced:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>person.address = { ...address };\n</code></pre>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ObjectDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "object"
    },
    {
      "name": "StringDataField",
      "modulePath": "Core/data/field/StringDataField",
      "classDescription": "<p>This field class handles field of type <code>String</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class Person extends Model {\n    static get fields() {\n        return [\n            { name : 'name', type : 'string' }\n        ];\n    }\n}\n</code></pre>\n<p>When a field is declared as a <code>'string'</code>, non-null values are promoted to <code>String</code> type. This is seldom required, but\ncan be useful if a field value is received as a number but should be treated as a string.</p>",
      "extends": [
        "Core/data/field/DataField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "StringDataField.js",
      "path": "/Calendar/lib/Core/data/field",
      "classType": "string",
      "configs": [
        {
          "name": "nullValue",
          "description": "<p>The value to replace <code>null</code> when the field is not <code>nullable</code>.</p>",
          "type": "String",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "StoreCRUD",
      "modulePath": "Core/data/mixin/StoreCRUD",
      "description": "<p>Mixin for Store that handles modifying records (add, remove etc).</p>",
      "mixin": true,
      "examples": [
        "// add new record to store\nstore.add({ id: 1, team: 'FC Krasnodar' });\n\n// remove a record from store, using id\nstore.remove(1);"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreCRUD.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "autoCommit",
          "description": "<p>Commit changes automatically</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Common"
        }
      ],
      "events": [
        {
          "name": "removeAll",
          "description": "<p>Fired after removing all records</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            }
          ]
        },
        {
          "name": "beforeCommit",
          "description": "<p>Fired before committing changes. Return false from handler to abort commit</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Modification data</p>"
            }
          ]
        },
        {
          "name": "commit",
          "description": "<p>Fired after committing changes</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Modification data</p>"
            }
          ]
        },
        {
          "name": "beforeRemove",
          "description": "<p>Fired before records are removed from this store by the <a href=\"#Core/data/mixin/StoreCRUD#function-remove\">remove</a> or <a href=\"#Core/data/mixin/StoreCRUD#function-removeAll\">removeAll</a>.\nAlso fired when removing a child record in a tree store using <a href=\"#Core/data/mixin/TreeNode#function-removeChild\">removeChild</a>.\nThe remove may be vetoed by returning <code>false</code> from a handler.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The records which are to be removed.</p>"
            },
            {
              "name": "parent",
              "type": "Core.data.Model",
              "description": "<p>The record from which children are being removed when using a tree store. Only\nprovided when removing a single node.</p>"
            },
            {
              "name": "isMove",
              "type": "Boolean",
              "description": "<p>This flag is <code>true</code> if the child node is being removed by\n<a href=\"#Core/data/mixin/TreeNode#function-appendChild\">appendChild</a> to be moved\n<em>within the same tree</em>.</p>"
            },
            {
              "name": "removingAll",
              "type": "Boolean",
              "description": "<p>This flag is <code>true</code> if the operation is removing the store's entire data set.</p>"
            }
          ]
        },
        {
          "name": "beforeAdd",
          "description": "<p>Fired before records are added to this store by the <a href=\"#Core/data/mixin/StoreCRUD#function-add\">add</a> or <a href=\"#Core/data/mixin/StoreCRUD#function-insert\">insert</a>. In a tree\nstore, also fired by <a href=\"#Core/data/mixin/TreeNode#function-appendChild\">appendChild</a> and\n<a href=\"#Core/data/mixin/TreeNode#function-insertChild\">insertChild</a>. The add or insert may be vetoed by returning <code>false</code>\nfrom a handler.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The records which are to be added</p>"
            },
            {
              "name": "parent",
              "type": "Core.data.Model",
              "description": "<p>The parent node when using a tree store</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "add",
          "description": "<p>Fired after adding/inserting record(s). If the record was added to a parent, the <code>isChild</code> flag is set on the\nevent. If it was inserted, event contains <code>index</code></p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Added records. In case of tree store, if branch is added, only branch root\nis returned</p>"
            },
            {
              "name": "allRecords",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Flat list of all added records. In case of tree store, if branch is\nadded, all new records are returned, not only branch root</p>",
              "optional": true
            },
            {
              "name": "parent",
              "type": "Core.data.Model",
              "description": "<p>If due to an <a href=\"#Core/data/mixin/TreeNode#function-appendChild\">appendChild</a>\ncall, this is the parent node added to.</p>",
              "optional": true
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Insertion point in the store's <a href=\"#Core/data/Store#config-storage\">Collection</a>.</p>",
              "optional": true
            },
            {
              "name": "oldIndex",
              "type": "Number",
              "description": "<p>Not used for tree stores. The index of the first record moved.</p>",
              "optional": true
            },
            {
              "name": "isChild",
              "type": "Boolean",
              "description": "<p>Flag which is set to true if the records are added to a parent record</p>",
              "optional": true
            },
            {
              "name": "isExpand",
              "type": "Boolean",
              "description": "<p>Flag which is set to true if records are added to the store by expanding parent</p>",
              "optional": true
            },
            {
              "name": "isMove",
              "type": "Object",
              "description": "<p>An object keyed by the ids of the records which were moved from another\nposition in the store, or from another parent node in the store. The ids of moved records will be\nproperty names with a value <code>true</code>.</p>",
              "optional": true
            }
          ]
        },
        {
          "name": "remove",
          "description": "<p>Fired when one or more records are removed</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Array of removed records. In case of tree store, if branch is removed, only branch root\nis returned</p>"
            },
            {
              "name": "allRecords",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Flat array of all removed records. In case of tree store, if branch is\nremoved, all removed records are returned, not only branch root</p>",
              "optional": true
            },
            {
              "name": "parent",
              "type": "Core.data.Model",
              "description": "<p>If due to a <a href=\"#Core/data/mixin/TreeNode#function-removeChild\">removeChild</a>\ncall, this is the parent node removed from. Only applicable when removing a single tree node.</p>",
              "optional": true
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Visible index at which record was removed. In case the record was removed from a collapsed\nbranch, -1 is returned. For tree store, this is only provided when removing a single node.</p>",
              "optional": true
            },
            {
              "name": "isChild",
              "type": "Boolean",
              "description": "<p>Flag which is set to true if the record was removed from a parent record</p>",
              "optional": true
            },
            {
              "name": "isCollapse",
              "type": "Boolean",
              "description": "<p>Flag which is set to true if records were removed from the store by collapsing parent</p>",
              "optional": true
            },
            {
              "name": "isMove",
              "type": "Boolean",
              "description": "<p>Passed as <code>true</code> if the remove was part of a move operation within this Store.</p>",
              "optional": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "remove",
          "description": "<p>Removes a record from this store. Fires a single <a href=\"#Core/data/mixin/StoreCRUD#event-remove\">remove</a> event passing the removed records.</p>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "String",
                "Array.<String>",
                "Number",
                "Array.<Number>",
                "Core.data.Model",
                "Array.<Core.data.Model>"
              ],
              "description": "<p>Record/array of records (or record ids) to remove</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events/autoCommit</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeRemove",
            "event:remove",
            "event:change"
          ],
          "category": "CRUD",
          "returns": {
            "type": "Array.<Core.data.Model>",
            "description": "<p>Removed records</p>"
          }
        },
        {
          "name": "clear",
          "access": "private",
          "description": "<p>Clears store data. Used by removeAll, separate function for using with chained stores.</p>",
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "removeAll",
          "description": "<p>Removes all records from the store.</p>",
          "parameters": [
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeRemove",
            "event:removeAll",
            "event:change"
          ],
          "category": "CRUD",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> unless the action was prevented, in which case it returns <code>false</code></p>"
          }
        },
        {
          "name": "add",
          "description": "<p>Add records to store.</p>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:add",
            "event:change"
          ],
          "category": "CRUD",
          "returns": {
            "type": "Array.<Core.data.Model>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "insert",
          "description": "<p>Insert records to store.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index to insert at</p>"
            },
            {
              "name": "records",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to insert to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:add",
            "event:change"
          ],
          "category": "CRUD",
          "returns": {
            "type": "Array.<Core.data.Model>",
            "description": "<p>Inserted records</p>"
          }
        },
        {
          "name": "move",
          "description": "<p>Moves a record, or block of records to another location.</p>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>"
              ],
              "description": "<p>The record(s) to move.</p>"
            },
            {
              "name": "beforeRecord",
              "type": "Core.data.Model",
              "description": "<p>the record to insert the first record(s) before.</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:change"
          ],
          "category": "CRUD"
        },
        {
          "name": "acceptChanges",
          "access": "internal",
          "description": "<p>Accepts all changes, resets the modification tracking:</p>\n<ul>\n<li>Clears change tracking for all records</li>\n<li>Clears added</li>\n<li>Clears modified</li>\n<li>Clears removed\nLeaves the store in an &quot;unmodified&quot; state.</li>\n</ul>",
          "scope": "instance"
        },
        {
          "name": "commit",
          "description": "<p>Commits changes, per default only returns changes and resets tracking.</p>",
          "parameters": [
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeCommit",
            "event:commit"
          ],
          "category": "CRUD",
          "returns": {
            "type": "Object",
            "description": "<p>Changes, see <a href=\"#Core/data/mixin/StoreCRUD#property-changes\">changes</a></p>"
          }
        },
        {
          "name": "revertChanges",
          "description": "<p>Reverts all changes in the store (adds removed records back, and removes newly added records).</p>",
          "scope": "instance",
          "fires": [
            "event:change",
            "event:refresh"
          ],
          "category": "CRUD"
        },
        {
          "name": "suspendAutoCommit",
          "description": "<p>Suspends automatic commits upon store changes. Can be called multiple times (it uses an internal counter).</p>",
          "scope": "instance",
          "category": "Records"
        },
        {
          "name": "resumeAutoCommit",
          "description": "<p>Resumes automatic commits upon store changes. Will trigger commit if the internal counter is 0.</p>",
          "scope": "instance",
          "category": "Records"
        },
        {
          "name": "applyChangesFromStore",
          "description": "<p>Applies changes from another store to this store. Useful if cloning records in one store to display in a\ngrid in a popup etc. to reflect back changes.</p>",
          "parameters": [
            {
              "name": "otherStore",
              "type": "Core.data.Store"
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        }
      ],
      "properties": [
        {
          "name": "changes",
          "description": "<p>Get uncommitted changes as an object of added/modified/removed arrays of records.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Format:\n{\n     added: [], // array of Core.data.Model\n     modified: [], // array of Core.data.Model\n     removed: [] // array of Core.data.Model\n}\n</code></pre>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Records",
          "properties": [
            {
              "name": "changes",
              "type": "Object"
            },
            {
              "name": "changes.added",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records that have been added</p>",
              "isSubParam": true
            },
            {
              "name": "changes.modified",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records that have changes to persistable fields</p>",
              "isSubParam": true
            },
            {
              "name": "changes.removed",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records that have been removed</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "autoCommit",
          "description": "<p>Setting autoCommit to true automatically commits changes to records.</p>",
          "type": "Boolean",
          "scope": "instance",
          "category": "Records"
        }
      ]
    },
    {
      "name": "StoreChained",
      "modulePath": "Core/data/mixin/StoreChained",
      "description": "<p>A chained Store contains a subset of records from a master store. Which records to include is determined by a\nfiltering function, <a href=\"#Core/data/mixin/StoreChained#config-chainedFilterFn\">chainedFilterFn</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>masterStore.chain(record => record.percent &lt; 10);\n\n// or\n\nnew Store({\n  masterStore     : masterStore,\n  chainedFilterFn : record => record.percent &lt; 10\n});\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreChained.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "chainedFilterFn",
          "description": "<p>Function used to filter records in the masterStore into a chained store. If not provided,\nall records from the masterStore will be included in the chained store.</p>",
          "type": "function",
          "scope": "inner",
          "category": "Chained store"
        },
        {
          "name": "chainedFields",
          "description": "<p>Array of fields that should trigger filtering of chained store when the fields are updated.</p>",
          "type": "Array.<String>",
          "scope": "inner",
          "category": "Chained store"
        },
        {
          "name": "masterStore",
          "description": "<p>Master store that a chained store gets its records from.</p>",
          "type": "Core.data.Store",
          "scope": "inner",
          "category": "Chained store"
        },
        {
          "name": "doRelayToMaster",
          "description": "<p>Method names calls to which should be relayed to master store.</p>",
          "type": "Array.<String>",
          "scope": "inner",
          "category": "Chained store"
        },
        {
          "name": "dontRelayToMaster",
          "description": "<p>Method names calls to which shouldn't be relayed to master store.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Chained store"
        },
        {
          "name": "keepUncommittedChanges",
          "description": "<p>Flag showing whether to keep added/removed uncommitted records when filling the store from master.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Chained store"
        },
        {
          "name": "excludeCollapsedRecords",
          "access": "internal",
          "description": "<p>If true, collapsed records in original tree will be excluded from the chained store.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Chained store"
        }
      ],
      "properties": [
        {
          "name": "isChained",
          "description": "<p>Is this a chained store?</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Store"
        }
      ],
      "functions": [
        {
          "name": "fillFromMaster",
          "description": "<p>Updates records available in a chained store by filtering the master store records using\n<a href=\"#Core/data/mixin/StoreChained#config-chainedFilterFn\">chainedFilterFn</a></p>",
          "scope": "instance",
          "category": "Chained store"
        },
        {
          "name": "commitToMaster",
          "access": "internal",
          "description": "<p>Commits changes back to master.</p>\n<ul>\n<li>the records deleted from chained store and present in master will be deleted from master</li>\n<li>the records added to chained store and missing in master will added to master\nInternally calls {Store#function-commit commit()}.</li>\n</ul>",
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Changes, see Store#changes</p>"
          }
        },
        {
          "name": "relayToMaster",
          "access": "private",
          "description": "<p>Relays some function calls to the master store</p>",
          "scope": "instance"
        },
        {
          "name": "onMasterDataChanged",
          "access": "private",
          "description": "<p>Handles changes in master stores data. Updates the chained store accordingly</p>",
          "scope": "instance"
        },
        {
          "name": "makeChained",
          "description": "<p>Creates a chained store, a new Store instance that contains a subset of the records from current store.\nWhich records is determined by a filtering function, which is reapplied when data in the base store changes.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const oldies = store.makeChained(record => record.age > 50);\n// or use a simple query\nconst ages = store.makeChained(() => store.allRecords.distinct('age')));\n</code></pre>\n<p>If this store is a <a href=\"#Core/data/mixin/StoreTree#property-isTree\">tree</a> store, then the resulting chained store\nwill be a tree store sharing the same root node, but only child nodes which pass the <code>chainedFilterFn</code> will be\nconsidered when iterating the tree through the methods such as\n<a href=\"#Core/data/Store#function-traverse\">traverse</a> or <a href=\"#Core/data/Store#function-forEach\">forEach</a>.</p>",
          "parameters": [
            {
              "name": "chainedFilterFn",
              "type": "function",
              "description": "<p>Either a filter function called for every record to determine if it should be\nincluded (return true / false), or a query function called with no arguments (see example below). Defaults to\nincluding all records (fn always returning true)</p>",
              "optional": true
            },
            {
              "name": "chainedFields",
              "type": "Array.<String>",
              "description": "<p>Array of fields that trigger filtering when they are updated</p>",
              "optional": true
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Additional chained store configuration. See <a href=\"#Core/data/Store#configs\">Store#configs</a></p>",
              "optional": true
            },
            {
              "name": "config.storeClass",
              "type": "Class",
              "description": "<p>The Store class to use if this Store type is not required.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.data.Store"
          }
        },
        {
          "name": "chain",
          "description": "<p>Alias for <a href=\"#Core/data/Store#function-makeChained\">makeChained</a></p>",
          "parameters": [
            {
              "name": "chainedFilterFn",
              "type": "function",
              "description": "<p>Either a filter function called for every record to determine if it should be\nincluded (return true / false), or a query function called with no arguments (see example below). Defaults to\nincluding all records (fn always returning true)</p>",
              "optional": true
            },
            {
              "name": "chainedFields",
              "type": "Array.<String>",
              "description": "<p>Array of fields that trigger filtering when they are updated</p>",
              "optional": true
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Additional chained store configuration. See <a href=\"#Core/data/Store#configs\">Store#configs</a></p>",
              "optional": true
            },
            {
              "name": "config.storeClass",
              "type": "Class",
              "description": "<p>The Store class to use if this Store type is not required.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.data.Store"
          }
        }
      ]
    },
    {
      "name": "StoreFilter",
      "modulePath": "Core/data/mixin/StoreFilter",
      "description": "<p>Mixin for Store that handles filtering.\nFilters are instances of <a href=\"#Core/util/CollectionFilter\">CollectionFilter</a> class.</p>\n<ul>\n<li>Adding a filter for the same property will replace the current one (unless a unique <a href=\"#Core/util/CollectionFilter#config-id\">id</a> is specified),\nbut will not clear any other filters.</li>\n<li>Adding a filter through the <a href=\"#Core/data/mixin/StoreFilter#function-filterBy\">filterBy</a> function is ultimate.\nIt will clear all the property based filters and replace the current filterBy function if present.</li>\n<li>Removing records from the store does not remove filters!\nThe filters will be reapplied if <a href=\"#Core/data/mixin/StoreFilter#config-reapplyFilterOnAdd\">reapplyFilterOnAdd</a>/<a href=\"#Core/data/mixin/StoreFilter#config-reapplyFilterOnUpdate\">reapplyFilterOnUpdate</a> are true and you add new records or update current.</li>\n</ul>\n<pre class=\"prettyprint source\"><code>// Add a filter\nstore.filter({\n    property : 'score',\n    value    : 10,\n    operator : '>'\n});\n\n// Add filter as a function\nstore.filter(record => record.score > 10);\n\n// Add named filter as a function\nstore.filter({\n    id : 'my filter',\n    filterBy : record => record.score > 10\n});\n\n// Replace any filter set with new filters\nstore.filter({\n    filters : {\n        property : 'score',\n        value    : 10,\n        operator : '>'\n    },\n    replace : true\n});\n\n// Remove this one specific filter, leaving any possible others in place.\n// A filter's id defaults to the property name that it's filtering on.\nstore.removeFilter('score');\n\n// Reapply filters without firing an event.\n// Use if making multiple data mutations with the\n// intention of updating UIs when all finished.\nstore.filter({\n    silent : true\n});\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreFilter.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "filters",
          "description": "<p>Specify one or more <a href=\"#Core/util/CollectionFilter\">CollectionFilter</a> config object to apply initially</p>",
          "type": [
            "Object",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Filtering"
        },
        {
          "name": "reapplyFilterOnAdd",
          "description": "<p>Specify true to reapply filters when a record is added to the store.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Filtering"
        },
        {
          "name": "reapplyFilterOnUpdate",
          "description": "<p>Specify true to reapply filters when a record is updated in the store.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Filtering"
        }
      ],
      "events": [
        {
          "name": "filter",
          "description": "<p>Fired after applying filters to the store</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "filters",
              "type": "Core.util.Collection",
              "description": "<p>Filters used by this Store</p>"
            },
            {
              "name": "removed",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The the records which were filtered out by the action.</p>"
            },
            {
              "name": "added",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The records which were filtered back in by the action.</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Filtered records</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "filters",
          "description": "<p>Currently applied filters. A collection of <a href=\"#Core/util/CollectionFilter\">CollectionFilter</a> instances.</p>",
          "type": "Core.util.Collection",
          "scope": "instance",
          "readonly": true,
          "category": "Sort, group & filter"
        },
        {
          "name": "isFiltered",
          "description": "<p>Check if store is filtered</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Sort, group & filter"
        }
      ],
      "functions": [
        {
          "name": "addFilter",
          "description": "<p>Adds a single filter to the <a href=\"#Core/data/mixin/StoreFilter#config-filters\">filters</a> collection. By default, filters are reevaluated\nand a Store change event fired.</p>\n<p>If the <code>silent</code> parameter is passed as <code>true</code>, multiple filters can be added without causing data changes.</p>\n<p>When the filters are as required, call <a href=\"#Core/data/mixin/StoreFilter#function-filter\">filter</a> with no parameters\nto apply the filters to the store.</p>",
          "parameters": [
            {
              "name": "newFilters",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p>A <a href=\"#Core/util/CollectionFilter\">filter</a> config,\nor a function to use for filtering.</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to <em>not</em> refilter the store immediately. Such as when\nadding multiple filters.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter",
          "returns": {
            "type": "Core.util.CollectionFilter",
            "description": "<p>The Filter instance that was added.</p>"
          }
        },
        {
          "name": "filter",
          "description": "<p>Filters the store by <strong>adding</strong> the specified filter(s) to the existing filters collection applied to this Store.\nIf a filter has an <a href=\"#Core/util/CollectionFilter#config-id\">id</a> specified,\nor a <a href=\"#Core/util/CollectionFilter#config-property\">property</a> specified,\nit will search for corresponding filter(s) in the existing filters first and replace it with a new filter.\n<strong>It will not remove other filters applied to the store!</strong></p>\n<p>To <strong>add</strong> a new filter:</p>\n<pre class=\"prettyprint source\"><code>// Filter using simple object\nstore.filter({\n    property : 'age',\n    operator : '>',\n    value    : 90\n});\n\n// Filter using function\nstore.filter(r => r.age &lt; 90);\n\n// Filter using a named filter as a function\nstore.filter({\n    id : 'my-filter',\n    filterBy : record => record.score > 10\n});\n</code></pre>\n<p>To <strong>remove</strong> a specific filter, but keep other filters applied</p>\n<pre class=\"prettyprint source\"><code>// Remove by filter `id` or `property`. Filter `id` defaults to the `property` name.\nstore.removeFilter('age');\nstore.removeFilter('my-filter');\n</code></pre>\n<p>To <strong>replace</strong> all existing filters with a new filter</p>\n<pre class=\"prettyprint source\"><code>// Remove all filters and filter using simple object\nstore.filter({\n    filters : {\n        property : 'age',\n        operator : '&lt;',\n        value    : 90\n    },\n    replace : true\n});\n\n// Remove all filters and filter using function\nstore.filter({\n    filters : r => r.age > 90,\n    replace : true\n});\n\n// Remove all filters and filter using a named filter as a function\nstore.filter({\n    filters : {\n        id : 'my-filter',\n        filterBy : record => record.score > 10\n    },\n    replace : true\n});\n</code></pre>\n<p>Basically filters replacing is an equivalent of having two sequenced calls:\n<a href=\"#Core/data/mixin/StoreFilter#function-clearFilters\">clearFilters</a> and <a href=\"#Core/data/mixin/StoreFilter#function-filter\">filter</a>.</p>\n<p>Call without arguments to reapply filters.</p>\n<pre class=\"prettyprint source\"><code>// Re-filter the store\nstore.filter();\n</code></pre>",
          "parameters": [
            {
              "name": "newFilters",
              "type": [
                "Object",
                "Array.<Object>",
                "function"
              ],
              "description": "<p>A <a href=\"#Core/util/CollectionFilter\">filter</a> config,\nor an array of <a href=\"#Core/util/CollectionFilter\">filter</a> configs,\nor a function to use for filtering,\nor a special object like: <code>{ replace : true, filters : newFilters }</code></p>"
            },
            {
              "name": "newFilters.replace",
              "type": "Boolean",
              "description": "<p>A flag, indicating whether or not the previous filters should be removed.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "newFilters.silent",
              "type": "Boolean",
              "description": "<p>Set as true to not fire events. UI will not be informed about the changes.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "newFilters.filters",
              "type": [
                "Object",
                "Array.<Object>",
                "function"
              ],
              "description": "<p>If <code>newFilters</code> is an object and <code>replace</code> property is defined in the <code>newFilters</code>,\nit means that special object is used and real filter configuration must be nested down to this <code>filters</code> property.\nIt can be:\nA <a href=\"#Core/util/CollectionFilter\">filter</a> config,\nor an array of <a href=\"#Core/util/CollectionFilter\">filter</a> configs,\nor a function to use for filtering.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:filter",
            "event:change"
          ],
          "category": "Sort, group & filter"
        },
        {
          "name": "performFilter",
          "access": "private",
          "description": "<p>Perform filtering according to the <a href=\"#Core/data/mixin/StoreFilter#property-filters\">filters</a> Collection.\nThis is the internal implementation which is overridden in <a href=\"#Core/data/AjaxStore\">AjaxStore</a> and\nmust not be overridden.</p>",
          "scope": "instance"
        },
        {
          "name": "filterBy",
          "description": "<p><em>Adds</em> a function used to filter the store. Alias for calling <code>filter(fn)</code>. Return <code>true</code> from the function to\ninclude record in filtered set</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.filterBy(record => record.age > 25 && record.name.startsWith('A'));\n</code></pre>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function used to test records</p>"
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "removeFilter",
          "description": "<p>Removes the passed filter, or the filter by the passed ID from the <a href=\"#Core/data/mixin/StoreFilter#config-filters\">filters</a> collection.\nBy default, filters are reevaluated and a Store change event fired.</p>\n<p>If the <code>silent</code> parameter is passed as <code>true</code>, multiple filters can be removed without causing data changes.</p>\n<p>When the filters are as required, call <a href=\"#Core/data/mixin/StoreFilter#function-filter\">filter</a> with no parameters\nto apply the filters to the store.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Only view top priority events\nmyEventStore.filter({\n    id       : 'priorityFilter',\n    property : 'priority',\n    value    : 1,\n    operator : '='\n});\n\n// That individual filter can be removed like this\nmyEventStore.removeFilter('priorityFilter');\n\n// Add named filter as a function\nstore.filter({\n    id : 'my filter',\n    filterBy : record => record.score > 10\n});\n\n// Remove named filter function\nstore.removeFilter('my filter');\n</code></pre>",
          "parameters": [
            {
              "name": "idOrInstance",
              "type": [
                "String",
                "Core.util.CollectionFilter"
              ],
              "description": "<p>Filter to remove, or ID of the filter to remove. By default,\nfilters are reevaluated and a change event fired.</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to <em>not</em> refilter the store immediately. Such as when\nremoving multiple filters.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter",
          "returns": {
            "type": "Core.util.CollectionFilter",
            "description": "<p>The Filter instance that was removed.</p>"
          }
        },
        {
          "name": "clearFilters",
          "description": "<p>Removes all filters from the store.</p>",
          "scope": "instance",
          "category": "Sort, group & filter"
        }
      ]
    },
    {
      "name": "StoreGroup",
      "modulePath": "Core/data/mixin/StoreGroup",
      "description": "<p>Mixin for Store that handles grouping.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// simple grouper\nstore.group('city');\n\n// grouper as object, descending order\nstore.group({ field : 'city', ascending : false });\n\n// using custom sorting function\nstore.group({\n    field : 'city',\n    fn : (recordA, recordB) => {\n        // apply custom logic, for example:\n        return recordA.city.length &lt; recordB.city.length ? -1 : 1;\n    }\n});\n</code></pre>\n<p>Currently grouping is not supported when using pagination, the underlying store cannot group data that is split into pages.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreGroup.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "groupers",
          "description": "<p>Initial groupers, specify to have store grouped automatically after initially setting data</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "properties": [
        {
          "name": "groupers",
          "description": "<p>Currently used groupers</p>",
          "type": "Array.<Object>",
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "isGrouped",
          "description": "<p>Is store currently grouped?</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Sort, group & filter"
        }
      ],
      "functions": [
        {
          "name": "group",
          "description": "<p>Group records, either by replacing current sorters or by adding to them.\nA grouper can specify a <strong><em>custom sorting function</em></strong> which will be called with arguments (recordA, recordB).\nWorks in the same way as a standard array sorter, except that returning <code>null</code> triggers the stores\nnormal sorting routine. Grouped store <strong>must</strong> always be sorted by the same field.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// simple grouper\nstore.group('city');\n\n// grouper as object, descending order\nstore.group({ field : 'city', ascending : false });\n\n// using custom sorting function\nstore.group({\n    field : 'city',\n    fn : (recordA, recordB) => {\n        // apply custom logic, for example:\n        return recordA.city.length &lt; recordB.city.length ? -1 : 1;\n    }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Field to group by.\nCan also be a config containing a field to group by and a custom sorting function called <code>fn</code>.</p>"
            },
            {
              "name": "ascending",
              "type": "Boolean",
              "description": "<p>Sort order of the group titles</p>",
              "optional": true
            },
            {
              "name": "add",
              "type": "Boolean",
              "description": "<p>Add a grouper (true) or use only this grouper (false)</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "performSort",
              "type": "Boolean",
              "description": "<p>Trigger sort directly, which does the actual grouping</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Set as true to not fire events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:group",
            "event:refresh"
          ],
          "category": "Sort, group & filter"
        },
        {
          "name": "addGrouper",
          "access": "internal",
          "description": "<p>Add a grouping level (a grouper).</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to group by</p>"
            },
            {
              "name": "ascending",
              "type": "Boolean",
              "description": "<p>Group direction</p>",
              "default": true
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "removeGrouper",
          "access": "internal",
          "description": "<p>Removes a grouping level (a grouper)</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Grouper to remove</p>"
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "clearGroupers",
          "description": "<p>Removes all groupers, turning store grouping off.</p>",
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "isRecordInGroup",
          "description": "<p>Check if a record belongs to a certain group (only for the first grouping level)</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The Record</p>"
            },
            {
              "name": "groupValue",
              "type": "*",
              "description": "<p>The group value</p>"
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter",
          "returns": {
            "type": "Boolean",
            "description": "<p>True if the record belongs to the group, otherwise false</p>"
          }
        },
        {
          "name": "getGroupRecords",
          "description": "<p>Returns all records in the group with specified groupValue.</p>",
          "parameters": [
            {
              "name": "groupValue",
              "type": "*"
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter",
          "returns": {
            "type": "Array.<Core.data.Model>",
            "description": "<p>Records in specified group or null if store not grouped</p>"
          }
        },
        {
          "name": "getGroupTitles",
          "description": "<p>Get all group titles.</p>",
          "scope": "instance",
          "category": "Sort, group & filter",
          "returns": {
            "type": "Array.<String>",
            "description": "<p>Group titles</p>"
          }
        },
        {
          "name": "internalIncludeExcludeGroupRecords",
          "access": "private",
          "description": "<p>Adds or removes records in a group from storage. Used when expanding/collapsing groups.</p>",
          "parameters": [
            {
              "name": "groupRecord",
              "type": "Core.data.Model",
              "description": "<p>Group which records should be added or removed</p>"
            },
            {
              "name": "include",
              "type": "Boolean",
              "description": "<p>Include (true) or exclude (false) records</p>"
            }
          ],
          "scope": "instance",
          "category": "Grouping"
        },
        {
          "name": "excludeGroupRecords",
          "access": "private",
          "description": "<p>Removes records in a group from storage. Used when collapsing a group.</p>",
          "parameters": [
            {
              "name": "groupRecord",
              "description": "<p>Group which records should be removed</p>"
            }
          ],
          "scope": "instance",
          "category": "Grouping"
        },
        {
          "name": "includeGroupRecords",
          "access": "private",
          "description": "<p>Adds records in a group to storage. Used when expanding a group.</p>",
          "parameters": [
            {
              "name": "groupRecord",
              "description": "<p>Group which records should be added</p>"
            }
          ],
          "scope": "instance",
          "category": "Grouping"
        },
        {
          "name": "collectGroupRecords",
          "access": "private",
          "description": "<p>Collects all group headers + children, whether expanded or not</p>",
          "parameters": [
            {
              "name": "allRecords",
              "type": "Boolean",
              "description": "<p>True to include filtered out records</p>"
            },
            {
              "name": "includeHeaders",
              "type": "Boolean",
              "description": "<p>True to also include group headers</p>",
              "default": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Core.data.Model>"
          }
        }
      ],
      "events": [
        {
          "name": "group",
          "description": "<p>Fired when grouping changes</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "groupers",
              "type": "Array.<Object>",
              "description": "<p>Applied groupers</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Grouped records</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "StoreProxy",
      "modulePath": "Core/data/mixin/StoreProxy",
      "description": "<p>Object-like interaction with a Store by using a Proxy. To enable, configure the store with <code>objectify : true</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n   objectify : true,\n   data      : [\n       { id : 'batman', name : 'Bruce' }\n   ]\n});\n</code></pre>\n<p>Access records using their ids as Store properties:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>console.log(store.batman.name); // logs Bruce\n</code></pre>\n<p>Add records by assigning properties to the Store:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.superman = { name : 'Clark' }; // Id will be 'superman'\n</code></pre>\n<p>Remove records by removing their property:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>delete store.batman;\n</code></pre>\n<p>Check if a certain id existing in the store by using <code>in</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>console.log('superman' in store): // logs true\n</code></pre>\n<p>Please note that this approach:</p>\n<ul>\n<li>Will affect performance slightly, not recommended for larger datasets.</li>\n<li>Uses native Proxy.</li>\n<li>Preserves predefined Store properties, records cannot use ids that match those.</li>\n<li>Might have other limitations preventing the use of it in some scenarios where a normal Store can be used.</li>\n</ul>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreProxy.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "objectify",
          "description": "<p>Allow object like interaction with the Store. For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n   objectify : true,\n   data      : [\n       { id : 'batman', name : 'Bruce' }\n   ]\n});\n\n// retrieve using id as property\nconst record = store.batman;\n\n// add as property\nstore.superman = { name : 'Clark' };\n\n// delete to remove\ndelete store.batman;\n``</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "StoreRelation",
      "modulePath": "Core/data/mixin/StoreRelation",
      "description": "<p>Mixin for Store that handles relations with other stores (actually defined on model).</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreRelation.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "functions": [
        {
          "name": "initRelations",
          "access": "private",
          "description": "<p>Initialized relations, called from constructor</p>",
          "scope": "instance"
        },
        {
          "name": "initRelationCollection",
          "access": "private",
          "description": "<p>Called from other end of an relation when this store should hold a collection of related records.</p>",
          "parameters": [
            {
              "name": "config"
            },
            {
              "name": "collectionStore"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "resetRelationCache",
          "access": "private",
          "description": "<p>Updates relationCache for all records.</p>",
          "scope": "instance"
        },
        {
          "name": "updateRecordRelationCache",
          "access": "private",
          "description": "<p>Caches related records from related store on the local store.</p>",
          "parameters": [
            {
              "name": "record",
              "description": "<p>Local record</p>"
            },
            {
              "name": "relations",
              "description": "<p>Relations to related store</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getRelationCollection",
          "access": "internal",
          "description": "<p>Returns records the relation cache. Same result as if retrieving the collection on the dependent store, but\nwithout the need of accessing that store.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array"
          }
        },
        {
          "name": "getCollection",
          "access": "private",
          "description": "<p>Returns records from a collection of related records. Not to be called directly, called from Model getter.\nTODO: Move to Model?</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model"
            },
            {
              "name": "name",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array"
          }
        },
        {
          "name": "setCollection",
          "access": "private",
          "description": "<p>Sets a collection of related records. Will updated the related store and trigger events from it. Not to be called\ndirectly, called from Model setter.</p>",
          "scope": "instance"
        },
        {
          "name": "cacheRelatedRecord",
          "access": "private",
          "description": "<p>Adds a record to relation cache, optionally removing it if already there.</p>",
          "parameters": [
            {
              "name": "record"
            },
            {
              "name": "id"
            },
            {
              "name": "name"
            },
            {
              "name": "uncacheId"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "uncacheRelatedRecord",
          "access": "private",
          "description": "<p>Removes a record from relation cache, for a specific relation (specify relation name and id) or for all relations</p>",
          "parameters": [
            {
              "name": "record",
              "description": "<p>Record to remove from cache</p>"
            },
            {
              "name": "name",
              "description": "<p>Optional, relation name</p>"
            },
            {
              "name": "id",
              "description": "<p>Optional, id</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateDependentStores",
          "access": "private",
          "description": "<p>Updates related stores when store is cleared, a record is removed or added.</p>",
          "parameters": [
            {
              "name": "action",
              "type": "String"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateDependentRecordIds",
          "access": "private",
          "description": "<p>Updates relation cache and foreign key value when a related objects id is changed.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "StoreSearch",
      "modulePath": "Core/data/mixin/StoreSearch",
      "description": "<p>Mixin for Store that handles searching (multiple records) and finding (single record).</p>",
      "mixin": true,
      "examples": [
        "// find all records that has a field containing the string john\nlet hits = store.search('john');"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreSearch.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "functions": [
        {
          "name": "search",
          "description": "<p>Find all hits matching the specified input</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>Value to search for</p>"
            },
            {
              "name": "fields",
              "type": "Array.<Object>",
              "description": "<p>Fields to search value in</p>"
            }
          ],
          "scope": "instance",
          "category": "Search",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>Array of hits, in the format { index: x, data: record }</p>"
          }
        },
        {
          "name": "findByField",
          "description": "<p>Find occurrences of the specified <code>value</code> in the specified <code>field</code> on all records in the store</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>The record field to search in</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to search for</p>"
            }
          ],
          "scope": "instance",
          "category": "Search",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>Array of hits, in the format { index: x, data: record }</p>"
          }
        },
        {
          "name": "find",
          "description": "<p>Finds the first record for which the specified function returns true</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Comparison function, called with record as parameter</p>"
            },
            {
              "name": "searchAllRecords",
              "type": "Boolean",
              "description": "<p>True to ignore any applied filters when searching</p>",
              "default": false,
              "optional": true
            }
          ],
          "examples": [
            "store.find(record => record.color === 'blue');"
          ],
          "scope": "instance",
          "category": "Search",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Record or undefined if none found</p>"
          }
        },
        {
          "name": "findRecord",
          "description": "<p>Finds the first record for which the specified field has the specified value</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Field name</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to find</p>"
            },
            {
              "name": "searchAllRecords",
              "type": "Boolean",
              "description": "<p>True to ignore any applied filters when searching</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Search",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Record or undefined if none found</p>"
          }
        },
        {
          "name": "query",
          "description": "<p>Searches the Store records using the passed function.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function that is called for each record. Return true to indicate a match</p>"
            },
            {
              "name": "searchAllRecords",
              "type": "Boolean",
              "description": "<p>True to ignore any applied filters when searching</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Search",
          "returns": {
            "type": "Array.<Core.data.Model>",
            "description": "<p>An array of the matching Records</p>"
          }
        },
        {
          "name": "some",
          "description": "<p>Returns true if the supplied function returns true for any record in the store</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function that should return true to indicate a match</p>"
            },
            {
              "name": "searchAllRecords",
              "type": "Boolean",
              "description": "<p>True to ignore any applied filters when searching</p>",
              "default": false,
              "optional": true
            }
          ],
          "examples": [
            "store.some(record => record.age > 95); // true if any record has age > 95"
          ],
          "scope": "instance",
          "category": "Search",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "StoreSort",
      "modulePath": "Core/data/mixin/StoreSort",
      "description": "<p>Mixin for Store that handles simple sorting as well as multi-level sorting.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// single sorter\nstore.sort('age');\n\n// single sorter as object, descending order\nstore.sort({ field : 'age', ascending : false });\n\n// multiple sorters\nstore.sort(['age', 'name']);\n\n// using custom sorting function\nstore.sort({\n    fn : (recordA, recordB) => {\n        // apply custom logic, for example:\n        return recordA.name.length &lt; recordB.name.length ? -1 : 1;\n    }\n});\n\n// using locale specific sort (slow)\nstore.sort({ field : 'name', useLocaleSort : 'sv-SE' });\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreSort.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "sorters",
          "description": "<p>Initial sorters, format is [{ field: 'name', ascending: false }, ...]</p>",
          "type": [
            "Array.<Object>",
            "Array.<String>"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "useLocaleSort",
          "description": "<p>Use <code>localeCompare()</code> when sorting, which lets the browser sort in a locale specific order. Set to <code>true</code>,\na locale string or a locale config to enable.</p>\n<p>Enabling this has big negative impact on sorting\nperformance. For more info on <code>localeCompare()</code>, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\">MDN</a>.</p>\n<p>Examples:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    // Swedish sorting\n    useLocaleSort : 'sv-SE'\n});\n\nconst store = new Store({\n    // Swedish sorting with custom casing order\n    useLocaleSort : {\n        locale    : 'sv-SE',\n        caseFirst : 'upper'\n    }\n});\n</code></pre>\n<p>Can also be configured on a per sorter basis:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.sort({ field: 'name', useLocaleSort : 'sv-SE' });\n</code></pre>",
          "type": [
            "Boolean",
            "String",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": false,
          "category": "Advanced"
        },
        {
          "name": "reapplySortersOnAdd",
          "description": "<p>Specify true to sort this store after records are added.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Sortering"
        }
      ],
      "events": [
        {
          "name": "beforeSort",
          "description": "<p>Fired before sorting</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "sorters",
              "type": "Array.<Object>",
              "description": "<p>Sorter configs</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records to sort</p>"
            }
          ]
        },
        {
          "name": "sort",
          "description": "<p>Fired after sorting</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.Store",
              "description": "<p>This Store</p>"
            },
            {
              "name": "sorters",
              "type": "Array.<Object>",
              "description": "<p>Sorter configs</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Sorted records</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "sorters",
          "description": "<p>Currently applied sorters</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "readonly": true,
          "category": "Sort, group & filter"
        },
        {
          "name": "isSorted",
          "description": "<p>Is store sorted?</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Sort, group & filter"
        }
      ],
      "functions": [
        {
          "name": "sort",
          "description": "<p>Sort records, either by replacing current sorters or by adding to them.\nA sorter can specify a <strong><em>custom sorting function</em></strong> which will be called with arguments (recordA, recordB).\nWorks in the same way as a standard array sorter, except that returning <code>null</code> triggers the stores\nnormal sorting routine.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// single sorter\nstore.sort('age');\n\n// single sorter as object, descending order\nstore.sort({ field : 'age', ascending : false });\n\n// multiple sorters\nstore.sort(['age', 'name']);\n\n// using custom sorting function\nstore.sort((recordA, recordB) => {\n    // apply custom logic, for example:\n    return recordA.name.length &lt; recordB.name.length ? -1 : 1;\n});\n\n// using locale specific sort (slow)\nstore.sort({ field : 'name', useLocaleSort : 'sv-SE' });\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Array.<Object>",
                "Object",
                "function"
              ],
              "description": "<p>Field to sort by.\nCan also be an array of <a href=\"#Core/util/CollectionSorter\">sorter</a> config objects, or a sorting function, or a <a href=\"#Core/util/CollectionSorter\">sorter</a> config.</p>"
            },
            {
              "name": "ascending",
              "type": "Boolean",
              "description": "<p>Sort order.\nApplicable when the <code>field</code> is a string (if not specified and already sorted by the field, reverts direction),\nor an object and <code>ascending</code> property is not specified for the object. <code>true</code> by default.\nNot applicable when <code>field</code> is a function. <code>ascending</code> is always <code>true</code> in this case.</p>",
              "optional": true
            },
            {
              "name": "add",
              "type": "Boolean",
              "description": "<p>If <code>true</code>, adds a sorter to the sorters collection.\nNot applicable when <code>field</code> is an array. In this case always replaces active sorters.</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Set as true to not fire events. UI will not be informed about the changes.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeSort",
            "event:sort",
            "event:refresh"
          ],
          "category": "Sort, group & filter"
        },
        {
          "name": "addSorter",
          "description": "<p>Add a sorting level (a sorter).</p>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Array.<Object>",
                "Object",
                "function"
              ],
              "description": "<p>Field to sort by. Can also be an array of sorters, or a sorting\nfunction, or a <a href=\"#Core/util/CollectionSorter\">sorter</a> config.</p>"
            },
            {
              "name": "ascending",
              "type": "Boolean",
              "description": "<p>Sort order (used only if field specified as string)</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "removeSorter",
          "description": "<p>Remove a sorting level (a sorter)</p>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>Stop sorting by this field (or sorter function)</p>"
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "clearSorters",
          "description": "<p>Removes all sorters, turning store sorting off.</p>",
          "scope": "instance",
          "category": "Sort, group & filter"
        },
        {
          "name": "createSorterFn",
          "description": "<p>Creates a function used with Array#sort when sorting the store. Override to use your own custom sorting logic.</p>",
          "parameters": [
            {
              "name": "sorters",
              "type": "Array.<Object>",
              "description": "<p>An array of sorter config objects</p>"
            }
          ],
          "scope": "instance",
          "category": "Sort, group & filter",
          "returns": {
            "type": "function"
          }
        },
        {
          "name": "performSort",
          "access": "private",
          "description": "<p>Perform sorting according to the <a href=\"#Core/data/mixin/StoreSort#config-sorters\">sorters</a> configured.\nThis is the internal implementation which is overridden in <a href=\"#Core/data/AjaxStore\">AjaxStore</a> and\nmust not be overridden.</p>",
          "scope": "instance",
          "category": "Sort, group & filter"
        }
      ]
    },
    {
      "name": "StoreState",
      "modulePath": "Core/data/mixin/StoreState",
      "description": "<p>A Mixin for Store that manages its state.</p>\n<ul>\n<li><strong>sorters</strong></li>\n<li><strong>groupers</strong></li>\n<li><strong>filters</strong>: Only serializable filters are saved (filters defined with <code>property</code> and <code>value</code>).</li>\n</ul>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreState.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "functions": [
        {
          "name": "getState",
          "access": "private",
          "description": "<p>Get store state. Used by State-plugin to serialize state</p>",
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "applyState",
          "access": "private",
          "description": "<p>Apply store state. Used by State-plugin to restore a previously serialized state</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Object"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "StoreSum",
      "modulePath": "Core/data/mixin/StoreSum",
      "description": "<p>Mixin for Store that handles summaries.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreSum.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "functions": [
        {
          "name": "sum",
          "description": "<p>Returns sum calculated by adding value of specified field for specified records. Defaults to using all records\nin store</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to summarize by</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records to summarize, uses all records if unspecified.</p>"
            }
          ],
          "scope": "instance",
          "category": "Sum",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "min",
          "description": "<p>Returns min value for the specified field, can be used with Date or Number values. Defaults to look through all records in store</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to find min value for</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records to process, uses all records if unspecified</p>"
            }
          ],
          "scope": "instance",
          "category": "Sum",
          "returns": {
            "type": [
              "Number",
              "Date"
            ]
          }
        },
        {
          "name": "max",
          "description": "<p>Returns max value for the specified field, can be used with Date or Number values. Defaults to look through all records in store</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to find max value for</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records to process, uses all records if unspecified</p>"
            }
          ],
          "scope": "instance",
          "category": "Sum",
          "returns": {
            "type": [
              "Number",
              "Date"
            ]
          }
        },
        {
          "name": "average",
          "description": "<p>Returns the average value for the specified field. Defaults to look through all records in store</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to calculate average value for</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records to process, uses all records if unspecified</p>"
            }
          ],
          "scope": "instance",
          "category": "Sum",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "groupSum",
          "description": "<p>Returns sum by adding value of specified field for records in the group with the specified groupValue.</p>",
          "parameters": [
            {
              "name": "groupValue",
              "type": "*",
              "description": "<p>The group to summarize</p>"
            },
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field to summarize by</p>"
            }
          ],
          "scope": "instance",
          "category": "Sum",
          "returns": {
            "type": "Number",
            "description": "<p>Sum or null if store not grouped</p>"
          }
        }
      ]
    },
    {
      "name": "StoreSync",
      "modulePath": "Core/data/mixin/StoreSync",
      "description": "<p>Mixin that allows Store to sync a new dataset with its existing records, instead of fully replacing everything.\nConfigure Store with <code>syncDataOnLoad: true</code> to activate the functionality. Sync is performed when a new dataset\nis loaded, either by directly assigning it to <code>store.data</code> or by loading it using Ajax (if using an AjaxStore).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n  syncDataOnLoad : true,\n  data           : [\n    { id : 1, name : 'Saitama' },\n    { id : 2, name : 'Genos' },\n    { id : 3, name : 'Mumen Rider' }\n  ]\n});\n\n// Sync a new dataset by assigning to data:\nstore.data = [\n  { id : 1, name : 'Caped Baldy' },\n  { id : 4, name : 'Horse-Bone' }\n];\n\n // Result : Record 1 updated, record 2 & 3 removed, record 4 added\n</code></pre>\n<p>For more details, please see <a href=\"#Core/data/mixin/StoreSync#config-syncDataOnLoad\">syncDataOnLoad</a>.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreSync.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "syncDataOnLoad",
          "description": "<p>Configure with <code>true</code> to sync loaded data instead of replacing existing with a new dataset.</p>\n<p>By default (or when configured with <code>false</code>) assigning to <code>store.data</code> replaces the entire dataset\nwith a new one, creating all new records:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.data = [ { id : 1, name : 'Saitama' } ];\n\nconst first = store.first;\n\nstore.data = [ { id : 1, name : 'One-Punch man' } ];\n\n// store.first !== first;\n</code></pre>\n<p>When configured with <code>true</code> the new dataset is instead synced against the old, figuring out what was\nadded, removed and updated:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>store.data = [ { id : 1, name : 'Saitama' } ];\n\nconst first = store.first;\n\nstore.data = [ { id : 1, name : 'One-Punch man' } ];\n\n// store.first === first;\n</code></pre>\n<p>After the sync, any configured sorters, groupers and filters will be reapplied.</p>\n<h4>Threshold</h4>\n<p>The sync operation has a configurable threshold, above which the operation will be treated as a\nbatch/refresh and only trigger a single <code>refresh</code> event. If threshold is not reached, individual events\nwill be triggered (single <code>add</code>, <code>remove</code> and possible multiple <code>update</code>). To enable the threshold,\nsupply a config object with a <code>threshold</code> property instead of <code>true</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    syncDataOnLoad : {\n        threshold : '20%'\n    }\n});\n</code></pre>\n<p><code>threshold</code> accepts numbers or strings. A numeric threshold means number of affected records, while a\nstring is used as a percentage of the whole dataset (appending <code>%</code> is optional). By default no threshold\nis used.</p>\n<h4>Missing fields</h4>\n<p>The value of any field not supplied in the new dataset is by default kept as is (if record is not removed\nby the sync). This behaviour is configurable, by setting <code>keepMissingValues : false</code> in a config object\nit will reset any unspecified field back to their default values:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const store = new Store({\n    syncDataOnLoad : {\n        keepMissingValues : false\n    }\n});\n</code></pre>\n<p>Considering the following sync operation:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Existing data\n{ id : 1, name : 'Saitama', powerLevel : 100 }\n// Sync data\n{ id : 1, name : 'One-Punch Man' }\n</code></pre>\n<p>The result would by default (or when explicitly configured with <code>true</code>)  be:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{ id : 1, name : 'One-Punch Man', powerLevel : 100 }\n</code></pre>\n<p>If configured with <code>keepMissingValues : false</code> it would instead be:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{ id : 1, name : 'One-Punch Man' }\n</code></pre>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": false,
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "syncDataset",
          "access": "private",
          "description": "<p>Syncs a new dataset against the already loaded one, only applying changes.\nNot intended to be called directly, please configure store with <code>syncDataOnLoad: true</code> and assign to\n<code>store.data</code> as usual instead.</p>\n<pre class=\"prettyprint source\"><code>const store = new Store({\n   syncDataOnLoad : true,\n   data : [\n       // initial data\n   ]\n});\n\nstore.data = [ // new data ]; //  Difference between initial data and new data will be applied\n</code></pre>",
          "parameters": [
            {
              "name": "data",
              "type": [
                "Array.<Object>",
                "Array.<Core.data.Model>"
              ],
              "description": "<p>New dataset, an array of records or data objects</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "StoreTree",
      "modulePath": "Core/data/mixin/StoreTree",
      "description": "<p>Mixin for store with tree related functionality. To learn more about working with tree nodes please see the\n<a href=\"#Core/data/mixin/TreeNode\">TreeNode</a> class and <a href=\"#Core/guides/data/treedata.md\">this guide</a>.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreTree.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "configs": [
        {
          "name": "transformFlatData",
          "description": "<p>Set to <code>true</code> to on load transform a flat dataset with raw objects containing <code>parentId</code> into the format\nexpected for tree data.</p>\n<p>Example input format:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>[\n  { id : 1, name : 'Parent' },\n  { id : 2, name : 'Child', parentId : 1 }\n]\n</code></pre>\n<p>Will be transformed into:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>[\n  {\n    id : 1,\n    name : 'Parent',\n    children : [\n      { id : 2, name : 'Child', parentId : 1 }\n    ]\n  }\n]\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Tree"
        }
      ],
      "properties": [
        {
          "name": "isTree",
          "description": "<p>True if this Store is configured to handle tree data (with <code>tree : true</code>) or if this is a\n<a href=\"#Core/data/Store#function-makeChained\">chained store</a> and the master store is a tree store.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Tree"
        },
        {
          "name": "leaves",
          "description": "<p>Returns all leaf records in a tree store</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "instance",
          "category": "Tree"
        }
      ],
      "functions": [
        {
          "name": "loadChildren",
          "description": "<p>Loads children for a parent node that uses load on demand (when expanding it). Base implementation does nothing,\neither use AjaxStore which implements it, create your own subclass with an implementation or listen for\n<code>toggleNode</code> and insert records when you have them available.</p>",
          "parameters": [
            {
              "name": "parentRecord",
              "type": "Core.data.Model"
            }
          ],
          "scope": "instance",
          "category": "Tree",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which will be resolved if the load succeeds, and rejected if the load is</p>"
          }
        },
        {
          "name": "onNodeAddChild",
          "access": "internal",
          "description": "<p>Called from Model when adding children. Not to be called directly, use Model#appendChild() instead.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "Core.data.mixin.TreeNode"
            },
            {
              "name": "children",
              "type": "Array.<Core.data.mixin.TreeNode>"
            },
            {
              "name": "index",
              "type": "Number"
            },
            {
              "name": "isMove",
              "type": "Object"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:add",
            "event:change"
          ],
          "category": "Tree"
        },
        {
          "name": "getChildren",
          "description": "<p>Returns the children of the passed branch node which this store owns. By default, this\nis the entire <code>children</code> array.</p>\n<p><strong>If this store <a href=\"#Core/data/mixin/StoreChained#property-isChained\">isChained</a></strong>, then\nthis returns only the subset of children which are filtered into this store by the\n<a href=\"#Core/data/mixin/StoreChained#config-chainedFilterFn\">chainedFilterFn</a>.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "Core.data.Model",
              "description": "<p>The node to return the children of.</p>"
            }
          ],
          "scope": "instance",
          "category": "Tree",
          "returns": {
            "type": "Array.<Core.data.Model>"
          }
        },
        {
          "name": "internalToggleTreeSubRecords",
          "access": "private",
          "description": "<p>Includes or excludes all records beneath parentRecord in storage. Used when expanding or collapsing\nnodes.</p>",
          "parameters": [
            {
              "name": "parentRecord",
              "description": "<p>Parent record</p>"
            },
            {
              "name": "include",
              "description": "<p>Include (true) or exclude (false)</p>"
            }
          ],
          "scope": "instance",
          "category": "Tree"
        },
        {
          "name": "toggleCollapse",
          "description": "<p>Collapse an expanded record or expand a collapsed. Optionally forcing a certain state.</p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the record itself) or id of a record to toggle</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Force collapse (true) or expand (false)</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Tree",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "onNodeCollapse",
          "access": "private",
          "description": "<p>Remove all records beneath parentRecord from storage.</p>",
          "parameters": [
            {
              "name": "parentRecord",
              "description": "<p>Parent record</p>"
            }
          ],
          "scope": "instance",
          "category": "Tree"
        },
        {
          "name": "onNodeExpand",
          "access": "private",
          "description": "<p>Add all records beneath parentRecord from storage.</p>",
          "parameters": [
            {
              "name": "parentRecord",
              "description": "<p>Parent record</p>"
            }
          ],
          "scope": "instance",
          "category": "Tree"
        },
        {
          "name": "transformToTree",
          "access": "private",
          "description": "<p>Transforms flat data containing parent ids into tree data</p>",
          "parameters": [
            {
              "name": "data",
              "type": "Array.<Object>",
              "description": "<p>Flat raw data</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>Tree data</p>"
          }
        },
        {
          "name": "treeify",
          "access": "internal",
          "description": "<p>Transforms data into a tree with parent levels based on supplied fields.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const newRoot = store.treeify(['name', r => r.age % 10]);\n</code></pre>",
          "parameters": [
            {
              "name": "fields",
              "type": "Array.<(String|function())>",
              "description": "<p>The field names, or a function to call to extract a value to create parent\nnodes for records with the same value.</p>"
            },
            {
              "name": "parentTransform",
              "type": "function",
              "description": "<p>A function which is called to allow the caller to transform the raw data\nobject of any newly created parent nodes.</p>",
              "optional": true
            },
            {
              "name": "convertParents",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to convert raw new parent data objects to this Store's\n<a href=\"#Core/data/Store#config-modelClass\">modelClass</a>.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>New root node</p>"
          }
        }
      ]
    },
    {
      "name": "TreeNode",
      "modulePath": "Core/data/mixin/TreeNode",
      "description": "<p>Mixin for Model with tree node related functionality. This class is mixed into the <a href=\"#Core/data/Model\">Model</a> class.</p>\n<h2>Adding and removing child nodes</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>const parent = store.getById(1),\n\nfirstBorn = parent.insertChild({\n    name : 'Child node'\n}, parent.children[0]); // Insert a child at a specific place in the children array\n\nparent.removeChild(parent.children[0]); // Removes a child node\nparent.appendChild({ name : 'New child node' }); // Appends a child node\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TreeNode.js",
      "path": "/Calendar/lib/Core/data/mixin",
      "properties": [
        {
          "name": "convertEmptyParentToLeaf",
          "description": "<p>This static configuration option allows you to control whether an empty parent task should be converted into a\nleaf. Enable/disable it for a whole class:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>Model.convertEmptyParentToLeaf = false;\n</code></pre>\n<p>By specifying <code>true</code>, all empty parents will be considered leafs. Can also be assigned a configuration object\nwith with the following Boolean properties to customize the behaviour:</p>\n<ul>\n<li><code>onLoad</code> - Apply the transformation on load to any parents without children (<code>children : []</code>)</li>\n<li><code>onRemove</code> - Apply the transformation when all children have been removed from a parent</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code>Model.convertEmptyParentToLeaf = {\n    onLoad   : false,\n    onRemove : true\n}\n</code></pre>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "static",
          "defaultValue": false,
          "category": "Parent & children"
        },
        {
          "name": "parent",
          "description": "<p>This is a read-only property providing access to the parent node.</p>",
          "type": "Core.data.Model",
          "scope": "inner",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "childLevel",
          "description": "<p>Depth in the tree at which this node exists. First visual level of nodes are at level 0, their direct children at\nlevel 1 and so on.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "isLeaf",
          "description": "<p>Is a leaf node in a tree structure?</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "isParent",
          "description": "<p>Is a parent node in a tree structure?</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "isLoaded",
          "description": "<p>Returns true for parent nodes with children loaded (there might still be no children)</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "descendantCount",
          "description": "<p>Count all children (including sub-children) for a node (in its `firstStore´)</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "visibleDescendantCount",
          "description": "<p>Count visible (expanded) children (including sub-children) for a node (in its <code>firstStore</code>)</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "allChildren",
          "description": "<p>Retrieve all children (by traversing sub nodes)</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "firstChild",
          "description": "<p>Get the first child of this node</p>",
          "type": "Core.data.Model",
          "scope": "instance",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "lastChild",
          "description": "<p>Get the last child of this node</p>",
          "type": "Core.data.Model",
          "scope": "instance",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "previousSibling",
          "description": "<p>Get the previous sibling of this node</p>",
          "type": "Core.data.Model",
          "scope": "inner",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "nextSibling",
          "description": "<p>Get the next sibling of this node</p>",
          "type": "Core.data.Model",
          "scope": "inner",
          "readonly": true,
          "category": "Parent & children"
        },
        {
          "name": "previousSiblingsTotalCount",
          "description": "<p>Returns count of all preceding sibling nodes (including their children).</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "parentId",
          "description": "<p>Reading this property returns the id of the parent node, if this record is a child of a node.</p>\n<p>Setting this property appends this record to the record with the passed id <strong>in the same store that this record\nis already in</strong>.</p>\n<p>Note that setting this property is <strong>only valid if this record is already part of a tree store</strong>.</p>\n<p>This is not intended for general use. This is for when a server responds to a record mutation and the server\ndecides to move a record to a new parent. If a <code>parentId</code> property is passed in the response data for a record,\nthat record will be moved.</p>",
          "type": [
            "Number",
            "String",
            "null"
          ],
          "scope": "instance",
          "category": "Parent & children"
        }
      ],
      "fields": [
        {
          "name": "parentId",
          "description": "<p>This is a read-only field provided in server synchronization packets to specify\nwhich record id is the parent of the record.</p>",
          "type": [
            "String",
            "Number",
            "null"
          ],
          "scope": "inner",
          "readonly": true,
          "category": "Tree"
        },
        {
          "name": "parentIndex",
          "description": "<p>This is a read-only field provided in server synchronization packets to specify\nwhich position the node takes in the parent's children array.\nThis index is set on load and gets updated automatically after row reordering, sorting, etc.\nTo save the order, need to persist the field on the server and when data is fetched to be loaded,\nneed to sort by this field.</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true,
          "category": "Tree"
        },
        {
          "name": "children",
          "description": "<p>Child nodes. To allow loading children on demand, specify <code>children : true</code> in your data. Omit the field for leaf tasks.</p>\n<p>Note, if the tree store loads data from a remote origin, make sure <a href=\"#Core/data/AjaxStore#config-readUrl\">readUrl</a>\nis specified, and optionally <a href=\"#Core/data/AjaxStore#config-parentIdParamName\">parentIdParamName</a> is set, otherwise\n<a href=\"#Core/data/Store#function-loadChildren\">loadChildren</a> has to be implemented.</p>",
          "type": [
            "Boolean",
            "Array.<Object>",
            "Array.<Core.data.Model>"
          ],
          "scope": "inner",
          "category": "Parent & children"
        }
      ],
      "functions": [
        {
          "name": "processChildren",
          "access": "internal",
          "description": "<p>Called during creation to also turn any children into Models joined to the same stores as this model</p>",
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "ancestorsExpanded",
          "description": "<p>This method returns <code>true</code> if this record has all expanded ancestors and is therefore\neligible for inclusion in a UI.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>Optional store, defaults to nodes first store</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isExpanded",
          "description": "<p>Used by stores to assess the record's collapsed/expanded state in that store.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "getDescendantCount",
          "description": "<p>Count visible (expanded)/all children for this node, optionally specifying for which store.</p>",
          "parameters": [
            {
              "name": "onlyVisible",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to only count visible (expanded) children.</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>A Store to which this node belongs</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "traverse",
          "description": "<p>Traverses all child nodes recursively calling the passed function\non a target node <strong>before</strong> iterating the child nodes.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call</p>"
            },
            {
              "name": "skipSelf",
              "type": "Boolean",
              "description": "<p>True to ignore self</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "includeFilteredOutRecords",
              "type": "Boolean",
              "description": "<p>True to also traverse filtered out records</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "traverseBefore",
          "description": "<p>Traverses all child nodes recursively calling the passed function\non child nodes of a target <strong>before</strong> calling it it on the node.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            },
            {
              "name": "skipSelf",
              "type": "Boolean",
              "description": "<p>True to skip this node in the traversal</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "includeFilteredOutRecords",
              "type": "Boolean",
              "description": "<p>True to also traverse filtered out records</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "traverseWhile",
          "description": "<p>Traverses child nodes recursively while fn returns true</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            },
            {
              "name": "skipSelf",
              "type": "Boolean",
              "description": "<p>True to skip this node in the traversal</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "includeFilteredOutRecords",
              "type": "Boolean",
              "description": "<p>True to also traverse filtered out records</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "bubble",
          "description": "<p>Bubbles up from this node, calling the specified function with each node.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call for each node</p>"
            },
            {
              "name": "skipSelf",
              "type": "Boolean",
              "description": "<p>True to skip this node in the traversal</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children"
        },
        {
          "name": "bubbleWhile",
          "description": "<p>Bubbles up from this node, calling the specified function with each node,\nwhile the function returns true.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call for each node</p>"
            },
            {
              "name": "skipSelf",
              "type": "Boolean",
              "description": "<p>True to skip this node in the traversal</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "contains",
          "description": "<p>Checks if this model contain another model as one of it's descendants</p>",
          "parameters": [
            {
              "name": "childOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>child node or id</p>"
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "appendChild",
          "description": "<p>Append a child record(s) to any current children.</p>",
          "parameters": [
            {
              "name": "childRecord",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single\nrecord/data to append</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to not trigger events during append</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": [
              "Core.data.Model",
              "Array.<Core.data.Model>",
              "null"
            ]
          }
        },
        {
          "name": "insertChild",
          "description": "<p>Insert a child record(s) before an existing child record.</p>",
          "parameters": [
            {
              "name": "childRecord",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single\nrecord/data to insert</p>"
            },
            {
              "name": "before",
              "type": "Core.data.Model",
              "description": "<p>Optional record to insert before, leave out to append to the end</p>",
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to not trigger events during append</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": [
              "Core.data.Model",
              "Array.<Core.data.Model>",
              "null"
            ]
          }
        },
        {
          "name": "removeChild",
          "description": "<p>Remove a child record. Only direct children of this node can be removed, others are ignored.</p>",
          "parameters": [
            {
              "name": "childRecords",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>"
              ],
              "description": "<p>The record(s) to remove.</p>"
            },
            {
              "name": "isMove",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> if the record is being moved within the same store.</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to not trigger events during remove.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Array.<Core.data.Model>",
            "description": "<p>All records (including nested children) removed</p>"
          }
        },
        {
          "name": "replaceChildren",
          "description": "<p>Replaces all child nodes with the new node set.</p>",
          "parameters": [
            {
              "name": "childRecords",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>"
              ],
              "description": "<p>The new child record set.</p>"
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Array.<Core.data.Model>"
          }
        },
        {
          "name": "clearChildren",
          "description": "<p>Removes all child nodes from this node.</p>",
          "parameters": [
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to not fire Store events during the remove.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": "Array.<Core.data.Model>"
          }
        },
        {
          "name": "clear",
          "access": "private",
          "description": "<p>Removes all records from the rootNode</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "StateTrackingManager",
      "modulePath": "Core/data/stm/StateTrackingManager",
      "classDescription": "<p>Tracks the state of every store registered via <a href=\"#Core/data/stm/StateTrackingManager#function-addStore\">addStore</a>. It is <a href=\"#Core/data/stm/StateTrackingManager#config-disabled\">disabled</a> by default\nso remember to call <a href=\"#Core/data/stm/StateTrackingManager#function-enable\">enable</a> when your stores are registered and initial dataset is loaded.\nUse <a href=\"#Core/data/stm/StateTrackingManager#function-undo\">undo</a> / <a href=\"#Core/data/stm/StateTrackingManager#function-redo\">redo</a> method calls to restore state to a particular\npoint in time</p>\n<pre class=\"prettyprint source lang-javascript\"><code>stm = new StateTrackingManager({\n    autoRecord : true,\n    listeners  : {\n       'recordingstop' : () => {\n           // your custom code to update undo/redo GUI controls\n           updateUndoRedoControls();\n       },\n       'restoringstop' : ({ stm }) => {\n           // your custom code to update undo/redo GUI controls\n           updateUndoRedoControls();\n       }\n   },\n   getTransactionTitle : (transaction) => {\n       // your custom code to analyze the transaction and return custom transaction title\n       const lastAction = transaction.queue[transaction.queue.length - 1];\n\n       if (lastAction instanceof AddAction) {\n           let title = 'Add new record';\n       }\n\n       return title;\n   }\n});\n\nstm.addStore(userStore);\nstm.addStore(companyStore);\nstm.addStore(otherStore);\n\nstm.enable();\n</code></pre>\n<p><strong>Note:</strong> STM currently does not support undoing server side added and saved records.\nTherefore it's recommended to <a href=\"#Core/data/stm/StateTrackingManager#function-resetQueue\">reset the queue</a>\neach time a tracked store(s) loads from or saves its changes to the server.\nIf Crud Manager is used it can be done like this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>crudManager.on({\n    requestDone() {\n        stm.resetQueue();\n    }\n});\n</code></pre>\n<p>and in case individual stores are used:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>ajaxStore.on({\n    afterRequest({ exception }) {\n        if (!exception) {\n            stm.resetQueue();\n        }\n    }\n});\n</code></pre>",
      "extends": [
        "Core/Base"
      ],
      "mixes": [
        "Core/mixin/Events"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "StateTrackingManager.js",
      "path": "/Calendar/lib/Core/data/stm",
      "configs": [
        {
          "name": "disabled",
          "description": "<p>Default manager disabled state</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "autoRecord",
          "description": "<p>Whether to start transaction recording automatically in case the Manager is enabled.</p>\n<p>In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.\nrecords any changes in its monitored stores. The transaction lasts for <a href=\"#Core/data/stm/StateTrackingManager#config-autoRecordTransactionStopTimeout\">autoRecordTransactionStopTimeout</a> and\nafterwards creates one undo/redo step, including all changes in the stores during that period of time.</p>\n<p>In non auto recording mode you have to call <a href=\"#Core/data/stm/StateTrackingManager#function-startTransaction\">startTransaction</a> / <a href=\"#Core/data/stm/StateTrackingManager#function-stopTransaction\">stopTransaction</a> to start and end\na transaction.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "autoRecordTransactionStopTimeout",
          "description": "<p>The transaction duration (in ms) for the auto recording mode <a href=\"#Core/data/stm/StateTrackingManager#config-autoRecord\">autoRecord</a></p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 100
        },
        {
          "name": "makeModelUpdateAction",
          "access": "private",
          "description": "<p>Store model update action factory</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "makeModelInsertChildAction",
          "access": "private",
          "description": "<p>Store insert child model action factory.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "makeModelRemoveChildAction",
          "access": "private",
          "description": "<p>Store remove child model action factory.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "makeStoreModelAddAction",
          "access": "private",
          "description": "<p>Store add model action factory.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "makeStoreModelInsertAction",
          "access": "private",
          "description": "<p>Store insert model action factory.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "makeStoreModelRemoveAction",
          "access": "private",
          "description": "<p>Store remove model action factory.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "makeStoreRemoveAllAction",
          "access": "private",
          "description": "<p>Store remove all models action factory.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "getTransactionTitle",
          "description": "<p>Function to create a transaction title if none is provided.</p>\n<p>The function receives a transaction and should return a title.</p>",
          "type": "function",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "state",
          "description": "<p>Gets current state of the manager</p>",
          "type": "Core.data.stm.state.StateBase",
          "scope": "instance"
        },
        {
          "name": "position",
          "description": "<p>Gets current undo/redo queue position</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "length",
          "description": "<p>Gets current undo/redo queue length</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "stores",
          "description": "<p>Gets all the stores registered in STM</p>",
          "type": "Array.<Core.data.Store>",
          "scope": "instance"
        },
        {
          "name": "disabled",
          "description": "<p>Get/set manager disabled state</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "isReady",
          "description": "<p>Checks manager ready state</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isRecording",
          "description": "<p>Checks manager recording state</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "autoRecord",
          "description": "<p>Gets/sets manager auto record option</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "transaction",
          "description": "<p>Gets currently recording STM transaction.</p>",
          "type": "Core.data.stm.Transaction",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "queue",
          "description": "<p>Gets titles of all recorded undo/redo transactions</p>",
          "type": "Array.<String>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isRestoring",
          "description": "<p>Gets manager restoring state.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "canUndo",
          "description": "<p>Checks if the manager can undo.</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "canRedo",
          "description": "<p>Checks if the manager can redo.</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "hasStore",
          "description": "<p>Checks if a store has been added to the manager</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "addStore",
          "description": "<p>Adds a store to the manager</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeStore",
          "description": "<p>Removes a store from the manager</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "forEachStore",
          "description": "<p>Calls <code>fn</code> for each store registered in STM.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>(store, id) =&gt; ...</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "enable",
          "description": "<p>Enables manager</p>",
          "scope": "instance"
        },
        {
          "name": "disable",
          "description": "<p>Disables manager</p>",
          "scope": "instance"
        },
        {
          "name": "startTransaction",
          "description": "<p>Starts undo/redo recording transaction.</p>",
          "parameters": [
            {
              "name": "title",
              "type": "String",
              "default": "nul",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "stopTransaction",
          "description": "<p>Stops undo/redo recording transaction</p>",
          "parameters": [
            {
              "name": "title",
              "type": "String",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "stopTransactionDelayed",
          "access": "private",
          "description": "<p>Stops undo/redo recording transaction after <a href=\"#Core/data/stm/StateTrackingManager#config-autoRecordTransactionStopTimeout\">autoRecordTransactionStopTimeout</a> delay.</p>",
          "scope": "instance"
        },
        {
          "name": "rejectTransaction",
          "description": "<p>Rejects currently recorded transaction.</p>",
          "scope": "instance"
        },
        {
          "name": "undo",
          "description": "<p>Undoes current undo/redo transaction.</p>",
          "parameters": [
            {
              "name": "steps",
              "type": "Number",
              "default": 1,
              "optional": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when undo action has been performed</p>"
          }
        },
        {
          "name": "undoAll",
          "description": "<p>Undoes all transactions.</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when undo actions has been performed</p>"
          }
        },
        {
          "name": "redo",
          "description": "<p>Redoes current undo/redo transaction.</p>",
          "parameters": [
            {
              "name": "steps",
              "type": "Number",
              "default": 1,
              "optional": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when redo action has been performed</p>"
          }
        },
        {
          "name": "redoAll",
          "description": "<p>Redoes all transactions.</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when redo actions has been performed</p>"
          }
        },
        {
          "name": "resetQueue",
          "description": "<p>Resets undo/redo queue.</p>",
          "scope": "instance"
        },
        {
          "name": "resetUndoQueue",
          "description": "<p>Resets undo queue.</p>",
          "scope": "instance"
        },
        {
          "name": "resetRedoQueue",
          "description": "<p>Resets redo queue.</p>",
          "scope": "instance"
        },
        {
          "name": "onModelUpdate",
          "access": "private",
          "description": "<p>Method to call from model STM mixin upon model update</p>",
          "parameters": [
            {
              "name": "model",
              "type": "Core.data.Model"
            },
            {
              "name": "newData",
              "type": "Object"
            },
            {
              "name": "oldData",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onModelInsertChild",
          "access": "private",
          "description": "<p>Method to call from model STM mixin upon tree model child insertion</p>",
          "parameters": [
            {
              "name": "parentModel",
              "type": "Core.data.Model",
              "description": "<p>Parent model</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Insertion index</p>"
            },
            {
              "name": "childModels",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Array of models inserted</p>"
            },
            {
              "name": "context",
              "type": "Map",
              "description": "<p>Map with inserted models as keys and objects with previous parent,\nand index at previous parent.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onModelRemoveChild",
          "access": "private",
          "description": "<p>Method to call from model STM mixin upon tree model child removal</p>",
          "parameters": [
            {
              "name": "parentModel",
              "type": "Core.data.Model"
            },
            {
              "name": "childModels",
              "type": "Array.<Core.data.Model>"
            },
            {
              "name": "context",
              "type": "Map"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onStoreModelAdd",
          "access": "private",
          "description": "<p>Method to call from store STM mixin upon store models adding</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            },
            {
              "name": "models",
              "type": "Array.<Core.data.Model>"
            },
            {
              "name": "silent",
              "type": "Boolean"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onStoreModelInsert",
          "access": "private",
          "description": "<p>Method to call from store STM mixin upon store models insertion</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            },
            {
              "name": "index",
              "type": "Number"
            },
            {
              "name": "models",
              "type": "Array.<Core.data.Model>"
            },
            {
              "name": "context",
              "type": "Map"
            },
            {
              "name": "silent",
              "type": "Boolean"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onStoreModelRemove",
          "access": "private",
          "description": "<p>Method to call from store STM mixin upon store models removal</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            },
            {
              "name": "models",
              "type": "Array.<Core.data.Model>"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "silent",
              "type": "Boolean"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onStoreRemoveAll",
          "access": "private",
          "description": "<p>Method to call from store STM mixin upon store clear</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            },
            {
              "name": "allRecords",
              "type": "Array.<Core.data.Model>"
            },
            {
              "name": "silent",
              "type": "Boolean"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "disabled",
          "description": "<p>Fired when the disabled state of the STM changes</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.data.stm.StateTrackingManager"
            },
            {
              "name": "disabled",
              "type": "Boolean",
              "description": "<p>The current disabled state of the STM</p>"
            }
          ]
        },
        {
          "name": "recordingStart",
          "description": "<p>Fired upon state recording operation starts.</p>",
          "parameters": [
            {
              "name": "stm",
              "type": "Core.data.stm.StateTrackingManager"
            },
            {
              "name": "transaction",
              "type": "Core.data.stm.Transaction"
            }
          ]
        },
        {
          "name": "recordingStop",
          "description": "<p>Fired upon state recording operation stops.</p>",
          "parameters": [
            {
              "name": "stm",
              "type": "Core.data.stm.StateTrackingManager"
            },
            {
              "name": "transaction",
              "type": "Core.data.stm.Transaction"
            },
            {
              "name": "reason",
              "type": "Object",
              "description": "<p>Transaction stop reason</p>"
            },
            {
              "name": "reason.stop",
              "type": "Boolean",
              "description": "<p>Transaction recording has been stopped in a normal way.</p>",
              "isSubParam": true
            },
            {
              "name": "reason.disabled",
              "type": "Boolean",
              "description": "<p>Transaction recording has been stopped due to STM has been disabled.</p>",
              "isSubParam": true
            },
            {
              "name": "reason.rejected",
              "type": "Boolean",
              "description": "<p>Transaction recording has been stopped due to transaction has been rejected.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "restoringStart",
          "description": "<p>Fired upon state restoration operation starts.</p>",
          "parameters": [
            {
              "name": "stm",
              "type": "Core.data.stm.StateTrackingManager"
            }
          ]
        },
        {
          "name": "restoringStop",
          "description": "<p>Fired upon state restoration operation stops.</p>",
          "parameters": [
            {
              "name": "stm",
              "type": "Core.data.stm.StateTrackingManager"
            }
          ]
        },
        {
          "name": "queueReset",
          "description": "<p>Fired upon state undo/redo queue reset.</p>",
          "parameters": [
            {
              "name": "stm",
              "type": "Core.data.stm.StateTrackingManager"
            }
          ]
        }
      ]
    },
    {
      "name": "Transaction",
      "modulePath": "Core/data/stm/Transaction",
      "classDescription": "<p>STM transaction class, holds list of actions constituting a transaction.</p>\n<p>A transaction can be undone and redone. Upon undo all the actions being held\nare undone in reverse order. Upon redo all the actions being held are redone\nin forward order.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Transaction.js",
      "path": "/Calendar/lib/Core/data/stm",
      "configs": [
        {
          "name": "title",
          "description": "<p>Transaction title</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "queue",
          "description": "<p>Gets transaction's actions queue</p>",
          "type": "Array.<Core.data.stm.action.ActionBase>",
          "scope": "instance"
        },
        {
          "name": "length",
          "description": "<p>Gets transaction's actions queue length</p>",
          "type": "Number",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "addAction",
          "description": "<p>Adds an action to the transaction.</p>",
          "parameters": [
            {
              "name": "action",
              "type": [
                "Core.data.stm.action.ActionBase",
                "Object"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "undo",
          "description": "<p>Undoes actions held</p>",
          "scope": "instance"
        },
        {
          "name": "redo",
          "description": "<p>Redoes actions held</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ActionBase",
      "modulePath": "Core/data/stm/action/ActionBase",
      "classDescription": "<p>Base class for STM actions.</p>",
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ActionBase.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "properties": [
        {
          "name": "type",
          "description": "<p>Gets the type of the action (stringified class name).</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "undo",
          "description": "<p>Undoes an action</p>",
          "scope": "instance"
        },
        {
          "name": "redo",
          "description": "<p>Redoes an action</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "AddAction",
      "modulePath": "Core/data/stm/action/AddAction",
      "classDescription": "<p>Action to record the fact of models adding to a store.</p>",
      "extends": [
        "Core/data/stm/action/ActionBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AddAction.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "configs": [
        {
          "name": "store",
          "description": "<p>Reference to a store models have been added into.</p>",
          "type": "Core.data.Store",
          "scope": "inner"
        },
        {
          "name": "modelList",
          "description": "<p>List of models added into the store.</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "inner"
        },
        {
          "name": "silent",
          "description": "<p>Flag showing if undo/redo should be done silently i.e. with events suppressed</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "InsertAction",
      "modulePath": "Core/data/stm/action/InsertAction",
      "classDescription": "<p>Action to record the fact of models inserting into a store.</p>",
      "extends": [
        "Core/data/stm/action/ActionBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "InsertAction.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "configs": [
        {
          "name": "store",
          "description": "<p>Reference to a store models have been inserted into.</p>",
          "type": "Core.data.Store",
          "scope": "inner"
        },
        {
          "name": "modelList",
          "description": "<p>List of models inserted into the store.</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "inner"
        },
        {
          "name": "insertIndex",
          "description": "<p>Index the models have been inserted at.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "context",
          "description": "<p>Models move context (if models has been moved), if any.\nMap this <a href=\"#Core/data/Model\">Model</a> instances as keys and their\nprevious index as values</p>",
          "type": "Map",
          "scope": "inner"
        },
        {
          "name": "silent",
          "description": "<p>Flag showing if undo/redo should be done silently i.e. with events suppressed</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "InsertChildAction",
      "modulePath": "Core/data/stm/action/InsertChildAction",
      "classDescription": "<p>Action to record the fact of adding a children models into a parent model.</p>",
      "extends": [
        "Core/data/stm/action/ActionBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "InsertChildAction.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "configs": [
        {
          "name": "parentModel",
          "description": "<p>Reference to a parent model a child model has been added to.</p>",
          "type": "Core.data.Model",
          "scope": "inner"
        },
        {
          "name": "childModels",
          "description": "<p>Children models inserted.</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "inner"
        },
        {
          "name": "insertIndex",
          "description": "<p>Index a children models are inserted at</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "context",
          "description": "<p>Map having children models as keys and values containing previous parent\nof each model and index at the previous parent.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "RemoveAction",
      "modulePath": "Core/data/stm/action/RemoveAction",
      "classDescription": "<p>Action to record the fact of models removed from a store.</p>",
      "extends": [
        "Core/data/stm/action/ActionBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RemoveAction.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "configs": [
        {
          "name": "store",
          "description": "<p>Reference to a store models have been removed from.</p>",
          "type": "Core.data.Store",
          "scope": "inner"
        },
        {
          "name": "modelList",
          "description": "<p>List of models removed from the store.</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "inner"
        },
        {
          "name": "context",
          "description": "<p>Models removing context.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "silent",
          "description": "<p>Flag showing if undo/redo should be done silently i.e. with events suppressed</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "RemoveAllAction",
      "modulePath": "Core/data/stm/action/RemoveAllAction",
      "classDescription": "<p>Action to record store remove all operation.</p>",
      "extends": [
        "Core/data/stm/action/ActionBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RemoveAllAction.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "configs": [
        {
          "name": "store",
          "description": "<p>Reference to a store cleared.</p>",
          "type": "Core.data.Store",
          "scope": "inner"
        },
        {
          "name": "allRecords",
          "description": "<p>All store records removed</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "inner"
        },
        {
          "name": "silent",
          "description": "<p>Flag showing if undo/redo should be done silently i.e. with events suppressed</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "RemoveChildAction",
      "modulePath": "Core/data/stm/action/RemoveChildAction",
      "classDescription": "<p>Action to record store remove child operation.</p>",
      "extends": [
        "Core/data/stm/action/ActionBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RemoveChildAction.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "configs": [
        {
          "name": "parentModel",
          "description": "<p>Reference to a parent model a child model has been removed to.</p>",
          "type": "Core.data.Model",
          "scope": "inner"
        },
        {
          "name": "childModels",
          "description": "<p>Children models removed.</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "inner"
        },
        {
          "name": "context",
          "description": "<p>Map having children models as keys and values containing previous parent\nindex at the parent.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "UpdateAction",
      "modulePath": "Core/data/stm/action/UpdateAction",
      "classDescription": "<p>Action to record the fact that a model has been updated.</p>",
      "extends": [
        "Core/data/stm/action/ActionBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "UpdateAction.js",
      "path": "/Calendar/lib/Core/data/stm/action",
      "configs": [
        {
          "name": "model",
          "description": "<p>Reference to a model which has been updated.</p>",
          "type": "Core.data.Model",
          "scope": "inner"
        },
        {
          "name": "newData",
          "description": "<p>Map of updated properties with new values.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "oldData",
          "description": "<p>Map of updated properties with old values.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "ModelStm",
      "modulePath": "Core/data/stm/mixin/ModelStm",
      "description": "<p>Mixin making a model compatible with <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a></p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ModelStm.js",
      "path": "/Calendar/lib/Core/data/stm/mixin",
      "properties": [
        {
          "name": "stm",
          "description": "<p>Reference to STM manager, if used</p>",
          "type": "Core.data.stm.StateTrackingManager",
          "scope": "instance",
          "category": "Misc"
        }
      ],
      "functions": [
        {
          "name": "beforeSet",
          "access": "private",
          "description": "<p>Overridden to collect initial data for the fields about to be changed.\nThe method is called from within <a href=\"#Core/data/Model#function-set\">set</a> method.</p>",
          "scope": "instance"
        },
        {
          "name": "afterSet",
          "access": "private",
          "description": "<p>Overridden to store initial data of the changed fields and to notify STM\nmanager about the change action if anything has been changed in result.</p>\n<p>The method is called from within <a href=\"#Core/data/Model#function-set\">set</a> method.</p>",
          "scope": "instance"
        },
        {
          "name": "beforeInsertChild",
          "access": "private",
          "description": "<p>Called from <a href=\"#Core/data/mixin/TreeNode#function-insertChild\">insertChild</a> to obtain inserted\nrecords initial parents and parent index, to be able to restore the state back upon undo.</p>",
          "parameters": [
            {
              "name": "childRecords",
              "type": "Array.<Core.data.Model>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array",
            "description": "<p>Array of results from this call and any of super calls if any.\nThis result is consumed by <a href=\"#Core/data/stm/mixin/ModelStm#function-afterInsertChild\">afterInsertChild</a> which pops\nfrom the result array to take only results of this method call and leave\nresults from super calls untouched.</p>"
          }
        },
        {
          "name": "afterInsertChild",
          "access": "private",
          "description": "<p>Called from <a href=\"#Core/data/mixin/TreeNode#function-insertChild\">insertChild</a> to notify <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a>\nabout children insertion. Provides it with all necessary context information collected\nin <a href=\"#Core/data/stm/mixin/ModelStm#function-beforeInsertChild\">beforeInsertChild</a> required to undo/redo the action.</p>",
          "scope": "instance"
        },
        {
          "name": "beforeRemoveChild",
          "access": "private",
          "description": "<p>Called from <a href=\"#Core/data/mixin/TreeNode#function-removeChild\">removeChild</a> to obtain removed\nrecords initial parent index, to be able to restore the state back upon undo.</p>",
          "parameters": [
            {
              "name": "childRecords",
              "type": "Array.<Core.data.Model>"
            },
            {
              "name": "isMove",
              "type": "Boolean"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array",
            "description": "<p>Array of results from this call and any of super calls if any.\nThis result is consumed by <a href=\"#Core/data/stm/mixin/ModelStm#function-afterRemoveChild\">afterRemoveChild</a> which pops\nfrom the result array to take only results of this method call and leave\nresults from super calls untouched.</p>"
          }
        },
        {
          "name": "afterRemoveChild",
          "access": "private",
          "description": "<p>Called from <a href=\"#Core/data/mixin/TreeNode#function-removeChild\">removeChild</a> to notify <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a>\nabout children removing. Provides it with all necessary context information collected\nin <a href=\"#Core/data/stm/mixin/ModelStm#function-beforeRemoveChild\">beforeRemoveChild</a> required to undo/redo the action.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "StoreStm",
      "modulePath": "Core/data/stm/mixin/StoreStm",
      "description": "<p>Store mixin to make it compatible with <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a>.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StoreStm.js",
      "path": "/Calendar/lib/Core/data/stm/mixin",
      "configs": [
        {
          "name": "stm",
          "description": "<p>Reference to STM manager</p>",
          "type": "Core.data.stm.StateTrackingManager",
          "scope": "inner",
          "category": "Advanced"
        }
      ]
    },
    {
      "name": "StateBase",
      "modulePath": "Core/data/stm/state/StateBase",
      "classDescription": "<p>Abstract class for STM states</p>\n<p>Every on* method should return a state for the STM which it should switch to\nor throw an exception that this call at this state is illegal.</p>\n<p>Interface of this class mirrors interface of <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a>.</p>",
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StateBase.js",
      "path": "/Calendar/lib/Core/data/stm/state"
    },
    {
      "name": "ContextMenuBase",
      "modulePath": "Core/feature/base/ContextMenuBase",
      "classDescription": "<p>Abstract base class used by other context menu features.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ContextMenuBase.js",
      "path": "/Calendar/lib/Core/feature/base",
      "configs": [
        {
          "name": "type",
          "description": "<p>This is a type of the context menu used to generate correct names for methods and events.\nShould be in camel case. Required to be set in subclass.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "menu",
          "description": "<p>A config which will be applied when creating the Menu component.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "items",
          "description": "<p><a href=\"#Core/widget/Menu\">Menu</a> items object containing named child menu items to apply to the feature's\nprovided context menu.</p>\n<p>This may add extra items as below, but may also remove any of the default items by configuring the name\nof the item as <code>false</code></p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    cellMenu : {\n        // This object is applied to the Feature's predefined default items\n        items : {\n            switchToDog : {\n                text : 'Dog',\n                icon : 'b-fa b-fa-fw b-fa-dog',\n                onItem({contextRecord}) {\n                    contextRecord.dog = true;\n                    contextRecord.cat = false;\n                },\n                weight : 500     // Make this second from end\n            },\n            switchToCat : {\n                text : 'Cat',\n                icon : 'b-fa b-fa-fw b-fa-cat',\n                onItem({contextRecord}) {\n                    contextRecord.dog = false;\n                    contextRecord.cat = true;\n                },\n                weight : 510     // Make this sink to end\n            },\n            add : false // We do not want the &quot;Add&quot; submenu to be available\n        }\n    }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "triggerEvent",
          "description": "<p>Event which is used to show context menu.\nAvailable options are: 'contextmenu', 'click', 'dblclick' or <code>false</code> to disable.\nDefault value is used from <a href=\"#Grid/view/GridBase#config-contextMenuTriggerEvent\">contextMenuTriggerEvent</a></p>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "menu",
          "description": "<p>Gets the Menu instance that this feature is using.</p>",
          "type": "Core.widget.Menu",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "menuContext",
          "description": "<p>An informational object containing contextual information about the last activation\nof the context menu. The base properties are listed below. Some subclasses may add extra\ncontextual information such as <code>eventRecord</code> and <code>resourceRecord</code> to the block.</p>",
          "type": "Object",
          "scope": "inner",
          "readonly": true,
          "properties": [
            {
              "name": "menuContext.event",
              "type": "Event",
              "description": "<p>The initiating event.</p>",
              "isSubParam": true
            },
            {
              "name": "menuContext.point",
              "type": "Array.<Number>",
              "description": "<p>The client <code>X</code> and <code>Y</code> position of the initiating event.</p>",
              "isSubParam": true
            },
            {
              "name": "menuContext.targetElement",
              "type": "HTMLElement",
              "description": "<p>The target to which the menu is being applied.</p>",
              "isSubParam": true
            },
            {
              "name": "menuContext.items",
              "type": "Object",
              "description": "<p>The context menu <strong>configuration</strong> items.</p>",
              "isSubParam": true
            },
            {
              "name": "menuContext.selection",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The record selection in the client (Grid, Scheduler, Gantt or Calendar).</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "baseItems",
          "access": "internal",
          "description": "<p>Returns the base, configured-in menu items set from the configured items, taking into\naccount the namedItems the feature offers.</p>",
          "type": "Array.<Object>",
          "scope": "instance",
          "readonly": true
        }
      ],
      "events": [
        {
          "name": "contextMenuItem",
          "description": "<p>This event fires on the owning widget when an item is selected in the context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The owning widget</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "item",
              "type": "Object",
              "description": "<p>Selected menu item</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "contextMenuToggleItem",
          "description": "<p>This event fires on the owning widget when a check item is toggled in the context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The owning widget</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "item",
              "type": "Object",
              "description": "<p>Selected menu item</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>Checked or not</p>"
            }
          ],
          "onOwner": true
        }
      ],
      "functions": [
        {
          "name": "showContextMenu",
          "description": "<p>Shows the context menu.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The initiating event.</p>"
            },
            {
              "name": "alignSpec",
              "type": [
                "Object",
                "HTMLElement"
              ],
              "description": "<p>Menu alignment specification, or an element to align to</p>",
              "optional": true
            },
            {
              "name": "alignSpec.target",
              "type": [
                "HTMLElement",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The Element or Rectangle to align to.</p>",
              "isSubParam": true
            },
            {
              "name": "alignSpec.anchor",
              "type": "Boolean",
              "description": "<p>True to show a pointer arrow connecting to the target. Defaults to false.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "alignSpec.overlap",
              "type": "Boolean",
              "description": "<p>True to allow this to overlap the target.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "alignSpec.align",
              "type": "String",
              "description": "<p>The alignment specification string, <code>[trbl]n-[trbl]n</code>.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "onOwner": true
        },
        {
          "name": "hideContextMenu",
          "access": "internal",
          "description": "<p>Hides the context menu</p>",
          "scope": "instance"
        },
        {
          "name": "shouldShowMenu",
          "access": "internal",
          "description": "<p>Override this function and return <code>false</code> to prevent the context menu from being shown. Returns <code>true</code> by default.</p>",
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "AjaxHelper",
      "modulePath": "Core/helper/AjaxHelper",
      "classDescription": "<p>Simplifies Ajax requests. Uses fetch &amp; promises.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>AjaxHelper.get('some-url').then(response => {\n    // process request response here\n});\n</code></pre>\n<p>Uploading file to server via FormData interface.\nPlease visit <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a> for details.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const formData = new FormData();\nformData.append('file', 'fileNameToUpload');\nAjaxHelper.post('file-upload-url', formData).then(response => {\n    // process request response here\n});\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "AjaxHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "get",
          "description": "<p>Make a request (using GET) to the specified url.</p>",
          "parameters": [
            {
              "name": "url",
              "type": "String",
              "description": "<p>Url</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The options for the <code>fetch</code> API. Please see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch API</a> for details</p>",
              "optional": true
            },
            {
              "name": "options.queryParams",
              "type": "Object",
              "description": "<p>A key-value pair Object containing the params to add to the query string</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.headers",
              "type": "Object",
              "description": "<p>Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.body",
              "type": "Object",
              "description": "<p>Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.mode",
              "type": "Object",
              "description": "<p>The mode you want to use for the request, e.g., cors, no-cors, or same-origin.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.credentials",
              "type": "Object",
              "description": "<p>The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.parseJson",
              "type": "Object",
              "description": "<p>Specify <code>true</code> to parses the response and attach the resulting object to the <code>Response</code> object as <code>parsedJson</code></p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>The fetch Promise, which can be aborted by calling a special <code>abort</code> method</p>"
          }
        },
        {
          "name": "post",
          "description": "<p>POST data to the specified URL.</p>",
          "parameters": [
            {
              "name": "url",
              "type": "String",
              "description": "<p>The URL</p>"
            },
            {
              "name": "payload",
              "type": [
                "String",
                "Object",
                "FormData"
              ],
              "description": "<p>The data to post. If an object is supplied, it will be stringified</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The options for the <code>fetch</code> API. Please see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch API</a> for details</p>"
            },
            {
              "name": "options.queryParams",
              "type": "Object",
              "description": "<p>A key-value pair Object containing the params to add to the query string</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.headers",
              "type": "Object",
              "description": "<p>Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.body",
              "type": "Object",
              "description": "<p>Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.mode",
              "type": "Object",
              "description": "<p>The mode you want to use for the request, e.g., cors, no-cors, or same-origin.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.credentials",
              "type": "Object",
              "description": "<p>The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.parseJson",
              "type": "Object",
              "description": "<p>Specify <code>true</code> to parses the response and attach the resulting object to the <code>Response</code> object as <code>parsedJson</code></p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>The fetch Promise, which can be aborted by calling a special <code>abort</code> method</p>"
          }
        },
        {
          "name": "fetch",
          "description": "<p>Fetch the specified resource using the <code>fetch</code> API.</p>",
          "parameters": [
            {
              "name": "url",
              "type": "String",
              "description": "<p>object to fetch</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The options for the <code>fetch</code> API. Please see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch API</a> for details</p>"
            },
            {
              "name": "options.method",
              "type": "Object",
              "description": "<p>The request method, e.g., GET, POST</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.queryParams",
              "type": "Object",
              "description": "<p>A key-value pair Object containing the params to add to the query string</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.headers",
              "type": "Object",
              "description": "<p>Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.body",
              "type": "Object",
              "description": "<p>Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.mode",
              "type": "Object",
              "description": "<p>The mode you want to use for the request, e.g., cors, no-cors, or same-origin.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.credentials",
              "type": "Object",
              "description": "<p>The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.parseJson",
              "type": "Object",
              "description": "<p>Specify <code>true</code> to parses the response and attach the resulting object to the <code>Response</code> object as <code>parsedJson</code></p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>The fetch Promise, which can be aborted by calling a special <code>abort</code> method</p>"
          }
        },
        {
          "name": "mockUrl",
          "description": "<p>Registers the passed URL to return the passed mocked up Fetch Response object to the\nAjaxHelper's promise resolve function.</p>",
          "parameters": [
            {
              "name": "url",
              "type": "String",
              "description": "<p>The url to return mock data for</p>"
            },
            {
              "name": "response",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p>A mocked up Fetch Response object which must contain\nat least a <code>responseText</code> property, or a function to which the <code>url</code> and a <code>params</code> object\nand the <code>Fetch</code> <code>options</code> object is passed which returns that.</p>"
            },
            {
              "name": "response.responseText",
              "type": "String",
              "description": "<p>The data to return.</p>",
              "isSubParam": true
            },
            {
              "name": "response.synchronous",
              "type": "Boolean",
              "description": "<p>resolve the Promise immediately</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "response.delay",
              "type": "Number",
              "description": "<p>resolve the Promise after this number of milliseconds.</p>",
              "default": 100,
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "ArrayHelper",
      "modulePath": "Core/helper/ArrayHelper",
      "classDescription": "<p>Helper with useful functions for handling Arrays</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ArrayHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "from",
          "description": "<p>Similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>\nthis method creates an array from an <code>iterable</code> object. Where <code>Array.from()</code> accepts a mapper function as the\nsecond argument, this method accepts a <code>filter</code> function as its second argument. If a mapper function is also\nneeded, it can be passed as the third argument. Unlike <code>Array.from()</code>, if this method is passed <code>null</code>, it will\nreturn an empty array.</p>",
          "parameters": [
            {
              "name": "iterable",
              "type": "Array",
              "description": "<p>The iterable object to convert (must support <code>for-of</code> loop iteration).</p>"
            },
            {
              "name": "filter",
              "type": "function",
              "description": "<p>A function to apply to each item of the <code>iterable</code> which must return a truthy value\nto include that item in the resulting array.</p>",
              "optional": true
            },
            {
              "name": "map",
              "type": "function",
              "description": "<p>A function to apply to each item of the <code>iterable</code> that returns the actual value to put\ninto the returned array. If a <code>filter</code> is also supplied, this method is only called for those items that pass\nthe filter test.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array"
          }
        },
        {
          "name": "remove",
          "description": "<p>Remove one or more items from an array</p>",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "<p>Array to remove from</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>One or more items to remove</p>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if any item was removed</p>"
          }
        },
        {
          "name": "findLast",
          "description": "<p>Similar to the native Array.find call, but this finds the <em>last</em> element in the array for which\nthe passed function returns a truthy value.</p>",
          "parameters": [
            {
              "name": "array",
              "type": "Array.<Object>",
              "description": "<p>The array to find in.</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The testing function.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The scope (<code>this</code> reference) in which to call the function.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "binarySearch",
          "description": "<p>This method returns the index that a given item would be inserted into the\ngiven (sorted) <code>array</code>. Note that the given <code>item</code> may or may not be in the\narray. This method will return the index of where the item <em>should</em> be.</p>\n<p>For example:</p>\n<pre><code> var array = [ 'A', 'D', 'G', 'K', 'O', 'R', 'X' ];\n var index = ArrayHelper.binarySearch(array, 'E');\n\n console.log('index: ' + index);\n // logs &quot;index: 2&quot;\n\n array.splice(index, 0, 'E');\n\n console.log('array : ' + array.join(''));\n // logs &quot;array: ADEGKORX&quot;\n</code></pre>",
          "parameters": [
            {
              "name": "array",
              "type": "Array.<Object>",
              "description": "<p>The array to search.</p>"
            },
            {
              "name": "item",
              "type": "Object",
              "description": "<p>The item that you want to insert into the <code>array</code>.</p>"
            },
            {
              "name": "begin",
              "type": "Number",
              "description": "<p>The first index in the <code>array</code> to consider.</p>",
              "default": 0,
              "optional": true
            },
            {
              "name": "end",
              "type": "Number",
              "description": "<p>The index that marks the end of the range\nto consider. The item at this index is <em>not</em> considered.</p>",
              "default": "array.length",
              "optional": true
            },
            {
              "name": "compareFn",
              "type": "function",
              "description": "<p>The comparison function that matches the sort\norder of the <code>array</code>. The default <code>compareFn</code> compares items using less-than\nand greater-than operators.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>The index for the given item in the given array based on\nthe passed <code>compareFn</code>.</p>"
          }
        },
        {
          "name": "fill",
          "description": "<p>Similar to Array.prototype.fill(), but constructs a new array with the specified item count and fills it with\nclones of the supplied item.</p>",
          "parameters": [
            {
              "name": "count",
              "type": "Number",
              "description": "<p>Number of entries to create</p>"
            },
            {
              "name": "itemOrArray",
              "type": [
                "Object",
                "Array"
              ],
              "description": "<p>Item or array of items to clone (uses object spread to create shallow clone)</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>An optional function that is called for each item added, to allow processing</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array",
            "description": "<p>A new populated array</p>"
          }
        },
        {
          "name": "populate",
          "description": "<p>Populates an array with the return value from <code>fn</code>.</p>",
          "parameters": [
            {
              "name": "count",
              "type": "Number",
              "description": "<p>Number of entries to create</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function that is called <code>count</code> times, return value is added to array</p>"
            },
            {
              "name": "fn.index",
              "type": "Number",
              "description": "<p>Current index in the array</p>",
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array",
            "description": "<p>A new populated array</p>"
          }
        },
        {
          "name": "include",
          "description": "<p>Pushes <code>item</code> on to the <code>array</code> if not already included</p>",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "<p>Array to push to</p>"
            },
            {
              "name": "item",
              "type": "Object",
              "description": "<p>Item to push if not already included</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "unique",
          "description": "<p>Returns a new array with the unique items from the supplied array.</p>",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "<p>Input array</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array",
            "description": "<p>New array with unique items</p>"
          }
        },
        {
          "name": "asArray",
          "access": "internal",
          "description": "<p>Returns the passed object wrapped in an array. Special handling of the following cases:</p>\n<ul>\n<li>Passing an array returns it as is</li>\n<li>Passing a <code>Set</code> returns it converted to an Array</li>\n<li>Passing <code>null</code>/<code>undefined</code> returns the passed value</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code>const records = ArrayHelper.asArray(record);\n\n// { id : 1 } -> [{ id : 1 }]\n// [{ id : 1 }] -> [{ id : 1 }]\n</code></pre>",
          "parameters": [
            {
              "name": "arrayOrObject",
              "type": "*"
            }
          ],
          "scope": "static",
          "returns": {
            "type": [
              "Array",
              "null"
            ]
          }
        }
      ]
    },
    {
      "name": "AsyncHelper",
      "modulePath": "Core/helper/AsyncHelper",
      "classDescription": "<p>A helper class to make asynchronous tasks <code>await</code> friendly.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "AsyncHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "animationFrame",
          "description": "<p>Returns a promise that resolves on next animation frame.</p>\n<pre class=\"prettyprint source\"><code> async method() {\n     // do work\n     await AsyncHelper.animationFrame();\n     // do more work\n }\n</code></pre>",
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "sleep",
          "description": "<p>Returns a promise that resolves after a specified number of milliseconds.</p>\n<pre class=\"prettyprint source\"><code> async method() {\n     await AsyncHelper.sleep(10);\n     // ...\n }\n</code></pre>",
          "parameters": [
            {
              "name": "millis",
              "type": "Number",
              "description": "<p>The number of milliseconds to sleep.</p>"
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "yield",
          "description": "<p>Returns a promise that resolves as soon as possible, allowing the browser to minimally process other messages.\nThis is the shortest possible delay the browser offers, so be aware that it does not necessarily allow the\nbrowser to paint or reflow if used in a long loop. It does, however, allow other async methods to execute.</p>\n<pre class=\"prettyprint source\"><code> async method() {\n     await AsyncHelper.yield();\n     // ...\n }\n</code></pre>",
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        }
      ]
    },
    {
      "name": "BrowserHelper",
      "modulePath": "Core/helper/BrowserHelper",
      "classDescription": "<p>Static helper class that does browser or platform detection and provides other helper functions.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "BrowserHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "properties": [
        {
          "name": "supportsOverflowClip",
          "access": "internal",
          "description": "<p>Yields <code>true</code> if the current browser supports CSS style <code>overflow:clip</code>.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "supportsSticky",
          "access": "internal",
          "description": "<p>Yields <code>true</code> if the current browser supports CSS style <code>position:sticky</code>.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "isTouchDevice",
          "access": "internal",
          "description": "<p>Determines if the user is using a touch device.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "isMac",
          "description": "<p>Checks if platform is Mac.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Platform"
        },
        {
          "name": "isWindows",
          "description": "<p>Checks if platform is Windows.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Platform"
        },
        {
          "name": "isLinux",
          "description": "<p>Checks if platform is Linux.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Platform"
        },
        {
          "name": "isAndroid",
          "description": "<p>Checks if platform is Android.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Platform"
        },
        {
          "name": "isWebkit",
          "description": "<p>Checks if browser is Webkit.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Browser"
        },
        {
          "name": "isChrome",
          "description": "<p>Checks if browser is Chrome or Chromium based browser.\nReturns truthy value for Edge Chromium.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Browser"
        },
        {
          "name": "chromeVersion",
          "description": "<p>Returns the major Chrome version or 0 for other browsers.</p>",
          "type": "Number",
          "scope": "static",
          "readonly": true,
          "category": "Browser"
        },
        {
          "name": "isFirefox",
          "description": "<p>Checks if browser is Firefox.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Browser"
        },
        {
          "name": "firefoxVersion",
          "description": "<p>Returns the major Firefox version or 0 for other browsers.</p>",
          "type": "Number",
          "scope": "static",
          "readonly": true,
          "category": "Browser"
        },
        {
          "name": "isSafari",
          "description": "<p>Checks if browser is Safari.</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Browser"
        },
        {
          "name": "isMobileSafari",
          "description": "<p>Checks if browser is mobile Safari</p>",
          "type": "Boolean",
          "scope": "static",
          "readonly": true,
          "category": "Browser"
        },
        {
          "name": "supportsPassive",
          "access": "internal",
          "description": "<p>Returns <code>true</code> if the browser supports passive event listeners.</p>",
          "type": "Boolean",
          "scope": "static",
          "category": "Browser",
          "deprecated": true
        },
        {
          "name": "isCSP",
          "access": "internal",
          "description": "<p>Returns truthy value if page contains Content Security Policy meta tag or globalThis.bryntum.CSP is truthy value</p>",
          "scope": "static",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getVersion",
          "access": "internal",
          "description": "<p>Returns matched version for userAgent.</p>",
          "parameters": [
            {
              "name": "versionRe",
              "type": "String",
              "description": "<p>version match regular expression</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>matched version</p>"
          }
        },
        {
          "name": "searchParam",
          "description": "<p>Returns parameter value from search string by parameter name.</p>",
          "parameters": [
            {
              "name": "paramName",
              "type": "String",
              "description": "<p>search parameter name</p>"
            },
            {
              "name": "defaultValue",
              "type": "String",
              "description": "<p>default value if parameter not found</p>",
              "optional": true
            },
            {
              "name": "search",
              "type": "String",
              "description": "<p>search string. Defaults to <code>document.location.search</code></p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Helper",
          "returns": {
            "type": "String",
            "description": "<p>search parameter string value</p>"
          }
        },
        {
          "name": "getCookie",
          "description": "<p>Returns cookie by name.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>cookie name</p>"
            }
          ],
          "scope": "static",
          "category": "Helper",
          "returns": {
            "type": "String",
            "description": "<p>cookie string value</p>"
          }
        },
        {
          "name": "download",
          "access": "internal",
          "description": "<p>Triggers a download of a file with the specified name / URL.</p>",
          "parameters": [
            {
              "name": "filename",
              "type": "String",
              "description": "<p>The filename of the file to be downloaded</p>"
            },
            {
              "name": "url",
              "type": "String",
              "description": "<p>The URL where the file is to be downloaded from</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Download"
        },
        {
          "name": "downloadBlob",
          "access": "internal",
          "description": "<p>Triggers a download of a Blob with the specified name.</p>",
          "parameters": [
            {
              "name": "blob",
              "type": "Blob",
              "description": "<p>The Blob to be downloaded</p>"
            },
            {
              "name": "filename",
              "type": "String",
              "description": "<p>The filename of the file to be downloaded</p>"
            }
          ],
          "scope": "static",
          "category": "Download"
        }
      ]
    },
    {
      "name": "CSSHelper",
      "modulePath": "Core/helper/CSSHelper",
      "classDescription": "<p>Provides methods to add and manipulate CSS style rules.</p>\n<p>Note that this class is incompatible with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">CSP</a></p>\n<pre class=\"prettyprint source\"><code>this.criticalRule = CSSHelper.insertRule(`#${this.id} .b-sch-event.critical {background-color:${this.criticalColor}}`);\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "CSSHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "insertRule",
          "description": "<p>Inserts a CSS style rule based upon the passed text</p>",
          "parameters": [
            {
              "name": "cssText",
              "type": "String",
              "description": "<p>The text of the rule including selector and rule body just as it would\nbe specified in a CSS file.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "CSSRule",
            "description": "<p>The resulting CSS Rule object if the add was successful.</p>"
          }
        },
        {
          "name": "findRule",
          "description": "<p>Looks up the first rule which matched the passed selector.</p>",
          "parameters": [
            {
              "name": "selector",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>Either the selector string to exactly match or a function which\nwhen passed a required selector, returns <code>true</code>.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "CSSRule",
            "description": "<p>The first matching CSS Rule object if any found.</p>"
          }
        }
      ]
    },
    {
      "name": "DateHelper",
      "modulePath": "Core/helper/DateHelper",
      "classDescription": "<p>Helps with date manipulation, comparison, parsing, formatting etc.</p>\n<h2>Parsing strings</h2>\n<p>Use <code>DateHelper.parse()</code> to parse strings into dates. It accepts a date string and a format specifier.\nThe format specifier is string built up using the following tokens:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Token</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Year</td>\n<td>YYYY</td>\n<td>2018</td>\n</tr>\n<tr>\n<td></td>\n<td>YY</td>\n<td>&lt; 68 -&gt; 2000, &gt; 68 -&gt; 1900</td>\n</tr>\n<tr>\n<td>Month</td>\n<td>MM</td>\n<td>01 - 12</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>DD</td>\n<td>01 - 31</td>\n</tr>\n<tr>\n<td>Hour</td>\n<td>HH</td>\n<td>00 - 23 or 1 - 12</td>\n</tr>\n<tr>\n<td>Minute</td>\n<td>mm</td>\n<td>00 - 59</td>\n</tr>\n<tr>\n<td>Second</td>\n<td>ss</td>\n<td>00 - 59</td>\n</tr>\n<tr>\n<td>Millisecond</td>\n<td>S</td>\n<td>0 - 9 [000, 100, 200 .. 900 ]</td>\n</tr>\n<tr>\n<td></td>\n<td>SS</td>\n<td>00 - 99 [000, 010, 020 .. 990 ]</td>\n</tr>\n<tr>\n<td></td>\n<td>SSS</td>\n<td>000 - 999 [000, 001, 002 .. 999 ]</td>\n</tr>\n<tr>\n<td>AM/PM</td>\n<td>A</td>\n<td>AM or PM</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td>am or pm</td>\n</tr>\n<tr>\n<td>TimeZone</td>\n<td>Z</td>\n<td>Z for UTC or +-HH:mm</td>\n</tr>\n<tr>\n<td>Predefined</td>\n<td>L</td>\n<td>Long date, MM/DD/YYYY</td>\n</tr>\n<tr>\n<td></td>\n<td>LT</td>\n<td>Long time, HH:mm A</td>\n</tr>\n</tbody>\n</table>\n<p>Default parse format is: <code>'YYYY-MM-DDTHH:mm:ss.SSSZ'</code> see <a href=\"#Core/helper/DateHelper#property-defaultParseFormat-static\">defaultParseFormat</a></p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code>DateHelper.parse('2018-11-06', 'YYYY-MM-DD');\nDateHelper.parse('13:14', 'HH:mm');\nDateHelper.parse('6/11/18', 'DD/MM/YY');\n</code></pre>\n<h2>Formatting dates</h2>\n<p>Use <code>DateHelper.format()</code> to create a string from a date using a format specifier. The format specifier is similar to\nthat used when parsing strings. It can use the following tokens (input used for output below is\n<code>new Date(2018,8,9,18,7,8,145)</code>):</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Token</th>\n<th>Description &amp; output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Year</td>\n<td>YYYY</td>\n<td>2018</td>\n</tr>\n<tr>\n<td></td>\n<td>YY</td>\n<td>18</td>\n</tr>\n<tr>\n<td></td>\n<td>Y</td>\n<td>2018</td>\n</tr>\n<tr>\n<td>Quarter</td>\n<td>Q</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>Qo</td>\n<td>3rd</td>\n</tr>\n<tr>\n<td>Month</td>\n<td>MMMM</td>\n<td>September</td>\n</tr>\n<tr>\n<td></td>\n<td>MMM</td>\n<td>Sep</td>\n</tr>\n<tr>\n<td></td>\n<td>MM</td>\n<td>09</td>\n</tr>\n<tr>\n<td></td>\n<td>Mo</td>\n<td>9th</td>\n</tr>\n<tr>\n<td></td>\n<td>M</td>\n<td>9</td>\n</tr>\n<tr>\n<td>Week (iso)</td>\n<td>WW</td>\n<td>36 (2 digit)</td>\n</tr>\n<tr>\n<td></td>\n<td>Wo</td>\n<td>36th</td>\n</tr>\n<tr>\n<td></td>\n<td>W</td>\n<td>36</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>DDDD</td>\n<td>Day of year, 3 digits</td>\n</tr>\n<tr>\n<td></td>\n<td>DDDo</td>\n<td>Day of year, ordinal</td>\n</tr>\n<tr>\n<td></td>\n<td>DDD</td>\n<td>Day of year</td>\n</tr>\n<tr>\n<td></td>\n<td>DD</td>\n<td>09</td>\n</tr>\n<tr>\n<td></td>\n<td>Do</td>\n<td>9th</td>\n</tr>\n<tr>\n<td></td>\n<td>D</td>\n<td>9</td>\n</tr>\n<tr>\n<td>Weekday</td>\n<td>dddd</td>\n<td>Sunday</td>\n</tr>\n<tr>\n<td></td>\n<td>ddd</td>\n<td>Sun</td>\n</tr>\n<tr>\n<td></td>\n<td>dd</td>\n<td>Su</td>\n</tr>\n<tr>\n<td></td>\n<td>d1</td>\n<td>S</td>\n</tr>\n<tr>\n<td></td>\n<td>do</td>\n<td>0th</td>\n</tr>\n<tr>\n<td></td>\n<td>d</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Hour</td>\n<td>HH</td>\n<td>18 (00 - 23)</td>\n</tr>\n<tr>\n<td></td>\n<td>H</td>\n<td>18 (0 - 23)</td>\n</tr>\n<tr>\n<td></td>\n<td>hh</td>\n<td>06 (00 - 12)</td>\n</tr>\n<tr>\n<td></td>\n<td>h</td>\n<td>6 (0 - 12)</td>\n</tr>\n<tr>\n<td></td>\n<td>KK</td>\n<td>19 (01 - 24)</td>\n</tr>\n<tr>\n<td></td>\n<td>K</td>\n<td>19 (1 - 24)</td>\n</tr>\n<tr>\n<td></td>\n<td>kk</td>\n<td>06 or 18, locale determines</td>\n</tr>\n<tr>\n<td></td>\n<td>k</td>\n<td>6 or 18, locale determines</td>\n</tr>\n<tr>\n<td>Minute</td>\n<td>mm</td>\n<td>07</td>\n</tr>\n<tr>\n<td></td>\n<td>m</td>\n<td>7</td>\n</tr>\n<tr>\n<td>Second</td>\n<td>ss</td>\n<td>08</td>\n</tr>\n<tr>\n<td></td>\n<td>s</td>\n<td>8</td>\n</tr>\n<tr>\n<td>Millisecond</td>\n<td>S</td>\n<td>1 (100ms)</td>\n</tr>\n<tr>\n<td></td>\n<td>SS</td>\n<td>14 (140ms)</td>\n</tr>\n<tr>\n<td></td>\n<td>SSS</td>\n<td>145 (145ms)</td>\n</tr>\n<tr>\n<td>AM/PM</td>\n<td>A</td>\n<td>AM or PM</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td>am or pm</td>\n</tr>\n<tr>\n<td>Predefined</td>\n<td>LT</td>\n<td>H: 2-digit (2d), m: 2d</td>\n</tr>\n<tr>\n<td>(uses browser locale)</td>\n<td>LTS</td>\n<td>H: 2d, m: 2d, s : 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>LST</td>\n<td>Depends on 12 or 24 hour clock</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>12h, H : 1d, m : 0 or 2d</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>24h, H : 2d, m : 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>L</td>\n<td>Y: numeric (n), M : 2d, D : 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>l</td>\n<td>Y: n, M : n, D : n</td>\n</tr>\n<tr>\n<td></td>\n<td>LL</td>\n<td>Y: n, M : long (l), D : n</td>\n</tr>\n<tr>\n<td></td>\n<td>ll</td>\n<td>Y: n, M : short (s), D : n</td>\n</tr>\n<tr>\n<td></td>\n<td>LLL</td>\n<td>Y: n, M : l, D : n, H: n, m: 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>lll</td>\n<td>Y: n, M : s, D : n, H: n, m: 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>LLLL</td>\n<td>Y: n, M : l, D : n, H: n, m: 2d, d: l</td>\n</tr>\n<tr>\n<td></td>\n<td>llll</td>\n<td>Y: n, M : s, D : n, H: n, m: 2d, d: s</td>\n</tr>\n</tbody>\n</table>\n<p>Default format is: <code>'YYYY-MM-DDTHH:mm:ssZ'</code> see <a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">defaultFormat</a></p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DateHelper.format(new Date(2018,10,6), 'YYYY-MM-DD'); // 2018-11-06\nDateHelper.format(new Date(2018,10,6), 'M/D/YY'); // 11/6/18\n</code></pre>\n<p>Arbitrary text can be embedded in the format string by wrapping it with {}:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!\n</code></pre>\n<h2>Unit names</h2>\n<p>Many DateHelper functions (for example add, as, set) accepts a unit among their params. The following units are\navailable:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Aliases</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>millisecond</td>\n<td>millisecond, milliseconds, ms</td>\n</tr>\n<tr>\n<td>second</td>\n<td>second, seconds, s</td>\n</tr>\n<tr>\n<td>minute</td>\n<td>minute, minutes, m</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>hour, hours, h</td>\n</tr>\n<tr>\n<td>day</td>\n<td>day, days, d</td>\n</tr>\n<tr>\n<td>week</td>\n<td>week, weeks, w</td>\n</tr>\n<tr>\n<td>month</td>\n<td>month, months, mon, mo, M</td>\n</tr>\n<tr>\n<td>quarter</td>\n<td>quarter, quarters, q</td>\n</tr>\n<tr>\n<td>year</td>\n<td>year, years, y</td>\n</tr>\n<tr>\n<td>decade</td>\n<td>decade, decades, dec</td>\n</tr>\n</tbody>\n</table>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DateHelper.add(date, 2, 'days');\nDateHelper.as('hour', 7200, 'seconds');\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DateHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "properties": [
        {
          "name": "defaultFormat",
          "description": "<p>Get/set the default format used by <code>format()</code> and <code>parse()</code>. Defaults to <code>'YYYY-MM-DDTHH:mm:ssZ'</code>\n(~ISO 8601 Date and time, <code>'1962-06-17T09:21:34Z'</code>).</p>",
          "type": "String",
          "scope": "static"
        },
        {
          "name": "defaultParseFormat",
          "description": "<p>Get/set the default format used by <code>parse()</code>. Defaults to <code>'YYYY-MM-DDTHH:mm:ss.SSSZ'</code> or <a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">defaultFormat</a>\n(~ISO 8601 Date and time, <code>'1962-06-17T09:21:34.123Z'</code>).</p>",
          "type": "String",
          "scope": "static"
        },
        {
          "name": "weekStartDay",
          "description": "<p>Get the first day of week, 0-6 (Sunday-Saturday).\nThis is determined by the current locale's <code>DateHelper.weekStartDay</code> parameter.</p>",
          "type": "Number",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "nonWorkingDays",
          "description": "<p>Get non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is <code>true</code>.\nThis is determined by the current locale's <code>DateHelper.nonWorkingDays</code> parameter.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code>{\n    0 : true, // Sunday\n    6 : true  // Saturday\n}\n</code></pre>",
          "type": "Object",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "nonWorkingDaysAsArray",
          "access": "internal",
          "description": "<p>Get non-working days as an array of day indices, 0-6 (Sunday-Saturday).\nThis is determined by the current locale's <code>DateHelper.nonWorkingDays</code> parameter.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code>[ 0, 6 ] // Sunday & Saturday\n</code></pre>",
          "type": "Array.<Number>",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "weekends",
          "access": "internal",
          "description": "<p>Get weekend days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is <code>true</code>.\nWeekends are days which are declared as weekend days by the selected country and defined by the current locale's <code>DateHelper.weekends</code> parameter.\nTo get non-working days see <a href=\"#Core/helper/DateHelper#property-nonWorkingDays-static\">nonWorkingDays</a>.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code>{\n    0 : true, // Sunday\n    6 : true  // Saturday\n}\n</code></pre>",
          "type": "Object",
          "scope": "static",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "makeKey",
          "access": "internal",
          "description": "<p>A utility function to create a sortable string key for the passed date or ms timestamp using the <code>'YYYY-MM-DD'</code>\nformat.</p>",
          "parameters": [
            {
              "name": "ms",
              "type": [
                "Number",
                "Date"
              ],
              "description": "<p>The Date instance or ms timestamp to generate a key for</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>Date/timestamp as a string with <code>'YYYY-M-D'</code> format</p>"
          }
        },
        {
          "name": "parseKey",
          "access": "internal",
          "description": "<p>A utility function to parse a sortable string to a date date using the <code>'YYYY-MM-DD'</code> format.</p>",
          "parameters": [
            {
              "name": "key",
              "type": "String",
              "description": "<p>The string to return a date for.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Date",
            "description": "<p>new Date instance</p>"
          }
        },
        {
          "name": "parse",
          "description": "<p>Returns a date created from the supplied string using the specified format. Will try to create even if format\nis left out, by first using the default format (see <a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">defaultFormat</a>, by default\n<code>YYYY-MM-DDTHH:mm:ssZ</code>) and then using <code>new Date(dateString)</code>.\nSupported tokens:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Token</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Year</td>\n<td>YYYY</td>\n<td>2018</td>\n</tr>\n<tr>\n<td></td>\n<td>YY</td>\n<td>&lt; 68 -&gt; 2000, &gt; 68 -&gt; 1900</td>\n</tr>\n<tr>\n<td>Month</td>\n<td>MM</td>\n<td>01 - 12</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>DD</td>\n<td>01 - 31</td>\n</tr>\n<tr>\n<td>Hour</td>\n<td>HH</td>\n<td>00 - 23 or 1 - 12</td>\n</tr>\n<tr>\n<td>Minute</td>\n<td>mm</td>\n<td>00 - 59</td>\n</tr>\n<tr>\n<td>Second</td>\n<td>ss</td>\n<td>00 - 59</td>\n</tr>\n<tr>\n<td>Millisecond</td>\n<td>S</td>\n<td>0 - 9 [000, 100, 200 .. 900 ]</td>\n</tr>\n<tr>\n<td></td>\n<td>SS</td>\n<td>00 - 99 [000, 010, 020 .. 990 ]</td>\n</tr>\n<tr>\n<td></td>\n<td>SSS</td>\n<td>000 - 999 [000, 001, 002 .. 999 ]</td>\n</tr>\n<tr>\n<td>AM/PM</td>\n<td>A</td>\n<td>AM or PM</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td>am or pm</td>\n</tr>\n<tr>\n<td>TimeZone</td>\n<td>Z</td>\n<td>Z for UTC or +-HH:mm</td>\n</tr>\n<tr>\n<td>Predefined</td>\n<td>L</td>\n<td>Long date, MM/DD/YYYY</td>\n</tr>\n<tr>\n<td></td>\n<td>LT</td>\n<td>Long time, HH:mm A</td>\n</tr>\n</tbody>\n</table>\n<p>Predefined formats and functions used to parse tokens can be localized, see for example the swedish locale SvSE.js</p>\n<p>NOTE: If no date parameters are provided then <code>Jan 01 2020</code> is used as a default date</p>",
          "parameters": [
            {
              "name": "dateString",
              "type": "String",
              "description": "<p>Date string</p>"
            },
            {
              "name": "format",
              "type": "String",
              "description": "<p>Date format (or <a href=\"#Core/helper/DateHelper#property-defaultParseFormat-static\">defaultParseFormat</a> if left out)</p>"
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "Date",
            "description": "<p>new Date instance parsed from the string</p>"
          }
        },
        {
          "name": "create",
          "description": "<p>Creates a date from a date definition object. The object can have the following properties:</p>\n<ul>\n<li>year</li>\n<li>month</li>\n<li>date (day in month)</li>\n<li>hours</li>\n<li>minutes</li>\n<li>seconds</li>\n<li>milliseconds</li>\n<li>amPm : 'am' or 'pm', implies 12 hour clock</li>\n<li>timeZone : offset from UTC in minutes</li>\n</ul>",
          "parameters": [
            {
              "name": "definition",
              "type": "Object"
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "Date",
            "description": "<p>new Date instance</p>"
          }
        },
        {
          "name": "format",
          "description": "<p>Converts a date to string with the specified format. Formats heavily inspired by https://momentjs.com.\nAvailable formats (input used for output below is <code>new Date(2018,8,9,18,7,8,145)</code>):</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Token</th>\n<th>Description &amp; output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Year</td>\n<td>YYYY</td>\n<td>2018</td>\n</tr>\n<tr>\n<td></td>\n<td>YY</td>\n<td>18</td>\n</tr>\n<tr>\n<td></td>\n<td>Y</td>\n<td>2018</td>\n</tr>\n<tr>\n<td>Quarter</td>\n<td>Q</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>Qo</td>\n<td>3rd</td>\n</tr>\n<tr>\n<td>Month</td>\n<td>MMMM</td>\n<td>September</td>\n</tr>\n<tr>\n<td></td>\n<td>MMM</td>\n<td>Sep</td>\n</tr>\n<tr>\n<td></td>\n<td>MM</td>\n<td>09</td>\n</tr>\n<tr>\n<td></td>\n<td>Mo</td>\n<td>9th</td>\n</tr>\n<tr>\n<td></td>\n<td>M</td>\n<td>9</td>\n</tr>\n<tr>\n<td>Week (iso)</td>\n<td>WW</td>\n<td>36 (2 digit)</td>\n</tr>\n<tr>\n<td></td>\n<td>Wo</td>\n<td>36th</td>\n</tr>\n<tr>\n<td></td>\n<td>W</td>\n<td>36</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>DDDD</td>\n<td>Day of year, 3 digits</td>\n</tr>\n<tr>\n<td></td>\n<td>DDDo</td>\n<td>Day of year, ordinal</td>\n</tr>\n<tr>\n<td></td>\n<td>DDD</td>\n<td>Day of year</td>\n</tr>\n<tr>\n<td></td>\n<td>DD</td>\n<td>09</td>\n</tr>\n<tr>\n<td></td>\n<td>Do</td>\n<td>9th</td>\n</tr>\n<tr>\n<td></td>\n<td>D</td>\n<td>9</td>\n</tr>\n<tr>\n<td>Weekday</td>\n<td>dddd</td>\n<td>Sunday</td>\n</tr>\n<tr>\n<td></td>\n<td>ddd</td>\n<td>Sun</td>\n</tr>\n<tr>\n<td></td>\n<td>dd</td>\n<td>Su</td>\n</tr>\n<tr>\n<td></td>\n<td>d1</td>\n<td>S</td>\n</tr>\n<tr>\n<td></td>\n<td>do</td>\n<td>0th</td>\n</tr>\n<tr>\n<td></td>\n<td>d</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Hour</td>\n<td>HH</td>\n<td>18 (00 - 23)</td>\n</tr>\n<tr>\n<td></td>\n<td>H</td>\n<td>18 (0 - 23)</td>\n</tr>\n<tr>\n<td></td>\n<td>hh</td>\n<td>06 (00 - 12)</td>\n</tr>\n<tr>\n<td></td>\n<td>h</td>\n<td>6 (0 - 12)</td>\n</tr>\n<tr>\n<td></td>\n<td>KK</td>\n<td>19 (01 - 24)</td>\n</tr>\n<tr>\n<td></td>\n<td>K</td>\n<td>19 (1 - 24)</td>\n</tr>\n<tr>\n<td></td>\n<td>kk</td>\n<td>06 or 18, locale determines</td>\n</tr>\n<tr>\n<td></td>\n<td>k</td>\n<td>6 or 18, locale determines</td>\n</tr>\n<tr>\n<td>Minute</td>\n<td>mm</td>\n<td>07</td>\n</tr>\n<tr>\n<td></td>\n<td>m</td>\n<td>7</td>\n</tr>\n<tr>\n<td>Second</td>\n<td>ss</td>\n<td>08</td>\n</tr>\n<tr>\n<td></td>\n<td>s</td>\n<td>8</td>\n</tr>\n<tr>\n<td>Millisecond</td>\n<td>S</td>\n<td>1 (100ms)</td>\n</tr>\n<tr>\n<td></td>\n<td>SS</td>\n<td>14 (140ms)</td>\n</tr>\n<tr>\n<td></td>\n<td>SSS</td>\n<td>145 (145ms)</td>\n</tr>\n<tr>\n<td>AM/PM</td>\n<td>A</td>\n<td>AM or PM</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td>am or pm</td>\n</tr>\n<tr>\n<td>Predefined</td>\n<td>LT</td>\n<td>H: 2-digit (2d), m: 2d</td>\n</tr>\n<tr>\n<td>(uses browser locale)</td>\n<td>LTS</td>\n<td>H: 2d, m: 2d, s : 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>LST</td>\n<td>Depends on 12 or 24 hour clock</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>12h, H : 1d, m : 0 or 2d</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>24h, H : 2d, m : 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>L</td>\n<td>Y: numeric (n), M : 2d, D : 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>l</td>\n<td>Y: n, M : n, D : n</td>\n</tr>\n<tr>\n<td></td>\n<td>LL</td>\n<td>Y: n, M : long (l), D : n</td>\n</tr>\n<tr>\n<td></td>\n<td>ll</td>\n<td>Y: n, M : short (s), D : n</td>\n</tr>\n<tr>\n<td></td>\n<td>LLL</td>\n<td>Y: n, M : l, D : n, H: n, m: 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>lll</td>\n<td>Y: n, M : s, D : n, H: n, m: 2d</td>\n</tr>\n<tr>\n<td></td>\n<td>LLLL</td>\n<td>Y: n, M : l, D : n, H: n, m: 2d, d: l</td>\n</tr>\n<tr>\n<td></td>\n<td>llll</td>\n<td>Y: n, M : s, D : n, H: n, m: 2d, d: s</td>\n</tr>\n</tbody>\n</table>\n<p>Some examples:</p>\n<pre class=\"prettyprint source\"><code>DateHelper.format(new Date(2019, 7, 16), 'dddd') -> Friday\nDateHelper.format(new Date(2019, 7, 16, 14, 27), 'HH:mm') --> 14:27\nDateHelper.format(new Date(2019, 7, 16, 14, 27), 'L HH') --> 2019-07-16 14\n</code></pre>\n<p>Arbitrary text can be embedded in the format string by wrapping it with {}:</p>\n<pre class=\"prettyprint source\"><code>DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!\n</code></pre>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date</p>"
            },
            {
              "name": "format",
              "type": "String",
              "description": "<p>Desired format (uses <code>defaultFormat</code> if left out)</p>"
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "String",
            "description": "<p>Formatted string</p>"
          }
        },
        {
          "name": "asMilliseconds",
          "description": "<p>Converts the specified amount of desired unit into milliseconds. Can be called by only specifying a unit as the\nfirst argument, it then uses amount = 1. For example: asMilliseconds('hour') == asMilliseconds(1, 'hour')</p>",
          "parameters": [
            {
              "name": "amount",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>Amount, what of is decided by specifying unit (also takes a unit which implies an amount of 1)</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Time unit (s, hour, months etc.)</p>"
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "asMonths",
          "description": "<p>Converts the passed Date to an accurate number of months passed since the epoch start.</p>",
          "parameters": [
            {
              "name": "time",
              "type": "Date",
              "description": "<p>The Date to find the month value of.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>The number of months since the system time epoch start. May be a fractional value.</p>"
          }
        },
        {
          "name": "formatDelta",
          "description": "<p>Converts a millisecond time delta to a human readable form. For example <code>1000 * 60 * 60 * 50</code>\nmilliseconds would be rendered as &quot;2 days, 2 hours&quot;</p>",
          "parameters": [
            {
              "name": "delta",
              "type": "Number",
              "description": "<p>The millisecond delta value.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Formatting options.</p>",
              "optional": true
            },
            {
              "name": "options.abbrev",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to use abbreviated unit names, eg &quot;2d, 2h&quot; for the above example.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.precision",
              "type": "String",
              "description": "<p>The minimum precision unit.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.separator",
              "type": "String",
              "description": "<p>The separator to use</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.asString",
              "type": "Boolean",
              "description": "<p>Pass <code>false</code> to return the result as an array, eg ['2d', '2h'] for the above example.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "String",
            "description": "<p>Formatted string</p>"
          }
        },
        {
          "name": "getDelta",
          "description": "<p>Converts a millisecond time delta to an object structure. For example <code>1000 * 60 * 60 * 50</code>\nmilliseconds the result would be as:\n{\nday: 2,\nhour: 2\n}</p>",
          "parameters": [
            {
              "name": "delta",
              "type": "Number",
              "description": "<p>The millisecond delta value.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Formatting options.</p>",
              "optional": true
            },
            {
              "name": "options.abbrev",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to use abbreviated unit names, eg &quot;{ d: 2, h: 2 }&quot; for the above example.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.precision",
              "type": "String",
              "description": "<p>The minimum precision unit.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The object with the values for each unit.</p>"
          }
        },
        {
          "name": "as",
          "description": "<p>Converts the specified amount of one unit (fromUnit) into an amount of another unit (toUnit)</p>",
          "parameters": [
            {
              "name": "toUnit",
              "type": "String",
              "description": "<p>The name of units to convert to, eg: <code>'ms'</code></p>"
            },
            {
              "name": "amount",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The time to convert. Either the magnitude number form\nor a duration string such as '2d'.</p>"
            },
            {
              "name": "fromUnit",
              "type": "String",
              "description": "<p>If the amount was passed as a number, the units to use to convert from.</p>",
              "default": "ms",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "is24HourFormat",
          "description": "<p>Returns true for 24 hour format.</p>",
          "parameters": [
            {
              "name": "format",
              "type": "String",
              "description": "<p>Date format</p>"
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "add",
          "description": "<p>Add days, hours etc. to a date. Always clones the date, original will be left unaffected.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "String"
              ],
              "description": "<p>Original date</p>"
            },
            {
              "name": "amount",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>Amount of days, hours etc or a string representation of a duration as accepted by\n<a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a></p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Unit for amount</p>",
              "default": "ms",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>New calculated date</p>"
          }
        },
        {
          "name": "diff",
          "description": "<p>Calculates the difference between two dates, in the specified unit.</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Date",
              "description": "<p>First date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>Second date</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Unit to calculate difference in</p>",
              "default": "ms"
            },
            {
              "name": "fractional",
              "type": "Boolean",
              "description": "<p>Specify false to round result</p>",
              "default": true
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Number",
            "description": "<p>Difference in the specified unit</p>"
          }
        },
        {
          "name": "startOf",
          "description": "<p>Sets the date to the start of the specified unit, by default returning a clone of the date instead of changing it\nin place.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Original date</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Start of this unit, 'day', 'month' etc.</p>",
              "default": "day",
              "optional": true
            },
            {
              "name": "clone",
              "type": "Boolean",
              "description": "<p>Manipulate a copy of the date</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "weekStartDay",
              "type": "Number",
              "description": "<p>The first day of week, 0-6 (Sunday-Saturday). Defaults to the\n<a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>Manipulated date</p>"
          }
        },
        {
          "name": "endOf",
          "description": "<p>Returns the end point of the passed date, that is 00:00:00 of the day after the passed date.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to return the end point of.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "clone",
          "description": "<p>Creates a clone of the specified date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Original date</p>"
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>Cloned date</p>"
          }
        },
        {
          "name": "clearTime",
          "description": "<p>Removes time from a date (same as calling #startOf(date, 'day'))</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date to remove time from</p>"
            },
            {
              "name": "clone",
              "type": "Boolean",
              "description": "<p>Manipulate a copy of the date</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>Manipulated date</p>"
          }
        },
        {
          "name": "getTimeOfDay",
          "description": "<p>Returns the elapsed milliseconds from the start of the specified date.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date to remove date from.</p>"
            },
            {
              "name": "as",
              "type": "String",
              "description": "<p>The time unit to return.</p>",
              "default": "ms",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Number",
            "description": "<p>The elapsed milliseconds from the start of the specified date</p>"
          }
        },
        {
          "name": "set",
          "description": "<p>Sets a part of a date (in place)</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date to manipulate</p>"
            },
            {
              "name": "unit",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Part of date to set, for example 'minute'. Or an object like { second: 1, minute: 1 }</p>"
            },
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>Value to set</p>"
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>Passed date instance modified according to the arguments</p>"
          }
        },
        {
          "name": "constrain",
          "description": "<p>Constrains the date within a min and a max date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to constrain</p>"
            },
            {
              "name": "min",
              "type": "Date",
              "description": "<p>Min date</p>",
              "optional": true
            },
            {
              "name": "max",
              "type": "Date",
              "description": "<p>Max date</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>The constrained date</p>"
          }
        },
        {
          "name": "getTime",
          "description": "<p>Returns time with default year, month, and day (Jan 1, 2020)</p>",
          "parameters": [
            {
              "name": "hours",
              "type": [
                "Number",
                "Date"
              ],
              "description": "<p>Hours value or the full date to extract the time of.</p>"
            },
            {
              "name": "minutes",
              "type": "Number",
              "description": "<p>Minutes value</p>",
              "default": 0
            },
            {
              "name": "seconds",
              "type": "Number",
              "description": "<p>Seconds value</p>",
              "default": 0
            },
            {
              "name": "ms",
              "type": "Number",
              "description": "<p>Milliseconds value</p>",
              "default": 0
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>A new default date with the time extracted from the given date or from the time values provided individually.</p>"
          }
        },
        {
          "name": "copyTimeValues",
          "description": "<p>Copies hours, minutes, seconds, milliseconds from one date to another</p>",
          "parameters": [
            {
              "name": "targetDate",
              "type": "Date",
              "description": "<p>The target date</p>"
            },
            {
              "name": "sourceDate",
              "type": "Date",
              "description": "<p>The source date</p>"
            }
          ],
          "scope": "static",
          "category": "Manipulate",
          "returns": {
            "type": "Date",
            "description": "<p>The adjusted target date</p>"
          }
        },
        {
          "name": "isBefore",
          "description": "<p>Determines if a date precedes another.</p>",
          "parameters": [
            {
              "name": "first",
              "type": "Date",
              "description": "<p>First date</p>"
            },
            {
              "name": "second",
              "type": "Date",
              "description": "<p>Second date</p>"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if first precedes second, otherwise false</p>"
          }
        },
        {
          "name": "isAfter",
          "description": "<p>Determines if a date succeeds another.</p>",
          "parameters": [
            {
              "name": "first",
              "type": "Date",
              "description": "<p>First date</p>"
            },
            {
              "name": "second",
              "type": "Date",
              "description": "<p>Second date</p>"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if first succeeds second, otherwise false</p>"
          }
        },
        {
          "name": "isEqual",
          "description": "<p>Checks if two dates are equal.</p>",
          "parameters": [
            {
              "name": "first",
              "type": "Date",
              "description": "<p>First date</p>"
            },
            {
              "name": "second",
              "type": "Date",
              "description": "<p>Second date</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>If not given, the comparison will be done up to a millisecond</p>"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the dates are equal</p>"
          }
        },
        {
          "name": "compare",
          "description": "<p>Compares two dates using the specified precision</p>",
          "parameters": [
            {
              "name": "first",
              "type": "Date"
            },
            {
              "name": "second",
              "type": "Date"
            },
            {
              "name": "unit",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Number",
            "description": "<p>0 = equal, -1 first before second, 1 first after second</p>"
          }
        },
        {
          "name": "isStartOf",
          "description": "<p>Checks if date is the start of specified unit</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "unit",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "betweenLesser",
          "description": "<p>Checks if this date is &gt;= start and &lt; end.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The source date</p>"
            },
            {
              "name": "start",
              "type": "Date",
              "description": "<p>Start date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>End date</p>"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if this date falls on or between the given start and end dates.</p>"
          }
        },
        {
          "name": "betweenLesserEqual",
          "description": "<p>Checks if this date is &gt;= start and &lt;= end.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The source date</p>"
            },
            {
              "name": "start",
              "type": "Date",
              "description": "<p>Start date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>End date</p>"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if this date falls on or between the given start and end dates.</p>"
          }
        },
        {
          "name": "intersectSpans",
          "description": "<p>Returns true if dates intersect</p>",
          "parameters": [
            {
              "name": "date1Start",
              "type": "Date"
            },
            {
              "name": "date1End",
              "type": "Date"
            },
            {
              "name": "date2Start",
              "type": "Date"
            },
            {
              "name": "date2End",
              "type": "Date"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if dates intersect</p>"
          }
        },
        {
          "name": "compareUnits",
          "description": "<p>Compare two units. Returns 1 if first param is a greater unit than second param, -1 if the opposite is true or 0 if they're equal</p>",
          "parameters": [
            {
              "name": "unit1",
              "type": "String",
              "description": "<p>The 1st unit</p>"
            },
            {
              "name": "unit2",
              "type": "String",
              "description": "<p>The 2nd unit</p>"
            }
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Number",
            "description": "<p>Returns 1 if first param is a greater unit than second param, -1 if the opposite is true or 0 if they're equal</p>"
          }
        },
        {
          "name": "timeSpanContains",
          "description": "<p>Returns true if the first time span completely 'covers' the second time span.</p>",
          "parameters": [
            {
              "name": "spanStart",
              "type": "Date",
              "description": "<p>The start date for initial time span</p>"
            },
            {
              "name": "spanEnd",
              "type": "Date",
              "description": "<p>The end date for initial time span</p>"
            },
            {
              "name": "otherSpanStart",
              "type": "Date",
              "description": "<p>The start date for the 2nd time span</p>"
            },
            {
              "name": "otherSpanEnd",
              "type": "Date",
              "description": "<p>The end date for the 2nd time span</p>"
            }
          ],
          "examples": [
            "DateHelper.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 4)) ==> true\nDateHelper.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 6)) ==> false"
          ],
          "scope": "static",
          "category": "Comparison",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "get",
          "description": "<p>Get the specified part of a date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Part of date, hour, minute etc.</p>"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Number",
            "description": "<p>The requested part of the specified date</p>"
          }
        },
        {
          "name": "daysInYear",
          "access": "internal",
          "description": "<p>Get number of days in the current year for the supplied date.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date to check</p>"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Number",
            "description": "<p>Days in year</p>"
          }
        },
        {
          "name": "daysInMonth",
          "description": "<p>Get number of days in the current month for the supplied date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date which month should be checked</p>"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Number",
            "description": "<p>Days in month</p>"
          }
        },
        {
          "name": "hoursInDay",
          "access": "internal",
          "description": "<p>Get number of hours in the current day for the supplied date.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date to check</p>"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Number",
            "description": "<p>Hours in day</p>"
          }
        },
        {
          "name": "getNormalizedUnitDuration",
          "access": "internal",
          "description": "<p>Converts unit related to the date to actual amount of milliseconds in it. Takes into account leap years and\ndifferent duration of months.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "unit",
              "type": "String"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>Returns amount of milliseconds</p>"
          }
        },
        {
          "name": "getFirstDateOfMonth",
          "description": "<p>Get the first date of the month for the supplied date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Date",
            "description": "<p>New Date instance</p>"
          }
        },
        {
          "name": "getLastDateOfMonth",
          "description": "<p>Get the last date of the month for the supplied date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Date",
            "description": "<p>New Date instance</p>"
          }
        },
        {
          "name": "min",
          "description": "<p>Get the earliest of two dates</p>",
          "parameters": [
            {
              "name": "first",
              "type": "Date"
            },
            {
              "name": "second",
              "type": "Date"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Date",
            "description": "<p>Earliest date</p>"
          }
        },
        {
          "name": "max",
          "description": "<p>Get the latest of two dates</p>",
          "parameters": [
            {
              "name": "first",
              "type": "Date"
            },
            {
              "name": "second",
              "type": "Date"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Date",
            "description": "<p>Latest date</p>"
          }
        },
        {
          "name": "getNext",
          "description": "<p>Get an incremented date. Incrementation based on specified unit and optional amount</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "unit",
              "type": "String"
            },
            {
              "name": "increment",
              "type": "Number",
              "default": 1,
              "optional": true
            },
            {
              "name": "weekStartDay",
              "type": "Number",
              "description": "<p>Will default to what is set in locale</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Date",
            "description": "<p>New Date instance</p>"
          }
        },
        {
          "name": "isValidDate",
          "description": "<p>Checks if date object is valid.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>date = new Date('foo')\ndate instanceof Date // true\ndate.toString() // &quot;Invalid Date&quot;\nisNaN(date) // true\nDateHelper.isValidDate(date) // false\n\ndate = new Date()\ndate instanceof Date // true\ndate.toString() // &quot;Mon Jan 13 2020 18:27:38 GMT+0300 (GMT+03:00)&quot;\nisNaN(date) // false\nDateHelper.isValidDate(date) // true\n</code></pre>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isDate",
          "description": "<p>Checks if value is a date object. Allows to recognize date object even from another context,\nlike the top frame when used in an iframe.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "getStartOfNextDay",
          "description": "<p>Get the start of the next day</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "clone",
              "type": "Boolean",
              "optional": true
            },
            {
              "name": "noNeedToClearTime",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Date",
            "description": "<p>Passed Date or new Date instance, depending on the <code>clone</code> flag</p>"
          }
        },
        {
          "name": "getEndOfPreviousDay",
          "description": "<p>Get the end of previous day</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "noNeedToClearTime",
              "type": "Boolean"
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Date",
            "description": "<p>New Date instance</p>"
          }
        },
        {
          "name": "getWeekDescription",
          "access": "internal",
          "description": "<p>Returns a string describing the specified week. For example, &quot;39, September 2020&quot; or &quot;40, Sep - Oct 2020&quot;.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date"
            },
            {
              "name": "endDate",
              "type": "Date",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "getWeekNumber",
          "description": "<p>Get week number for the date.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date</p>"
            },
            {
              "name": "weekStartDay",
              "type": "Number",
              "description": "<p>The first day of week, 0-6 (Sunday-Saturday). Defaults to the <a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Query",
          "returns": {
            "type": "Array.<Number>",
            "description": "<p>year and week number</p>"
          }
        },
        {
          "name": "formatCount",
          "description": "<p>Turns (10, 'day') into '10 days' etc.</p>",
          "parameters": [
            {
              "name": "count",
              "type": "Number",
              "description": "<p>Amount of unit</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Unit, will be normalizes (days, d -&gt; day etc.)</p>"
            }
          ],
          "scope": "static",
          "category": "Unit helpers",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "getUnitToBaseUnitRatio",
          "description": "<p>Get the ratio between two units ( year, month -&gt; 1/12 )</p>",
          "parameters": [
            {
              "name": "baseUnit",
              "type": "String"
            },
            {
              "name": "unit",
              "type": "String"
            },
            {
              "name": "acceptEstimate",
              "type": "Boolean",
              "description": "<p>If true, process negative values of validConversions. Defaults to false.</p>",
              "default": false
            }
          ],
          "scope": "static",
          "category": "Unit helpers",
          "returns": {
            "type": "Number",
            "description": "<p>Ratio</p>"
          }
        },
        {
          "name": "getShortNameOfUnit",
          "description": "<p>Returns a localized abbreviated form of the name of the duration unit.\nFor example in the <code>EN</code> locale, for <code>&quot;qrt&quot;</code> it will return <code>&quot;q&quot;</code>.</p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Duration unit</p>"
            }
          ],
          "scope": "static",
          "category": "Unit helpers",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "getLocalizedNameOfUnit",
          "description": "<p>Returns a localized full name of the duration unit.</p>\n<p>For for example in the <code>EN</code> locale, for <code>&quot;d&quot;</code> it will return either\n<code>&quot;day&quot;</code> or <code>&quot;days&quot;</code>, depending from the <code>plural</code> argument</p>\n<p>Preserves casing of first letter.</p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Time unit</p>"
            },
            {
              "name": "plural",
              "type": "Boolean",
              "description": "<p>Whether to return a plural name or singular</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Unit helpers",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "normalizeUnit",
          "description": "<p>Normalizes a unit for easier usage in conditionals. For example year, years, y -&gt; year</p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "Unit helpers",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "getDurationInUnit",
          "description": "<p>Returns a duration of the timeframe in the given unit.</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Date",
              "description": "<p>The start date of the timeframe</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>The end date of the timeframe</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>Duration unit</p>"
            }
          ],
          "scope": "static",
          "category": "Unit helpers",
          "returns": {
            "type": "Number",
            "description": "<p>The duration in the units</p>"
          }
        },
        {
          "name": "doesUnitsAlign",
          "access": "private",
          "description": "<p>Checks if two date units align</p>",
          "parameters": [
            {
              "name": "majorUnit",
              "type": "String"
            },
            {
              "name": "minorUnit",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "Unit helpers",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "round",
          "description": "<p>Rounds the passed Date value to the nearest <code>increment</code> value.</p>\n<p>Optionally may round relative to a certain base time point.</p>\n<p>For example <code>DH.round(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))</code>\nwould round to 9:45 because that's the nearest integer number of 30 minute increments\nfrom the base.</p>\n<p>Note that <code>base</code> is ignored when rounding to weeks. The configured <a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>\ndictates what the base of a week is.</p>",
          "parameters": [
            {
              "name": "time",
              "type": "Date",
              "description": "<p>The time to round</p>"
            },
            {
              "name": "increment",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>A millisecond value by which to round the time.\nMay be specified in string form eg: <code>'15 minutes'</code></p>"
            },
            {
              "name": "base",
              "type": "Date",
              "description": "<p>The &quot;start&quot; from which to apply the rounding.</p>",
              "optional": true
            },
            {
              "name": "weekStartDay",
              "type": "Number",
              "description": "<p>Will default to what is set in locale</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Date",
            "description": "<p>New Date instance</p>"
          }
        },
        {
          "name": "floor",
          "description": "<p>Floor the passed Date value to the nearest <code>increment</code> value.</p>\n<p>Optionally may floor relative to a certain base time point.</p>\n<p>For example <code>DH.floor(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))</code>\nwould floor to 9:15 because that's the closest lower integer number of 30 minute increments\nfrom the base.</p>\n<p>Note that <code>base</code> is ignored when flooring to weeks. The configured <a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>\ndictates what the base of a week is.</p>",
          "parameters": [
            {
              "name": "time",
              "type": "Date",
              "description": "<p>The time to floor</p>"
            },
            {
              "name": "increment",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>A millisecond value by which to floor the time.\nMay be specified in string form eg: <code>'15 minutes'</code></p>"
            },
            {
              "name": "base",
              "type": "Date",
              "description": "<p>The &quot;start&quot; from which to apply the flooring.</p>",
              "optional": true
            },
            {
              "name": "weekStartDay",
              "type": "Number",
              "description": "<p>Will default to what is set in locale</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Date",
            "description": "<p>New Date instance</p>"
          }
        },
        {
          "name": "ceil",
          "description": "<p>Ceils the passed Date value to the nearest <code>increment</code> value.</p>\n<p>Optionally may ceil relative to a certain base time point.</p>\n<p>For example <code>DH.ceil(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))</code>\nwould ceil to 9:45 because that's the closest higher integer number of 30 minute increments\nfrom the base.</p>\n<p>Note that <code>base</code> is ignored when ceiling to weeks. Use weekStartDay argument which default to the configured\n<a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a> dictates what the base of a week is</p>",
          "parameters": [
            {
              "name": "time",
              "type": "Date",
              "description": "<p>The time to ceil</p>"
            },
            {
              "name": "increment",
              "type": [
                "String",
                "Number",
                "Object"
              ],
              "description": "<p>A numeric millisecond value by which to ceil the time.\nor a duration in string form eg <code>'30 min'</code> or object form : <code>{unit: &quot;minute&quot;, magnitude: 30}</code>\nor <code>{unit: &quot;minute&quot;, increment: 30}</code>\nMay be specified in string form eg: <code>'15 minutes'</code></p>"
            },
            {
              "name": "base",
              "type": "Date",
              "description": "<p>The &quot;start&quot; from which to apply the ceiling.</p>",
              "optional": true
            },
            {
              "name": "weekStartDay",
              "type": "Number",
              "description": "<p>Will default to what is set in locale</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Date",
            "description": "<p>New Date instance</p>"
          }
        },
        {
          "name": "snap",
          "access": "internal",
          "description": "<p>Implementation for round, floor and ceil.</p>",
          "scope": "static"
        },
        {
          "name": "parseDuration",
          "description": "<p>Parses a typed duration value according to locale rules.</p>\n<p>The value is taken to be a string consisting of the numeric magnitude and the units:</p>\n<ul>\n<li>The numeric magnitude can be either an integer or a float value. Both &quot;,&quot; and &quot;.&quot; are valid decimal separators.</li>\n<li>The units may be a recognised unit abbreviation of this locale or the full local unit name.</li>\n</ul>\n<p>For example:\n&quot;2d&quot;, &quot;2 d&quot;, &quot;2 day&quot;, &quot;2 days&quot; will be turned into <code>{ magnitude : 2, unit : &quot;day&quot; }</code>\n&quot;2.5d&quot;, &quot;2,5 d&quot;, &quot;2.5 day&quot;, &quot;2,5 days&quot; will be turned into <code>{ magnitude : 2.5, unit : &quot;day&quot; }</code></p>\n<p><strong>NOTE:</strong> Doesn't work with complex values like &quot;2 days, 2 hours&quot;</p>",
          "parameters": [
            {
              "name": "value",
              "type": "String",
              "description": "<p>The value to parse.</p>"
            },
            {
              "name": "allowDecimals",
              "type": "Boolean",
              "description": "<p>Decimals are allowed in the magnitude.</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "defaultUnit",
              "type": "String",
              "description": "<p>Default unit to use if only magnitude passed.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Parse & format",
          "returns": {
            "type": "Object",
            "description": "<p>If successfully parsed, the result contains two properties,\n<code>magnitude</code> being a number, and <code>unit</code> being the canonical unit name, <em>NOT</em>\na localized name. If parsing was unsuccessful, <code>null</code> is returned.</p>"
          }
        },
        {
          "name": "parseTimeUnit",
          "description": "<p>Parses a typed unit name, for example <code>&quot;ms&quot;</code> or <code>&quot;hr&quot;</code> or <code>&quot;yr&quot;</code> into the\ncanonical form of the unit name which may be passed to <a href=\"#Core/helper/DateHelper#function-add-static\">add</a>\nor <a href=\"#Core/helper/DateHelper#function-diff-static\">diff</a></p>",
          "parameters": [
            {
              "name": "unitName",
              "type": "*"
            }
          ],
          "scope": "static",
          "category": "Parse & format"
        }
      ]
    },
    {
      "name": "DomHelper",
      "modulePath": "Core/helper/DomHelper",
      "classDescription": "<p>Helps with dom querying and manipulation.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DomHelper.createElement({\n  tag: 'div',\n  className: 'parent',\n  style: 'background: red',\n  children: [\n     { tag: 'div', className: 'child' },\n     { tag: 'div', className: 'child' }\n  ]\n});\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DomHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "typedefs": [
        {
          "name": "DomConfig",
          "description": "<p>An object that describes a DOM element. Used for example by <a href=\"#Core/helper/DomHelper#function-createElement-static\">createElement()</a>\nand by <a href=\"#Core/helper/DomSync#function-sync-static\">DomSync.sync()</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DomHelper.createElement({\n   class : {\n       big   : true,\n       small : false\n   },\n   children : [\n       { tag : 'img', src : 'img.png' },\n       { html : '&lt;b style=&quot;color: red&quot;>Red text&lt;/b>' }\n   ]\n});\n</code></pre>",
          "properties": [
            {
              "name": "tag",
              "type": "String",
              "description": "<p>Tag name, for example 'span'</p>",
              "default": "'div'",
              "optional": true
            },
            {
              "name": "parent",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>",
              "optional": true
            },
            {
              "name": "nextSibling",
              "type": "HTMLElement",
              "description": "<p>Element's next sibling in the parent element</p>",
              "optional": true
            },
            {
              "name": "class",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>CSS classes, as a string or an object (truthy keys will be applied)</p>",
              "optional": true
            },
            {
              "name": "className",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Alias for <code>class</code></p>",
              "optional": true
            },
            {
              "name": "style",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Style, as a string or an object (keys will be hyphenated)</p>",
              "optional": true
            },
            {
              "name": "elementData",
              "type": "Object",
              "description": "<p>Data object stored as an expando on the resulting element</p>",
              "optional": true
            },
            {
              "name": "dataset",
              "type": "Object",
              "description": "<p>Dataset applied to the resulting element</p>",
              "optional": true
            },
            {
              "name": "children",
              "type": [
                "Array.<Core.helper.DomHelper#DomConfig>",
                "Core.helper.DomHelper#DomConfig",
                "String"
              ],
              "description": "<p>Child elements, as an array of DomConfigs or an object map thereof or a simple string value to create a text node</p>",
              "optional": true
            },
            {
              "name": "html",
              "type": "String",
              "description": "<p>Html string, used as the resulting elements <code>innerHTML</code>. Mutually exclusive with the <code>children</code> property</p>",
              "optional": true
            },
            {
              "name": "tooltip",
              "type": "Object",
              "description": "<p>Tooltip config applied to the resulting element</p>",
              "optional": true
            },
            {
              "name": "text",
              "type": "String",
              "description": "<p>Text content, XSS safe when you want to display text in the element. Mutually exclusive with the <code>children</code> property</p>",
              "optional": true
            },
            {
              "name": "id",
              "type": "String",
              "description": "<p>Element's <code>id</code></p>",
              "optional": true
            },
            {
              "name": "href",
              "type": "String",
              "description": "<p>Element's <code>href</code></p>",
              "optional": true
            },
            {
              "name": "ns",
              "type": "String",
              "description": "<p>Element's namespace</p>",
              "optional": true
            },
            {
              "name": "src",
              "type": "String",
              "description": "<p>Element's <code>src</code></p>",
              "optional": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "isFocusable",
          "description": "<p>Returns <code>true</code> if the passed element is focusable either programmatically or through pointer gestures.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to test.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the passed element is focusable</p>"
          }
        },
        {
          "name": "isEditable",
          "description": "<p>Returns <code>true</code> if the passed element accepts keystrokes to edit its contents.</p>",
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the passed element is editable.</p>"
          }
        },
        {
          "name": "isInView",
          "description": "<p>Returns the rectangle of the element which is currently visible in the browser viewport, i.e. user can find it on\nscreen, or <code>false</code> if it is scrolled out of view.</p>",
          "parameters": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The element to test.</p>"
            },
            {
              "name": "whole",
              "type": "Boolean",
              "description": "<p>Whether to check that whole element is visible, not just part of it.\nIf this is passed as true, the result will be a boolean, <code>true</code> or <code>false</code>.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": [
              "Core.helper.util.Rectangle",
              "Boolean"
            ],
            "description": "<p>Returns the rectangle of the element which is currently visible in\nthe browser viewport, or <code>false</code> if it is out of view.</p>"
          }
        },
        {
          "name": "getViewportIntersection",
          "description": "<p>This method goes up the DOM tree checking that all ancestors are visible in the viewport</p>",
          "parameters": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>Starting html element</p>"
            },
            {
              "name": "docRect",
              "type": "Core.helper.util.Rectangle",
              "description": "<p>Window rectangle</p>"
            },
            {
              "name": "method",
              "type": "String",
              "description": "<p>'contains' or 'intersect'</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle"
          }
        },
        {
          "name": "isVisible",
          "description": "<p>Returns <code>true</code> if the passed element is deeply visible. Meaning it is not hidden using <code>display</code>\nor <code>visibility</code> and no ancestor node is hidden.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to test.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if deeply visible.</p>"
          }
        },
        {
          "name": "isDOMEvent",
          "access": "internal",
          "description": "<p>Returns true if DOM Event instance is passed. It is handy to override to support Locker Service.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "merge",
          "access": "internal",
          "description": "<p>Merges specified source DOM config objects into a <code>dest</code> object.</p>",
          "parameters": [
            {
              "name": "dest",
              "type": "Object",
              "description": "<p>The destination DOM config object.</p>"
            },
            {
              "name": "sources",
              "type": "Object",
              "description": "<p>The DOM config objects to merge into <code>dest</code>.</p>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The <code>dest</code> object.</p>"
          }
        },
        {
          "name": "normalizeChildren",
          "access": "internal",
          "description": "<p>Updates in-place a DOM config object whose <code>children</code> property may be an object instead of the typical array.\nThe keys of such objects become the <code>reference</code> property upon conversion.</p>",
          "parameters": [
            {
              "name": "domConfig",
              "type": "Core.helper.DomHelper#DomConfig"
            },
            {
              "name": "namedChildren",
              "type": "function",
              "description": "<p>A function to call for each named child element.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Returns the altered DOM config</p>"
          }
        },
        {
          "name": "isCustomElement",
          "description": "<p>Returns true if element has opened shadow root</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to check</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "elementFromPoint",
          "description": "<p>Resolves element from point, checking shadow DOM if required</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number"
            },
            {
              "name": "y",
              "type": "Number"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "childFromPoint",
          "access": "internal",
          "description": "<p>Resolves child element from point <strong>in the passed element's coordinate space</strong>.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "HTMLElement",
              "description": "<p>The element to find the occupying element in.</p>"
            },
            {
              "name": "x",
              "type": [
                "Number",
                "Core.helper.util.Point"
              ],
              "description": "<p>Either the <code>X</code> part of a point, or the point to find.</p>"
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The <code>Y</code> part of the point.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "unitize",
          "access": "internal",
          "description": "<p>Converts a name/value pair of a style name and its value into the canonical (hyphenated) name of the style\nproperty and a value with the <code>defaultUnit</code> suffix appended if no unit is already present in the <code>value</code>.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const [property, value] = DomHelper.unitize('marginLeft', 50);\n console.log(property, value);\n</code></pre>\n<pre class=\"prettyprint source\"><code> > margin-left 50px\n</code></pre>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "value",
              "type": [
                "String",
                "Number"
              ]
            },
            {
              "name": "defaultUnit",
              "type": "String",
              "default": "px",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array.<String>"
          }
        },
        {
          "name": "getId",
          "description": "<p>Returns the <code>id</code> of the passed element. Generates a unique <code>id</code> if the element does not have one.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to return the <code>id</code> of.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "getCommonAncestor",
          "access": "internal",
          "description": "<p>Returns common widget/node ancestor for from/to arguments</p>",
          "parameters": [
            {
              "name": "from",
              "type": [
                "Core.widget.Widget",
                "HTMLElement"
              ]
            },
            {
              "name": "to",
              "type": [
                "Core.widget.Widget",
                "HTMLElement"
              ]
            }
          ],
          "scope": "static",
          "returns": {
            "type": [
              "Core.widget.Widget",
              "HTMLElement"
            ]
          }
        },
        {
          "name": "getElement",
          "access": "private",
          "description": "<p>Internal convenience fn to allow specifying either an element or a CSS selector to retrieve one</p>",
          "parameters": [
            {
              "name": "elementOrSelector",
              "type": [
                "String",
                "HTMLElement"
              ],
              "description": "<p>element or selector to lookup in DOM</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "setAttributes",
          "access": "internal",
          "description": "<p>Sets attributes passed as object to given element</p>",
          "parameters": [
            {
              "name": "elementOrSelector",
              "type": [
                "String",
                "Element"
              ]
            },
            {
              "name": "attributes",
              "type": "Object"
            }
          ],
          "scope": "static"
        },
        {
          "name": "setLength",
          "description": "<p>Sets a CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/length\">length</a> style value.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "String",
                "HTMLElement"
              ],
              "description": "<p>The element to set the style in, or, if just the result is required,\nthe style magnitude to return with units added. If a nullish value is passed, an empty string\nis returned.</p>"
            },
            {
              "name": "style",
              "type": "String",
              "description": "<p>The name of a style property which specifies a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/length\">length</a></p>",
              "optional": true
            },
            {
              "name": "value",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The magnitude. If a number is used, the value will be set in <code>px</code> units.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>The style value string.</p>"
          }
        },
        {
          "name": "percentify",
          "access": "internal",
          "description": "<p>Returns string percentified and rounded value for setting element's height, width etc.</p>",
          "parameters": [
            {
              "name": "value",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>percent value</p>"
            },
            {
              "name": "digits",
              "type": "Number",
              "description": "<p>number of decimal digits for rounding</p>",
              "default": 2
            }
          ],
          "scope": "static",
          "returns": {
            "type": "string",
            "description": "<p>percentified value or empty string if value can not be parsed</p>"
          }
        },
        {
          "name": "getChild",
          "description": "<p>Gets the first direct child of <code>element</code> that matches <code>selector</code>.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "selector",
              "type": "String",
              "description": "<p>CSS selector</p>"
            }
          ],
          "scope": "static",
          "category": "Query children",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "hasChild",
          "description": "<p>Checks if <code>element</code> has any child that matches <code>selector</code>.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "selector",
              "type": "String",
              "description": "<p>CSS selector</p>"
            }
          ],
          "scope": "static",
          "category": "Query children",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if any child matches selector</p>"
          }
        },
        {
          "name": "children",
          "description": "<p>Returns all child elements (not necessarily direct children) that matches <code>selector</code>.</p>\n<p>If <code>selector</code> starts with <code>'&gt;'</code> or <code>'# '</code>, then all components of the <code>selector</code> must match inside of <code>element</code>.\nThe scope selector, <code>:scope</code> is prepended to the selector (and if <code>#</code> was used, it is removed).</p>\n<p>These are equivalent:</p>\n<pre><code> DomHelper.children(el, '# .foo .bar');\n\n el.querySelectorAll(':scope .foo .bar');\n</code></pre>\n<p>These are also equivalent:</p>\n<pre><code> DomHelper.children(el, '&gt; .foo .bar');\n\n el.querySelectorAll(':scope &gt; .foo .bar');\n</code></pre>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The parent element</p>"
            },
            {
              "name": "selector",
              "type": "String",
              "description": "<p>The CSS selector</p>"
            }
          ],
          "scope": "static",
          "category": "Query children",
          "returns": {
            "type": "Array.<HTMLElement>",
            "description": "<p>Matched elements, somewhere below <code>element</code></p>"
          }
        },
        {
          "name": "down",
          "description": "<p>Looks at the specified <code>element</code> and all of its children for the one that first matches `selector.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "selector",
              "type": "String",
              "description": "<p>CSS selector</p>"
            }
          ],
          "scope": "static",
          "category": "Query children",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Matched element, either element or an element below it</p>"
          }
        },
        {
          "name": "isDescendant",
          "description": "<p>Checks if childElement is a descendant of parentElement (contained in it or a sub element)</p>",
          "parameters": [
            {
              "name": "parentElement",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "childElement",
              "type": "HTMLElement",
              "description": "<p>Child element, at any level below parent (includes nested shadow roots)</p>"
            }
          ],
          "scope": "static",
          "category": "Query children",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "getEventElement",
          "description": "<p>Returns the specified element of the given <code>event</code>. If the <code>event</code> is an <code>Element</code>, it is returned. Otherwise,\nthe <code>eventName</code> argument is used to retrieve the desired element property from <code>event</code> (this defaults to the\n<code>'target'</code> property).</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Event",
                "Element"
              ]
            },
            {
              "name": "elementName",
              "type": "String",
              "default": "target",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Element"
          }
        },
        {
          "name": "isElement",
          "description": "<p>Returns <code>true</code> if the provided value is <em>likely</em> a DOM element. If the element can be assured to be from the\nsame document, <code>instanceof Element</code> is more reliable.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isNode",
          "description": "<p>Returns <code>true</code> if the provided value is <em>likely</em> a DOM node. If the node can be assured to be from the same\ndocument, <code>instanceof Node</code> is more reliable.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "forEachSelector",
          "description": "<p>Iterates over each result returned from <code>element.querySelectorAll(selector)</code>. First turns it into an array to\nwork in IE. Can also be called with only two arguments, in which case the first argument is used as selector and\ndocument is used as the element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "selector",
              "type": "String",
              "description": "<p>CSS selector</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function called for each found element</p>"
            }
          ],
          "scope": "static",
          "category": "Query children"
        },
        {
          "name": "forEachChild",
          "description": "<p>Iterates over the direct child elements of the specified element. First turns it into an array to\nwork in IE.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function called for each child element</p>"
            }
          ],
          "scope": "static",
          "category": "Query children"
        },
        {
          "name": "removeEachSelector",
          "description": "<p>Removes each element returned from <code>element.querySelectorAll(selector)</code>.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "selector",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "Query children"
        },
        {
          "name": "up",
          "description": "<p>Looks at the specified element and all of its parents for the one that first matches selector.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element</p>"
            },
            {
              "name": "selector",
              "type": "String",
              "description": "<p>CSS selector</p>"
            }
          ],
          "scope": "static",
          "category": "Query parents",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Matched element, either the passed in element or an element above it</p>"
          }
        },
        {
          "name": "getParents",
          "description": "<p>Retrieves all parents to the specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element</p>"
            }
          ],
          "scope": "static",
          "category": "Query parents",
          "returns": {
            "type": "Array.<HTMLElement>",
            "description": "<p>All parent elements, bottom up</p>"
          }
        },
        {
          "name": "makeValidId",
          "description": "<p>Converts the passed id to an id valid for usage as id on a DOM element.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "createElement",
          "description": "<p>Creates an Element, accepts a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object. Example usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DomHelper.createElement({\n  tag         : 'table', // defaults to 'div'\n  className   : 'nacho',\n  html        : 'I am a nacho',\n  children    : [ { tag: 'tr', ... }, myDomElement ],\n  parent      : myExistingElement // Or its id\n  style       : 'font-weight: bold;color: red',\n  dataset     : { index: 0, size: 10 },\n  tooltip     : 'Yay!',\n  ns          : 'http://www.w3.org/1999/xhtml'\n});\n</code></pre>",
          "parameters": [
            {
              "name": "config",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>Element config object</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An object specifying creation options. If this is a boolean value, it is\nunderstood to be the <code>returnAll</code> option.</p>",
              "optional": true
            },
            {
              "name": "options.ignoreRefs",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to ignore element references.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.returnAll",
              "type": "Boolean",
              "description": "<p>Specify true to return all elements &amp; child elements\ncreated as an array.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "category": "Creation",
          "returns": {
            "type": [
              "HTMLElement",
              "Array.<HTMLElement>",
              "Object"
            ],
            "description": "<p>Single element or array of elements <code>returnAll</code> was set to true.\nIf any elements had a <code>reference</code> property, this will be an object containing a reference to\nall those elements, keyed by the reference name.</p>"
          }
        },
        {
          "name": "createElementFromTemplate",
          "access": "private",
          "description": "<p>Create element(s) from a template (html string). Note that\n<code>textNode</code>s are discarded unless the <code>raw</code> option is passed\nas <code>true</code>.</p>\n<p>If the template has a single root element, then the single element will be returned\nunless the <code>array</code> option is passed as <code>true</code>.</p>\n<p>If there are multiple elements, then an Array will be returned.</p>",
          "parameters": [
            {
              "name": "template",
              "type": "String",
              "description": "<p>The HTML string from which to create DOM content</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An object containing properties to modify how the DOM is created and returned.</p>",
              "optional": true
            },
            {
              "name": "options.array",
              "type": "Boolean",
              "description": "<p><code>true</code> to return an array even if there's only one resulting element.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.raw",
              "type": "Boolean",
              "description": "<p>Return all child nodes, including text nodes.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.fragment",
              "type": "Boolean",
              "description": "<p>Return a DocumentFragment.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "triggerMouseEvent",
          "access": "internal",
          "description": "<p>Dispatches a MouseEvent of the passed type to the element at the visible centre of the passed element.</p>",
          "parameters": [
            {
              "name": "targetElement",
              "type": "HTMLElement",
              "description": "<p>The element whose center recieves the mouse event.</p>"
            },
            {
              "name": "type",
              "type": "String",
              "description": "<p>The mouse event type to dispatch.</p>",
              "default": "contextmenu",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "insertFirst",
          "description": "<p>Inserts an <code>element</code> at first position in <code>into</code>.</p>",
          "parameters": [
            {
              "name": "into",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to insert, or an element config passed on to createElement()</p>"
            }
          ],
          "scope": "static",
          "category": "Creation",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "insertBefore",
          "description": "<p>Inserts a <code>element</code> before <code>beforeElement</code> in <code>into</code>.</p>",
          "parameters": [
            {
              "name": "into",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to insert, or an element config passed on to createElement()</p>"
            },
            {
              "name": "beforeElement",
              "type": "HTMLElement",
              "description": "<p>Element before which passed element should be inserted</p>"
            }
          ],
          "scope": "static",
          "category": "Creation",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "append",
          "description": "<p>Appends element to parentElement.</p>",
          "parameters": [
            {
              "name": "parentElement",
              "type": "HTMLElement",
              "description": "<p>Parent element</p>"
            },
            {
              "name": "elementOrConfig",
              "type": [
                "HTMLElement",
                "Object",
                "String"
              ],
              "description": "<p>Element to insert, or an element config passed on to createElement(), or an html string passed to createElementFromTemplate</p>"
            }
          ],
          "scope": "static",
          "category": "Creation",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "getTranslateX",
          "description": "<p>Returns the element's <code>transform translateX</code> value in pixels.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Number",
            "description": "<p>X transform</p>"
          }
        },
        {
          "name": "getTranslateY",
          "description": "<p>Returns the element's <code>transform translateY</code> value in pixels.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Number",
            "description": "<p>Y coordinate</p>"
          }
        },
        {
          "name": "getTranslateXY",
          "description": "<p>Gets both X and Y coordinates as an array [x, y]</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Array.<Number>",
            "description": "<p>[x, y]</p>"
          }
        },
        {
          "name": "getOffsetX",
          "description": "<p>Get elements X offset within a containing element</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "container",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Number",
            "description": "<p>X offset</p>"
          }
        },
        {
          "name": "getOffsetY",
          "description": "<p>Get elements Y offset within a containing element</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "container",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Number",
            "description": "<p>Y offset</p>"
          }
        },
        {
          "name": "getOffsetXY",
          "description": "<p>Gets elements X and Y offset within containing element as an array [x, y]</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "container",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Array.<Number>",
            "description": "<p>[x, y]</p>"
          }
        },
        {
          "name": "focusWithoutScrolling",
          "description": "<p>Focus element without scrolling the element into view.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "static"
        },
        {
          "name": "getPageX",
          "description": "<p>Get elements X position on page</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "getPageY",
          "description": "<p>Get elements Y position on page</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Position, get",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "getExtremalSizePX",
          "access": "internal",
          "description": "<p>Returns extremal (min/max) size (height/width) of the element in pixels</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "style",
              "type": "String",
              "description": "<p>minWidth/minHeight/maxWidth/maxHeight</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "setScale",
          "access": "internal",
          "description": "<p>Set element's <code>scale</code>.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "scaleX",
              "type": "Number",
              "description": "<p>The value by which the element should be scaled in the X axis (0 to 1)</p>"
            },
            {
              "name": "scaleY",
              "type": "Number",
              "description": "<p>The value by which the element should be scaled in the Y axis (0 to 1).\nDefaults to <code>scaleX</code></p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "setTranslateX",
          "description": "<p>Set element's <code>X</code> translation in pixels.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The value by which the element should be translated from its default position.</p>"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "setTranslateY",
          "description": "<p>Set element's <code>Y</code> translation in pixels.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The value by which the element should be translated from its default position.</p>"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "setTop",
          "description": "<p>Set element's style <code>top</code>.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "y",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The top position. If numeric, <code>'px'</code> is used as the unit.</p>"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "setLeft",
          "description": "<p>Set element's style <code>left</code>.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "x",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The top position. If numeric, <code>'px'</code> is used as the unit.</p>"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "setTranslateXY",
          "description": "<p>Set elements <code>X</code> and <code>Y</code> translation in pixels.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The `X translation.</p>",
              "optional": true
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The `Y translation.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "addTranslateX",
          "description": "<p>Increase <code>X</code> translation</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The number of pixels by which to increase the element's <code>X</code> translation.</p>"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "addTranslateY",
          "description": "<p>Increase <code>Y</code> position</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The number of pixels by which to increase the element's <code>Y</code> translation.</p>"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "addLeft",
          "description": "<p>Increase X position</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "x",
              "type": "Number"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "addTop",
          "description": "<p>Increase Y position</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "y",
              "type": "Number"
            }
          ],
          "scope": "static",
          "category": "Position, set"
        },
        {
          "name": "alignTo",
          "description": "<p>Align the passed element with the passed target according to the align spec.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to align.</p>"
            },
            {
              "name": "target",
              "type": [
                "HTMLElement",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The target element or rectangle to align to</p>"
            },
            {
              "name": "alignSpec",
              "type": "Object",
              "description": "<p>See <a href=\"#Core/helper/util/Rectangle#function-alignTo\">alignTo</a> Defaults to <code>{ align : 't0-t0' }</code></p>",
              "optional": true
            },
            {
              "name": "round",
              "type": "Boolean",
              "description": "<p>Round the calculated Rectangles (for example if dealing with scrolling which\nis integer based).</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "getStyleValue",
          "description": "<p>Returns a style value or values for the passed element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to read styles from</p>"
            },
            {
              "name": "propName",
              "type": [
                "String",
                "Array.<String>"
              ],
              "description": "<p>The property or properties to read</p>"
            },
            {
              "name": "inline",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to read the element's inline style.\nNote that this could return inaccurate results if CSS rules apply to this element.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "CSS",
          "returns": {
            "type": [
              "String",
              "Object"
            ],
            "description": "<p>The value or an object containing the values keyed by the requested property name.</p>"
          }
        },
        {
          "name": "getEdgeSize",
          "description": "<p>Returns an object with the parse style values for the top, right, bottom, and left\ncomponents of the given edge style.</p>\n<p>The return value is an object with <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties\nfor the respective components of the edge style, as well as <code>width</code> (the sum of\n<code>left</code> and <code>right</code>) and <code>height</code> (the sum of <code>top</code> and <code>bottom</code>).</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "edgeStyle",
              "type": "String",
              "description": "<p>The element's desired edge style such as 'padding', 'margin',\nor 'border'.</p>"
            },
            {
              "name": "edges",
              "type": "String",
              "description": "<p>A string with one character codes for each edge. Only\nthose edges will be populated in the returned object. By default, all edges will be\npopulated.</p>",
              "default": "'trbl'",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "parseStyle",
          "description": "<p>Splits a style string up into object form. For example <code>'font-weight:bold;font-size:150%'</code>\nwould convert to</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    font-weight : 'bold',\n    font-size : '150%'\n}\n</code></pre>",
          "parameters": [
            {
              "name": "style",
              "type": "String",
              "description": "<p>A DOM style string</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>the style declaration in object form.</p>"
          }
        },
        {
          "name": "applyStyle",
          "description": "<p>Applies specified style to the passed element. Style can be an object or a string.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Target element</p>"
            },
            {
              "name": "style",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Style to apply, 'border: 1px solid black' or { border: '1px solid black' }</p>"
            },
            {
              "name": "overwrite",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to replace style instead of applying changes</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "CSS"
        },
        {
          "name": "addClasses",
          "description": "<p>Add multiple classes to elements classList.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "classes",
              "type": "Array.<String>"
            }
          ],
          "scope": "static",
          "category": "CSS",
          "deprecated": true
        },
        {
          "name": "removeClasses",
          "description": "<p>Remove multiple classes from elements classList.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "classes",
              "type": "Array.<String>"
            }
          ],
          "scope": "static",
          "category": "CSS",
          "deprecated": true
        },
        {
          "name": "toggleClasses",
          "description": "<p>Toggle multiple classes in elements classList. Helper for toggling multiple classes at once.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "classes",
              "type": "Array.<String>"
            },
            {
              "name": "force",
              "type": "Boolean",
              "description": "<p>Specify true to add classes, false to remove. Leave blank to toggle</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "CSS"
        },
        {
          "name": "addTemporaryClass",
          "description": "<p>Adds a CSS class to an element during the specified duration</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Target element</p>"
            },
            {
              "name": "cls",
              "type": "String",
              "description": "<p>CSS class to add temporarily</p>"
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>Duration in ms, 0 means cls will not be applied</p>"
            },
            {
              "name": "delayable",
              "type": "Core.mixin.Delayable",
              "description": "<p>The delayable to tie the setTimeout call to</p>"
            }
          ],
          "scope": "static",
          "category": "CSS",
          "typings": {
            "delayable": "typeof Delayable"
          }
        },
        {
          "name": "getPropertyTransitionDuration",
          "access": "internal",
          "description": "<p>Reads computed style from the element and returns transition duration for a given property in milliseconds</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Target DOM element</p>"
            },
            {
              "name": "property",
              "type": "String",
              "description": "<p>Animated property name</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>Duration in ms</p>"
          }
        },
        {
          "name": "getAnimationDuration",
          "access": "internal",
          "description": "<p>Reads computed style from the element and returns the animation duration for any\nattached animation in milliseconds</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Target DOM element</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>Duration in ms</p>"
          }
        },
        {
          "name": "highlight",
          "description": "<p>Highlights the passed element or Rectangle according to the theme's highlighting rules.\nUsually an animated framing effect.</p>\n<p>The framing effect is achieved by adding the CSS class <code>b-fx-highlight</code> which references\na <code>keyframes</code> animation named <code>b-fx-highlight-animation</code>. You may override the animation\nname referenced, or the animation itself in your own CSS.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The element or Rectangle to highlight.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "resetScrollBarWidth",
          "description": "<p>Resets DomHelper.scrollBarWidth cache, triggering a new measurement next time it is read</p>",
          "scope": "static"
        },
        {
          "name": "measureText",
          "description": "<p>Measures the text width using a hidden div</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            },
            {
              "name": "sourceElement",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Measure",
          "returns": {
            "type": "Number",
            "description": "<p>width</p>"
          }
        },
        {
          "name": "measureSize",
          "description": "<p>Measures a relative size, such as a size specified in <code>em</code> units for the passed element.</p>",
          "parameters": [
            {
              "name": "size",
              "type": "String",
              "description": "<p>The CSS size value to measure.</p>"
            },
            {
              "name": "sourceElement",
              "type": "HTMLElement"
            },
            {
              "name": "round",
              "type": "Boolean",
              "description": "<p>Pass true to return exact width, not rounded value</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Measure",
          "returns": {
            "type": "Number",
            "description": "<p>size The size in pixels of the passed relative measurement.</p>"
          }
        },
        {
          "name": "stripTags",
          "access": "internal",
          "description": "<p>Strips the tags from a html string, returning text content.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DomHelper.stripTags('&lt;div class=&quot;custom&quot;>&lt;b>Bold&lt;/b>&lt;i>Italic&lt;/i>&lt;/div>'); // -> BoldItalic\n</code></pre>",
          "parameters": [
            {
              "name": "htmlString",
              "type": "String",
              "description": "<p>HTML string</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>Text content</p>"
          }
        },
        {
          "name": "sync",
          "description": "<p>Sync one source element attributes, children etc. to a target element. Source element can be specified as a html\nstring or an actual HTMLElement.</p>\n<p>NOTE: This function is superseded by <a href=\"#Core/helper/DomSync#function-sync-static\">DomSync.sync()</a>, which works\nwith DOM configs. For most usecases, use it instead.</p>",
          "parameters": [
            {
              "name": "sourceElement",
              "type": [
                "String",
                "HTMLElement"
              ],
              "description": "<p>Source &quot;element&quot; to copy from</p>"
            },
            {
              "name": "targetElement",
              "type": "HTMLElement",
              "description": "<p>Target element to apply to, can also be specified as part of the config object</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Returns the updated targetElement (which is also updated in place)</p>"
          }
        },
        {
          "name": "syncAttributes",
          "access": "private",
          "description": "<p>Syncs attributes from sourceElement to targetElement.</p>",
          "parameters": [
            {
              "name": "sourceElement",
              "type": "HTMLElement"
            },
            {
              "name": "targetElement",
              "type": "HTMLElement"
            }
          ],
          "scope": "static"
        },
        {
          "name": "syncContent",
          "access": "private",
          "description": "<p>Sync content (innerText) from sourceElement to targetElement</p>",
          "parameters": [
            {
              "name": "sourceElement",
              "type": "HTMLElement"
            },
            {
              "name": "targetElement",
              "type": "HTMLElement"
            }
          ],
          "scope": "static"
        },
        {
          "name": "syncChildren",
          "access": "private",
          "description": "<p>Sync traversing children</p>",
          "parameters": [
            {
              "name": "sourceElement",
              "type": "HTMLElement",
              "description": "<p>Source element</p>"
            },
            {
              "name": "targetElement",
              "type": "HTMLElement",
              "description": "<p>Target element</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "syncClassList",
          "description": "<p>Replaces the passed element's <code>className</code> with the class names\npassed in either Array or String format or Object.</p>\n<p>This method compares the existing class set with the incoming class set and\navoids mutating the element's class name set if possible.</p>\n<p>This can avoid browser style invalidations.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element whose class list to synchronize.</p>"
            },
            {
              "name": "newClasses",
              "type": [
                "Array.<String>",
                "String",
                "Object"
              ],
              "description": "<p>The incoming class names to set on the element.</p>"
            }
          ],
          "scope": "static",
          "category": "CSS",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the DOM class list was changed.</p>"
          }
        },
        {
          "name": "updateClassList",
          "description": "<p>Applies the key state of the passed object or DomClassList to the passed element.</p>\n<p>Properties with a falsy value mean that property name is <em>removed</em> as a class name.</p>\n<p>Properties with a truthy value mean that property name is <em>added</em> as a class name.</p>\n<p>This is different from <a href=\"#Core/helper/DomHelper#function-syncClassList-static\">syncClassList</a>. That sets the <code>className</code> of the element to the\nsum of all its truthy keys, regardless of what the pre-existing value of the <code>className</code> was, and ignoring falsy\nkeys.</p>\n<p>This <em>selectively</em> updates the classes in the <code>className</code>. If there is a truthy key, the name is added. If there\nis a falsy key, the name is removed.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to apply the class list to .</p>"
            },
            {
              "name": "classes",
              "type": [
                "Object",
                "Core.helper.util.DomClassList"
              ],
              "description": "<p>The classes to add or remove.</p>"
            }
          ],
          "scope": "static",
          "category": "CSS",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the DOM class list was changed.</p>"
          }
        },
        {
          "name": "setTheme",
          "description": "<p>Changes the theme to the passed theme name if possible.</p>\n<p>Theme names are case insensitive. The <code>href</code> used is all lower case.</p>\n<p>To use this method, the <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code> <em>must</em> use the default,\nBryntum-supplied CSS files where the <code>href</code> end with <code>&lt;themeName&gt;.css</code>, so that\nit can be found in the document, and switched out for a new link with\nthe a modified <code>href</code>. The new <code>href</code> will use the same path, just\nwith the <code>themeName</code> portion substituted for the new name.</p>\n<p>If no <code>&lt;link&gt;</code> with that name pattern can be found, an error will be thrown.</p>\n<p>If you use this method, you  must ensure that the theme files are\nall accessible on your server.</p>\n<p>Because this is an asynchronous operation, a <code>Promise</code> is returned.\nThe theme change event is passed to the success function. If the\ntheme was not changed, because the theme name passed is the current theme,\nnothing is passed to the success function.</p>\n<p>The theme change event contains two properties:</p>\n<ul>\n<li><code>prev</code> The previous Theme name.</li>\n<li><code>theme</code> The new Theme name.</li>\n</ul>",
          "parameters": [
            {
              "name": "newThemeName",
              "type": "String",
              "description": "<p>the name of the theme that should be applied</p>"
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise who's success callback receives the theme change\nevent if the theme in fact changed. If the theme <code>href</code> could not be loaded,\nthe failure callback is called, passing the error event caught.</p>"
          }
        },
        {
          "name": "getThemeInfo",
          "access": "private",
          "description": "<p>A theme information object about the current theme.</p>\n<p>Currently this has only one property:</p>\n<ul>\n<li><code>name</code> The current theme name.</li>\n</ul>",
          "parameters": [
            {
              "name": "defaultTheme",
              "type": "String",
              "description": "<p>the name of the theme used as backup value in case of fail</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>info, currently it contains only one property - 'name'.</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "activeElement",
          "description": "<p>Returns active element checking shadow dom too</p>",
          "type": "HTMLElement",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "scrollBarWidth",
          "description": "<p>Measures the scrollbar width using a hidden div. Caches result</p>",
          "type": "Number",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "themeInfo",
          "description": "<p>A theme information object about the current theme.</p>\n<p>Currently this has only one property:</p>\n<ul>\n<li><code>name</code> The current theme name.</li>\n</ul>",
          "type": "Object",
          "scope": "static",
          "readonly": true
        }
      ]
    },
    {
      "name": "DomSync",
      "modulePath": "Core/helper/DomSync",
      "classDescription": "<p>A utility class for syncing DOM config objects to DOM elements. Syncing compares the new config with the previously\nused for that element, only applying the difference. Very much like a virtual DOM approach on a per element basis\n(element + its children).</p>\n<p>Usage example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DomSync.sync({\n    domConfig: {\n        className : 'b-outer',\n        children : [\n            {\n                className : 'b-child',\n                html      : 'Child 1',\n                dataset   : {\n                    custom : true\n                }\n            },\n            {\n                className : 'b-child',\n                html      : 'Child 2',\n                style     : {\n                    fontWeight : 'bold',\n                    color      : 'blue'\n                }\n            }\n        ]\n    },\n    targetElement : target\n});\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DomSync.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "checkEquality",
          "access": "private",
          "description": "<p>Compares two DOM configs or properties of such objects for equality.</p>",
          "parameters": [
            {
              "name": "is",
              "type": "Object",
              "description": "<p>The new value.</p>"
            },
            {
              "name": "was",
              "type": "Object",
              "description": "<p>The old value.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An object with various options to control the comparison.</p>"
            },
            {
              "name": "options.ignore",
              "type": "Object",
              "description": "<p>An object containing names of attributes to ignore having <code>true</code> value.</p>",
              "isSubParam": true
            },
            {
              "name": "options.equalityCache",
              "type": "Map",
              "description": "<p>A map that can be used to record equality results for objects to avoid\nrecomputing the result for the same objects.</p>",
              "isSubParam": true
            },
            {
              "name": "options.refsFound",
              "type": "Set",
              "description": "<p>A Set that must be populated with the values of any <code>reference</code> properties found.</p>",
              "isSubParam": true
            },
            {
              "name": "ignoreRefs",
              "type": [
                "Boolean",
                "String"
              ],
              "description": "<p>Pass <code>true</code> to ignore <code>reference</code> properties on domConfigs. Pass <code>'children'</code>\nto ignore <code>reference</code> properties only on child element configs.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "sync",
          "description": "<p>Sync a DOM config to a target element</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Options object</p>"
            },
            {
              "name": "options.domConfig",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>A DOM config object</p>",
              "isSubParam": true
            },
            {
              "name": "options.targetElement",
              "type": "HTMLElement",
              "description": "<p>Target element to apply to</p>",
              "isSubParam": true
            },
            {
              "name": "options.strict",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to limit synchronization to only the values set by\nprevious calls. Styles and classes placed directly on the DOM elements by other means will not be affected.</p>",
              "default": false,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.syncIdField",
              "type": "String",
              "description": "<p>Field in dataset to use to match elements for re-usage</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.affected",
              "type": [
                "String",
                "Array.<String>"
              ],
              "description": "<p>The references affected by a partial sync.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.callback",
              "type": "function",
              "description": "<p>A function that will be called on element re-usage, creation and similar</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.configEquality",
              "type": "Boolean",
              "description": "<p>A function that will be called to compare an incoming config to\nthe last config applied to the <code>targetElement</code>. This function returns <code>true</code> if the passed values are equal and\n<code>false</code> otherwise.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Returns the updated target element (which is also updated in place)</p>"
          }
        },
        {
          "name": "addCls",
          "access": "internal",
          "description": "<p>Adds CSS classes to the element and to the cache.</p>",
          "parameters": [
            {
              "name": "cls",
              "type": [
                "Core.helper.util.DomClassList",
                "String",
                "Array.<String>",
                "Object"
              ]
            },
            {
              "name": "targetElement",
              "type": "HTMLElement",
              "description": "<p>A previously DomSynced element</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "removeCls",
          "access": "internal",
          "description": "<p>Adds CSS classes from the element and from the cache.</p>",
          "parameters": [
            {
              "name": "cls",
              "type": [
                "Core.helper.util.DomClassList",
                "String",
                "Array.<String>",
                "Object"
              ]
            },
            {
              "name": "targetElement",
              "type": "HTMLElement",
              "description": "<p>A previously DomSynced element</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "removeChild",
          "description": "<p>Remove a child element without syncing, for example when dragging an element to some other parent.\nRemoves it both from DOM and the parent elements syncMap</p>",
          "parameters": [
            {
              "name": "parentElement",
              "type": "HTMLElement"
            },
            {
              "name": "childElement",
              "type": "HTMLElement"
            }
          ],
          "scope": "static"
        },
        {
          "name": "addChild",
          "description": "<p>Adds a child element without syncing, making it properly available for later syncs. Useful for example\nwhen dragging and dropping an element from some other parent.</p>",
          "parameters": [
            {
              "name": "parentElement",
              "type": "HTMLElement"
            },
            {
              "name": "childElement",
              "type": "HTMLElement"
            },
            {
              "name": "syncId",
              "type": [
                "String",
                "Number"
              ]
            }
          ],
          "scope": "static"
        },
        {
          "name": "getChild",
          "description": "<p>Get a child element using a dot separated syncIdMap path.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>DomSync.getChild(eventWrap, 'event.percentBar');\n</code></pre>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>&quot;root&quot; element, under which the path starts</p>"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot '.' separated path of syncIdMap entries</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Child element or <code>null</code> if path did not match any element</p>"
          }
        }
      ]
    },
    {
      "name": "DragHelper",
      "modulePath": "Core/helper/DragHelper",
      "classDescription": "<h2>Intro</h2>\n<p>A drag drop helper class which lets you move elements in page. It supports:</p>\n<ul>\n<li>Dragging the actual element</li>\n<li>Dragging a cloned version of the element</li>\n<li>Dragging extra <code>relatedElements</code> along with the main element</li>\n<li>Firing useful events <a href=\"#Core/helper/DragHelper#event-beforeDragStart\">beforeDragStart</a>, <a href=\"#Core/helper/DragHelper#event-dragStart\">dragStart</a>, <a href=\"#Core/helper/DragHelper#event-drag\">drag</a>, <a href=\"#Core/helper/DragHelper#event-drop\">drop</a>, <a href=\"#Core/helper/DragHelper#event-abort\">abort</a></li>\n<li>Validation by setting a <code>valid</code> Boolean on the drag context object provided to event listeners</li>\n<li>Aborting drag with ESCAPE key</li>\n<li>Constraining drag to be only horizontal or vertical using <a href=\"#Core/helper/DragHelper#config-lockX\">lockX</a> and <a href=\"#Core/helper/DragHelper#config-lockY\">lockY</a></li>\n<li>Defining X / Y boundaries using <a href=\"#Core/helper/DragHelper#config-minX\">minX</a>, <a href=\"#Core/helper/DragHelper#config-maxX\">maxX</a> and <a href=\"#Core/helper/DragHelper#config-minY\">minY</a>, <a href=\"#Core/helper/DragHelper#config-maxY\">maxY</a></li>\n<li>Async finalization (e.g. to show confirmation prompts)</li>\n<li>Animated final transition after mouse up of a valid drop (see <a href=\"#Core/helper/DragHelper#function-animateProxyTo\">animateProxyTo</a>)</li>\n<li>Animated abort transition after an invalid or aborted drop</li>\n</ul>\n<p><div class=\"external-example \" data-file=\"Core/helper/DragHelper.js\"></div></p>\n<h2>Two modes</h2>\n<p>DragHelper supports two <a href=\"#Core/helper/DragHelper#config-mode\">modes</a>:</p>\n<ul>\n<li><code>container</code> - moving / rearranging elements within and between specified containers</li>\n<li><code>translateXY</code> - freely repositioning an element, either using the element or a cloned version of it - a &quot;drag proxy&quot; (default mode)</li>\n</ul>\n<h2>Container drag mode</h2>\n<p>Container drag should be used when moving or rearranging child elements within and between specified containers</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// dragging element between containers\nlet dragHelper = new DragHelper({\n  mode       : 'container',\n  containers : [ container1, container2 ]\n});\n</code></pre>\n<h2>Translate drag mode</h2>\n<p>Use translate drag to reposition an element within its container using transform CSS.</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// dragging element within container\nlet dragHelper = new DragHelper({\n  mode           : 'translateXY',\n  targetSelector : 'div.movable'\n});\n</code></pre>\n<h2>Observable events</h2>\n<p>In the various events fired by the DragHelper, you will have access to the raw DOM event and some useful <code>context</code> about the drag operation:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> myDrag.on({\n     drag : ({event , context}) {\n           // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n          const element = context.element;\n\n          // The original mousedown element upon which triggered the drag operation\n          const grabbed = context.grabbed;\n\n          // The target under the current mouse / pointer / touch position\n          const target = context.target;\n      }\n });\n</code></pre>\n<h2>Simple drag helper subclass with a drop target specified:</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>export default class MyDrag extends DragHelper {\n     static get defaultConfig() {\n         return {\n             // Don't drag the actual cell element, clone it\n             cloneTarget        : true,\n             mode               : 'translateXY',\n             // Only allow drops on DOM elements with 'yourDropTarget' CSS class specified\n             dropTargetSelector : '.yourDropTarget',\n\n             // Only allow dragging elements with the 'draggable' CSS class\n             targetSelector : '.draggable'\n         };\n     }\n\n     construct(config) {\n         const me = this;\n\n         super.construct(config);\n\n         me.on({\n             dragstart : me.onDragStart\n         });\n     }\n\n     onDragStart({ event, context }) {\n         const target = context.target;\n\n         // Here you identify what you are dragging (an image of a user, grid row in an order table etc) and map it to something in your\n         // data model. You can store your data on the context object which is available to you in all drag-related events\n         context.userId = target.dataset.userId;\n     }\n\n     onEquipmentDrop({ context, event }) {\n         const me = this;\n\n         if (context.valid) {\n             const userId   = context.userId,\n                   droppedOnTarget = context.target;\n\n             console.log(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`, droppedOnTarget);\n\n             // Dropped on a scheduled event, display toast\n             WidgetHelper.toast(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`);\n         }\n     }\n };\n</code></pre>\n<h2>Dragging multiple elements</h2>\n<p>You can tell the DragHelper to also move additional <code>relatedElements</code> when a drag operation is starting. Simply\nprovide an array of elements on the context object:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new DragHelper ({\n    callOnFunctions : true,\n\n    onDragStart({ context }) {\n         // Let drag helper know about extra elements to drag\n         context.relatedElements = Array.from(element.querySelectorAll('.b-resource-avatar'));\n    }\n});\n</code></pre>\n<h2>Creating a custom drag proxy</h2>\n<p>Using the <a href=\"#Core/helper/DragHelper#function-createProxy\">createProxy</a> you can create any markup structure to use when dragging cloned targets.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new DragHelper ({\n   callOnFunctions      : true,\n   // Don't drag the actual cell element, clone it\n   cloneTarget          : true,\n   // We size the cloned element using CSS\n   autoSizeClonedTarget : false,\n\n   mode               : 'translateXY',\n   // Only allow drops on certain DOM nodes\n   dropTargetSelector : '.myDropTarget',\n   // Only allow dragging cell elements in a Bryntum Grid\n   targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n\n   // Here we receive the element where the drag originated and we can choose to return just a child element of it\n   // to use for the drag proxy (such as an icon)\n   createProxy(element) {\n       return element.querySelector('i').cloneNode();\n   }\n});\n</code></pre>\n<h2>Animating a cloned drag proxy to a point before finalizing</h2>\n<p>To provide users with the optimal user experience, you can set a <code>transitionTo</code> object (with <code>target</code> element and\n<code>align</code> spec) on the DragHelper´s <code>context</code> object inside a <a href=\"#Core/helper/DragHelper#event-drop\">drop</a> listener (only applies to translate\n<a href=\"#Core/helper/DragHelper#config-mode\">mode</a> operations). This will trigger a final animation of the drag proxy which should represent\nthe change of data state that will be triggered by the drop.</p>\n<p>You can see this in action in Gantt´s <code>drag-resource-from-grid</code> demo.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new DragHelper ({\n   callOnFunctions      : true,\n   // Don't drag the actual cell element, clone it\n   cloneTarget          : true,\n   // We size the cloned element using CSS\n   autoSizeClonedTarget : false,\n\n   mode               : 'translateXY',\n   // Only allow drops on certain DOM nodes\n   dropTargetSelector : '.myDropTarget',\n   // Only allow dragging cell elements in a Bryntum Grid\n   targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n\n   // Here we receive the element where the drag originated and we can choose to return just a child element of it\n   // to use for the drag proxy (such as an icon)\n   createProxy(element) {\n       return element.querySelector('i').cloneNode();\n   },\n\n   async onDrop({ context, event }) {\n      // If it's a valid drop, provide a point to animate the proxy to before finishing the operation\n     if (context.valid) {\n         await this.animateProxyTo(someElement, {\n              // align left side of drag proxy to right side of the someElement\n              align  : 'l0-r0'\n         });\n     }\n     else {\n         Toast.show(`You cannot drop here`);\n     }\n  }\n});\n</code></pre>",
      "extends": [
        "Core/Base"
      ],
      "mixes": [
        "Core/mixin/Events"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "configs": [
        {
          "name": "dragProxyCls",
          "access": "private",
          "description": "<p>Drag proxy CSS class</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-drag-proxy"
        },
        {
          "name": "invalidCls",
          "description": "<p>CSS class added when drag is invalid</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-drag-invalid"
        },
        {
          "name": "draggingCls",
          "access": "private",
          "description": "<p>CSS class added to the source element in Container drag</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-dragging"
        },
        {
          "name": "dropPlaceholderCls",
          "access": "private",
          "description": "<p>CSS class added to the source element in Container drag</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-drop-placeholder"
        },
        {
          "name": "dragThreshold",
          "description": "<p>The amount of pixels to move mouse before it counts as a drag operation</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "outerElement",
          "description": "<p>The outer element where the drag helper will operate (attach events to it and use as outer limit when looking for ancestors)</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "dragWithin",
          "description": "<p>Outer element that limits where element can be dragged</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "unifiedProxy",
          "description": "<p>Set to true to stack any related dragged elements below the main drag proxy element. Only applicable when\nusing translate <a href=\"#Core/helper/DragHelper#config-mode\">mode</a> with <a href=\"#Core/helper/DragHelper#config-cloneTarget\">cloneTarget</a></p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "constrain",
          "description": "<p>Constrain translate drag to dragWithin elements bounds (set to false to allow it to &quot;overlap&quot; edges)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "minX",
          "description": "<p>Smallest allowed x when dragging horizontally.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "maxX",
          "description": "<p>Largest allowed x when dragging horizontally.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "minY",
          "description": "<p>Smallest allowed y when dragging horizontally.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "maxY",
          "description": "<p>Largest allowed y when dragging horizontally.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "mode",
          "description": "<p>Enabled dragging, specify mode:</p>\n<table>\n<tr><td>container<td>Allows reordering elements within one and/or between multiple containers\n<tr><td>translateXY<td>Allows dragging within a parent container\n</table>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "translateXY"
        },
        {
          "name": "isElementDraggable",
          "description": "<p>A function that determines if dragging an element is allowed. Gets called with the element as argument,\nreturn true to allow dragging or false to prevent.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "targetSelector",
          "description": "<p>A CSS selector used to determine if dragging an element is allowed.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dropTargetSelector",
          "description": "<p>A CSS selector used to determine if a drop is allowed at the current position.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dropTargetCls",
          "description": "<p>A CSS selector added to each drop target element while dragging.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "proxySelector",
          "description": "<p>A CSS selector used to target a child element of the mouse down element, to use as the drag proxy element.\nApplies to translate <a href=\"#Core/helper/DragHelper#config-mode\">mode</a> when using <a href=\"#Core/helper/DragHelper#config-cloneTarget\">cloneTarget</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "cloneTarget",
          "description": "<p>Set to <code>true</code> to clone the dragged target, and not move the actual target DOM node.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "autoSizeClonedTarget",
          "description": "<p>Set to <code>false</code> to not apply width/height of cloned drag proxy elements.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "hideOriginalElement",
          "description": "<p>Set to true to hide the original element while dragging (applicable when <code>cloneTarget</code> is true).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "containers",
          "description": "<p>Containers whose elements can be rearranged (and moved between the containers). Used when\nmode is set to &quot;container&quot;.</p>",
          "type": "Array.<HTMLElement>",
          "scope": "inner"
        },
        {
          "name": "ignoreSelector",
          "description": "<p>A CSS selector used to exclude elements when using container mode</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "lockX",
          "description": "<p>Configure as <code>true</code> to disallow dragging in the <code>X</code> axis. The dragged element will only move vertically.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "lockY",
          "description": "<p>Configure as <code>true</code> to disallow dragging in the <code>Y</code> axis. The dragged element will only move horizontally.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "touchStartDelay",
          "description": "<p>The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 300
        },
        {
          "name": "scrollManager",
          "description": "<p>Scroll manager of the target. If specified, scrolling while dragging is supported.</p>",
          "type": "Core.util.ScrollManager",
          "scope": "inner"
        },
        {
          "name": "snapCoordinates",
          "access": "internal",
          "description": "<p>A method provided to snap coordinates to fixed points as you drag</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "unifiedOffset",
          "description": "<p>When using <a href=\"#Core/helper/DragHelper#config-unifiedProxy\">unifiedProxy</a>, use this amount of pixels to offset each extra element when dragging multiple items</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "removeProxyAfterDrop",
          "description": "<p>Configure as <code>false</code> to take ownership of the proxy element after a valid drop (advanced usage).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "events": [
        {
          "name": "beforeDragStart",
          "description": "<p>Fired before dragging starts, return <code>false</code> to prevent the drag operation.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The original element upon which the mousedown event triggered a drag operation</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ]
            }
          ],
          "preventable": true
        },
        {
          "name": "dragStart",
          "description": "<p>Fired when dragging starts. The event includes a <code>context</code> object. If you want to drag additional elements you can\nprovide these as an array of elements assigned to the <code>relatedElements</code> property of the context object.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself</p>",
              "isSubParam": true
            },
            {
              "name": "context.grabbed",
              "type": "HTMLElement",
              "description": "<p>The original element upon which the mousedown event triggered a drag operation</p>",
              "isSubParam": true
            },
            {
              "name": "context.relatedElements",
              "type": "Array.<HTMLElement>",
              "description": "<p>Array of extra elements to include in the drag.</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ]
            }
          ]
        },
        {
          "name": "drag",
          "description": "<p>Fired while dragging, you can signal that the drop is valid or invalid by setting <code>context.valid = false;</code></p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself</p>",
              "isSubParam": true
            },
            {
              "name": "context.target",
              "type": "HTMLElement",
              "description": "<p>The target element below the cursor</p>",
              "isSubParam": true
            },
            {
              "name": "context.grabbed",
              "type": "HTMLElement",
              "description": "<p>The original element upon which the mousedown event triggered a drag operation</p>",
              "isSubParam": true
            },
            {
              "name": "context.relatedElements",
              "type": "Array.<HTMLElement>",
              "description": "<p>An array of extra elements dragged with the main dragged element</p>",
              "isSubParam": true
            },
            {
              "name": "context.valid",
              "type": "Boolean",
              "description": "<p>Set this to true or false to indicate whether the drop position is valid.</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ]
        },
        {
          "name": "abort",
          "description": "<p>Fired after a drop at an invalid position</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself</p>",
              "isSubParam": true
            },
            {
              "name": "context.target",
              "type": "HTMLElement",
              "description": "<p>The target element below the cursor</p>",
              "isSubParam": true
            },
            {
              "name": "context.grabbed",
              "type": "HTMLElement",
              "description": "<p>The original element upon which the mousedown event triggered a drag operation</p>",
              "isSubParam": true
            },
            {
              "name": "context.relatedElements",
              "type": "Array.<HTMLElement>",
              "description": "<p>An array of extra elements dragged with the main dragged element</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ]
        },
        {
          "name": "abortFinalized",
          "access": "private",
          "description": "<p>Fires after <a href=\"#Core/helper/DragHelper#event-abort\">abort</a> and after drag proxy has animated back to its original position</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself</p>",
              "isSubParam": true
            },
            {
              "name": "context.target",
              "type": "HTMLElement",
              "description": "<p>The target element below the cursor</p>",
              "isSubParam": true
            },
            {
              "name": "context.grabbed",
              "type": "HTMLElement",
              "description": "<p>The original element upon which the mousedown event triggered a drag operation</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ]
        },
        {
          "name": "drop",
          "description": "<p>Fires after drop. For valid drops, it exposes <code>context.async</code> which you can set to true to signal that additional\nprocessing is needed before finalizing the drop (such as showing some dialog). When that operation is done, call\n<code>context.finalize(true/false)</code> with a boolean that determines the outcome of the drop.</p>\n<p>You can signal that the drop is valid or invalid by setting <code>context.valid = false;</code></p>\n<p>For translate type drags with <a href=\"#Core/helper/DragHelper#config-cloneTarget\">cloneTarget</a>, you can also set <code>transitionTo</code> if you want to animate\nthe dragged proxy to a position before finalizing the operation. See class intro text for example usage.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself</p>",
              "isSubParam": true
            },
            {
              "name": "context.target",
              "type": "HTMLElement",
              "description": "<p>The target element below the cursor</p>",
              "isSubParam": true
            },
            {
              "name": "context.grabbed",
              "type": "HTMLElement",
              "description": "<p>The original element upon which the mousedown event triggered a drag operation</p>",
              "isSubParam": true
            },
            {
              "name": "context.relatedElements",
              "type": "Array.<HTMLElement>",
              "description": "<p>An array of extra elements dragged with the main dragged element</p>",
              "isSubParam": true
            },
            {
              "name": "context.valid",
              "type": "Boolean",
              "description": "<p>true if the drop position is valid</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "dropFinalized",
          "access": "private",
          "description": "<p>Fires after <a href=\"#Core/helper/DragHelper#event-drop\">drop</a> and after drag proxy has animated to its final position (if setting <code>transitionTo</code>\non the drag context object).</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself</p>",
              "isSubParam": true
            },
            {
              "name": "context.target",
              "type": "HTMLElement",
              "description": "<p>The target element below the cursor</p>",
              "isSubParam": true
            },
            {
              "name": "context.grabbed",
              "type": "HTMLElement",
              "description": "<p>The original element upon which the mousedown event triggered a drag operation</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "reset",
          "access": "private",
          "description": "<p>Fired after a drag operation is completed or aborted</p>",
          "parameters": [
            {
              "name": "dragHelper",
              "type": "Core.helper.DragHelper"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "constructor",
          "description": "<p>Initializes a new DragHelper.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Configuration object, accepts options specified under Configs above</p>"
            }
          ],
          "examples": [
            "new DragHelper({\n  containers: [div1, div2],\n  isElementDraggable: element => element.className.contains('handle'),\n  outerElement: topParent,\n  listeners: {\n    drop: onDrop,\n    thisObj: this\n  }\n});"
          ],
          "scope": "inner"
        },
        {
          "name": "initListeners",
          "access": "private",
          "description": "<p>Initialize listener</p>",
          "scope": "instance"
        },
        {
          "name": "onMouseMove",
          "access": "private",
          "description": "<p>Move drag element with mouse.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeDragStart",
            "event:dragStart"
          ]
        },
        {
          "name": "update",
          "access": "private",
          "description": "<p>Updates drag, called when an element is grabbed and mouse moves</p>",
          "scope": "instance",
          "fires": [
            "event:drag"
          ]
        },
        {
          "name": "abort",
          "description": "<p>Abort dragging</p>",
          "scope": "instance",
          "fires": [
            "event:abort"
          ],
          "async": true
        },
        {
          "name": "onDocumentClick",
          "access": "private",
          "description": "<p>This is a capture listener, only added during drag, which prevents a click gesture\npropagating from the terminating mouseup gesture</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onMouseUp",
          "access": "private",
          "description": "<p>Drop on mouse up (if dropped on valid target).</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onKeyDown",
          "access": "private",
          "description": "<p>Cancel on ESC key</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "createProxy",
          "description": "<p>Creates the proxy element to be dragged, when using <a href=\"#Core/helper/DragHelper#config-cloneTarget\">cloneTarget</a>. Clones the original element by default.\nOverride it to provide your own custom HTML element structure to be used as the drag proxy.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element from which the drag operation originated</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "animateProxyTo",
          "description": "<p>Animated the proxy element to be aligned with the passed element. Returns a Promise which resolves after the\nDOM transition completes. Only applies to 'translateXY' mode.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The target element or a Rectangle</p>"
            },
            {
              "name": "alignSpec",
              "type": "Object",
              "description": "<p>An object describing how to the align drag proxy to the target element</p>",
              "optional": true
            },
            {
              "name": "alignSpec.align",
              "type": "String",
              "description": "<p>The alignment specification string, <code>[trbl]n-[trbl]n</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "alignSpec.offset",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>The 'x' and 'y' offset values to create an extra margin round the target\nto offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\ntowards the target - for example producing the effect of the anchor pointer piercing the target.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        }
      ],
      "properties": [
        {
          "name": "isDragging",
          "description": "<p>Returns true if a drag operation is active</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "EventHelper",
      "modulePath": "Core/helper/EventHelper",
      "classDescription": "<p>Utility methods for dealing with Events, normalizing Touch/Pointer/Mouse events.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "properties": [
        {
          "name": "eventNameMap",
          "access": "private",
          "description": "<p>DOM event to trigger name mapping.</p>",
          "scope": "instance"
        },
        {
          "name": "longPressTime",
          "description": "<p>The time in milliseconds for a <code>taphold</code> gesture to trigger a <code>contextmenu</code> event.</p>",
          "type": "Number",
          "scope": "static",
          "defaultValue": 500,
          "readonly": true
        },
        {
          "name": "dblClickTime",
          "description": "<p>The time in milliseconds within which a second touch tap event triggers a <code>dblclick</code> event.</p>",
          "type": "Number",
          "scope": "static",
          "defaultValue": 300,
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "getXY",
          "description": "<p>Returns the <code>[x, y]</code> coordinates of the event in the viewport coordinate system.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array.<Number>",
            "description": "<p>The coordinate.</p>"
          }
        },
        {
          "name": "getDistanceBetween",
          "description": "<p>Returns the pixel distance between two mouse/touch/pointer events.</p>",
          "parameters": [
            {
              "name": "event1",
              "type": "Event",
              "description": "<p>The first event.</p>"
            },
            {
              "name": "event2",
              "type": "Event",
              "description": "<p>The second event.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>The distance in pixels between the two events.</p>"
          }
        },
        {
          "name": "getPagePoint",
          "description": "<p>Returns a <a href=\"#Core/helper/util/Point\">Point</a> which encapsulates the <code>pageX/Y</code> position of the event.\nMay be used in <a href=\"#Core/helper/util/Rectangle\">Rectangle</a> events.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>A browser mouse/touch/pointer event.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Point",
            "description": "<p>The page point.</p>"
          }
        },
        {
          "name": "getClientPoint",
          "description": "<p>Returns a <a href=\"#Core/helper/util/Point\">Point</a> which encapsulates the <code>clientX/Y</code> position of the event.\nMay be used in <a href=\"#Core/helper/util/Rectangle\">Rectangle</a> events.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>A browser mouse/touch/pointer event.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Point",
            "description": "<p>The page point.</p>"
          }
        },
        {
          "name": "addListener",
          "description": "<p>Add a listener or listeners to an element</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to add a listener/listeners to.</p>"
            },
            {
              "name": "eventName",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Either a string, being the name of the event to listen for,\nor an options object containing event names and options as keys. See the options parameter\nfor details, or the <a href=\"#Core/helper/EventHelper#function-on-static\">on</a> method for details.</p>"
            },
            {
              "name": "handler",
              "type": "function",
              "description": "<p>If the second parameter is a string event name, this is the handler function.</p>",
              "optional": true
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>If the second parameter is a string event name, this is the options.</p>",
              "optional": true
            },
            {
              "name": "options.element",
              "type": "HTMLElement",
              "description": "<p>The element to add the listener to.</p>",
              "isSubParam": true
            },
            {
              "name": "options.thisObj",
              "type": "Object",
              "description": "<p>The default <code>this</code> reference for all handlers added in this call.</p>",
              "isSubParam": true
            },
            {
              "name": "options.autoDetach",
              "type": "Boolean",
              "description": "<p>The listeners are automatically removed when the <code>thisObj</code> is destroyed.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.delegate",
              "type": "String",
              "description": "<p>A CSS selector string which only fires the handler when the event takes place in a matching element.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.once",
              "type": "Boolean",
              "description": "<p>Specify as <code>true</code> to have the listener(s) removed upon first invocation.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.delay",
              "type": "Number",
              "description": "<p>The number of milliseconds to delay the handler call after the event fires:</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.expires",
              "type": [
                "Number",
                "Object"
              ],
              "description": "<p>The listener only waits for a specified time before\nbeing removed. The value may be a number or an object containing an expiry handler.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.expires.delay",
              "type": "Number",
              "description": "<p>How long to wait for the event for.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.expires.alt",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The function to call when the listener expires\n<strong>without having been triggered</strong>.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function",
            "description": "<p>A detacher function which removes all the listeners when called.</p>"
          }
        },
        {
          "name": "on",
          "description": "<p>Adds a listener or listeners to an element.\nall property names other than the options listed below are taken to be event names,\nand the values as handler specs.</p>\n<p>A handler spec is usually a function reference or the name of a function in the <code>thisObj</code>\noption.</p>\n<p>But a handler spec may also be an options object containing a <code>handler</code> property which is\nthe function or function name, and local options, including <code>element</code> and <code>thisObj</code>\nwhich override the top level options.</p>\n<p>Usage example</p>\n<pre class=\"prettyprint source lang-javascript\"><code>construct(config) {\n    super.construct(config);\n\n    // Add auto detaching event handlers to this Widget's reference elements\n    EventHelper.on({\n        element : this.iconElement,\n        click   : '_handleIconClick',\n        thisObj : this,\n        contextmenu : {\n            element : document,\n            handler : '_handleDocumentContextMenu'\n        }\n    });\n}\n</code></pre>\n<p>The <code>click</code> handler on the <code>iconElement</code> calls <code>this._handleIconClick</code>.</p>\n<p>The <code>contextmenu</code> handler is added to the <code>document</code> element, but the <code>thisObj</code>\nis defaulted in from the top <code>options</code> and calls <code>this._handleDocumentContextMenu</code>.</p>\n<p>Note that on touch devices, <code>dblclick</code> and <code>contextmenu</code> events are synthesized.\nSynthesized events contain a <code>browserEvent</code> property containing the final triggering\nevent of the gesture. For example a synthesized <code>dblclick</code> event would contain a\n<code>browserEvent</code> property which is the last <code>touchend</code> event. A synthetic <code>contextmenu</code>\nevent will contain a <code>browserEvent</code> property which the longstanding <code>touchstart</code> event.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The full listener specification.</p>"
            },
            {
              "name": "options.element",
              "type": "HTMLElement",
              "description": "<p>The element to add the listener to.</p>",
              "isSubParam": true
            },
            {
              "name": "options.thisObj",
              "type": "Object",
              "description": "<p>The default <code>this</code> reference for all handlers added in this call.</p>",
              "isSubParam": true
            },
            {
              "name": "options.autoDetach",
              "type": "Boolean",
              "description": "<p>The listeners are automatically removed when the <code>thisObj</code> is destroyed.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.delegate",
              "type": "String",
              "description": "<p>A CSS selector string which only fires the handler when the event takes place in a matching element.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.once",
              "type": "Boolean",
              "description": "<p>Specify as <code>true</code> to have the listener(s) removed upon first invocation.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.delay",
              "type": "Number",
              "description": "<p>The number of milliseconds to delay the handler call after the event fires.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.throttled",
              "type": "Number",
              "description": "<p>For rapidly repeating events (Such as <code>wheel</code> or <code>scroll</code> or <code>mousemove</code>)\nthis is the number of milliseconds to delay subsequent handler calls after first invocation which happens immediately.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.expires",
              "type": [
                "Number",
                "Object"
              ],
              "description": "<p>The listener only waits for a specified time before\nbeing removed. The value may be a number or an object containing an expiry handler.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.expires.delay",
              "type": "Number",
              "description": "<p>How long to wait for the event for.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.expires.alt",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The function to call when the listener expires\n<strong>without having been triggered</strong>.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function",
            "description": "<p>A detacher function which removes all the listeners when called.</p>"
          }
        },
        {
          "name": "addElementListener",
          "access": "private",
          "description": "<p>Used internally to add a single event handler to an element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to add the handler to.</p>"
            },
            {
              "name": "eventName",
              "type": "String",
              "description": "<p>The name of the event to add a handler for.</p>"
            },
            {
              "name": "handlerSpec",
              "type": [
                "function",
                "String",
                "Object"
              ],
              "description": "<p>Either a function to call, or\nthe name of a function to call in the <code>thisObj</code>, or an object containing\nthe handler local options.</p>"
            },
            {
              "name": "handlerSpec.handler",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>Either a function to call, or\nthe name of a function to call in the <code>thisObj</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "handlerSpec.element",
              "type": "HTMLElement",
              "description": "<p>Optionally a local element for the listener.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "handlerSpec.thisObj",
              "type": "Object",
              "description": "<p>A local <code>this</code> specification for the handler.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "defaults",
              "type": "Object",
              "description": "<p>The <code>options</code> parameter from the <a href=\"#Core/helper/EventHelper#function-addListener-static\">addListener</a> call.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "createContextMenuWrapper",
          "access": "private",
          "description": "<p>Private function to wrap the passed function. The returned wrapper function to be used as\na <code>touchstart</code> handler which will call the passed function passing a fabricated <code>contextmenu</code>\nevent if there's no <code>touchend</code> or <code>touchmove</code> after a default of 400ms.</p>",
          "parameters": [
            {
              "name": "handler",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The handler to call.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The owner of the function.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "createDblClickWrapper",
          "access": "private",
          "description": "<p>Private function to wrap the passed function. The returned wrapper function to be used as\na <code>touchend</code> handler which will call the passed function passing a fabricated <code>dblclick</code>\nevent if there is a <code>click</code> within 300ms.</p>",
          "parameters": [
            {
              "name": "handler",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The handler to call.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The owner of the function.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "toSpecialKey",
          "access": "internal",
          "description": "<p>Handles various inputs to figure out the name of the special key of the event.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>EventHelper.toSpecialKey('ctrl') // 'ctrlKey'\nEventHelper.toSpecialKey(true)   // 'ctrlKey', default\nEventHelper.toSpecialKey(false)  // false\nEventHelper.toSpecialKey('foo')  // false\n</code></pre>",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "<p>User input value to process.</p>"
            },
            {
              "name": "defaultValue",
              "type": "String",
              "description": "<p>Default value to fall back to if <code>true</code> value is passed.</p>",
              "default": "ctrlKey"
            }
          ],
          "scope": "static",
          "returns": {
            "type": [
              "Boolean",
              "String"
            ],
            "description": "<p>Returns <code>false</code> if provided value cannot be converted to special key and special key\nname otherwise.</p>"
          }
        }
      ]
    },
    {
      "name": "FunctionHelper",
      "modulePath": "Core/helper/FunctionHelper",
      "classDescription": "<p>Provides functionality for working with functions</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "FunctionHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "after",
          "description": "<p>Inserts a function after the specified <code>method</code> is called on an <code>object</code>. To remove this hook, invoke the\nfunction returned by this method.</p>\n<pre class=\"prettyprint source\"><code> class A {\n     method() {\n         console.log('method');\n     }\n }\n\n let instance = new A();\n\n let detach = FunctionHelper.after(instance, 'method', () => { console.log('after') });\n\n instance.method();\n > method\n > after\n\n detach();\n instance.method();\n > method\n</code></pre>\n<p>The value returned by the original method is passed as the first argument to <code>fn</code> followed by all the arguments\npassed by the caller.</p>\n<p>If <code>fn</code> returns a value (not <code>undefined</code>), that value is returned from the method call instead of the value\nreturned by the original method.</p>\n<pre class=\"prettyprint source\"><code> class A {\n     method(x) {\n         console.log('method', x);\n         return x * 2\n     }\n }\n\n let instance = new A();\n\n let detach = FunctionHelper.after(instance, 'method', (ret, x) => {\n     console.log('after', ret, x);\n     return x / 2;\n });\n\n console.log(instance.method(50));\n > method 50\n > after 100 50\n > 25\n\n detach();\n console.log(instance.method(50));\n > method 50\n > 100\n</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>The object to hook.</p>"
            },
            {
              "name": "method",
              "type": "String",
              "description": "<p>The name of the method on <code>object</code> to hook.</p>"
            },
            {
              "name": "fn",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>The function or method name (on <code>thisObj</code>) to call after <code>method</code>.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> pointer value for calling <code>fn</code>.</p>",
              "optional": true
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Additional options</p>",
              "optional": true
            },
            {
              "name": "options.return",
              "type": "Boolean",
              "description": "<p>Specify <code>false</code> to not include the return value of the hooked method as\nthe first argument to <code>fn</code>.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function",
            "description": "<p>The function to call to remove the hook.</p>"
          }
        },
        {
          "name": "before",
          "description": "<p>Inserts a function before the specified <code>method</code> is called on an <code>object</code>. To remove this hook, invoke the\nfunction returned by this method.</p>\n<pre class=\"prettyprint source\"><code> class A {\n     method() {\n         console.log('method');\n     }\n }\n\n let instance = new A();\n\n let detach = FunctionHelper.before(instance, 'method', () => { console.log('before') });\n\n instance.method();\n > before\n > method\n\n detach();\n instance.method();\n > method\n</code></pre>\n<p>If <code>fn</code> returns <code>false</code>, the original method is not invoked and <code>false</code> is returned to the caller.</p>\n<pre class=\"prettyprint source\"><code> class A {\n     method(x) {\n         console.log('method', x);\n         return x * 2;\n     }\n }\n\n let instance = new A();\n\n let detach = FunctionHelper.before(instance, 'method', x => {\n     console.log('before', x);\n     return false;\n });\n\n console.log(instance.method(50));\n > before 50\n > false\n\n detach();\n console.log(instance.method(50));\n > method 50\n > 100\n</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>The object to hook.</p>"
            },
            {
              "name": "method",
              "type": "String",
              "description": "<p>The name of the method on <code>object</code> to hook.</p>"
            },
            {
              "name": "fn",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>The function or method name (on <code>thisObj</code>) to call before <code>method</code>.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> pointer value for calling <code>fn</code>.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function",
            "description": "<p>The function to call to remove the hook.</p>"
          }
        },
        {
          "name": "createInterceptor",
          "description": "<p>Returns a function which calls the passed <code>interceptor</code> function first, and the passed <code>original</code> after\nas long as the <code>interceptor</code> does not return <code>false</code>.</p>",
          "parameters": [
            {
              "name": "original",
              "type": "function",
              "description": "<p>The function to call second.</p>"
            },
            {
              "name": "interceptor",
              "type": "function",
              "description": "<p>The function to call first.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference when the functions are called.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "description": "<p>The return value from the <code>original</code> function <strong>if it was called</strong>, else <code>false</code>.</p>"
          }
        },
        {
          "name": "createSequence",
          "description": "<p>Returns a function which calls the passed <code>sequence</code> function after calling\nthe passed <code>original</code>.</p>",
          "parameters": [
            {
              "name": "original",
              "type": "function",
              "description": "<p>The function to call first.</p>"
            },
            {
              "name": "sequence",
              "type": "function",
              "description": "<p>The function to call second.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference when the functions are called.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "description": "<p>The value returned from the sequence if it returned a value, else the return\nvalue from the original function.</p>"
          }
        },
        {
          "name": "createThrottled",
          "description": "<p>Create a &quot;debounced&quot; function which will call on the &quot;leading edge&quot; of a timer period.\nWhen first invoked will call immediately, but invocations after that inside its buffer\nperiod will be rejected, and <em>one</em> invocation will be made after the buffer period has expired.</p>\n<p>This is useful for responding immediately to a first mousemove, but from then on, only\ncalling the action function on a regular timer while the mouse continues to move.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "buffer",
              "type": "Number",
              "description": "<p>The milliseconds to wait after each execution before another execution takes place.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function.</p>",
              "optional": true
            },
            {
              "name": "extraArgs",
              "type": "Array",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true
            },
            {
              "name": "alt",
              "type": "function",
              "description": "<p>A function to call when the invocation is rejected due to buffer time not having expired.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "createBuffered",
          "description": "<p>Create a &quot;debounced&quot; function which will call on the &quot;trailing edge&quot; of a timer period.\nWhen first invoked will wait until the buffer period has expired to call the function, and\nmore calls within that time will restart the timer.</p>\n<p>This is useful for responding to keystrokes, but deferring action until the user pauses typing.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "buffer",
              "type": "Number",
              "description": "<p>The milliseconds to wait after each execution before another execution takes place.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function.</p>",
              "optional": true
            },
            {
              "name": "args",
              "type": "Array",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "noThrow",
          "access": "internal",
          "description": "<p>Protects the specified <code>method</code> on a given <code>object</code> such that calling it will not throw exceptions.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>The object whose method is to be protected.</p>"
            },
            {
              "name": "method",
              "type": "String",
              "description": "<p>The name of the method to protect.</p>"
            },
            {
              "name": "handler",
              "type": "function",
              "description": "<p>An optional function to call for any thrown exceptions.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "IdHelper",
      "modulePath": "Core/helper/IdHelper",
      "classDescription": "<p>IdHelper provides unique ID generation.</p>\n<p>This class is not intended for application use, it is used internally by the Bryntum infrastructure.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "IdHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "generateId",
          "description": "<p>Generate a new id, using IdHelpers internal counter and a prefix</p>",
          "parameters": [
            {
              "name": "prefix",
              "type": "String",
              "description": "<p>Id prefix</p>",
              "default": "generatedId"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>Generated id</p>"
          }
        }
      ]
    },
    {
      "name": "ObjectHelper",
      "modulePath": "Core/helper/ObjectHelper",
      "classDescription": "<p>Helper for Object manipulation.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ObjectHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "assign",
          "description": "<p>Copies all enumerable properties from the supplied source objects to <code>dest</code>. Unlike <code>Object.assign</code>, this copy\nalso includes inherited properties.</p>",
          "parameters": [
            {
              "name": "dest",
              "type": "Object",
              "description": "<p>The destination object.</p>"
            },
            {
              "name": "sources",
              "type": "Object",
              "description": "<p>The source objects.</p>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The <code>dest</code> object.</p>"
          }
        },
        {
          "name": "assignIf",
          "description": "<p>Copies all enumerable properties from the supplied source objects to <code>dest</code>, only including properties that does\nnot already exist on <code>dest</code>. Unlike <code>Object.assign</code>, this copy also includes inherited properties.</p>",
          "parameters": [
            {
              "name": "dest",
              "type": "Object",
              "description": "<p>The destination object.</p>"
            },
            {
              "name": "sources",
              "type": "Object",
              "description": "<p>The source objects.</p>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The <code>dest</code> object.</p>"
          }
        },
        {
          "name": "clone",
          "description": "<p>Creates a deep copy of the <code>value</code>. Simple objects (<a href=\"#Core/helper/ObjectHelper#function-isObject-static\">isObject</a>, arrays and <code>Date</code> objects\nare cloned. The enumerable properties of simple objects and the elements of arrays are cloned recursively.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to clone.</p>"
            },
            {
              "name": "handler",
              "type": "function",
              "description": "<p>An optional function to call for values of types other than simple object, array or\n<code>Date</code>. This function should return the clone of the <code>value</code> passed to it. It is only called for truthy values\nwhose <code>typeof</code> equals <code>'object'</code>.</p>",
              "optional": true
            },
            {
              "name": "handler.value",
              "type": "*",
              "description": "<p>The value to clone.</p>",
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "*",
            "description": "<p>The cloned value.</p>"
          }
        },
        {
          "name": "createTruthyKeys",
          "description": "<p>Converts a list of names (either a space separated string or an array), into an object with those properties\nassigned truthy values. The converse of <a href=\"#Core/helper/ObjectHelper#function-getTruthyKeys-static\">getTruthyKeys</a>.</p>",
          "parameters": [
            {
              "name": "source",
              "type": [
                "String",
                "Array.<String>"
              ],
              "description": "<p>The list of names to convert to object form.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "getTruthyKeys",
          "description": "<p>Gathers the names of properties which have truthy values into an array.</p>\n<p>This is useful when gathering CSS class names for complex element production.\nInstead of appending to an array or string which may already contain the\nname, and instead of contending with space separation and concatenation\nand conditional execution, just set the properties of an object:</p>\n<pre><code>cls = {\n    [this.selectedCls] : this.isSelected(thing),\n    [this.dirtyCls] : this.isDirty(thing)\n};\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Object",
              "description": "<p>Source of keys to gather into an array.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array.<String>",
            "description": "<p>The keys which had a truthy value.</p>"
          }
        },
        {
          "name": "getTruthyValues",
          "description": "<p>Gathers the values of properties which are truthy into an array.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Object",
              "description": "<p>Source of values to gather into an array.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array.<String>",
            "description": "<p>The truthy values from the passed object.</p>"
          }
        },
        {
          "name": "isEmpty",
          "description": "<p>Tests whether a passed object has any enumerable properties.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the passed object has no enumerable properties.</p>"
          }
        },
        {
          "name": "isObject",
          "description": "<p>Returns <code>true</code> if the <code>value</code> is a simple <code>Object</code>.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the <code>value</code> is a simple <code>Object</code>.</p>"
          }
        },
        {
          "name": "merge",
          "description": "<p>Copies all enumerable properties from the supplied source objects to <code>dest</code>, recursing when the properties of\nboth the source and <code>dest</code> are objects.</p>\n<pre class=\"prettyprint source\"><code> const o = {\n     a : 1,\n     b : {\n         c : 2\n     }\n };\n const o2 = {\n     b : {\n         d : 3\n     }\n }\n\n console.log(merge(o, o2));\n\n > { a : 1, b : { c : 2, d : 3 } }\n</code></pre>",
          "parameters": [
            {
              "name": "dest",
              "type": "Object",
              "description": "<p>The destination object.</p>"
            },
            {
              "name": "sources",
              "type": "Object",
              "description": "<p>The source objects.</p>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The <code>dest</code> object.</p>"
          }
        },
        {
          "name": "typeOf",
          "description": "<p>Returns the specific type of the given <code>value</code>. Unlike the <code>typeof</code> operator, this function returns the text\nfrom the <code>Object.prototype.toString</code> result allowing <code>Date</code>, <code>Array</code>, <code>RegExp</code>, and others to be differentiated.</p>\n<pre class=\"prettyprint source\"><code> console.log(typeOf(null));\n > null\n\n console.log(typeOf({}));\n > object\n\n console.log(typeOf([]));\n > array\n\n console.log(typeOf(new Date()));\n > date\n\n console.log(typeOf(NaN));\n > nan\n\n console.log(typeOf(/a/));\n > regexp\n</code></pre>",
          "parameters": [
            {
              "name": "value",
              "type": "*"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "getPath",
          "description": "<p>Returns value for a given path in the object</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object to check path on</p>"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot-separated path, e.g. 'object.childObject.someKey'</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "*",
            "description": "<p>Value associated with passed key</p>"
          }
        },
        {
          "name": "setPath",
          "description": "<p>Sets value for a given path in the object</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Target object</p>"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot-separated path, e.g. 'object.childObject.someKey'</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value for a given path</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Returns passed object</p>"
          }
        },
        {
          "name": "transformArrayToNamedObject",
          "description": "<p>Creates a new object where key is a property in array item (<code>ref</code> by default) or index in the array and value is array item.</p>\n<p>From:</p>\n<pre class=\"prettyprint source\"><code>[\n    {\n         text : 'foo',\n         ref : 'fooItem'\n    },\n    {\n         text : 'bar'\n    }\n]\n</code></pre>\n<p>To:</p>\n<pre class=\"prettyprint source\"><code>{\n    fooItem : {\n        text : 'foo',\n        ref  : 'fooItem'\n    },\n    1 : {\n        text : 'bar'\n    }\n}\n</code></pre>",
          "parameters": [
            {
              "name": "arrayOfItems",
              "type": "Array.<Object>",
              "description": "<p>Array to transform.</p>"
            },
            {
              "name": "prop",
              "type": "String",
              "description": "<p>Property to read the key from. <code>ref</code> by default.</p>",
              "default": "ref",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>namedItems</p>"
          }
        },
        {
          "name": "transformNamedObjectToArray",
          "description": "<p>Creates a new array from object values and saves key in a property (<code>ref</code> by default) of each item.</p>\n<p>From:</p>\n<pre class=\"prettyprint source\"><code>{\n    fooItem : {\n        text : 'foo'\n    },\n    1 : {\n        text : 'bar'\n    },\n    barItem : false // will be ignored\n}\n</code></pre>\n<p>To:</p>\n<pre class=\"prettyprint source\"><code>[\n    {\n         text : 'foo',\n         ref : 'fooItem'\n    },\n    {\n         text : 'bar',\n         ref : 1\n    }\n]\n</code></pre>",
          "parameters": [
            {
              "name": "namedItems",
              "type": "Object",
              "description": "<p>Object to transform.</p>"
            },
            {
              "name": "prop",
              "type": "String",
              "description": "<p>Property to save the key to. <code>ref</code> by default.</p>",
              "default": "ref",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>arrayOfItems</p>"
          }
        },
        {
          "name": "isEqual",
          "description": "<p>Checks if two values are equal. Basically === but special handling of dates.</p>",
          "parameters": [
            {
              "name": "a",
              "type": "*",
              "description": "<p>First value</p>"
            },
            {
              "name": "b",
              "type": "*",
              "description": "<p>Second value</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "*",
            "description": "<p>true if values are equal, otherwise false</p>"
          }
        },
        {
          "name": "isDeeplyEqual",
          "description": "<p>Checks if two objects are deeply equal</p>",
          "parameters": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Additional comparison options</p>",
              "optional": true
            },
            {
              "name": "options.ignore",
              "type": "Object",
              "description": "<p>Map of property names to ignore when comparing</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.shouldEvaluate",
              "type": "function",
              "description": "<p>Function used to evaluate if a property should be compared or not.\nReturn false to prevent comparison</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.evaluate",
              "type": "function",
              "description": "<p>Function used to evaluate equality. Return <code>true</code>/<code>false</code> as evaluation\nresult or anything else to let <code>isEqual</code> handle the comparison</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isPartial",
          "description": "<p>Checks if value B is partially equal to value A.</p>",
          "parameters": [
            {
              "name": "a",
              "type": "*",
              "description": "<p>First value</p>"
            },
            {
              "name": "b",
              "type": "*",
              "description": "<p>Second value</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if values are partially equal, false otherwise</p>"
          }
        },
        {
          "name": "isLessThan",
          "description": "<p>Checks if value a is smaller than value b.</p>",
          "parameters": [
            {
              "name": "a",
              "type": "*",
              "description": "<p>First value</p>"
            },
            {
              "name": "b",
              "type": "*",
              "description": "<p>Second value</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if a &lt; b</p>"
          }
        },
        {
          "name": "isMoreThan",
          "description": "<p>Checks if value a is bigger than value b.</p>",
          "parameters": [
            {
              "name": "a",
              "type": "*",
              "description": "<p>First value</p>"
            },
            {
              "name": "b",
              "type": "*",
              "description": "<p>Second value</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if a &gt; b</p>"
          }
        },
        {
          "name": "fork",
          "access": "private",
          "description": "<p>Used by the Base class to make deep copies of defaultConfig blocks</p>",
          "scope": "static"
        },
        {
          "name": "copyProperties",
          "description": "<p>Copies the named properties from the <code>source</code> parameter into the <code>dest</code> parameter.</p>",
          "parameters": [
            {
              "name": "dest",
              "type": "Object",
              "description": "<p>The destination into which properties are copied.</p>"
            },
            {
              "name": "source",
              "type": "Object",
              "description": "<p>The source from which properties are copied.</p>"
            },
            {
              "name": "props",
              "type": "Array.<String>",
              "description": "<p>The list of property names.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "description": "<p>The <code>dest</code> object.</p>"
          }
        },
        {
          "name": "copyPropertiesIf",
          "description": "<p>Copies the named properties from the <code>source</code> parameter into the <code>dest</code> parameter\nunless the property already exists in the <code>dest</code>.</p>",
          "parameters": [
            {
              "name": "dest",
              "type": "Object",
              "description": "<p>The destination into which properties are copied.</p>"
            },
            {
              "name": "source",
              "type": "Object",
              "description": "<p>The source from which properties are copied.</p>"
            },
            {
              "name": "props",
              "type": "Array.<String>",
              "description": "<p>The list of property names.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "description": "<p>The <code>dest</code> object.</p>"
          }
        },
        {
          "name": "entries",
          "access": "internal",
          "description": "<p>Returns an array containing the keys and values of all enumerable properties from every prototype level for the\nobject. If <code>object</code> is <code>null</code>, this method returns an empty array.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object from which to retrieve entries.</p>"
            },
            {
              "name": "ignore",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p>Optional object of names to ignore or a function accepting the name and value\nwhich returns <code>true</code> to ignore the item.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array"
          }
        },
        {
          "name": "fromEntries",
          "access": "internal",
          "description": "<p>Populates an <code>object</code> with the provided <code>entries</code>.</p>",
          "parameters": [
            {
              "name": "entries",
              "type": "Array",
              "description": "<p>The key/value pairs (2-element arrays).</p>"
            },
            {
              "name": "object",
              "type": "Object",
              "description": "<p>The object onto which to add <code>entries</code>.</p>",
              "default": "{}",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The passed <code>object</code> (by default, a newly created object).</p>"
          }
        },
        {
          "name": "keys",
          "description": "<p>Returns an array containing all enumerable property names from every prototype level for the object. If <code>object</code>\nis <code>null</code>, this method returns an empty array.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object from which to retrieve property names.</p>"
            },
            {
              "name": "ignore",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p>Optional object of names to ignore or a function accepting the name and value\nwhich returns <code>true</code> to ignore the item.</p>",
              "optional": true
            },
            {
              "name": "mapper",
              "type": "function",
              "description": "<p>Optional function to call for each non-ignored item. If provided, the result of this\nfunction is stored in the returned array. It is called with the array element as the first parameter, and the\nindex in the result array as the second argument (0 for the first, non-ignored element, 1 for the second and so\non).</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array.<String>"
          }
        },
        {
          "name": "values",
          "access": "internal",
          "description": "<p>Returns an array containing the values of all enumerable properties from every prototype level for the object.\nIf <code>object</code> is <code>null</code>, this method returns an empty array.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object from which to retrieve values.</p>"
            },
            {
              "name": "ignore",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p>Optional object of names to ignore or a function accepting the name and value\nwhich returns <code>true</code> to ignore the item.</p>",
              "optional": true
            },
            {
              "name": "mapper",
              "type": "function",
              "description": "<p>Optional function to call for each non-ignored item. If provided, the result of this\nfunction is stored in the returned array. It is called with the array element as the first parameter, and the\nindex in the result array as the second argument (0 for the first, non-ignored element, 1 for the second and so\non).</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array"
          }
        },
        {
          "name": "pathExists",
          "description": "<p>Checks if a given path exists in an object</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object to check path on</p>"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot-separated path, e.g. 'object.childObject.someKey'</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if path exists or <code>false</code> if it does not</p>"
          }
        },
        {
          "name": "pathifyKeys",
          "access": "internal",
          "description": "<p>Creates a simple single level key-value object from complex deep object.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object to extract path and values from</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Key-value object where key is a path to the corresponding value</p>"
          }
        },
        {
          "name": "deletePath",
          "access": "internal",
          "description": "<p>Removes value for a given path in the object. Doesn't cleanup empty objects.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot-separated path, e.g. <code>obj.child.someKey</code></p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "hookProperty",
          "access": "internal",
          "description": "<p>Intercepts access to a <code>property</code> of a given <code>object</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>     ObjectHelper.hookProperty(object, 'prop', class {\n         get value() {\n             return super.value;\n         }\n         set value(v) {\n             super.value = v;\n         }\n     });\n</code></pre>\n<p>The use of <code>super</code> allows the hook's getter and setter to invoke the object's existing get/set.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "property",
              "type": "String"
            },
            {
              "name": "hook",
              "type": "function",
              "description": "<p>A <code>class</code> defining a <code>value</code> property getter and/or setter.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function",
            "description": "<p>A function that removes the hook when called.</p>"
          }
        },
        {
          "name": "getPropertyDescriptor",
          "description": "<p>Finds a property descriptor for the passed object from all inheritance levels.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>The Object whose property to find.</p>"
            },
            {
              "name": "propertyName",
              "type": "String",
              "description": "<p>The name of the property to find.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>An ECMA property descriptor is the property was found, otherwise <code>null</code></p>"
          }
        },
        {
          "name": "hasOwn",
          "access": "internal",
          "description": "<p>Return <code>true</code> if the given <code>object</code> defines the specified <code>property</code> as defined by\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\">Object.hasOwnProperty</a>.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "property",
              "type": "String"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "cleanupProperties",
          "description": "<p>Changes the passed object and removes all null and undefined properties from it</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Target object</p>"
            },
            {
              "name": "keepNull",
              "type": "Boolean",
              "description": "<p>Pass true to only remove undefined properties</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Passed object</p>"
          }
        },
        {
          "name": "removeAllProperties",
          "description": "<p>Changes the passed object and removes all properties from it.\nUsed while mutating when need to keep reference to the object but replace its properties.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Target object</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Passed object</p>"
          }
        },
        {
          "name": "assertType",
          "description": "<p>Checks that the supplied value is of the specified type.Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "type",
              "type": "String",
              "description": "<p>Expected type</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            },
            {
              "name": "allowNull",
              "type": "Boolean",
              "description": "<p>Accept <code>null</code> without throwing</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertObject",
          "description": "<p>Checks that the supplied value is a plain object. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertInstance",
          "description": "<p>Checks that the supplied value is an instance of a Bryntum class. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertClass",
          "description": "<p>Checks that the supplied value is a Bryntum class. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertFunction",
          "description": "<p>Checks that the supplied value is a function. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertNumber",
          "description": "<p>Checks that the supplied value is a number. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertBoolean",
          "description": "<p>Checks that the supplied value is a boolean. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertString",
          "description": "<p>Checks that the supplied value is a string. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "assertArray",
          "description": "<p>Checks that the supplied value is an array. Throws if it is not</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>Value to check type of</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the value, used in error message</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "toFixed",
          "description": "<p>Number.toFixed(), with polyfill for browsers that needs it</p>",
          "parameters": [
            {
              "name": "number",
              "type": "Number"
            },
            {
              "name": "digits",
              "type": "Number"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>A fixed point string representation of the passed number.</p>"
          }
        },
        {
          "name": "roundTo",
          "description": "<p>Round the passed number to closest passed step value.</p>",
          "parameters": [
            {
              "name": "number",
              "type": "Number",
              "description": "<p>The number to round.</p>"
            },
            {
              "name": "step",
              "type": "Number",
              "description": "<p>The step value to round to.</p>",
              "default": 1,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>The number rounded to the closest step.</p>"
          }
        },
        {
          "name": "round",
          "description": "<p>Round the passed number to the passed number of decimals.</p>",
          "parameters": [
            {
              "name": "number",
              "type": "Number",
              "description": "<p>The number to round.</p>"
            },
            {
              "name": "digits",
              "type": "Number",
              "description": "<p>The number of decimal places to round to.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number",
            "description": "<p>The number rounded to the passed number of decimal places.</p>"
          }
        },
        {
          "name": "getMapPath",
          "description": "<p>Returns a non-null entry from a Map for a given key path. This enables a specified defaultValue to be added &quot;just\nin time&quot; which is returned if the key is not already present.</p>",
          "parameters": [
            {
              "name": "map",
              "type": "Map",
              "description": "<p>The Map to find the key in (and potentially add to).</p>"
            },
            {
              "name": "path",
              "type": [
                "String",
                "Number",
                "Array.<String>",
                "Array.<Number>"
              ],
              "description": "<p>Dot-separated path, e.g. 'firstChild.childObject.someKey',\nor the key path as an array, e.g. ['firstChild', 'childObject', 'someKey'].</p>"
            },
            {
              "name": "defaultValue",
              "type": "Object",
              "description": "<p>Optionally the value to insert if the key is not found.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "ResizeHelper",
      "modulePath": "Core/helper/ResizeHelper",
      "classDescription": "<p>Handles resizing of elements using handles. Handles can be actual elements or virtual handles specified as a border\narea on elements left and right edges.</p>\n<pre class=\"prettyprint source\"><code>// enable resizing all elements with class 'resizable'\nlet resizer = new ResizeHelper({\n  targetSelector: '.resizable'\n});\n</code></pre>",
      "mixes": [
        "Core/mixin/Events"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResizeHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "configs": [
        {
          "name": "resizingCls",
          "description": "<p>CSS class added when resizing</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-resizing"
        },
        {
          "name": "dragThreshold",
          "description": "<p>The amount of pixels to move mouse before it counts as a drag operation</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "handleSize",
          "description": "<p>Resizing handle size</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10
        },
        {
          "name": "dynamicHandleSize",
          "description": "<p>Automatically shrink virtual handles when available space &lt; handleSize. The virtual handles will\ndecrease towards width/height 1, reserving space between opposite handles to for example leave room for\ndragging. To configure reserved space, see <a href=\"#Core/helper/ResizeHelper#config-reservedSpace\">reservedSpace</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "reservedSpace",
          "description": "<p>Room in px to leave unoccupied by handles when shrinking them dynamically (see\n<a href=\"#Core/helper/ResizeHelper#config-dynamicHandleSize\">dynamicHandleSize</a>).</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10
        },
        {
          "name": "touchHandleSize",
          "description": "<p>Resizing handle size on touch devices</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 30
        },
        {
          "name": "minWidth",
          "description": "<p>Minimum width when resizing</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        },
        {
          "name": "maxWidth",
          "description": "<p>Max width when resizing.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "minHeight",
          "description": "<p>Minimum height when resizing</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        },
        {
          "name": "maxHeight",
          "description": "<p>Max height when resizing</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "scroller",
          "description": "<p>Optional scroller used to read scroll position. If unspecified, the outer element will be used.</p>",
          "type": "Core.helper.util.Scroller",
          "scope": "inner"
        },
        {
          "name": "allowResize",
          "description": "<p>Assign a function to determine if a hovered element can be resized or not</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "dragWithin",
          "description": "<p>Outer element that limits where element can be dragged</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "isElementResizable",
          "description": "<p>A function that determines if dragging an element is allowed. Gets called with the element as argument,\nreturn true to allow dragging or false to prevent.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "targetSelector",
          "description": "<p>A CSS selector used to determine if resizing an element is allowed.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "leftHandle",
          "description": "<p>Use left handle when resizing. Only applies when <code>direction</code> is 'horizontal'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "rightHandle",
          "description": "<p>Use right handle when resizing. Only applies when <code>direction</code> is 'horizontal'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "topHandle",
          "description": "<p>Use top handle when resizing. Only applies when <code>direction</code> is 'vertical'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "bottomHandle",
          "description": "<p>Use bottom handle when resizing. Only applies when <code>direction</code> is 'vertical'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "handleSelector",
          "description": "<p>A CSS selector used to determine where handles should be &quot;displayed&quot; when resizing. Defaults to\ntargetSelector if unspecified</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "handleContainerSelector",
          "description": "<p>A CSS selector used to determine which inner element contains handles.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "invalidCls",
          "description": "<p>CSS class added when the resize state is invalid</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-resize-invalid"
        },
        {
          "name": "direction",
          "description": "<p>Direction to resize in, either 'horizontal' or 'vertical'</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "horizontal"
        }
      ],
      "events": [
        {
          "name": "resizing",
          "description": "<p>Fired while dragging</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.ResizeHelper"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Resize context</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "resizeStart",
          "description": "<p>Fired when dragging starts.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.ResizeHelper"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Resize context</p>"
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ],
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "resize",
          "description": "<p>Fires after resize, and allows for asynchronous finalization by setting 'async' to <code>true</code> on the context object.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.ResizeHelper"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Context about the resize operation. Set 'async' to <code>true</code> to indicate asynchronous validation of the resize flow (for showing a confirmation dialog etc)</p>"
            }
          ]
        },
        {
          "name": "cancel",
          "description": "<p>Fires when a resize is canceled (width is unchanged)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.ResizeHelper"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Resize context</p>"
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ],
              "description": "<p>Browser event</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "initResize",
          "access": "private",
          "description": "<p>Initializes resizing</p>",
          "scope": "instance"
        },
        {
          "name": "initListeners",
          "access": "private",
          "description": "<p>Initialize listeners</p>",
          "scope": "instance"
        },
        {
          "name": "onMouseDown",
          "access": "private",
          "description": "<p>Grab draggable element on mouse down.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "PointerEvent"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onMouseMove",
          "access": "private",
          "description": "<p>Move grabbed element with mouse.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "PointerEvent"
              ]
            }
          ],
          "scope": "instance",
          "fires": [
            "event:resizestart"
          ]
        },
        {
          "name": "onMouseUp",
          "access": "private",
          "description": "<p>Drop on mouse up (if dropped on valid target).</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "PointerEvent"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onDocumentClick",
          "access": "private",
          "description": "<p>This is a capture listener, only added during drag, which prevents a click gesture\npropagating from the terminating mouseup gesture</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onKeyDown",
          "access": "private",
          "description": "<p>Cancel on ESC key</p>",
          "parameters": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "update",
          "access": "private",
          "description": "<p>Updates resize, called when an element is grabbed and mouse moves</p>",
          "scope": "instance",
          "fires": [
            "event:resizing"
          ]
        },
        {
          "name": "abort",
          "description": "<p>Abort dragging</p>",
          "scope": "instance"
        },
        {
          "name": "grabResizeHandle",
          "access": "private",
          "description": "<p>Starts resizing, updates ResizeHelper#context with relevant info.</p>",
          "parameters": [
            {
              "name": "isTouch",
              "type": "Boolean"
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>True if handled, false if not</p>"
          }
        },
        {
          "name": "checkResizeHandles",
          "access": "private",
          "description": "<p>Check if mouse is over a resize handle (virtual). If so, highlight.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateResize",
          "access": "private",
          "description": "<p>Updates size of target (on mouse move).</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "PointerEvent"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "finishResize",
          "access": "private",
          "description": "<p>Finalizes resize, fires drop.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "PointerEvent"
              ]
            }
          ],
          "scope": "instance",
          "fires": [
            "event:resize",
            "event:cancel"
          ]
        },
        {
          "name": "abortResize",
          "access": "private",
          "description": "<p>Abort resizing</p>",
          "scope": "instance",
          "fires": [
            "event:cancel"
          ]
        },
        {
          "name": "highlightHandle",
          "access": "private",
          "description": "<p>Highlights handles (applies css that changes cursor).</p>",
          "scope": "instance"
        },
        {
          "name": "unHighlightHandle",
          "access": "private",
          "description": "<p>Unhighlight handles (removes css).</p>",
          "scope": "instance"
        },
        {
          "name": "overLeftHandle",
          "access": "private",
          "description": "<p>Check if over left handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over left handle, otherwise false</p>"
          }
        },
        {
          "name": "overRightHandle",
          "access": "private",
          "description": "<p>Check if over right handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over left handle, otherwise false</p>"
          }
        },
        {
          "name": "overTopHandle",
          "access": "private",
          "description": "<p>Check if over top handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over top handle, otherwise false</p>"
          }
        },
        {
          "name": "overBottomHandle",
          "access": "private",
          "description": "<p>Check if over bottom handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over bottom handle, otherwise false</p>"
          }
        }
      ]
    },
    {
      "name": "ResizeMonitor",
      "modulePath": "Core/helper/ResizeMonitor",
      "classDescription": "<p>Allows size monitoring of elements (or optionally a Window instance).</p>\n<pre class=\"prettyprint source\"><code>ResizeMonitor.addResizeListener(\n  myElement,\n  element => {\n     console.log(element, ' changed size');\n  }\n);\n</code></pre>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResizeMonitor.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "addResizeListener",
          "description": "<p>Adds a resize listener to the passed element which is called when the element\nis resized by layout.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to listen for resizing.</p>"
            },
            {
              "name": "handler",
              "type": "function",
              "description": "<p>The handling function. Will be passed the element.</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "removeResizeListener",
          "description": "<p>Removes a resize listener from the passed element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to listen for resizing.</p>"
            },
            {
              "name": "handler",
              "type": "function",
              "description": "<p>The handling function to remove.</p>"
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "StringHelper",
      "modulePath": "Core/helper/StringHelper",
      "classDescription": "<p>Helper for string manipulation.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "StringHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "capitalize",
          "description": "<p>Capitalizes the first letter of a string, &quot;myString&quot; -&gt; &quot;MyString&quot;.</p>",
          "parameters": [
            {
              "name": "string",
              "type": "String",
              "description": "<p>The string to capitalize</p>"
            }
          ],
          "scope": "static",
          "category": "String formatting",
          "returns": {
            "type": "String",
            "description": "<p>The capitalized string or the value of <code>string</code> if falsy.</p>"
          }
        },
        {
          "name": "uncapitalize",
          "description": "<p>Makes the first letter of a string lowercase, &quot;MyString&quot; -&gt; &quot;myString&quot;.</p>",
          "parameters": [
            {
              "name": "string",
              "type": "String",
              "description": "<p>The string to un-capitalize.</p>"
            }
          ],
          "scope": "static",
          "category": "String formatting",
          "returns": {
            "type": "String",
            "description": "<p>The un-capitalized string or the value of <code>string</code> if falsy.</p>"
          }
        },
        {
          "name": "hyphenate",
          "access": "internal",
          "description": "<p>Converts the passed camelCased string to a hyphen-separated string. eg &quot;minWidth&quot; -&gt; &quot;min-width&quot;</p>",
          "parameters": [
            {
              "name": "string",
              "type": "String",
              "description": "<p>The string to convert.</p>"
            }
          ],
          "scope": "static",
          "category": "String formatting",
          "returns": {
            "type": "String",
            "description": "<p>The string with adjoining lower and upper case letters\nseparated by hyphens and converted to lower case.</p>"
          }
        },
        {
          "name": "separate",
          "access": "internal",
          "description": "<p>Converts the passed camelCased string to a capitalized, space-separated string. eg &quot;startDate&quot; -&gt; &quot;Start date&quot;.</p>",
          "parameters": [
            {
              "name": "string",
              "type": "String",
              "description": "<p>The string to convert.</p>"
            }
          ],
          "scope": "static",
          "category": "String formatting",
          "returns": {
            "type": "String",
            "description": "<p>The string with spaces separating words.</p>"
          }
        },
        {
          "name": "createId",
          "access": "internal",
          "description": "<p>Creates an alphanumeric identifier from any passed string. Encodes spaces and non-alpha characters.</p>",
          "parameters": [
            {
              "name": "inString",
              "type": "String",
              "description": "<p>The string from which to strip non-identifier characters.</p>"
            }
          ],
          "scope": "static",
          "category": "Misc",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "decodeHtml",
          "description": "<p>This method decodes HTML entities and returns the original HTML.</p>\n<p>See also <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a>.</p>",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "HTML",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "encodeHtml",
          "description": "<p>This method encodes HTML entities and returns a string that can be placed in the document and produce the\noriginal text rather than be interpreted as HTML. Using this method with user-entered values prevents those\nvalues from executing as HTML (i.e., a cross-site scripting or &quot;XSS&quot; security issue).</p>\n<p>See also <a href=\"#Core/helper/StringHelper#function-decodeHtml-static\">decodeHtml</a>.</p>",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "HTML",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "encodeHtmlBR",
          "access": "internal",
          "description": "<p>This method is similar to <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> except that <code>\\n</code> and <code>\\r</code> characters in the\ngiven <code>str</code> are replaced by <code>&lt;br&gt;</code> tags <em>after</em> first being encoded by <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a>.</p>",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "HTML",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "isHtml",
          "access": "internal",
          "description": "<p>Returns <code>true</code> if the provided <code>text</code> contains special HTML characters.</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "scope": "static",
          "category": "HTML",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "initHtmlEntities",
          "access": "private",
          "description": "<p>Initializes HTML entities used by <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> and <a href=\"#Core/helper/StringHelper#function-decodeHtml-static\">decodeHtml</a>.</p>",
          "parameters": [
            {
              "name": "mappings",
              "type": "Object",
              "description": "<p>An object whose keys are characters that should be encoded and values are the HTML\nentity for the character.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "safeJsonParse",
          "description": "<p>Parses JSON inside a try-catch block. Returns null if the string could not be parsed.</p>",
          "parameters": [
            {
              "name": "string",
              "type": "String",
              "description": "<p>String to parse</p>"
            }
          ],
          "scope": "static",
          "category": "JSON",
          "returns": {
            "type": "Object",
            "description": "<p>Resulting object or null if parse failed</p>"
          }
        },
        {
          "name": "safeJsonStringify",
          "description": "<p>Stringifies an object inside a try-catch block. Returns null if an exception is encountered.</p>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify on MDN</a>\nfor more information on the arguments.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>The object to stringify</p>"
            },
            {
              "name": "replacer",
              "type": [
                "function",
                "Array.<String>",
                "Array.<Number>"
              ],
              "description": "<p>A function or array of string/number used to determine properties\nto include in the JSON string</p>",
              "optional": true
            },
            {
              "name": "space",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>Number of spaces to indent or string used as whitespace</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "JSON",
          "returns": {
            "type": "Object",
            "description": "<p>Resulting object or null if stringify failed</p>"
          }
        },
        {
          "name": "joinPaths",
          "access": "internal",
          "description": "<p>Joins all given paths together using the separator as a delimiter and normalizes the resulting path.</p>",
          "parameters": [
            {
              "name": "paths",
              "type": "Array",
              "description": "<p>array of paths to join</p>"
            },
            {
              "name": "pathSeparator",
              "type": "String",
              "description": "<p>[] path separator. Default value is '/'</p>",
              "default": "/"
            }
          ],
          "scope": "static",
          "category": "Misc",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "split",
          "access": "internal",
          "description": "<p>Returns the provided string split on whitespace. If the string is empty or consists of only whitespace, the\nreturned array will be empty. If <code>str</code> is not a string, it is simply returned. This allows <code>null</code> or already\nsplit strings (arrays) to be passed through.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code> console.log(StringHelper.split(' abc def xyz   '));\n > ['abc', 'def', 'xyz']\n console.log(StringHelper.split(''));\n > []\n</code></pre>\n<p>Compare to the standard <code>split()</code> method:</p>\n<pre class=\"prettyprint source\"><code> console.log(' abc def xyz   '.split(/\\s+/));\n > ['', 'abc', 'def', 'xyz', '']\n console.log(''.split(/\\s+/));\n > ['']\n</code></pre>",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            },
            {
              "name": "delimiter",
              "type": [
                "String",
                "RegExp"
              ]
            }
          ],
          "scope": "static",
          "category": "Misc",
          "returns": {
            "type": "Array.<String>"
          }
        },
        {
          "name": "xss",
          "description": "<p>This is a tagged template function that performs HTML encoding on replacement values to avoid XSS (Cross-Site\nScripting) attacks.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer(eventRecord) {\n     return StringHelper.xss`&lt;span class=&quot;${eventRecord.attrib}&quot;>${eventRecord.name}&lt;/span>`;\n }\n</code></pre>\n<p>See <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a>.</p>",
          "scope": "static"
        },
        {
          "name": "xssBR",
          "access": "internal",
          "description": "<p>This is a tagged template function that performs HTML encoding on replacement values to avoid XSS (Cross-Site\nScripting) attacks. Unlike <a href=\"#Core/helper/StringHelper#function-xss-static\">xss</a>, this method converts <code>\\n</code> and\n<code>\\r</code> characters into <code>&lt;br&gt;</code> tags.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer(eventRecord) {\n     return StringHelper.xssBR`&lt;span class=&quot;${eventRecord.attrib}&quot;>${eventRecord.name}&lt;/span>`;\n }\n</code></pre>\n<p>See <a href=\"#Core/helper/StringHelper#function-encodeHtmlBR-static\">encodeHtmlBR</a>.</p>",
          "scope": "static"
        },
        {
          "name": "toJavaScriptValue",
          "access": "internal",
          "description": "<p>Converts a value to a JavaScript string (not JSON).</p>\n<p>For example a date to <code>&quot;new Date(y, m, d)&quot;</code>, an array to <code>&quot;[...]&quot;</code> etc.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "*"
            },
            {
              "name": "options",
              "type": "Object",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "toJavaScriptString",
          "access": "internal",
          "description": "<p>Converts an object into a JavaScript string (not JSON).</p>\n<p>For example <code>{ a: 1, b: [2, 3] }</code> -&gt; <code>&quot;'{ a: 1, b: [2, 3] }'&quot;</code></p>",
          "parameters": [
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "options",
              "type": "Object",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        }
      ]
    },
    {
      "name": "TemplateHelper",
      "modulePath": "Core/helper/TemplateHelper",
      "classDescription": "<p>Helper for template strings, use as tag function</p>",
      "access": "internal",
      "examples": [
        "TemplateHelper.tpl`...`"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TemplateHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "tpl",
          "access": "private",
          "description": "<p>Tag function for template literals that does some basic cleanup</p>",
          "scope": "static"
        },
        {
          "name": "docsTpl",
          "access": "private",
          "description": "<p>Tag function for template literals that does some basic cleanup. Version for docs that do not remove blank space,\nto keep code snippets formatting intact.</p>",
          "scope": "static"
        }
      ]
    },
    {
      "name": "VersionHelper",
      "modulePath": "Core/helper/VersionHelper",
      "classDescription": "<p>Helper for version handling</p>",
      "access": "private",
      "examples": [
        "VersionHelper.setVersion('grid', '1.5');\n\nif (VersionHelper.getVersion('grid').isNewerThan('1.0')) {\n  ...\n}"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "VersionHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "setVersion",
          "access": "private",
          "description": "<p>Set version for specified product</p>",
          "parameters": [
            {
              "name": "product",
              "type": "String"
            },
            {
              "name": "version",
              "type": "String"
            }
          ],
          "scope": "static"
        },
        {
          "name": "getVersion",
          "access": "private",
          "description": "<p>Get (previously set) version for specified product</p>",
          "parameters": [
            {
              "name": "product",
              "type": "String"
            }
          ],
          "scope": "static"
        },
        {
          "name": "checkVersion",
          "access": "internal",
          "description": "<p>Checks the passed product against the passed version using the passed test.</p>",
          "parameters": [
            {
              "name": "product",
              "type": "String",
              "description": "<p>The name of the product to test the version of</p>"
            },
            {
              "name": "version",
              "type": "String",
              "description": "<p>The version to test against</p>"
            },
            {
              "name": "test",
              "type": "String",
              "description": "<p>The test operator, <code>&lt;=</code>, <code>&lt;</code>, <code>=</code>, <code>&gt;</code> or <code>&gt;=</code>.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the test passes.</p>"
          }
        },
        {
          "name": "deprecate",
          "access": "internal",
          "description": "<p>Based on a comparison of current product version and the passed version this method either outputs a console.warn\nor throws an error.</p>",
          "parameters": [
            {
              "name": "product",
              "type": "String",
              "description": "<p>The name of the product</p>"
            },
            {
              "name": "invalidAsOfVersion",
              "type": "String",
              "description": "<p>The version where the offending code is invalid (when any compatibility layer\nis actually removed).</p>"
            },
            {
              "name": "message",
              "type": "String",
              "description": "<p>Required! A helpful warning message to show to the developer using a deprecated API.</p>"
            }
          ],
          "scope": "static"
        }
      ],
      "properties": [
        {
          "name": "isTestEnv",
          "access": "internal",
          "description": "<p>Returns truthy value if environment is in testing mode.</p>",
          "scope": "static",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "WalkHelper",
      "modulePath": "Core/helper/WalkHelper",
      "classDescription": "<p>Tree walking helper</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "WalkHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "preWalk",
          "description": "<p>Pre-walks any hierarchical data structure</p>",
          "parameters": [
            {
              "name": "data",
              "description": "<p>Walking starting point</p>"
            },
            {
              "name": "childrenFn",
              "type": "function",
              "description": "<p>Function to return <code>data</code> children entries in an array\nor null if no children exists for the entry</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function to call on each entry</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "preWalkWithParent",
          "description": "<p>Pre-walks any hierarchical data structure, passing along a link to the parent node</p>",
          "parameters": [
            {
              "name": "data",
              "description": "<p>Walking starting point</p>"
            },
            {
              "name": "childrenFn",
              "type": "function",
              "description": "<p>Function to return <code>data</code> children entries in an array\nor null if no children exists for the entry</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function to call on each entry, called with <code>parent</code> and <code>node</code></p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "preWalkUnordered",
          "description": "<p>Pre-walk unordered.</p>\n<p>Like <a href=\"#Core/helper/WalkHelper#function-preWalk-static\">preWalk</a> but doesn't reverses children before walk,\nthus children will be walked last child first - first child last</p>",
          "parameters": [
            {
              "name": "data",
              "description": "<p>Walking starting point</p>"
            },
            {
              "name": "childrenFn",
              "type": "function",
              "description": "<p>Function to return <code>data</code> children entries in an array\nor null if no children exists for the entry</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function to call on each entry</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "postWalk",
          "description": "<p>Post-walks any hierarchical data structure</p>",
          "parameters": [
            {
              "name": "data",
              "description": "<p>Walking starting point</p>"
            },
            {
              "name": "childrenFn",
              "type": "function",
              "description": "<p>Function to return <code>data</code> children entries in an array\nor null if no children exists for the entry</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function to call on each entry</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "prePostWalk",
          "description": "<p>Pre/Post-walks any hierarchical data structure calling inFn each node when it walks in,\nand outFn when it walks out.</p>",
          "parameters": [
            {
              "name": "data",
              "description": "<p>Walking starting point</p>"
            },
            {
              "name": "childrenFn",
              "type": "function",
              "description": "<p>Function to return <code>data</code> children entries in an array\nor null if no children exists for the entry</p>"
            },
            {
              "name": "inFn",
              "type": "function",
              "description": "<p>Function to call on each entry upon enter</p>"
            },
            {
              "name": "outFn",
              "type": "function",
              "description": "<p>Function to call on each entry upon exit</p>"
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "WidgetHelper",
      "modulePath": "Core/helper/WidgetHelper",
      "classDescription": "<p>Helper for creating widgets.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "WidgetHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "getById",
          "description": "<p>Returns the widget with the specified id.</p>",
          "parameters": [
            {
              "name": "Id",
              "type": "String",
              "description": "<p>of widget to find</p>"
            }
          ],
          "scope": "static",
          "category": "Querying",
          "returns": {
            "type": "Core.widget.Widget",
            "description": "<p>The widget if any</p>"
          }
        },
        {
          "name": "fromElement",
          "description": "<p>Returns the Widget which owns the passed element (or event).</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The element or event to start from</p>"
            },
            {
              "name": "type",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The type of Widget to scan upwards for. The lowercase\nclass name. Or a filter function which returns <code>true</code> for the required Widget.</p>",
              "optional": true
            },
            {
              "name": "limit",
              "type": [
                "HTMLElement",
                "Number"
              ],
              "description": "<p>The number of components to traverse upwards to find a\nmatch of the type parameter, or the element to stop at.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Querying",
          "returns": {
            "type": "Core.widget.Widget",
            "description": "<p>The found Widget or null.</p>"
          }
        },
        {
          "name": "createWidget",
          "description": "<p>Create a widget.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Widget config</p>"
            }
          ],
          "examples": [
            "WidgetHelper.createWidget({\n  type: 'button',\n  icon: 'user',\n  text: 'Edit user'\n});"
          ],
          "scope": "static",
          "category": "Widgets",
          "returns": {
            "type": "Object",
            "description": "<p>The widget</p>"
          }
        },
        {
          "name": "append",
          "description": "<p>Appends a widget (array of widgets) to the DOM tree. If config is empty, widgets are appended to the DOM. To\nappend widget to certain position you can pass HTMLElement or its id as config, or as a config, that will be\napplied to all passed widgets.</p>\n<p>Usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Will append button as last item to element with id 'container'\nlet [button] = WidgetHelper.append({ type : 'button' }, 'container');\n\n// Same as above, but will add two buttons\nlet [button1, button2] = WidgetHelper.append([\n    { type : 'button' },\n    { type : 'button' }\n    ], { appendTo : 'container' });\n\n// Will append two buttons before element with id 'someElement'. Order will be preserved and all widgets will have\n// additional class 'my-cls'\nlet [button1, button2] = WidgetHelper.append([\n    { type : 'button' },\n    { type : 'button' }\n    ], {\n        insertBefore : 'someElement',\n        cls          : 'my-cls'\n    });\n</code></pre>",
          "parameters": [
            {
              "name": "widget",
              "type": [
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Widget config or array of such configs</p>"
            },
            {
              "name": "config",
              "type": [
                "HTMLElement",
                "String",
                "Object"
              ],
              "description": "<p>Element (or element id) to which to append the widget or config to apply to all passed widgets</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Widgets",
          "returns": {
            "type": "Array.<Core.widget.Widget>",
            "description": "<p>Array or widgets</p>"
          }
        },
        {
          "name": "openPopup",
          "description": "<p>Shows a popup (~tooltip) containing widgets connected to specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to connect popup to</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Config object, or string to use as html in popup</p>"
            }
          ],
          "examples": [
            "WidgetHelper.openPopup(element, {\n  position: 'bottom center',\n  items: [\n     { widgetConfig }\n  ]\n});"
          ],
          "scope": "static",
          "category": "Popups",
          "returns": {
            "type": [
              "*",
              "Object"
            ]
          }
        },
        {
          "name": "showContextMenu",
          "description": "<p>Shows a context menu connected to the specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Array.<Number>"
              ],
              "description": "<p>Element (or a coordinate) to show the context menu for</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Context menu config, see example</p>"
            }
          ],
          "examples": [
            "WidgetHelper.showContextMenu(element, {\n  items: [\n     { id: 'addItem', icon: 'add', text: 'Add' },\n     ...\n  ],\n  onItem: item => alert('Clicked ' + item.text)\n});"
          ],
          "scope": "static",
          "category": "Popups",
          "returns": {
            "type": [
              "*",
              "Object"
            ]
          }
        },
        {
          "name": "attachTooltip",
          "description": "<p>Attached a tooltip to the specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to attach tooltip for</p>"
            },
            {
              "name": "configOrText",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Tooltip config or tooltip string, see example and source</p>"
            }
          ],
          "examples": [
            "WidgetHelper.attachTooltip(element, {\n  text: 'Useful information goes here'\n});"
          ],
          "scope": "static",
          "category": "Popups",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "hasTooltipAttached",
          "description": "<p>Checks if element has tooltip attached</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to check</p>"
            }
          ],
          "scope": "static",
          "category": "Popups",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "destroyTooltipAttached",
          "description": "<p>Destroys any tooltip attached to an element, removes it from the DOM and unregisters any tip related listeners\non the element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to remove tooltip from</p>"
            }
          ],
          "scope": "static",
          "category": "Popups"
        },
        {
          "name": "mask",
          "description": "<p>Masks the specified element, showing a message in the mask.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to mask</p>"
            },
            {
              "name": "msg",
              "type": "String",
              "description": "<p>Message to show in the mask</p>",
              "default": "Loading"
            }
          ],
          "scope": "static",
          "category": "Mask"
        },
        {
          "name": "unmask",
          "description": "<p>Unmask the specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "static",
          "category": "Mask"
        },
        {
          "name": "toast",
          "description": "<p>Show a toast</p>",
          "parameters": [
            {
              "name": "msg",
              "type": "String",
              "description": "<p>message to show in the toast</p>"
            }
          ],
          "scope": "static",
          "category": "Mask"
        }
      ]
    },
    {
      "name": "XMLHelper",
      "modulePath": "Core/helper/XMLHelper",
      "classDescription": "<p>Helper for XML manipulation.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "XMLHelper.js",
      "path": "/Calendar/lib/Core/helper",
      "functions": [
        {
          "name": "convertFromObject",
          "description": "<p>Convert an javascript object to a XML string.</p>\n<p>From:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    name : 'Task 1',\n    data : [\n        {\n            text : 'foo 1',\n            ref  : 'fooItem 1'\n        },\n        {\n            text : 'foo 2',\n            ref  : 'fooItem 2'\n        }\n    ]\n}\n</code></pre>\n<p>To:</p>\n<pre class=\"prettyprint source lang-xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?>\n&lt;root>\n    &lt;name>Task 1&lt;/name>\n    &lt;data>\n        &lt;element>\n            &lt;text>foo 1&lt;/text>\n            &lt;ref>fooItem 1&lt;/ref>\n        &lt;/element>\n        &lt;element>\n            &lt;text>foo 2&lt;/text>\n            &lt;ref>fooItem 2&lt;/ref>\n        &lt;/element>\n    &lt;/data>\n&lt;/root>\n</code></pre>",
          "parameters": [
            {
              "name": "obj",
              "type": "Object",
              "description": "<p>Object to convert.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Convert options.</p>",
              "optional": true
            },
            {
              "name": "options.rootName",
              "type": "String",
              "description": "<p>Root name for the XML. <code>root</code> by default.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.elementName",
              "type": "String",
              "description": "<p>Element name for each node of the XML. <code>element</code> by default.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.xmlns",
              "type": "String",
              "description": "<p>Add value for xmlns property for the root tag of the XML.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.includeHeader",
              "type": "Boolean",
              "description": "<p><code>false</code> to not include the header <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code> on top of the XML.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.rootElementForArray",
              "type": "Boolean",
              "description": "<p><code>false</code> to not include a root element for array of items. e.g. for the above example:</p>\n<pre class=\"prettyprint source lang-xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?>\n&lt;root>\n    &lt;name>Task 1&lt;/name>\n    &lt;element>\n        &lt;text>foo 1&lt;/text>\n        &lt;ref>fooItem 1&lt;/ref>\n    &lt;/element>\n    &lt;element>\n        &lt;text>foo 2&lt;/text>\n        &lt;ref>fooItem 2&lt;/ref>\n    &lt;/element>\n&lt;/root>\n</code></pre>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>the XML</p>"
          }
        }
      ]
    },
    {
      "name": "DragHelperContainer",
      "modulePath": "Core/helper/mixin/DragHelperContainer",
      "description": "<p>Mixin for DragHelper that handles dragging elements between containers (or rearranging within)</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragHelperContainer.js",
      "path": "/Calendar/lib/Core/helper/mixin",
      "functions": [
        {
          "name": "initContainerDrag",
          "access": "private",
          "description": "<p>Initialize container drag mode.</p>",
          "scope": "instance"
        },
        {
          "name": "grabContainerDrag",
          "access": "private",
          "description": "<p>Grab an element which can be dragged between containers.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "startContainerDrag",
          "access": "private",
          "description": "<p>Starts dragging, called when mouse moves first time after grabbing</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateContainerDrag",
          "access": "private",
          "description": "<p>Move the placeholder element into its new position on valid drag.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "finishContainerDrag",
          "access": "private",
          "description": "<p>Finalize drag, fire drop.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:drop"
          ]
        },
        {
          "name": "abortContainerDrag",
          "access": "private",
          "description": "<p>Aborts a drag operation.</p>",
          "parameters": [
            {
              "name": "invalid",
              "type": "Boolean",
              "default": false,
              "optional": true
            },
            {
              "name": "event",
              "type": "Object",
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateContainerProxy",
          "access": "private",
          "description": "<p>Updates the drag proxy position.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "moveNextTo",
          "access": "private",
          "description": "<p>Positions element being dragged in relation to targetElement.</p>",
          "parameters": [
            {
              "name": "targetElement"
            },
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "revertPosition",
          "access": "private",
          "description": "<p>Moves element being dragged back to its original position.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DragHelperTranslate",
      "modulePath": "Core/helper/mixin/DragHelperTranslate",
      "description": "<p>Mixin for DragHelper that handles repositioning (translating) an element within its container</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragHelperTranslate.js",
      "path": "/Calendar/lib/Core/helper/mixin",
      "functions": [
        {
          "name": "initTranslateDrag",
          "access": "private",
          "description": "<p>Initialize translation drag mode.</p>",
          "scope": "instance"
        },
        {
          "name": "grabTranslateDrag",
          "access": "private",
          "description": "<p>Grab an element which can be moved using translation.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "startTranslateDrag",
          "access": "private",
          "description": "<p>Start translating, called on first mouse move after dragging</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "applyConstraints",
          "access": "private",
          "description": "<p>Limit translation to outer bounds and specified constraints</p>",
          "parameters": [
            {
              "name": "element"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "updateTranslateProxy",
          "access": "private",
          "description": "<p>Update elements translation on mouse move.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent"
            },
            {
              "name": "scrollManagerConfig",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "finishTranslateDrag",
          "access": "private",
          "description": "<p>Finalize drag, fire drop.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:drop"
          ],
          "async": true
        },
        {
          "name": "abortTranslateDrag",
          "access": "private",
          "description": "<p>Abort translation</p>",
          "parameters": [
            {
              "name": "invalid",
              "default": false
            }
          ],
          "scope": "instance",
          "fires": [
            "event:abort"
          ],
          "async": true
        }
      ]
    },
    {
      "name": "DataGenerator",
      "modulePath": "Core/helper/util/DataGenerator",
      "classDescription": "<p>Generates a pseudo random data for Grid records.\nUsed to provide data in examples.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DataGenerator.js",
      "path": "/Calendar/lib/Core/helper/util",
      "functions": [
        {
          "name": "generateData",
          "description": "<p>Generates a pseudo random data for Grid records.</p>",
          "parameters": [
            {
              "name": "count",
              "type": "Number",
              "description": "<p>number of records</p>"
            },
            {
              "name": "randomHeight",
              "type": "Boolean",
              "description": "<p>generate random row height</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "initialId",
              "type": "Number",
              "description": "<p>row initial id. Set -1 to disable Id generation. Defaults to 1.</p>",
              "default": 1,
              "optional": true
            },
            {
              "name": "reset",
              "type": "Boolean",
              "description": "<p>set true to ensure we get the same dataset on consecutive calls. Defaults to true</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>generated rows array</p>"
          }
        },
        {
          "name": "generateRow",
          "description": "<p>Generates a pseudo random data for Grid row.</p>",
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>generated row</p>"
          }
        }
      ]
    },
    {
      "name": "DomClassList",
      "modulePath": "Core/helper/util/DomClassList",
      "classDescription": "<p>This class encapsulates a list of CSS classes which can be set as the <code>className</code>\non an <code>HTMLElement</code>.</p>\n<p>Properties names set on this class equate to <em>adding</em> a class if the property's value\nis <em>truthy</em>, or removing a class if the value is <em>falsy</em>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const myClassList = new DomClassList('b-test-button');\n\nmyClassList.add('test-class');\nmyClassList.important = 1;\n\nmyHtmlElement.className = myClassList; // Sets it to &quot;b-test-button test-class important&quot;\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DomClassList.js",
      "path": "/Calendar/lib/Core/helper/util",
      "functions": [
        {
          "name": "normalize",
          "access": "internal",
          "description": "<p>Converts a class name of any understood type to a desired form.</p>",
          "parameters": [
            {
              "name": "cls",
              "type": [
                "String",
                "Array.<String>",
                "Object",
                "Set",
                "Map",
                "HTMLElement"
              ]
            },
            {
              "name": "as",
              "type": "String",
              "description": "<p>Pass <code>'object'</code> to return an object with the class names as its keys (all keys will have a\nvalue of <code>true</code>), or pass <code>'array'</code> to return an array of class names, or pass <code>'string'</code> (the default) to\nreturn a space-separated string of class names.</p>",
              "default": "string"
            }
          ],
          "scope": "static",
          "returns": {
            "type": [
              "String",
              "Array.<String>",
              "Object"
            ]
          }
        },
        {
          "name": "constructor",
          "description": "<p>Initializes a new DomClassList.</p>",
          "parameters": [
            {
              "name": "classes",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The CSS classes as strings or objects.</p>"
            }
          ],
          "scope": "inner"
        },
        {
          "name": "clear",
          "description": "<p>Clears all class names from this DomClassList instance.</p>",
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.DomClassList",
            "description": "<p>this DomClassList.</p>"
          }
        },
        {
          "name": "set",
          "description": "<p>Sets this DomClassList instance to represent the classes passed as either strings or objects.</p>",
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.DomClassList",
            "description": "<p>this DomClassList.</p>"
          }
        },
        {
          "name": "clone",
          "description": "<p>Returns a clone of this DomClassList with all the same keys set.</p>",
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.DomClassList",
            "description": "<p>A clone of this DomClassList.</p>"
          }
        },
        {
          "name": "contains",
          "description": "<p>Returns a Boolean value, indicating whether this ClassList has the specified CSS class name.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>CSS class name to check</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if this ClassList contains the passed CSS class name, false otherwise</p>"
          }
        },
        {
          "name": "trim",
          "description": "<p>Analogous to string.trim, returns the string value of this <code>DomClassList</code> with no trailing space.</p>",
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>A concatenated string value of all the class names in this <code>DomClassList</code>\nseparated by spaces.</p>"
          }
        },
        {
          "name": "isEqual",
          "description": "<p>Compares this DomClassList to another DomClassList (or class name string of space separated classes).\nIf the same class names (regardless of order) are present, the two are considered equal.</p>\n<p>So <code>new DomClassList('foo bar bletch').isEqual('bletch bar foo')</code> would return <code>true</code></p>",
          "parameters": [
            {
              "name": "other",
              "type": [
                "Core.helper.util.DomClassList",
                "String"
              ],
              "description": "<p>The <code>DomClassList</code> or string of classes to compare to.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the two contain the same class names.</p>"
          }
        },
        {
          "name": "assign",
          "description": "<p>Adds/removes class names according to the passed object's properties.</p>\n<p>Properties with truthy values are added.\nProperties with falsy values are removed.</p>",
          "parameters": [
            {
              "name": "classList",
              "type": "Object",
              "description": "<p>Object containing properties to set/clear</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "assignTo",
          "description": "<p>Adds/removes this objects classes to the passed <code>classList</code> or element.</p>\n<p>Properties with truthy values are added.\nProperties with falsy values are removed.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "DOMTokenList"
              ],
              "description": "<p>The element or the element's <code>classList</code> to be updated.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "add",
          "description": "<p>Add CSS class(es)</p>\n<pre class=\"prettyprint source\"><code>myClassList.add('bold', 'small');\n```javascript</code></pre>",
          "parameters": [
            {
              "name": "classes",
              "type": [
                "String",
                "Array.<String>",
                "Object"
              ],
              "description": "<p>CSS classes to add</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "remove",
          "description": "<p>Remove CSS class(es)</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myClassList.remove('bold', 'small');\n</code></pre>",
          "parameters": [
            {
              "name": "classes",
              "type": "String",
              "description": "<p>CSS classes to remove</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "toggle",
          "description": "<p>Toggles the passed CSS class name.</p>\n<p>If the <code>force</code> parameter is passed, <code>true</code> means add the class name, <code>false</code> means remove it.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myClassList.toggle('bold', isImportant);\n</code></pre>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>CSS class to toggle</p>"
            },
            {
              "name": "force",
              "type": "Boolean",
              "description": "<p><code>true</code> to add the class, <code>false</code> to remove it.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the operation changed the value.</p>"
          }
        },
        {
          "name": "split",
          "description": "<p>Analogous to the <code>String#split</code> method, but with no delimiter\nparameter. This method returns an array containing the individual\nCSS class names set.</p>",
          "scope": "instance",
          "returns": {
            "type": "Array.<String>",
            "description": "<p>The individual class names in this <code>DomClassList</code></p>"
          }
        }
      ],
      "properties": [
        {
          "name": "value",
          "description": "<p>Get/set string value.\nClass names separated with space.</p>",
          "type": "String",
          "scope": "instance"
        },
        {
          "name": "values",
          "description": "<p>Returns string values as an array.</p>",
          "type": "Array.<String>",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "Fullscreen",
      "modulePath": "Core/helper/util/Fullscreen",
      "classDescription": "<p>Encapsulates the functionality related to switching cross-browser to full screen view and back.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Fullscreen.js",
      "path": "/Calendar/lib/Core/helper/util",
      "properties": [
        {
          "name": "enabled",
          "description": "<p>True if the fullscreen mode is supported and enabled, false otherwise</p>",
          "type": "Boolean",
          "scope": "static"
        },
        {
          "name": "isFullscreen",
          "description": "<p>True if fullscreen mode is currently active, false otherwise</p>",
          "type": "Boolean",
          "scope": "static"
        }
      ],
      "functions": [
        {
          "name": "request",
          "description": "<p>Request entering the fullscreen mode.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to be displayed fullscreen</p>"
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which is resolved with a value of undefined when the transition to full screen is complete.</p>"
          }
        },
        {
          "name": "exit",
          "description": "<p>Exit the previously entered fullscreen mode.</p>",
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which is resolved once the user agent has finished exiting full-screen mode</p>"
          }
        },
        {
          "name": "onFullscreenChange",
          "description": "<p>Installs the passed listener to fullscreenchange event</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The listener to install</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "unFullscreenChange",
          "description": "<p>Uninstalls the passed listener from fullscreenchange event</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "Navigator",
      "modulePath": "Core/helper/util/Navigator",
      "classDescription": "<p>A helper class which allows keyboard navigation within the <a href=\"#Core/helper/util/Navigator#config-target\">target</a> element.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Navigator.js",
      "path": "/Calendar/lib/Core/helper/util",
      "configs": [
        {
          "name": "ownerCmp",
          "description": "<p>The owning Widget which is using this Navigator.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner"
        },
        {
          "name": "target",
          "description": "<p>The encapsulating element in which navigation takes place.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "keyEventTarget",
          "description": "<p>The element which provides key events for navigation. Optional. Defaults to the <a href=\"#Core/helper/util/Navigator#config-target\">target</a> element.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "processEvent",
          "description": "<p>An optional key event processor which may preprocess the key event. Returning <code>null</code> prevents processing of the event.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "itemSelector",
          "description": "<p>A query selector which identifies descendant elements within the <a href=\"#Core/helper/util/Navigator#config-target\">target</a> which are navigable.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "activeItem",
          "description": "<p>The currently focused element within the <a href=\"#Core/helper/util/Navigator#config-target\">target</a>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "focusCls",
          "description": "<p>A CSS class name to add to focused elements.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-active"
        },
        {
          "name": "keys",
          "description": "<p>An object containing key definitions keys by the key name eg:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> keys : {\n     &quot;CTRL+Space&quot; : 'onCtrlSpace',\n     Enter        : 'onEnterKey'\n }\n</code></pre>\n<p>The <a href=\"#Core/helper/util/Navigator#config-ownerCmp\">ownerCmp</a> is used as the <code>this</code> reference and to resolve string method names.</p>\n<p>Modified key names must be created prepending one or more <code>'CTRL+'</code>, <code>'SHIFT+'</code>, <code>'ALT+'</code>\nin that order, for example <code>&quot;CTRL+SHIFT+Enter&quot; : 'showMenu'</code></p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "allowCtrlKey",
          "description": "<p>Configure as <code>true</code> to also navigate when the <code>CTRL</code> modifier key is used along with\nnavigation keys.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "allowShiftKey",
          "description": "<p>Configure as <code>true</code> to also navigate when the <code>SHIFT</code> modifier key is used along with\nnavigation keys.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "disabled",
          "description": "<p>Configure as, or set to <code>true</code> to disable the processing of keys.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "navigate",
          "description": "<p>Fired when a user gesture causes the active item to change <em>or become <code>null</code></em>.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event which instigated navigation. May be a click or key or focus move event.</p>"
            },
            {
              "name": "item",
              "type": "HTMLElement",
              "description": "<p>The newly active item, or <code>null</code> if focus moved out.</p>"
            },
            {
              "name": "oldItem",
              "type": "HTMLElement",
              "description": "<p>The previously active item, or <code>null</code> if focus is moving in.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getAdjacent",
          "description": "<p>Returns the next or previous navigable element starting from the passed <code>from</code> element,\nnavigating in the passed direction.</p>",
          "parameters": [
            {
              "name": "from",
              "type": "HTMLElement",
              "description": "<p>The start point. Defaults to the current <a href=\"#Core/helper/util/Navigator#config-activeItem\">activeItem</a></p>",
              "optional": true
            },
            {
              "name": "direction",
              "type": "Number",
              "description": "<p>The direction. -1 for backwards, else forwards.</p>",
              "default": 1,
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "NumberFormat",
      "modulePath": "Core/helper/util/NumberFormat",
      "classDescription": "<p>This class is an enhancement to <code>Intl.NumberFormat</code> that has a more flexible\nconstructor as well as other features such as <code>parse()</code>.</p>\n<p>All constructor forms take a single argument. The most common is to pass a format\n<a href=\"#Core/helper/util/NumberFormat#config-template\">template</a> string:</p>\n<pre class=\"prettyprint source\"><code> const formatter = new NumberFormat('9,999.99##');\n</code></pre>\n<p>The above is equivalent to:</p>\n<pre class=\"prettyprint source\"><code> const formatter = new Intl.NumberFormat({\n     useGrouping           : true,\n     minimumFractionDigits : 2,\n     maximumFractionDigits : 4\n });\n</code></pre>\n<p>The <code>formatter</code> created above is used as follows (in the <code>en-US</code> locale):</p>\n<pre class=\"prettyprint source\"><code> console.log(formatter.format(12345.54321));\n console.log(formatter.format(42));\n\n // 12,345.5432\n // 42.00\n</code></pre>\n<p>When a format template is insufficient, a config object can be provided, similar to\n<code>Intl.NumberFormat</code>'s <code>options</code> parameter. While all options from <code>Intl.NumberFormat</code>\nare valid properties for this class's config object, additional properties are\nsupported.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code> new NumberFormat({\n     locale      : 'en-US',\n     template    : '$9,999',\n     currency    : 'USD',\n     significant : 5\n });\n</code></pre>\n<p>The <code>locale</code> option takes the place of the first positional parameter to the\n<code>Intl.NumberFormat</code> constructor. The <code>template</code> config is the same string that can be\npassed by itself.</p>\n<p>The shorthand properties <code>fraction</code>, <code>integer</code>, and <code>significant</code> set the standard\noptions <code>minimumFractionDigits</code>, <code>maximumFractionDigits</code>, <code>minimumIntegerDigits</code>,\n<code>minimumSignificantDigits</code>, and <code>maximumSignificantDigits</code>.</p>\n<p>NOTE: Instances of <code>NumberFormat</code> are immutable after construction.</p>\n<p>For details about <code>Intl.NumberFormat</code> see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\">MDN</a>.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "NumberFormat.js",
      "path": "/Calendar/lib/Core/helper/util",
      "functions": [
        {
          "name": "as",
          "description": "<p>Creates a derived <code>NumberFormat</code> from this instance, with a different <code>style</code>. This is useful for processing\ncurrency and percentage styles without the symbols being injected in the formatting.</p>",
          "parameters": [
            {
              "name": "change",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The new style (if a string) or a set of properties to update.</p>"
            },
            {
              "name": "cacheAs",
              "type": "String",
              "description": "<p>A key by which to cache this derived formatter.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.NumberFormat"
          }
        },
        {
          "name": "format",
          "description": "<p>Returns the given <code>value</code> formatted in accordance with the specified locale and\nformatting options.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Number"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "parse",
          "description": "<p>Returns a <code>Number</code> parsed from the given, formatted <code>value</code>, in accordance with the\nspecified locale and formatting options.</p>\n<p>If the <code>value</code> cannot be parsed, <code>NaN</code> is returned.</p>\n<p>Pass <code>strict</code> as <code>true</code> to require all text to convert. In essence, the default is\nin line with JavaScript's <code>parseFloat</code> while <code>strict=true</code> behaves like the <code>Number</code>\nconstructor:</p>\n<pre class=\"prettyprint source\"><code> parseFloat('1.2xx');  // = 1.2\n Number('1.2xx')       // = NaN\n</code></pre>",
          "parameters": [
            {
              "name": "value",
              "type": "String"
            },
            {
              "name": "strict",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "parseStrict",
          "description": "<p>Returns a <code>Number</code> parsed from the given, formatted <code>value</code>, in accordance with the\nspecified locale and formatting options.</p>\n<p>If the <code>value</code> cannot be parsed, <code>NaN</code> is returned.</p>\n<p>This method simply passes the <code>value</code> to <code>parse()</code> and passes <code>true</code> for the second\nargument.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "String"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "round",
          "description": "<p>Returns the given <code>Number</code> rounded in accordance with the specified locale and\nformatting options.</p>",
          "parameters": [
            {
              "name": "value",
              "type": [
                "Number",
                "String"
              ]
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "truncate",
          "description": "<p>Returns the given <code>Number</code> truncated to the <code>maximumFractionDigits</code> in accordance\nwith the specified locale and formatting options.</p>",
          "parameters": [
            {
              "name": "value",
              "type": [
                "Number",
                "String"
              ]
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "_minMax",
          "access": "private",
          "description": "<p>Expands the provided shorthand into the &quot;minimum<em>Digits&quot; and &quot;maximum</em>Digits&quot;.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "setMin",
              "type": "Boolean"
            },
            {
              "name": "setMax",
              "type": "Boolean"
            }
          ],
          "scope": "instance"
        }
      ],
      "configs": [
        {
          "name": "fraction",
          "description": "<p>Specifies the <code>minimumFractionDigits</code> and <code>minimumFractionDigits</code> in a compact\nway. If this value is a <code>Number</code>, it sets both the minimum and maximum to that\nvalue. If this value is an array, <code>[0]</code> sets the minimum and <code>[1]</code> sets the\nmaximum.</p>",
          "type": [
            "Number",
            "Array.<Number>"
          ],
          "scope": "inner"
        },
        {
          "name": "integer",
          "description": "<p>An alias for <code>minimumIntegerDigits</code>.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "significant",
          "description": "<p>Specifies the <code>minimumSignificantDigits</code> and <code>minimumSignificantDigits</code> in a compact\nformat. If this value is a <code>Number</code>, it sets only the maximum to that value. If this\nvalue is an array, <code>[0]</code> sets the minimum and <code>[1]</code> sets the maximum.</p>\n<p>If this value (or <code>minimumSignificantDigits</code> or <code>minimumSignificantDigits</code>) is set,\n<code>integer</code> (and <code>minimumIntegerDigits</code>) and <code>fraction</code> (and <code>minimumFractionDigits</code>\nand <code>minimumFractionDigits</code>) are ignored.</p>",
          "type": [
            "Number",
            "Array.<Number>"
          ],
          "scope": "inner"
        },
        {
          "name": "template",
          "description": "<p>A format template consisting of the following parts:</p>\n<pre class=\"prettyprint source\"><code> [$] [\\d+:] \\d+ [,\\d+] [.\\d* [#*] | *] [%]\n</code></pre>\n<p>If the template begins with a <code>'$'</code>, the formatter's <code>style</code> option is set to\n<code>'currency'</code>. If the template ends with <code>'%'</code>, <code>style</code> is set to <code>'percent'</code>.\nIt is invalid to include both characters. When using <code>'$'</code>, the <code>currency</code> symbol\ndefaults to what is provided by the <a href=\"#Core/localization/LocaleManager\">LocaleManager</a>.</p>\n<p>To set the <code>minimumIntegerDigits</code>, the desired minimum comes before the first\ndigits in the template and is followed by a <code>'&gt;'</code> (greater-than). For example:</p>\n<pre class=\"prettyprint source\"><code> 5>9,999.00\n</code></pre>\n<p>The above sets <code>minimumIntegerDigits</code> to 5.</p>\n<p>The <code>useGrouping</code> option is enabled if there is a <code>','</code> (comma) present and is\ndisabled otherwise.</p>\n<p>If there is a <code>'.'</code> (decimal) present, it may be followed by either of:</p>\n<ul>\n<li>Zero or more digits which may then be followed by zero or more <code>'#'</code> characters.\nThe number of digits determines the <code>minimumFractionDigits</code>, while the total\nnumber of digits and <code>'#'</code>s determines the <code>maximumFractionDigits</code>.</li>\n<li>A single <code>'*'</code> (asterisk) indicating any number of fractional digits (no minimum\nor maximum).</li>\n</ul>",
          "type": "String",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Objects",
      "modulePath": "Core/helper/util/Objects",
      "classDescription": "<p>Helper for low-level Object manipulation.</p>\n<p>While documented on <a href=\"#Core/helper/ObjectHelper\">ObjectHelper</a>, the following static methods are implemented by this class:</p>\n<ul>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-assign-static\">assign</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-assignIf-static\">assignIf</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-clone-static\">clone</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-createTruthyKeys-static\">createTruthyKeys</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-getPath-static\">getPath</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-getTruthyKeys-static\">getTruthyKeys</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-getTruthyValues-static\">getTruthyValues</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-isEmpty-static\">isEmpty</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-isObject-static\">isObject</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-merge-static\">merge</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-setPath-static\">setPath</a></code></li>\n<li><code><a href=\"#Core/helper/ObjectHelper#function-typeOf-static\">typeOf</a></code></li>\n</ul>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Objects.js",
      "path": "/Calendar/lib/Core/helper/util",
      "functions": [
        {
          "name": "getPath",
          "description": "<p>Returns value for a given path in the object</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object to check path on</p>"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot-separated path, e.g. 'object.childObject.someKey'</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "*",
            "description": "<p>Value associated with passed key</p>"
          }
        },
        {
          "name": "getPathDefault",
          "description": "<p>Returns value for a given path in the object, placing a passed default value in at the\nleaf property and filling in undefined properties all the way down.</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object to get path value for.</p>"
            },
            {
              "name": "path",
              "type": [
                "String",
                "Number",
                "Array.<String>",
                "Array.<Number>"
              ],
              "description": "<p>Dot-separated path, e.g. 'firstChild.childObject.someKey',\nor the key path as an array, e.g. ['firstChild', 'childObject', 'someKey'].</p>"
            },
            {
              "name": "defaultValue",
              "type": "*",
              "description": "<p>Optionally the value to put in as the <code>someKey</code> property.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "*",
            "description": "<p>Value at the leaf position of the path.</p>"
          }
        },
        {
          "name": "hasPath",
          "description": "<p>Determines if the specified path exists</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Object to check path on</p>"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot-separated path, e.g. 'object.childObject.someKey'</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isPromise",
          "access": "internal",
          "description": "<p>Check if passed object is a Promise or contains <code>then</code> method.\nUsed to fix problems with detecting promises in code with <code>instance of Promise</code> when\nPromise class is replaced with any other implementation like <code>ZoneAwarePromise</code> in Angular.\nRelated to these issues:\nhttps://github.com/bryntum/support/issues/791\nhttps://github.com/bryntum/support/issues/2990</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>object to check</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean",
            "description": "<p>truthy value if object is a Promise</p>"
          }
        },
        {
          "name": "mergeItems",
          "access": "internal",
          "description": "<p>Merges two &quot;items&quot; objects. An items object is a simple object whose keys act as identifiers and whose values\nare &quot;item&quot; objects. An item can be any object type. This method is used to merge such objects while maintaining\ntheir property order. Special key syntax is used to allow a source object to insert a key before or after a key\nin the <code>dest</code> object.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let dest = {\n     foo : {},\n     bar : {},\n     fiz : {}\n }\n\n console.log(Object.keys(dest));\n > [&quot;foo&quot;, &quot;bar&quot;, &quot;fiz&quot;]\n\n dest = mergeItems(dest, {\n     'zip > bar' : {}    // insert &quot;zip&quot; before &quot;bar&quot;\n     'bar &lt; zap' : {}    // insert &quot;zap&quot; after &quot;bar&quot;\n });\n\n console.log(Object.keys(dest));\n > [&quot;foo&quot;, &quot;zip&quot;, &quot;bar&quot;, &quot;zap&quot;, &quot;fiz&quot;]\n</code></pre>",
          "parameters": [
            {
              "name": "dest",
              "type": "Object",
              "description": "<p>The destination object.</p>"
            },
            {
              "name": "src",
              "type": [
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>The source object or array of source objects to merge into <code>dest</code>.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The function to use to merge items.</p>",
              "optional": true
            },
            {
              "name": "options.merge",
              "type": "function",
              "description": "<p>The function to use to merge items.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The merged object. This will be the <code>dest</code> object.</p>"
          }
        },
        {
          "name": "setPath",
          "description": "<p>Sets value for a given path in the object</p>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "<p>Target object</p>"
            },
            {
              "name": "path",
              "type": "String",
              "description": "<p>Dot-separated path, e.g. 'object.childObject.someKey'</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value for a given path</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Returns passed object</p>"
          }
        }
      ]
    },
    {
      "name": "Point",
      "modulePath": "Core/helper/util/Point",
      "classDescription": "<p>Encapsulates an X,Y coordinate point.</p>",
      "description": "<p>Constructs a Point</p>",
      "extends": [
        "Core/helper/util/Rectangle"
      ],
      "constructor": {
        "name": "constructor",
        "parameters": [
          {
            "name": "x",
            "description": "<p>The X coordinate</p>"
          },
          {
            "name": "y",
            "description": "<p>The Y coordinate</p>"
          }
        ]
      },
      "filename": "Point.js",
      "path": "/Calendar/lib/Core/helper/util",
      "functions": [
        {
          "name": "from",
          "description": "<p>Creates a new Point encapsulating the event's page position.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "scope": "static",
          "typings": false,
          "returns": {
            "type": "Core.helper.util.Point"
          }
        },
        {
          "name": "constrain",
          "description": "<p>Coerces this Point to be within the passed Rectangle. Translates it into the bounds.</p>",
          "parameters": [
            {
              "name": "into",
              "type": "Core.helper.util.Rectangle",
              "description": "<p>The Rectangle into which to coerce this Point.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Promissory",
      "modulePath": "Core/helper/util/Promissory",
      "classDescription": "<p>Encapsulates a Promise and provides <code>resolve()</code> and <code>reject()</code> methods.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code> load() {\n     this.loading = new Promissory();\n     this.store.load();\n\n     return this.loading.promise;\n }\n\n onStoreLoad(store, err) {\n     if (err) {\n         this.loading.resolve(this);\n     }\n     else {\n         this.loading.reject(err);\n     }\n }\n\n</code></pre>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Promissory.js",
      "path": "/Calendar/lib/Core/helper/util"
    },
    {
      "name": "RandomGenerator",
      "modulePath": "Core/helper/util/RandomGenerator",
      "classDescription": "<p>Generates pseudo random numbers from predefined sequence of 100 numbers</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "RandomGenerator.js",
      "path": "/Calendar/lib/Core/helper/util",
      "functions": [
        {
          "name": "nextRandom",
          "description": "<p>Returns next pseudo random integer number from sequence between 0 and max parameter value (99 is maximum value)</p>",
          "parameters": [
            {
              "name": "max",
              "type": "Number",
              "description": "<p>max value</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "reset",
          "description": "<p>Resets sequence to initial number</p>",
          "scope": "instance"
        },
        {
          "name": "fromArray",
          "description": "<p>Returns pseudo random array element</p>",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "<p>input array</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*"
          }
        }
      ]
    },
    {
      "name": "Rectangle",
      "modulePath": "Core/helper/util/Rectangle",
      "classDescription": "<p>Encapsulates rectangular areas for comparison, intersection etc.</p>\n<p>Note that the <code>right</code> and <code>bottom</code> properties are <em>exclusive</em>.</p>",
      "description": "<p>Constructs a Rectangle</p>",
      "constructor": {
        "name": "constructor",
        "parameters": [
          {
            "name": "x",
            "type": "Number",
            "description": "<p>The X coordinate</p>"
          },
          {
            "name": "y",
            "type": "Number",
            "description": "<p>The Y coordinate</p>"
          },
          {
            "name": "width",
            "type": "Number",
            "description": "<p>The width</p>"
          },
          {
            "name": "height",
            "type": "Number",
            "description": "<p>The height</p>"
          }
        ]
      },
      "filename": "Rectangle.js",
      "path": "/Calendar/lib/Core/helper/util",
      "functions": [
        {
          "name": "from",
          "description": "<p>Returns the Rectangle in document based coordinates of the passed element.</p>\n<p><em>Note:</em> If the element passed is the <code>document</code> or <code>window</code> the <code>window</code>'s\nrectangle is returned which is always at <code>[0, 0]</code> and encompasses the\nbrowser's entire document viewport.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to calculate the Rectangle for.</p>"
            },
            {
              "name": "relativeTo",
              "type": "HTMLElement",
              "description": "<p>Optionally, a parent element in whose space to calculate the Rectangle.</p>",
              "optional": true
            },
            {
              "name": "ignorePageScroll",
              "type": "Boolean",
              "description": "<p>Use browser viewport based coordinates.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the <em>relativeTo</em> parameter if passed.</p>"
          }
        },
        {
          "name": "fromScreen",
          "description": "<p>Returns the Rectangle in viewport coordinates of the passed element.</p>\n<p><em>Note:</em> If the element passed is the <code>document</code> or <code>window</code> the <code>window</code>'s rectangle is returned which is always\nat <code>[0, 0]</code> and encompasses the browser's entire document viewport.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to calculate the Rectangle for.</p>"
            },
            {
              "name": "relativeTo",
              "type": "HTMLElement",
              "description": "<p>Optionally, a parent element in whose space to calculate the Rectangle.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The Rectangle in viewport based coordinates. Relative to the <em>relativeTo</em>\nparameter if provided.</p>"
          }
        },
        {
          "name": "inner",
          "description": "<p>Returns the inner Rectangle (within border) in document based coordinates of the passed element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to calculate the Rectangle for.</p>"
            },
            {
              "name": "relativeTo",
              "type": "HTMLElement",
              "description": "<p>Optionally, a parent element in whose space to calculate the Rectangle.</p>",
              "optional": true
            },
            {
              "name": "ignorePageScroll",
              "type": "Boolean",
              "description": "<p>Use browser viewport based coordinates.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the <em>relativeTo</em> parameter if passed.</p>"
          }
        },
        {
          "name": "content",
          "description": "<p>Returns the content Rectangle (within border and padding) in document based coordinates of the passed element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to calculate the Rectangle for.</p>"
            },
            {
              "name": "relativeTo",
              "type": "HTMLElement",
              "description": "<p>Optionally, a parent element in whose space to calculate the Rectangle.</p>",
              "optional": true
            },
            {
              "name": "ignorePageScroll",
              "type": "Boolean",
              "description": "<p>Use browser viewport based coordinates.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the <em>relativeTo</em> parameter if passed.</p>"
          }
        },
        {
          "name": "client",
          "description": "<p>Returns the client Rectangle (within border and padding and scrollbars) in document based coordinates of the\npassed element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to calculate the Rectangle for.</p>"
            },
            {
              "name": "relativeTo",
              "type": "HTMLElement",
              "description": "<p>Optionally, a parent element in whose space to calculate the Rectangle.</p>",
              "optional": true
            },
            {
              "name": "ignorePageScroll",
              "type": "Boolean",
              "description": "<p>Use browser viewport based coordinates.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the <em>relativeTo</em> parameter if passed.</p>"
          }
        },
        {
          "name": "outer",
          "access": "internal",
          "description": "<p>Returns the outer Rectangle (including margin) in document based coordinates of the passed element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element to calculate the Rectangle for.</p>"
            },
            {
              "name": "relativeTo",
              "type": "HTMLElement",
              "description": "<p>Optionally, a parent element in whose space to calculate the Rectangle.</p>",
              "optional": true
            },
            {
              "name": "ignorePageScroll",
              "type": "Boolean",
              "description": "<p>Use browser viewport based coordinates.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The Rectangle in document based (or, optionally viewport based) coordinates.\nRelative to the <em>relativeTo</em> parameter if passed.</p>"
          }
        },
        {
          "name": "union",
          "description": "<p>Returns a new rectangle created as the union of all supplied rectangles.</p>",
          "parameters": [
            {
              "name": "rectangles",
              "type": "Array.<Core.helper.util.Rectangle>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.helper.util.Rectangle"
          }
        },
        {
          "name": "roundPx",
          "description": "<p>Rounds this Rectangle to the pixel resolution of the current display or to the nearest\npassed unit which defaults to the current display's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\"><code>devicePixelRatio</code></a>.</p>",
          "parameters": [
            {
              "name": "devicePixelRatio",
              "type": "Number",
              "description": "<p>device pixel ratio which defaults to <code>window.devicePixelRatio</code></p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clone",
          "description": "<p>Creates a copy of this Rectangle.</p>",
          "scope": "instance"
        },
        {
          "name": "contains",
          "description": "<p>Returns <code>true</code> if this Rectangle wholly contains the passed rectangle.</p>\n<p>Note that a <a href=\"#Core/helper/util/Point\">Point</a> may be passed.</p>",
          "parameters": [
            {
              "name": "other",
              "type": "Core.helper.util.Rectangle",
              "description": "<p>The Rectangle to test for containment within this Rectangle</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the other Rectangle is wholly contained within this Rectangle</p>"
          }
        },
        {
          "name": "intersect",
          "description": "<p>Checks if this Rectangle intersects the passed Rectangle</p>",
          "parameters": [
            {
              "name": "other",
              "type": "Core.helper.util.Rectangle",
              "description": "<p>The Rectangle to intersect with this.</p>"
            },
            {
              "name": "useBoolean",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to return a boolean value instead of constructing a new Rectangle</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "allowZeroDimensions",
              "type": "Boolean",
              "description": "<p><code>true</code> to consider zero-width or zero-hight rectangles as intersecting if coordinates indicate the intersection</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Core.helper.util.Rectangle",
              "Boolean"
            ],
            "description": "<p>Returns the intersection Rectangle or <code>false</code> if there is no intersection.</p>"
          }
        },
        {
          "name": "translate",
          "description": "<p>Translates this Rectangle by the passed vector. Size is maintained.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The X translation vector.</p>"
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The Y translation vector.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "description": "<p>This Rectangle;</p>"
          }
        },
        {
          "name": "moveTo",
          "description": "<p>Moves this Rectangle to the passed <code>x</code>, <code>y</code> position. Size is maintained.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The new X position.</p>"
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new Y position.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "description": "<p>This Rectangle;</p>"
          }
        },
        {
          "name": "getDelta",
          "access": "internal",
          "description": "<p>Returns the vector which would translate this Rectangle (or Point) to the same position as the other Rectangle (or point)</p>",
          "parameters": [
            {
              "name": "other",
              "type": [
                "Core.helper.util.Rectangle",
                "Core.helper.util.Point"
              ],
              "description": "<p>The Rectangle or Point to calculate the delta to.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array",
            "description": "<p>Returns a vector using format <code>[deltaX, deltaY]</code></p>"
          }
        },
        {
          "name": "adjust",
          "description": "<p>Modifies the bounds of this Rectangle by the specified deltas.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>How much to <em>add</em> to the x position.</p>"
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>How much to <em>add</em> to the y position.</p>"
            },
            {
              "name": "width",
              "type": "Number",
              "description": "<p>How much to add to the width.</p>"
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>How much to add to the height.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "description": "<p>This Rectangle</p>"
          }
        },
        {
          "name": "inflate",
          "access": "internal",
          "description": "<p>Modifies the bounds of this rectangle by expanding them by the specified amount in all directions.\nThe parameters are read the same way as CSS margin values.</p>\n<ul>\n<li>If one value is passed, all edges are inflated by that value.</li>\n<li>If two values are passed they are top/bottom inflation and left/right inflation.</li>\n<li>If four values are passed, that's top, right, bottom, left.</li>\n</ul>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>How much to inflate, or the top value if more than one values passed.</p>"
            },
            {
              "name": "right",
              "type": "Number",
              "description": "<p>How much to inflate the right side, or both left and right is only two values passed.</p>"
            },
            {
              "name": "bottom",
              "type": "Number",
              "description": "<p>How much to inflate the bottom side.</p>"
            },
            {
              "name": "left",
              "type": "Number",
              "description": "<p>How much to inflate the left side.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>This Rectangle</p>"
          }
        },
        {
          "name": "deflate",
          "access": "internal",
          "description": "<p>Modifies the bounds of this rectangle by reducing them by the specified amount in all directions.\nThe parameters are read the same way as CSS margin values.</p>\n<ul>\n<li>If one value is passed, all edges are deflated by that value.</li>\n<li>If two values are passed they are top/bottom deflation and left/right deflation.</li>\n<li>If four values are passed, that's top, right, bottom, left.</li>\n</ul>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>How much to deflate, or the top value if more than one values passed.</p>"
            },
            {
              "name": "right",
              "type": "Number",
              "description": "<p>How much to deflate the right side, or both left and right is only two values passed.</p>"
            },
            {
              "name": "bottom",
              "type": "Number",
              "description": "<p>How much to deflate the bottom side.</p>"
            },
            {
              "name": "left",
              "type": "Number",
              "description": "<p>How much to deflate the left side.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>This Rectangle</p>"
          }
        },
        {
          "name": "constrainTo",
          "description": "<p>Attempts constrain this Rectangle into the passed Rectangle. If the <code>strict</code> parameter is <code>true</code>\nthen this method will return <code>false</code> if constraint could not be achieved.</p>\n<p>If this Rectangle has a <code>minHeight</code> or <code>minWidth</code> property, size will be adjusted while attempting to constrain.</p>\n<p>Right and bottom are adjusted first leaving the top and bottom sides to &quot;win&quot; in the case that this Rectangle overflows\nthe constrainTo Rectangle.</p>",
          "parameters": [
            {
              "name": "constrainTo",
              "type": "Core.helper.util.Rectangle",
              "description": "<p>The Rectangle to constrain this Rectangle into if possible.</p>"
            },
            {
              "name": "strict",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to return false, and leave this Rectangle unchanged if constraint\ncould not be achieved.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "description": "<p>This Rectangle. If <code>strict</code> is true, and constraining was not successful, <code>false</code>.</p>"
          }
        },
        {
          "name": "alignTo",
          "description": "<p>Returns a cloned version of this Rectangle aligned to a target Rectangle, or element or <a href=\"#Core/widget/Widget\">Widget</a>.</p>",
          "parameters": [
            {
              "name": "spec",
              "type": "Object",
              "description": "<p>Alignment specification.</p>"
            },
            {
              "name": "spec.target",
              "type": [
                "HTMLElement",
                "Core.widget.Widget",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The Widget or element or Rectangle to align to.</p>",
              "isSubParam": true
            },
            {
              "name": "spec.anchorSize",
              "type": "Array.<Number>",
              "description": "<p>The <code>[width, height]</code> of the anchor pointer when in <code>top</code> position. The\nwidth is the baseline length, and the height is the height of the arrow. If passed, the anchor position\nwill be calculated to be at the centre of the overlap of the two aligned edges and returned in the <code>anchor</code>\nproperty of the resulting Rectangle:</p>\n<pre><code>{\n    edge: 'top',         // or 'right' or 'bottom' or 'left'\n    x/y: offset          // dimension to translate and value to translate by.\n}\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.anchorPosition",
              "type": "Object",
              "description": "<p>an <code>{ x: n, y: n }</code> anchor translation to be used <em>if the requested alignment\nsucceeds without violating constraints</em>. If a fallback alignment is used, the anchor will be centered in the\noverlap of the aligned edges as usual.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.overlap",
              "type": "Boolean",
              "description": "<p>True to allow this to overlap the target.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.align",
              "type": "String",
              "description": "<p>The edge alignment specification string, specifying two points to bring together.\nThe form is <code>[trblc][n]-[trblc][n]. The </code>n<code>is a percentage offset along that edge which defines the alignment point. This is not valid for alignment point</code>c<code>. For example </code>t0-b0' would align this Rectangle's top left corner with the bottom left corner of the <code>target</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "spec.constrainTo",
              "type": [
                "HTMLElement",
                "Core.widget.Widget",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The Widget or Element or Rectangle to constrain to.\nIf the requested alignment cannot be constrained (it will first shrink the resulting Rectangle according\nto the <code>minWidth</code> and <code>minHeight</code> properties of this rectangle), then it will try aligning at other edges\n(honouring the <code>axisLock</code> option), and pick the fallback alignment which results in the shortest translation.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.axisLock",
              "type": "Boolean",
              "description": "<p>Specify as a truthy value to fall back to aligning against the opposite\nedge first if the requested alignment cannot be constrained into the <code>constrainTo</code> option. If specified\nas <code>'flexible'</code>, then fallback will continue searching for solutions on the remaining two sides.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.matchSize",
              "type": "Boolean",
              "description": "<p>When aligning edge-to-edge, match the length of the aligned-to\nedge of the target. This is only honored when <code>axisLock</code> is enabled and alignment succeeds on the requested axis.\nIf <strong>not</strong> aligning edge-to-edge, <code>matchSize</code> matches both dimensions of the target.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.offset",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>The 'x' and 'y' offset values to create an extra margin round the target\nto offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\ntowards the target - for example producing the effect of the anchor pointer piercing the target.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.constrainPadding",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>The amount of pixels to pad from the <code>constrainTo</code> target,\neither a single value, or an array of values in CSS edge order.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>A new Rectangle aligned as requested if possible, but if the requested position violates\nthe <code>constrainTo</code> Rectangle, the shortest translation from the requested position which obeys constraints will be used.</p>"
          }
        },
        {
          "name": "getAlignmentPoint",
          "access": "internal",
          "description": "<p>Returns the <code>[x, y]</code> position of the specified anchor point of this Rectangle in <edge><offset> format.\nfor example passing &quot;t50&quot; will return the centre point of the top edge, passing &quot;r0&quot; will return the start\nposition of the right edge (the top right corner).</p>\n<p>Note that the offset defaults to 50, so &quot;t&quot; means the centre of the top edge.</p>",
          "parameters": [
            {
              "name": "alignmentPoint",
              "type": "String",
              "description": "<p>The alignment point to calculate. Must match the RegExp <code>[trbl]\\d*</code></p>"
            },
            {
              "name": "margins",
              "type": "Array.<Number>",
              "description": "<p>The <code>[x, y]</code> margins to add from the left/right, top/bottom edge.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "highlight",
          "description": "<p>Highlights this Rectangle using the highlighting effect of <a href=\"#Core/helper/DomHelper\">DomHelper</a>\non a transient element which encapsulates the region's area.</p>",
          "scope": "instance"
        },
        {
          "name": "visualize",
          "access": "internal",
          "description": "<p>Visualizes this Rectangle by adding a DOM element which encapsulates the region's area into the provided parent element.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Core.helper.DomHelper#DomConfig",
              "description": "<p>Element config object</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Element",
            "description": "<p>The highlight element</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "center",
          "description": "<p>The center point of this rectangle.</p>",
          "type": "Core.helper.util.Point",
          "scope": "instance"
        },
        {
          "name": "x",
          "description": "<p>Get/sets the X coordinate of the Rectangle. Note that this does <em>not</em> translate the\nRectangle. The requested <a href=\"#Core/helper/util/Rectangle#property-width\">width</a> will change.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "left",
          "description": "<p>Alias for x. To match DOMRect.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "top",
          "description": "<p>Alias for y. To match DOMRect.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "y",
          "description": "<p>Get/sets the Y coordinate of the Rectangle. Note that this does <em>not</em> translate the\nRectangle. The requested <a href=\"#Core/helper/util/Rectangle#property-height\">height</a> will change.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "width",
          "description": "<p>Get/sets the width of the Rectangle. Note that the requested <a href=\"#Core/helper/util/Rectangle#property-right\">right</a> will change.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "height",
          "description": "<p>Get/sets the height of the Rectangle. Note that the requested <a href=\"#Core/helper/util/Rectangle#property-bottom\">bottom</a> will change.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "right",
          "description": "<p>Get/sets the right edge of the Rectangle. Note that the requested <a href=\"#Core/helper/util/Rectangle#property-width\">width</a> will change.</p>\n<p>The right edge value is exclusive of the calculated rectangle width. So x=0 and right=10\nmeans a width of 10.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "bottom",
          "description": "<p>Get/sets the bottom edge of the Rectangle. Note that the requested <a href=\"#Core/helper/util/Rectangle#property-height\">height</a> will change.</p>\n<p>The bottom edge value is exclusive of the calculated rectangle height. So y=0 and bottom=10\nmeans a height of 10.</p>",
          "type": "Number",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Scroller",
      "modulePath": "Core/helper/util/Scroller",
      "classDescription": "<p>Encapsulates scroll functionality for a Widget. All requests for scrolling and scrolling information\nmust go through a Widget's <a href=\"#Core/widget/Widget#config-scrollable\">scrollable</a> property.</p>",
      "extends": [
        "Core/Base"
      ],
      "mixes": [
        "Core/mixin/Events",
        "Core/mixin/Delayable"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Scroller.js",
      "path": "/Calendar/lib/Core/helper/util",
      "configs": [
        {
          "name": "widget",
          "description": "<p>The widget which is to scroll.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner"
        },
        {
          "name": "element",
          "description": "<p>The element which is to scroll. Defaults to the <a href=\"#Core/widget/Widget#property-overflowElement\">overflowElement</a> of\nthe configured <a href=\"#Core/helper/util/Scroller#config-widget\">widget</a></p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "overflowX",
          "description": "<p>How to handle overflowing in the <code>X</code> axis.\nMay be:</p>\n<ul>\n<li><code>'auto'</code></li>\n<li><code>'visible'</code></li>\n<li><code>'hidden'</code></li>\n<li><code>'scroll'</code></li>\n<li><code>'hidden-scroll'</code> Meaning scrollable from the UI but with no scrollbar,\nfor example a grid header. Only on platforms which support this feature.</li>\n<li><code>true</code> - meaning <code>'auto'</code></li>\n<li><code>false</code> - meaning <code>'hidden'</code></li>\n<li><code>clip</code> - Uses <code>clip</code> where supported. Where not supported it uses\n<code>hidden</code> and rolls back any detected scrolls in this dimension.</li>\n</ul>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner"
        },
        {
          "name": "overflowY",
          "description": "<p>How to handle overflowing in the <code>Y</code> axis.\nMay be:</p>\n<ul>\n<li><code>'auto'</code></li>\n<li><code>'visible'</code></li>\n<li><code>'hidden'</code></li>\n<li><code>'scroll'</code></li>\n<li><code>'hidden-scroll'</code> Meaning scrollable from the UI but with no scrollbar.\nOnly on platforms which support this feature.</li>\n<li><code>true</code> - meaning <code>'auto'</code></li>\n<li><code>false</code> - meaning <code>'hidden'</code></li>\n<li><code>clip</code> - Uses <code>clip</code> where supported. Where not supported it uses\n<code>hidden</code> and rolls back any detected scrolls in this dimension.</li>\n</ul>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner"
        },
        {
          "name": "translate",
          "description": "<p>If configured as <code>true</code>, the <a href=\"#Core/helper/util/Scroller#config-element\">element</a> is not scrolled but is translated using CSS\ntransform when controlled by this class's API. Scroll events are fired when the element is translated.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "scroll",
          "description": "<p>Fired when scrolling happens on this Scroller's element. The event object is a native <code>scroll</code> event\nwith the described extra properties injected.</p>",
          "parameters": [
            {
              "name": "widget",
              "type": "Core.widget.Widget",
              "description": "<p>The owning Widget which has been scrolled.</p>"
            },
            {
              "name": "source",
              "type": "Core.helper.util.Scroller",
              "description": "<p>This Scroller</p>"
            }
          ]
        },
        {
          "name": "scrollend",
          "description": "<p>Fired when scrolling finished on this Scroller's element. The event object is the last native <code>scroll</code> event\nfires by the element with the described extra properties injected.</p>",
          "parameters": [
            {
              "name": "widget",
              "type": "Core.widget.Widget",
              "description": "<p>The owning Widget which has been scrolled.</p>"
            },
            {
              "name": "source",
              "type": "Core.helper.util.Scroller",
              "description": "<p>This Scroller</p>"
            }
          ]
        },
        {
          "name": "overflowChange",
          "access": "internal",
          "description": "<p>Fired when either the X or the Y axis changes from not showing a space-consuming scrollbar\nto showing a space-consuming scrollbar or vice-versa.</p>\n<p><em><em>Does not fire on platforms which show overlayed scrollbars</em></em></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Boolean",
              "description": "<p><code>true</code> if the X axis overflow, <code>false</code> otherwise.</p>"
            },
            {
              "name": "y",
              "type": "Boolean",
              "description": "<p><code>true</code> if the Y axis overflow, <code>false</code> otherwise.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "overflowX",
          "description": "<p>The <code>overflow-x</code> setting for the widget. <code>true</code> means <code>'auto'</code>.</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "overflowY",
          "description": "<p>The <code>overflow-y</code> setting for the widget. <code>true</code> means <code>'auto'</code>.</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "viewport",
          "description": "<p>A <a href=\"#Core/helper/util/Rectangle\">Rectangle</a> describing the bounds of the scrolling viewport.</p>",
          "type": "Core.helper.util.Rectangle",
          "scope": "instance"
        },
        {
          "name": "x",
          "description": "<p>The horizontal scroll position of the widget.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "y",
          "description": "<p>The vertical scroll position of the widget.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "maxX",
          "description": "<p>The maximum <code>X</code> scrollable position of the widget.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "maxY",
          "description": "<p>The maximum <code>Y</code> scrollable position of the widget.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "scrollWidth",
          "description": "<p>The horizontal scroll range of the widget.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "scrollHeight",
          "description": "<p>The vertical scroll range of the widget. May be set to larger than the actual data\nheight to enable virtual scrolling. This is how the grid extends its scroll range\nwhile only rendering a small subset of the dataset.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "clientWidth",
          "description": "<p>The client width of the widget.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "clientHeight",
          "description": "<p>The client height of the widget.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "id",
          "description": "<p>The unique ID of this Scroller</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "hasOverflow",
          "access": "internal",
          "description": "<p>Returns <code>true</code> if there is overflow in the specified axis.</p>",
          "parameters": [
            {
              "name": "axis",
              "type": "String",
              "description": "<p>The axis to check scrollbar for. Note that this is subtly different to asking\nwhether an axis is showing a space-consuming scrollbar, see <a href=\"#Core/helper/util/Scroller#function-hasScrollbar\">hasScrollbar</a>.</p>",
              "default": "'y'",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hasScrollbar",
          "access": "internal",
          "description": "<p>Returns <code>true</code> if there is a <em>space-consuming</em> scrollbar controlling scroll in the specified axis.</p>",
          "parameters": [
            {
              "name": "axis",
              "type": "String",
              "description": "<p>The axis to check scrollbar for. Note that this is subtly different to asking\nwhether an axis <em>has any</em> overflow, see <a href=\"#Core/helper/util/Scroller#function-hasOverflow\">hasOverflow</a>.</p>",
              "default": "'y'",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "addPartner",
          "description": "<p>Partners this Scroller with the passed scroller in order to sync the scrolling position in the passed axes</p>",
          "parameters": [
            {
              "name": "otherScroller",
              "type": "Core.helper.util.Scroller"
            },
            {
              "name": "axes",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p><code>'x'</code> or <code>'y'</code> or <code>{x: true/false, y: true/false}</code> axes to sync</p>",
              "default": "'x'",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removePartner",
          "description": "<p>Breaks the link between this Scroller and the passed Scroller set up by the\n<a href=\"#Core/helper/util/Scroller#function-addPartner\">addPartner</a> method.</p>",
          "parameters": [
            {
              "name": "otherScroller",
              "type": "Core.helper.util.Scroller",
              "description": "<p>The Scroller to unlink from.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clearPartners",
          "access": "internal",
          "description": "<p>Breaks the link between this Scroller and all other Scrollers set up by the\n<a href=\"#Core/helper/util/Scroller#function-addPartner\">addPartner</a> method.</p>",
          "scope": "instance"
        },
        {
          "name": "scrollIntoView",
          "description": "<p>Scrolls the passed element or <a href=\"#Core/helper/util/Rectangle\">Rectangle</a> into view according to the passed options.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The element or a Rectangle in document space to scroll\ninto view.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the element: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the element or rectangle to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": [
                "Boolean",
                "function"
              ],
              "description": "<p>Set to <code>true</code> to highlight the element when it is in view.\nMay be a function which is called passing the element, to provide customized highlighting.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.x",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>X</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.y",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>Y</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the element has been scrolled into view.</p>"
          }
        },
        {
          "name": "scrollIntoView",
          "description": "<p>Scrolls the passed element into view according to the passed options.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The element in document space to scroll into view.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the element: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the element or rectangle to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.x",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>X</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.y",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>Y</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the element has been scrolled into view.</p>"
          }
        },
        {
          "name": "scrollBy",
          "description": "<p>Scrolls by the passed deltas according to the passed options.</p>",
          "parameters": [
            {
              "name": "xDelta",
              "type": "Number",
              "description": "<p>How far to scroll in the X axis.</p>",
              "default": 0,
              "optional": true
            },
            {
              "name": "yDelta",
              "type": "Number",
              "description": "<p>How far to scroll in the Y axis.</p>",
              "default": 0,
              "optional": true
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>How to scroll. May be passed as <code>true</code> to animate.</p>",
              "optional": true
            },
            {
              "name": "options.silent",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to suspend <code>scroll</code> events during scrolling.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the scrolling has finished.</p>"
          }
        },
        {
          "name": "scrollTo",
          "description": "<p>Scrolls to the passed position according to the passed options.</p>",
          "parameters": [
            {
              "name": "toX",
              "type": "Number",
              "description": "<p>Where to scroll to in the X axis.</p>",
              "default": 0,
              "optional": true
            },
            {
              "name": "toY",
              "type": "Number",
              "description": "<p>Where to scroll to in the Y axis.</p>",
              "default": 0,
              "optional": true
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>How to scroll. May be passed as <code>true</code> to animate.</p>",
              "optional": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the scrolling has finished.</p>"
          }
        },
        {
          "name": "onElMutation",
          "access": "private",
          "description": "<p>Respond to style changes to monitor scroll <em>when this Scroller is in <code>translate: true</code> mode.</em></p>",
          "parameters": [
            {
              "name": "mutations",
              "type": "Array.<Object>",
              "description": "<p>The ElementMutation records.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getDeltaTo",
          "access": "internal",
          "description": "<p>Returns the xDelta and yDelta values in an object from the current scroll position to the\npassed element or Rectangle.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The element or a Rectangle to calculate deltas for.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the element: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>A margin around the element or rectangle to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.x",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>X</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.y",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to disable scrolling in the <code>Y</code> axis.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p><code>{ xDelta, yDelta }</code></p>"
          }
        }
      ]
    },
    {
      "name": "LocaleHelper",
      "modulePath": "Core/localization/LocaleHelper",
      "classDescription": "<p>Provides locale management methods.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "LocaleHelper.js",
      "path": "/Calendar/lib/Core/localization",
      "functions": [
        {
          "name": "mergeLocales",
          "description": "<p>Merges all properties of provided locales into new locale.\nLocales are merged in order they provided and locales which go later replace same properties of previous locales.</p>",
          "parameters": [
            {
              "name": "locales",
              "type": "Object",
              "description": "<p>Locales to merge</p>",
              "isRestParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>Merged locale</p>"
          }
        },
        {
          "name": "trimLocale",
          "description": "<p>Removes all properties from <code>locale</code> that are present in the provided <code>toTrim</code>.</p>",
          "parameters": [
            {
              "name": "locale",
              "type": "Object",
              "description": "<p>Locale to process</p>"
            },
            {
              "name": "toTrim",
              "type": "Object",
              "description": "<p>Object enumerating properties that should be removed</p>"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "<p>When <code>true</code> ignores missing properties that should be removed (default).\nWhen <code>false</code> throws exceptions in such cases.</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "publishLocale",
          "description": "<p>Put the locale under <code>globalThis.bryntum.locales</code> to make sure it can be discovered automatically</p>",
          "parameters": [
            {
              "name": "localeName",
              "type": "String",
              "description": "<p>Locale name</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Locale config</p>"
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "LocaleManager",
      "modulePath": "Core/localization/LocaleManager",
      "description": "<p>Singleton that handles switching locale. Locales can be included on page with <code>&lt;script type=&quot;module&quot;&gt;</code> tags or\nloaded using ajax. When using script tags the first locale loaded is used per default, if another should be used as\ndefault specify it on the script tag for the grid (see example below).</p>\n<pre class=\"prettyprint source\"><code>// Using Ecma 6 modules\n&lt;script type=&quot;module&quot; src=&quot;./Core/localization/SvSE.js&quot;>\n\n// Specify default when using scripts\n&lt;script src=&quot;build/locales/grid.locale.SvSE.js&quot;>\n&lt;script data-default-locale=&quot;En&quot; src=&quot;build/grid-all.js&quot;>\n\nimport LocaleManager from 'Core/localization/LocaleManager.js';\n// Set locale using method\nLocaleManager.applyLocale('SvSE');\n// Or set locale using property\nLocaleManager.locale = LocaleManager.locales.SvSE;\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "LocaleManager.js",
      "path": "/Calendar/lib/Core/localization",
      "singleton": true,
      "demo": {
        "product": "grid",
        "demo": "localization"
      },
      "properties": [
        {
          "name": "locales",
          "description": "<p>Get currently registered locales.\nReturns an object with locale names (<code>localeName</code>) as properties.</p>\n<p>Example:</p>\n<pre class=\"prettyprint source\"><code>const englishLocale = LocaleManager.locales.En;\n</code></pre>\n<p>this returns registered English locale object.</p>\n<pre class=\"prettyprint source\"><code>{\n  &quot;desc&quot;: &quot;English&quot;,\n  &quot;locale&quot;: {\n    &quot;localeName&quot;: &quot;En&quot;,\n    &quot;localeDesc&quot;: &quot;English&quot;,\n\n    ... (localization goes here)\n\n  }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "locale",
          "description": "<p>Get/set currently used locale. Set a name of a locale to have it applied, or give a locale configuration to\nhave it registered and then applied</p>",
          "type": "Object",
          "accepts": [
            "String",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "throwOnMissingLocale",
          "description": "<p>Specifies if <a href=\"#Core/localization/Localizable#function-L-static\">Localizable.L()</a> function would throw error if no localization found in runtime</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "functions": [
        {
          "name": "registerLocale",
          "description": "<p>Register a locale to make it available for applying.\nRegistered locales are available in <a href=\"#Core/localization/LocaleManager#property-locales\">locales</a>.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of locale (for example <code>En</code> or <code>SvSE</code>)</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Object with localized properties</p>"
            }
          ],
          "scope": "inner"
        },
        {
          "name": "extendLocale",
          "description": "<p>Extend an already loaded locale to add additional translations.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of locale (for example <code>En</code> or <code>SvSE</code>)</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Object with localized properties</p>"
            }
          ],
          "scope": "inner"
        },
        {
          "name": "applyLocale",
          "description": "<p>Apply a locale. Locale must be defined in <a href=\"#Core/localization/LocaleManager#property-locales\">locales</a>.\nIf it is not loaded it will be loaded using AjaxHelper <a href=\"#Core/helper/AjaxHelper#function-get-static\">get</a> request and then applied.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of locale to apply (for example <code>En</code> or <code>SvSE</code>)</p>"
            }
          ],
          "scope": "inner",
          "fires": [
            "event:locale"
          ],
          "returns": {
            "type": [
              "Boolean",
              "Promise"
            ]
          }
        },
        {
          "name": "loadLocale",
          "access": "private",
          "description": "<p>Loads a locale using AjaxHelper <a href=\"#Core/helper/AjaxHelper#function-get-static\">get</a> request.</p>",
          "parameters": [
            {
              "name": "path",
              "type": "String",
              "description": "<p>Path to locale file</p>"
            }
          ],
          "scope": "inner",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        }
      ],
      "events": [
        {
          "name": "locale",
          "description": "<p>Fires when a locale is applied</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.localization.LocaleManager",
              "description": "<p>The Locale manager instance.</p>"
            },
            {
              "name": "locale",
              "type": "Object",
              "description": "<p>Locale configuration</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Localizable",
      "modulePath": "Core/localization/Localizable",
      "description": "<p>Mixin that provides localization functionality to a class.</p>\n<pre class=\"prettyprint source\"><code>// Get localized string\ngrid.L('foo');\ngrid.L('L{foo}');\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Localizable.js",
      "path": "/Calendar/lib/Core/localization",
      "configs": [
        {
          "name": "localeClass",
          "description": "<p>A class translations of which are used for translating this entity.\nThis is often used when translations of an item are defined on its container class.\nFor example:</p>\n<pre class=\"prettyprint source lang-js\"><code>// Toolbar class that has some predefined items\nclass MyToolbar extends Toolbar {\n\n    static get $name() {\n        return 'MyToolbar';\n    }\n\n    static get defaultConfig() {\n        return {\n            // this specifies default configs for the items\n            defaults : {\n                // will tell items to use the toolbar locale\n                localeClass : this\n            },\n\n            items : [\n                // The toolbar has 2 buttons and translation for their texts will be searched in\n                // the toolbar locales\n                { text : 'Agree' },\n                { text : 'Disagree' }\n            ]\n        };\n    }\n\n   ...\n}\n</code></pre>\n<p>So if one makes a locale for the <code>MyToolbar</code> class that will include <code>Agree</code> and <code>Disagree</code> string translations:</p>\n<pre class=\"prettyprint source lang-js\"><code>    ...\n    MyToolbar : {\n        Agree    : 'Yes, I agree',\n        Disagree : 'No, I do not agree'\n    }\n</code></pre>\n<p>They will be used for the toolbar buttons and the button captions will say <code>Yes, I agree</code> and <code>No, I do not agree</code>.</p>",
          "type": "Core.Base",
          "scope": "inner",
          "typings": {
            "returns": "typeof Base"
          }
        },
        {
          "name": "localizableProperties",
          "description": "<p>List of properties which values should be translated automatically upon a locale applying.\nIn case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),\nyou could use 'localeKey' meta configuration.\nExample:</p>\n<pre class=\"prettyprint source lang-js\"><code> static get configurable() {\n    return {\n         localizableProperties : ['width'],\n\n         width : {\n             value   : '54em', // default value here\n             $config : {\n                 localeKey : 'L{editorWidth}' // name of the property that will be used in localization file\n             }\n         }\n     };\n }\n</code></pre>",
          "type": "Array.<String>",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "updateLocalization",
          "description": "<p>Method that is triggered when applying a locale to the instance\n(happens on the instance construction steps and when switching to another locale).</p>\n<p>The method can be overridden to dynamically translate the instance when locale is switched.\nWhen overriding the method please make sure you call <code>super.updateLocalization()</code>.</p>",
          "scope": "instance",
          "category": "Misc"
        },
        {
          "name": "localize",
          "access": "internal",
          "description": "<p>Get localized string, returns <code>null</code> if no localized string found.</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>String key</p>"
            },
            {
              "name": "templateData",
              "type": "Object",
              "description": "<p>Data to supply to template if localized string is a function</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "L",
          "description": "<p>Get localized string, returns value of <code>text</code> if no localized string found.</p>\n<p>If <a href=\"#Core/localization/LocaleManager#property-throwOnMissingLocale\">LocaleManager.throwOnMissingLocale</a>\nis <code>true</code> then calls to <code>L()</code> will throw <code>Localization is not found for 'text' in 'ClassName'</code> exception when no\nlocalization is found.</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>String key</p>"
            },
            {
              "name": "templateData",
              "type": "Object",
              "description": "<p>Data to supply to template if localized string is a function</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "L",
          "description": "<p>Convenience function that can be called directly on the class that mixes Localizable in</p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.text = grid.L('L{group}');\n</code></pre>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>String key</p>"
            },
            {
              "name": "templateData",
              "type": "Object",
              "description": "<p>Data to supply to template if localized string is a function</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Misc",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "optionalL",
          "description": "<p>Convenience function to get an optional translation. The difference compared to <code>L()</code> is that it wont throw\nan error when the translation is missing even if configured with <code>throwOnMissingLocale</code></p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.text = grid.optionalL('L{group}');\n</code></pre>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>String key</p>"
            },
            {
              "name": "templateData",
              "type": "Object",
              "description": "<p>Data to supply to template if localized string is a function</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Misc",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "optionalL",
          "access": "internal",
          "description": "<p>Convenience function to get an optional translation. The difference compared to <code>L()</code> is that it wont throw\nan error when the translation is missing even if configured with <code>throwOnMissingLocale</code></p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.text = grid.optionalL('L{group}');\n</code></pre>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>String key</p>"
            },
            {
              "name": "templateData",
              "type": "Object",
              "description": "<p>Data to supply to template if localized string is a function</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Misc",
          "returns": {
            "type": "String"
          }
        }
      ],
      "properties": [
        {
          "name": "localeManager",
          "description": "<p>Get the global LocaleManager</p>",
          "type": "Core.localization.LocaleManager",
          "scope": "instance",
          "readonly": true,
          "category": "Misc",
          "typings": {
            "returns": "typeof LocaleManager"
          }
        }
      ]
    },
    {
      "name": "Delayable",
      "modulePath": "Core/mixin/Delayable",
      "description": "<p>Tracks setTimeout, setInterval and requestAnimationFrame calls and clears them on destroy.</p>",
      "mixin": true,
      "examples": [
        "someClass.setTimeout(() => console.log('hi'), 200);\nsomeClass.setInterval(() => console.log('annoy'), 100);\n// can also use named timeouts for easier tracking\nsomeClass.setTimeout(() => console.log('named'), 300, 'named');\nsomeClass.clearTimeout('named');"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Delayable.js",
      "path": "/Calendar/lib/Core/mixin",
      "functions": [
        {
          "name": "makeInvoker",
          "access": "private",
          "description": "<p>Creates and returns a function that will call the user-supplied <code>fn</code>.</p>",
          "parameters": [
            {
              "name": "me",
              "type": "Core.mixin.Delayable"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The user function to call when the timer fires.</p>"
            },
            {
              "name": "wrapFn",
              "type": "function",
              "description": "<p>The function the user will call to start the timer.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The invoke options.</p>"
            },
            {
              "name": "options.appendArgs",
              "type": "Array",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for <code>fn</code>.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "function"
          }
        },
        {
          "name": "decorateWrapFn",
          "access": "private",
          "description": "<p>Decorates the supported <code>wrapFn</code> with additional methods and an <code>isPending</code> readonly\nproperty. These decorations are available to user code to help manage the scheduling\nbehavior of the buffered function.</p>",
          "parameters": [
            {
              "name": "me",
              "type": "Core.mixin.Delayable"
            },
            {
              "name": "wrapFn",
              "type": "function",
              "description": "<p>The function the user will call to start the timer.</p>"
            },
            {
              "name": "cancelFn",
              "type": "String",
              "description": "<p>The name of the function that will cancel a timer.</p>",
              "default": "clearTimeout"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "function",
            "description": "<p>The <code>wrapFn</code> is returned.</p>"
          }
        },
        {
          "name": "hasTimeout",
          "access": "internal",
          "description": "<p>Check if a named timeout is active</p>",
          "parameters": [
            {
              "name": "name"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setTimeout",
          "access": "internal",
          "description": "<p>Same as native setTimeout, but will be cleared automatically on destroy. If a propertyName is supplied it will\nbe used to store the timeout id.</p>",
          "parameters": [
            {
              "name": "timeoutSpec",
              "type": "Object",
              "description": "<p>An object containing the details about that function, and the time delay.</p>"
            },
            {
              "name": "timeoutSpec.fn",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>The function to call, or name of function in this object to call. Used as the <code>name</code> parameter if a string.</p>",
              "isSubParam": true
            },
            {
              "name": "timeoutSpec.delay",
              "type": "Number",
              "description": "<p>The milliseconds to delay the call by.</p>",
              "isSubParam": true
            },
            {
              "name": "timeoutSpec.args",
              "type": "Array.<Object>",
              "description": "<p>The arguments to pass.</p>",
              "isSubParam": true
            },
            {
              "name": "timeoutSpec.name",
              "type": "String",
              "description": "<p>The name under which to register the timer. Defaults to <code>fn.name</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "timeoutSpec.runOnDestroy",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> if this function should be executed if the Delayable instance is destroyed while function is scheduled.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "timeoutSpec.cancelOutstanding",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to cancel any outstanding invocation of the passed function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "clearTimeout",
          "access": "internal",
          "description": "<p>clearTimeout wrapper, either call with timeout id as normal clearTimeout or with timeout name (if you specified\na name to setTimeout())\nproperty to null.</p>",
          "parameters": [
            {
              "name": "idOrName",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>timeout id or name</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clearInterval",
          "access": "internal",
          "description": "<p>clearInterval wrapper</p>",
          "parameters": [
            {
              "name": "id",
              "type": "Number"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setInterval",
          "access": "internal",
          "description": "<p>Same as native setInterval, but will be cleared automatically on destroy</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>callback method</p>"
            },
            {
              "name": "delay",
              "type": "Number",
              "description": "<p>delay in milliseconds</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>delay name for debugging</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "requestAnimationFrame",
          "access": "internal",
          "description": "<p>Relays to native requestAnimationFrame and adds to tracking to have call automatically canceled on destroy.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            },
            {
              "name": "extraArgs",
              "type": "Array.<Object>",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "createOnFrame",
          "access": "internal",
          "description": "<p>Creates a function which will execute once, on the next animation frame. However many time it is\ncalled in one event run, it will only be scheduled to run once.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>The function to call, or name of function in this object to call.</p>"
            },
            {
              "name": "args",
              "type": "Array.<Object>",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function.</p>",
              "optional": true
            },
            {
              "name": "cancelOutstanding",
              "type": "Boolean",
              "description": "<p>Cancel any outstanding queued invocation upon call.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "cancelAnimationFrame",
          "access": "internal",
          "description": "<p>Relays to native cancelAnimationFrame and removes from tracking.</p>",
          "parameters": [
            {
              "name": "handle",
              "type": "Number"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "buffer",
          "access": "internal",
          "description": "<p>Wraps a function with another function that delays it specified amount of time, repeated calls to the wrapper\nresets delay.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>The function to call. If this is a string, it is looked up as a method on <code>this</code>\ninstance (or <code>options.thisObj</code> instead, if provided).</p>"
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Number"
              ],
              "description": "<p>The delay in milliseconds or an options object.</p>"
            },
            {
              "name": "options.delay",
              "type": "Number",
              "description": "<p>The delay in milliseconds.</p>",
              "isSubParam": true
            },
            {
              "name": "options.appendArgs",
              "type": "Array",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for the function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "function",
            "description": "<p>Wrapped function to call.</p>"
          }
        },
        {
          "name": "raf",
          "access": "internal",
          "description": "<p>Returns a function that when called will schedule a call to <code>fn</code> on the next animation frame.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>The function to call. If this is a string, it is looked up as a method on <code>this</code>\ninstance (or <code>options.thisObj</code> instead, if provided).</p>"
            },
            {
              "name": "options",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>An options object or the <code>cancelOutstanding</code> boolean property of it.</p>",
              "optional": true
            },
            {
              "name": "options.cancelOutstanding",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to cancel any pending animation frame requests and\nschedule a new one on each call to the returned function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.appendArgs",
              "type": "Array",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for the function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "function"
          }
        },
        {
          "name": "throttle",
          "access": "internal",
          "description": "<p>Create a &quot;debounced&quot; function which will call on the &quot;leading edge&quot; of a timer period.\nWhen first invoked will call immediately, but invocations after that inside its buffer\nperiod will be rejected, and <em>one</em> invocation will be made after the buffer period has expired.</p>\n<p>This is useful for responding immediately to a first mousemove, but from then on, only\ncalling the action function on a regular timer while the mouse continues to move.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>The function to call. If this is a string, it is looked up as a method on <code>this</code>\ninstance (or <code>options.thisObj</code> instead, if provided).</p>"
            },
            {
              "name": "options",
              "type": [
                "Number",
                "Object"
              ],
              "description": "<p>The milliseconds to wait after each execution before another execution takes place\nor a object containing options.</p>"
            },
            {
              "name": "options.thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.appendArgs",
              "type": "Array",
              "description": "<p>The argument list to append to those passed to the function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.throttled",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>A function to call when the invocation is delayed due to buffer\ntime not having expired. If this is a string, it is looked up as a method on <code>this</code> instance (or <code>options.thisObj</code>\ninstead, if provided). When called, the same arguments are passed as would have been passed to <code>fn</code>, including\nany <code>options.appendArgs</code>.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setupDelayableMethods",
          "access": "private",
          "description": "<p>This method initializes the <code>delayable</code> methods on this class.</p>",
          "parameters": [
            {
              "name": "delayable",
              "type": "Object",
              "description": "<p>The <code>delayable</code> property.</p>"
            },
            {
              "name": "cls",
              "type": "function",
              "description": "<p>This parameter will be used internally to process static methods.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        }
      ],
      "properties": [
        {
          "name": "delayable",
          "access": "internal",
          "description": "<p>This class property returns an object that specifies methods to wrap with configurable timer behaviors.</p>\n<p>It is used like so:</p>\n<pre class=\"prettyprint source\"><code> class Foo extends Delayable() {\n     static get delayable() {\n         return {\n             expensiveMethod : 500\n         };\n     }\n\n     expensiveMethod() {\n         this.things();\n         this.moreThings();\n         this.evenMoreThings();\n     }\n }\n</code></pre>\n<p>With the above in place, consider:</p>\n<pre class=\"prettyprint source\"><code> let instance = new Foo();\n\n instance.expensiveMethod();\n</code></pre>\n<p>Instead of the above code immediately calling the <code>expensiveMethod()</code>, it will start a timer that will\ninvoke the method 500ms later. Because <code>expensiveMethod()</code> is an instance method, each instance of <code>Foo</code>\nwill have its own timer.</p>\n<p>NOTE: Only instance methods are currently supported (i.e., only non-<code>static</code> methods).</p>\n<h4>Options</h4>\n<p>The value of each key configures how the method will be scheduled. If the value is a number, it is\npromoted to a config object of <code>type='buffer'</code> as in the following:</p>\n<pre class=\"prettyprint source\"><code> class Foo extends Delayable() {\n     static get delayable() {\n         return {\n             expensiveMethod : {\n                 type  : 'buffer',\n                 delay : 500\n             }\n         };\n     }\n });\n</code></pre>\n<p>The <code>type</code> property of the config object must be one of three values. Other options can be provided\ndepending on the <code>type</code>:</p>\n<ul>\n<li><code>buffer</code><br>\nOther options:\n<ul>\n<li><code>delay</code> (Number) : The number of milliseconds to wait before calling the underlying method. A\nvalue of 0 is equivalent to setting <code>immediate: true</code>.</li>\n<li><code>immediate</code> (Boolean) : Set to <code>true</code> to call immediately (effectively disabling the buffer).</li>\n</ul>\n</li>\n<li><code>raf</code> (short for &quot;request animation frame&quot;)<br>\nOther options:\n<ul>\n<li><code>cancelOutstanding</code> (Boolean) : Set to <code>true</code> to cancel any pending animation frame requests and\nschedule a new one on each call.</li>\n<li><code>immediate</code> (Boolean) : Set to <code>true</code> to call immediately.</li>\n</ul>\n</li>\n<li><code>throttle</code><br>\nOther options:\n<ul>\n<li><code>delay</code> (Number) : The number of milliseconds to wait after each execution before another\nexecution takes place. A value of 0 is equivalent to setting <code>immediate: true</code>.</li>\n<li><code>immediate</code> (Boolean) : Set to <code>true</code> to call immediately (effectively disabling the throttle).</li>\n</ul>\n</li>\n</ul>\n<p>While <code>immediate: true</code> can be specified at the class level, it is more typical to set it on the\ninstance's method as described below.</p>\n<h4>Delayable Method API</h4>\n<p>Delayable methods have a consistent API to manage their scheduling. This API is added to the methods\nthemselves.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code> let instance = new Foo();\n\n instance.expensiveMethod();         // schedule a call in 500ms\n instance.expensiveMethod.isPending; // true\n instance.expensiveMethod.cancel();\n instance.expensiveMethod.flush();\n instance.expensiveMethod.now();\n\n instance.expensiveMethod.delay = 10;\n instance.expensiveMethod();         // schedule a call in 10ms\n</code></pre>\n<h5><code>isPending</code> (Boolean, readonly)</h5>\n<p>This boolean property will be <code>true</code> if a call has been scheduled, and false otherwise.</p>\n<h5><code>cancel()</code></h5>\n<p>Cancels a pending call if one has been scheduled. Otherwise this method does nothing.</p>\n<h5><code>flush()</code></h5>\n<p>Cancels the timer and causes the pending call to execute immediately. If there is no pending call, this\nmethod does nothing.</p>\n<h5><code>now()</code></h5>\n<p>Cancels the timer (if one is pending) and executes the method immediately. If there is no pending call,\nthis method will still call the underlying method.</p>",
          "type": "Object",
          "scope": "static"
        }
      ]
    },
    {
      "name": "Draggable",
      "modulePath": "Core/mixin/Draggable",
      "description": "<p>Mix this into another class to enable drag/drop support.</p>\n<p>To use a draggable, it must be associated with an element that contains draggable content:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let draggable = new MyDraggable({\n     dragRootElement : someElement\n });\n</code></pre>\n<p>Once the <code>dragRootElement</code> is assigned, any element inside that root is a candidate for dragging. To limit the\nallowed element, set the <a href=\"#Core/mixin/Draggable#config-dragSelector\">dragSelector</a> config.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let draggable = new MyDraggable({\n     dragRootElement : someElement,\n     dragSelector    : '.drag-this'\n });\n</code></pre>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Draggable.js",
      "path": "/Calendar/lib/Core/mixin",
      "properties": [
        {
          "name": "dragging",
          "description": "<p>The current <code>DragContext</code>. This is created immediately on pointerdown but does not become active until\nsome movement occurs. This <a href=\"#Core/mixin/Draggable#config-dragThreshold\">threshold</a> is configurable.</p>",
          "type": "Core.util.drag.DragContext",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "overItem",
          "description": "<p>The <a href=\"#Core/mixin/Draggable#config-dragSelector\">dragSelector</a> item the mouse is currently over.</p>",
          "type": "HTMLElement",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "draggingCls",
          "description": "<p>The CSS class to add to the <a href=\"#Core/mixin/Draggable#config-dragRootElement\">dragRootElement</a> (or <a href=\"#Core/mixin/Draggable#config-draggingClsSelector\">draggingClsSelector</a> from\nthere) as soon as the pointerdown event occurs.</p>",
          "type": "String",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "draggingBodyCls",
          "description": "<p>The CSS class to add to the <code>body</code> element as soon as the <a href=\"#Core/mixin/Draggable#config-dragThreshold\">dragThreshold</a> is reached and\nan actual drag is in progress.</p>",
          "type": "String",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "draggingItemCls",
          "description": "<p>The CSS class to add to the element being dragged as soon as the pointerdown event occurs.</p>",
          "type": "String",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "draggingStartedCls",
          "description": "<p>The CSS class to add to the <a href=\"#Core/mixin/Draggable#config-dragRootElement\">dragRootElement</a> (or <a href=\"#Core/mixin/Draggable#config-draggingClsSelector\">draggingClsSelector</a> from\nthere) as soon as the <a href=\"#Core/mixin/Draggable#config-dragThreshold\">dragThreshold</a> is reached and an actual drag is in progress.</p>",
          "type": "String",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "draggableCls",
          "description": "<p>The CSS class that is added to the <a href=\"#Core/mixin/Draggable#config-dragRootElement\">dragRootElement</a>, i.e., <code>'b-draggable'</code>.</p>",
          "type": "String",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "dragEventer",
          "access": "internal",
          "description": "<p>Return the <code>Events</code> instance from which drag events are fired.</p>",
          "type": "Core.mixin.Events",
          "scope": "instance"
        }
      ],
      "configs": [
        {
          "name": "draggingClsSelector",
          "description": "<p>A CSS selector to use to ascend from the <a href=\"#Core/mixin/Draggable#config-dragRootElement\">dragRootElement</a> to find the element that will\ngain the <a href=\"#Core/mixin/Draggable#property-draggingCls\">draggingCls</a> and <a href=\"#Core/mixin/Draggable#property-draggingStartedCls\">draggingStartedCls</a> CSS classes.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dragDocumentListeners",
          "access": "private",
          "description": "<p>The listeners to add to the <code>document</code> during a drag.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "dragItemSelector",
          "description": "<p>A CSS selector to use to ascend from the drag element to find the element that will gain the\n<a href=\"#Core/mixin/Draggable#property-draggingItemCls\">draggingItemCls</a> CSS class. If not supplied, the drag element will gain this CSS\nclass.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dragItemOverCls",
          "description": "<p>A CSS class to add to items identified by the <a href=\"#Core/mixin/Draggable#config-dragItemSelector\">dragItemSelector</a> when the mouse\nenters.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "onDragItemMouseEnter",
          "description": "<p>A function to call when the pointer enters a <a href=\"#Core/mixin/Draggable#config-dragItemSelector\">dragItemSelector</a>.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "onDragItemMouseMove",
          "description": "<p>A function to call when the pointer moves inside a <a href=\"#Core/mixin/Draggable#config-dragItemSelector\">dragItemSelector</a>.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "onDragItemMouseLeave",
          "description": "<p>A function to call when the pointer leaves a <a href=\"#Core/mixin/Draggable#config-dragItemSelector\">dragItemSelector</a>.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "dragLock",
          "description": "<p>Configure as <code>'x'</code> to lock dragging to the <code>X</code> axis (the drag will only move horizontally) or <code>'y'</code>\nto lock dragging to the <code>Y</code> axis (the drag will only move vertically).</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dragMinDistance",
          "description": "<p>The minimum distance a drag must move to be considered a drop and not\n<a href=\"#Core/util/drag/DragContext#property-aborted\">aborted</a>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        },
        {
          "name": "dragProxy",
          "description": "<p>The <a href=\"#Core/util/drag/DragProxy\">drag proxy</a> is a helper object that can be used to display feedback\nduring a drag.</p>",
          "type": [
            "Object",
            "Core.util.drag.DragProxy"
          ],
          "scope": "inner"
        },
        {
          "name": "dragRootElement",
          "description": "<p>The outer element where dragging will operate (attach events to it and use as root limit when looking\nfor ancestors).</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "dragSameTargetDrop",
          "description": "<p>Set to <code>true</code> to allow a drag to drop on to the same element from which the drag started.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "dragSelector",
          "description": "<p>A CSS selector used to determine which element(s) can be dragged.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dragSwallowClickTime",
          "description": "<p>The number of milliseconds after a pointerup to ignore click events on the document. This\nis used to avoid the &quot;up&quot; event itself generating a <code>click</code> on the target.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 50
        },
        {
          "name": "dragThreshold",
          "description": "<p>The amount of pixels to move pointer/mouse before it counts as a drag operation.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "dragTouchStartDelay",
          "description": "<p>The number of milliseconds that must elapse after a <code>touchstart</code> event before it is considered a drag. If\nmovement occurs before this time, the drag is aborted. This is to allow touch swipes and scroll gestures.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 300
        },
        {
          "name": "dropTargetSelector",
          "description": "<p>The CSS selector to use to identify the closest valid target from the event target.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "beforeDrag",
          "description": "<p>This template method is called when the mousedown of a potential drag operation occurs. This happens before the\ngesture is known to be a drag, meaning the <a href=\"#Core/mixin/Draggable#config-dragThreshold\">dragThreshold</a> has not been reached. This method\nshould initialize the <a href=\"#Core/util/drag/DragContext\">DragContext</a> using the <a href=\"#Core/util/drag/DragContext#function-set\">set</a>\nmethod. Alternatively, this method may return <code>false</code> to prevent the drag operation.</p>\n<p><em>Important:</em> Because no drag has occurred at the time this method is called, only minimal processing should be\ndone (such as initializing the <a href=\"#Core/util/drag/DragContext\">DragContext</a>). Anything more should be done in the\n<a href=\"#Core/mixin/Draggable#function-dragStart\">dragStart</a> method or in response to the <a href=\"#Core/mixin/Draggable#event-dragStart\">dragStart</a> event which happen only if\nthe user drags the mouse before releasing the mouse button.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragStart",
          "description": "<p>This template method is called when the drag operation starts. This occurs when the <a href=\"#Core/mixin/Draggable#config-dragThreshold\">dragThreshold</a>\nhas been reached.\nYour implementation may return <code>false</code> to prevent the startup of the drag operation.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragOver",
          "description": "<p>This template method is called as the drag moves. This occurs on each mouse/pointer/touchmove event.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragEnterTarget",
          "description": "<p>This template method is called when the drag enters a <a href=\"#Core/mixin/Droppable\">target</a>.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragLeaveTarget",
          "description": "<p>This template method is called when the drag leaves a <a href=\"#Core/mixin/Droppable\">target</a>.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            },
            {
              "name": "oldTarget",
              "type": "Core.mixin.Droppable",
              "description": "<p>The previous value of <code>drag.target</code>.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragDrop",
          "description": "<p>This template method is called when the drag operation completes. This occurs on the pointerup event.</p>\n<p>This method is not called if the drag is <a href=\"#Core/util/drag/DragContext#property-aborted\">aborted</a>.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragEnd",
          "description": "<p>This template method is called when the drag operation completes. This occurs on the pointerup event or perhaps\na keypress event.</p>\n<p>This method is always called, even if the drag is <a href=\"#Core/util/drag/DragContext#property-aborted\">aborted</a>.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onDragMouseDown",
          "access": "private",
          "description": "<p>Grab draggable element on mouse down.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onDragPointerDown",
          "access": "private",
          "description": "<p>Grab draggable element on pointerdown.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onDragTouchStart",
          "access": "private",
          "parameters": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "dragCancel",
          "description": "<p>This event is fired when a drag gesture is completed due to the user aborting it (with the <code>ESC</code> key) or\nif the <a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method was called.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        },
        {
          "name": "drop",
          "description": "<p>This event is fired when a drag gesture is completed successfully.</p>\n<p>This event is <strong>not</strong> fired if the drag was aborted by the user pressing the <code>ESC</code> key or if the\n<a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method was called.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        },
        {
          "name": "drag",
          "description": "<p>This event is fired as a drag gesture progresses due to cursor movement.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        },
        {
          "name": "beforeDragStart",
          "description": "<p>This event is fired prior to starting a drag gesture. This does not occur immediately after the user\nperforms the pointer/mousedown/touchstart but only after the <a href=\"#Core/mixin/Draggable#config-dragThreshold\">dragThreshold</a> amount of\nmovement has taken place.</p>\n<p>The drag is canceled if a listener returns <code>false</code>.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "dragStart",
          "description": "<p>This event is fired when a drag gesture has started. This does not occur immediately after the user\nperforms the pointer/mousedown/touchstart but only after the <a href=\"#Core/mixin/Draggable#config-dragThreshold\">dragThreshold</a> amount of\nmovement has taken place.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Droppable",
      "modulePath": "Core/mixin/Droppable",
      "description": "<p>Mix this into another class to enable drop support and receive drops from <a href=\"#Core/mixin/Draggable\">draggables</a>.</p>\n<p>There are 4 basic methods that a droppable implements. These methods are called as drag operations occur:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MyDroppable extends Base.mixin(Droppable) {\n     dragEnter(drag) {\n         // a drag has entered the drop zone... create some type of drop indicator perhaps\n     }\n\n     dragMove(drag) {\n         // a drag has changed position... update drop indicators\n     }\n\n     dragDrop(drag) {\n         // drop has occurred... process data from the drag context\n     }\n\n     dragLeave(drag) {\n         // the drag has left the drop zone... cleanup indicators\n     }\n }\n</code></pre>\n<p>Instances of <code>Droppable</code> are associated with an element to receive drag operations:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> let target = new MyDroppable({\n     dropRootElement : someElement\n });\n</code></pre>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Droppable.js",
      "path": "/Calendar/lib/Core/mixin",
      "configs": [
        {
          "name": "droppableSelector",
          "description": "<p>A selector, which, if specified, narrows the dropability to child elements of the\n<a href=\"#Core/mixin/Droppable#config-dropRootElement\">dropRootElement</a> which match this selector.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dropRootElement",
          "description": "<p>Set this config to the element where drops should be received. When set, the <code>b-droppable</code> CSS class is\nadded to the element and the <code>Droppable</code> instance is associated with that element so that it can be\nfound by <a href=\"#Core/mixin/Draggable\">draggables</a>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "dropping",
          "description": "<p>The current <code>DragContext</code>. This is set when a drag enters this target. Changing this config causes the\n<a href=\"#Core/mixin/Droppable#function-dragEnter\">dragEnter</a> and <a href=\"#Core/mixin/Droppable#function-dragLeave\">dragLeave</a> methods to be called. If <code>dragEnter</code> returns\n<code>false</code> for a drag, this value will be set to <code>null</code>.</p>",
          "type": "Core.util.drag.DragContext",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "dropEventer",
          "access": "internal",
          "description": "<p>Return the <code>Events</code> instance from which drop events are fired.</p>",
          "type": "Core.mixin.Events",
          "scope": "instance"
        },
        {
          "name": "droppableCls",
          "description": "<p>Returns the CSS class that is added to the <a href=\"#Core/mixin/Droppable#config-dropRootElement\">dropRootElement</a>, i.e., <code>'b-droppable'</code>.</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "dragEnter",
          "description": "<p>This method is called when a drag enters this droppable's <code>dropRootElement</code>. In many cases, this method is used\nto create some sort of drop indicator to provide user feedback.</p>\n<p>If this method does not return <code>false</code>, the <a href=\"#Core/mixin/Droppable#property-dropping\">dropping</a> config will retain the given <code>drag</code> context\nwhich was set prior to this method being called.</p>\n<p>If this method returns <code>false</code>, the drop will not be accepted. Neither <a href=\"#Core/mixin/Droppable#function-dragDrop\">dragDrop</a> nor\n<a href=\"#Core/mixin/Droppable#function-dragLeave\">dragLeave</a> will be called for this drop. If the drag leaves this target and re-enters, this\nmethod will be called again. While <code>dropping</code> will already be updated before this method is called, it will be\nreset to <code>null</code> in this case.</p>\n<p>The base class implementation of this method fires the <a href=\"#Core/mixin/Droppable#event-dragEnter\">dragEnter</a> event.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "dragMove",
          "description": "<p>This method is called when the drag that was previously announced via <a href=\"#Core/mixin/Droppable#function-dragEnter\">dragEnter</a> moves to a new\nposition. This is typically where drop indicators are updated to reflect the new position.</p>\n<p>The base class implementation of this method fires the <a href=\"#Core/mixin/Droppable#event-dragMove\">dragMove</a> event.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragDrop",
          "description": "<p>This method is called when the drag that was previously announced via <a href=\"#Core/mixin/Droppable#function-dragEnter\">dragEnter</a> has ended with\na drop. In addition to any cleanup (since <a href=\"#Core/mixin/Droppable#function-dragLeave\">dragLeave</a> will not be called), this method handles\nany updates associated with the data from the drag context and the position of the drop.</p>\n<p>The base class implementation of this method fires the <a href=\"#Core/mixin/Droppable#event-drop\">drop</a> event.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragLeave",
          "description": "<p>This method is called when the drag that was previously announced via <a href=\"#Core/mixin/Droppable#function-dragEnter\">dragEnter</a> leaves this\ndroppable's <code>dropRootElement</code>, or the drag is <a href=\"#Core/util/drag/DragContext#property-aborted\">aborted</a> by the user\npressing the <code>ESC</code> key, or the <a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method is called.</p>\n<p>This is the time to cleanup anything created by <code>dragEnter</code>.</p>\n<p>The base class implementation of this method fires the <a href=\"#Core/mixin/Droppable#event-dragLeave\">dragLeave</a> event.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "dragEnter",
          "description": "<p>This event is fired when a drag enters this droppable's <code>dropRootElement</code>. It is fired by the droppable's\n<a href=\"#Core/mixin/Droppable#function-dragEnter\">dragEnter</a> method.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        },
        {
          "name": "dragMove",
          "description": "<p>This event is fired when the drag that was previously announced via <a href=\"#Core/mixin/Droppable#event-dragEnter\">dragEnter</a> moves to a new\nposition. It is fired by the droppable's <a href=\"#Core/mixin/Droppable#function-dragMove\">dragMove</a> method.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        },
        {
          "name": "drop",
          "description": "<p>This event is fired when the drag that was previously announced via <a href=\"#Core/mixin/Droppable#event-dragEnter\">dragEnter</a> has ended with\na drop. It is fired by the droppable's <a href=\"#Core/mixin/Droppable#function-dragDrop\">dragDrop</a> method.</p>\n<p>This event is <strong>not</strong> fired when a drag gesture is aborted by the user pressing the <code>ESC</code> key or if the\n<a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method is called.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        },
        {
          "name": "dragLeave",
          "description": "<p>This event is fired when the drag that was previously announced via <a href=\"#Core/mixin/Droppable#event-dragEnter\">dragEnter</a> leaves this\ndroppable's <code>dropRootElement</code>. It is fired by the droppable's <a href=\"#Core/mixin/Droppable#function-dragLeave\">dragLeave</a> method.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.Draggable",
              "description": "<p>The draggable instance that fired the event.</p>"
            },
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag context.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Events",
      "modulePath": "Core/mixin/Events",
      "description": "<p>Mix this into another class to enable event handling.</p>\n<h2>Basic usage</h2>\n<p>Listeners can be added either through config:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let button = new Button({\n  listeners: {\n    click: () => {},\n    press: () => {},\n    ...\n  }\n});\n</code></pre>\n<p><em>NOTE</em>: Do not reuse listeners config object, use new every time:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// wrong\nlet config = { click : () => {} }\nnew Button({\n    listeners : config\n})\nnew Button({\n    listeners : config\n})\n// right\nnew Button({\n    listeners : { click : () => {} }\n})\nnew Button({\n    listeners : { click : () => {} }\n})\n</code></pre>\n<p>Or by calling on()/addListener():</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let button = new Button();\n\nbutton.addListener('press', () => {});\n// on is an alias for addListener\nbutton.on('click', () => {});\n</code></pre>\n<p>This style also accepts multiple listeners in same way as when using config:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.on({\n  click: () => {},\n  press: () => {},\n  ...\n});\n</code></pre>\n<h2>Options</h2>\n<h3>Once</h3>\n<p>Listeners can be configured to automatically deregister after first trigger by specifying config option <code>once</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.on({\n  click: () => {},\n  once: true\n});\n</code></pre>\n<h3>Priority</h3>\n<p>Specifying priority affects the order in which listeners are called when triggering an event. Higher priorities will be\ncalled before lower. Default value is 0.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.on({\n  click: this.onClick,\n  prio: 1\n});\n</code></pre>\n<h3>This reference</h3>\n<p>If desired, you can specify thisObj when configuring listeners. There is no need if you are using arrow functions as\nlisteners, but might be handy in other cases. Of course, you can also use bind to set <code>this</code> reference.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.on({\n  click: this.onClick,\n  thisObj: this\n});\n\n// or\n\nbutton.on({\n  click: this.onClick.bind(this)\n});\n</code></pre>\n<h3>Buffering</h3>\n<p>By specifying a <code>buffer</code> events that fire frequently can be grouped together and delayed. A handler for the event will be called once only, when no new event has been fired during the specified buffer time:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.on({\n  click  : this.onClick,\n  buffer : 200 // in milliseconds\n});\n</code></pre>\n<p>In this example, if a user clicked the button 6 times very fast (&lt;200ms between each click),\nthe <code>this.onClick</code> handler would be called only once 200 milliseconds after the last click.</p>\n<h3>Throttling</h3>\n<p>Create a &quot;debounced&quot; function which will call on the &quot;leading edge&quot; of a timer period.\nWhen first invoked will call immediately, but invocations after that inside its buffer\nperiod will be rejected, and <em>one</em> invocation will be made after the buffer period has expired.</p>\n<p>This is useful for responding immediately to a first mousemove, but from then on, only\ncalling the action function on a regular timer while the mouse continues to move.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>button.on({\n  click    : this.onClick,\n  throttle : 200 // in milliseconds\n});\n</code></pre>\n<p>In this example, if a user clicked the button 6 times very fast, the <code>this.onClick</code> handler would be called once immediately on the first click and a second time 200 milliseconds after the <strong>first</strong> click.\nSo in reality the <code>click</code> event handler will be called every 200ms independent of amount of click in a middle, if the event was triggered at least once during the <code>throttle</code> timeout.</p>\n<h3>Detacher</h3>\n<p>A convenient way of unregistering events is to use a detacher, a function returned when adding listeners that you\ncall later to deregister them. As of version 1.0, detachable defaults to true.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let detacher = button.on({\n  click: () => {},\n  press: () => {},\n  detachable: true\n});\n\n// when you want to detach, for example in destroy()\ndetacher();\n</code></pre>\n<h3>Auto detaching</h3>\n<p>When listeners are bound to a class instance using <code>thisObj</code>, the <code>thisObj</code>'s <code>doDestroy</code> method\nis overridden to remove the listeners before calling the overridden doDestroy.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyClass extends Base {\n  construct() {\n    let button = new Button({\n      listeners: {\n        click: () => {},\n        thisObj: this\n      }\n    });\n  }\n\n  doDestroy() {\n    // clean up stuff\n  }\n}\n\nlet myObj = new MyClass();\n// clean up, also removes listeners\nmyObj.destroy();\n</code></pre>\n<h3>On-functions</h3>\n<p>When mixing Events into another class it can be configured to call on-functions when events are triggered.\nOn-functions are functions named 'onEventName', for example 'onClick', 'onPress' declared on the class triggering\nthe event.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// mix Events in with on-functions activated\nlet button = new Button({\n  callOnFunctions: true,\n\n  onClick: () => {}\n});\n\n// or add a getter in class declaration\n</code></pre>\n<p>Returning <code>false</code> from an on-function will prevent triggering listeners for the event.</p>\n<h3>Catching all events</h3>\n<p>By specifying a listener for <a href=\"#Core/mixin/Events#event-catchAll\">catchAll</a> a function can be notified when any event is triggered:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const button = new Button({\n   listeners : {\n       catchAll(event) {\n           // All events on the button will pass through here\n       }\n   }\n});\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Events.js",
      "path": "/Calendar/lib/Core/mixin",
      "events": [
        {
          "name": "beforeDestroy",
          "description": "<p>Fires before an object is destroyed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Object",
              "description": "<p>The Object that is being destroyed.</p>"
            }
          ]
        },
        {
          "name": "destroy",
          "description": "<p>Fires when an object is destroyed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Object",
              "description": "<p>The Object that is being destroyed.</p>"
            }
          ]
        },
        {
          "name": "catchAll",
          "description": "<p>Fires when any other event is fired from the object.</p>\n<p><strong>Note</strong>: <code>catchAll</code> is fired for both public and private events. Please rely on the public events only.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Object",
              "description": "<p>The Object that contains event details</p>"
            },
            {
              "name": "event.type",
              "type": "String",
              "description": "<p>The type of the event which is caught by the listener</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "deprecatedEvents",
          "access": "internal",
          "description": "<p>The list of deprecated events as an object, where <code>key</code> is an event name which is deprecated and\n<code>value</code> is an object which contains values for\n<a href=\"#Core/helper/VersionHelper#function-deprecate-static\">VersionHelper</a>:</p>\n<ul>\n<li>product {String} The name of the product;</li>\n<li>invalidAsOfVersion {String} The version where the offending code is invalid (when any compatibility\nlayer is actually removed);</li>\n<li>message {String} Warning message to show to the developer using a deprecated API;</li>\n</ul>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>return {\n    click : {\n        product            : 'Grid',\n        invalidAsOfVersion : '1.0.0',\n        message            : 'click is deprecated!'\n    }\n}\n</code></pre>",
          "scope": "static",
          "returns": [
            {
              "type": {
                "names": [
                  "Object"
                ]
              }
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "callOnFunctions",
          "description": "<p>Set to true to call onXXX method names (e.g. <code>onShow</code>, <code>onClick</code>), as an easy way to listen for events.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const container = new Container({\n    callOnFunctions : true\n\n    onHide() {\n         // Do something when the 'hide' event is fired\n    }\n});\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "listeners",
          "description": "<p>The listener set for this object.</p>\n<p>Listeners can be specified in target class config and they will be merged with any listeners specified in\nthe instantiation config. Class listeners will be fired first:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyStore extends Store({\n    static get configurable() {\n        return {\n            listeners : {\n                myCustomEvent() {\n                },\n                load : {\n                    prio : 10000,\n                    fn() { // this load listener handles things first }\n                }\n            }\n        }\n    }\n});\n\nlet store = new MyStore({\n  listeners: {\n    load: () => { // This load listener runs after the class's },\n    ...\n  }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "bubbleEvents",
          "description": "<p>An object where property names with a truthy value indicate which events should bubble up the ownership\nhierarchy when triggered.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const container = new Container({\n    items : [\n       { type : 'text', bubbleEvents : { change : true }}\n    ],\n\n    listeners : {\n        change() {\n            // Will catch change event from the text field\n        }\n    }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Misc"
        }
      ],
      "functions": [
        {
          "name": "doDestroy",
          "access": "internal",
          "description": "<p>Auto detaches listeners registered from start, if set as detachable</p>",
          "scope": "instance"
        },
        {
          "name": "addListener",
          "description": "<p>Adds an event listener. This method accepts parameters in the following format:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> myObject.addListener({\n     thisObj    : this,          // The this reference for the handlers\n     eventname2 : 'functionName' // Resolved at invocation time using the thisObj,\n     otherevent : {\n         fn      : 'handlerFnName',\n         once    : true          // Just this handler is auto-removed on fire\n     },\n     yetanother  : {\n         fn      : 'yetAnotherHandler',\n         args    : [ currentState1, currentState2 ] // Capture info to be passed to handler\n     },\n     prio        : 100           // Higher prio listeners are called before lower\n });\n</code></pre>\n<p>When listeners have a <code>thisObj</code> option, they are linked to the lifecycle of that object.\nWhen it is destroyed, those listeners are removed.</p>\n<p>A simpler signature may be used when only adding a listener for one event and no extra options\n(such as <code>once</code> or <code>delay</code>) are required:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myObject.addListener('click', myController.handleClicks, myController);\n</code></pre>\n<p>The args in this simple case are <code>eventName</code>, <code>handler</code> and <code>thisObj</code></p>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>An object containing listener definitions, or the event name to listen for</p>"
            },
            {
              "name": "config.thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for all listeners.\n(May be overridden if a handler is specified in object form)</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.once",
              "type": "Boolean",
              "description": "<p>Specify as <code>true</code> to remove the listener as soon as it is invoked.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.expires",
              "type": [
                "Number",
                "Object"
              ],
              "description": "<p>The listener only waits for a specified time before\nbeing removed. The value may be a number or an object containing an expiry handler.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.expires.delay",
              "type": "Number",
              "description": "<p>How long to wait for the event for.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.expires.alt",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The function to call when the listener expires\n<strong>without having been triggered</strong>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.args",
              "type": "Array.<Object>",
              "description": "<p>An array of arguments to be passed to the handler before the event object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.prio",
              "type": "Number",
              "description": "<p>The priority for all listeners; higher priority listeners are called before lower.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.buffer",
              "type": "Number",
              "description": "<p>A buffer time in milliseconds to wait after last event trigger to call the handler, to reduce the amount of handler calls for frequent events.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.throttle",
              "type": "Number",
              "description": "<p>A millisecond timeout value to throttle event triggering. With it specified a handler\nwill be called once immediately and then all following calls during the timeout period will be grouped together into one call once per throttle period.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "thisObj",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p>Default <code>this</code> reference for all listeners in the config object, or the handler\nfunction to call if providing a string as the first arg.</p>",
              "optional": true
            },
            {
              "name": "oldThisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference if the old signature starting with a string event name is used..</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "function",
            "description": "<p>Returns a detacher function unless configured with <code>detachable: false</code>. Call detacher to remove listeners</p>"
          }
        },
        {
          "name": "on",
          "description": "<p>Alias for <a href=\"#Core/mixin/Events#function-addListener\">addListener</a>. Adds an event listener. This method accepts parameters in the following format:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> myObject.on({\n     thisObj    : this,          // The this reference for the handlers\n     eventname2 : 'functionName' // Resolved at invocation time using the thisObj,\n     otherevent : {\n         fn      : 'handlerFnName',\n         once    : true          // Just this handler is auto-removed on fire\n     },\n     yetanother  : {\n         fn      : 'yetAnotherHandler',\n         args    : [ currentState1, currentState2 ] // Capture info to be passed to handler\n     },\n     prio        : 100           // Higher prio listeners are called before lower\n });\n</code></pre>\n<p>When listeners have a <code>thisObj</code> option, they are linked to the lifecycle of that object.\nWhen it is destroyed, those listeners are removed.</p>\n<p>A simpler signature may be used when only adding a listener for one event and no extra options\n(such as <code>once</code> or <code>delay</code>) are required:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myObject.on('click', myController.handleClicks, myController);\n</code></pre>\n<p>The args in this simple case are <code>eventName</code>, <code>handler</code> and <code>thisObj</code></p>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>An object containing listener definitions.</p>"
            },
            {
              "name": "config.thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference for all listeners.\n(May be overridden if a handler is specified in object form)</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.once",
              "type": "Boolean",
              "description": "<p>Specify as <code>true</code> to remove the listener as soon as it is invoked.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.expires",
              "type": [
                "Number",
                "Object"
              ],
              "description": "<p>The listener only waits for a specified time before\nbeing removed. The value may be a number or an object containing an expiry handler.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.expires.delay",
              "type": "Number",
              "description": "<p>How long to wait for the event for.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.expires.alt",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The function to call when the listener expires\n<strong>without having been triggered</strong>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.args",
              "type": "Array.<Object>",
              "description": "<p>An array of arguments to be passed to the handler before the event object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "thisObj",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p>Default <code>this</code> reference for all listeners in the config object.</p>",
              "optional": true
            },
            {
              "name": "oldThisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference if the old signature starting with a string event name is used..</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "function",
            "description": "<p>Returns a detacher function unless configured with <code>detachable: false</code>. Call detacher to remove listeners</p>"
          }
        },
        {
          "name": "un",
          "description": "<p>Shorthand for <a href=\"#Core/mixin/Events#function-removeListener\">removeListener</a></p>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>A config object or the event name</p>"
            },
            {
              "name": "thisObj",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p><code>this</code> reference for all listeners, or the listener function</p>"
            },
            {
              "name": "oldThisObj",
              "type": "Object",
              "description": "<p><code>this</code> The this object for the legacy way of adding listeners</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeListener",
          "description": "<p>Removes an event listener. Same API signature as <a href=\"#Core/mixin/Events#function-addListener\">addListener</a></p>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>A config object or the event name</p>"
            },
            {
              "name": "thisObj",
              "type": [
                "Object",
                "function"
              ],
              "description": "<p><code>this</code> reference for all listeners, or the listener function</p>"
            },
            {
              "name": "oldThisObj",
              "type": "Object",
              "description": "<p><code>this</code> The this object for the legacy way of adding listeners</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "findListener",
          "access": "internal",
          "description": "<p>Finds the index of a particular listener to the named event. Returns <code>-1</code> if the passed\nfunction/thisObj listener is not present.</p>",
          "parameters": [
            {
              "name": "eventName",
              "type": "String",
              "description": "<p>The name of an event to find a listener for.</p>"
            },
            {
              "name": "listenerToFind",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The handler function to find.</p>"
            },
            {
              "name": "defaultThisObj",
              "type": "Object",
              "description": "<p>The <code>thisObj</code> for the required listener.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hasListener",
          "description": "<p>Check if any listener is registered for the specified eventName</p>",
          "parameters": [
            {
              "name": "eventName",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if listener is registered, otherwise <code>false</code></p>"
          }
        },
        {
          "name": "relayAll",
          "description": "<p>Relays all events through another object that also implements Events mixin. Adds a prefix to the event name\nbefore relaying, for example add -&gt; storeAdd</p>\n<pre class=\"prettyprint source\"><code>// Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:\n'storeLoad', 'storeChange', 'storeRemoveAll' etc.\nstore.relayAll(grid, 'store');\n\ngrid.on('storeLoad', () => console.log('Store loaded');\n</code></pre>",
          "parameters": [
            {
              "name": "through",
              "type": "Core.mixin.Events",
              "description": "<p>Object to relay the events through, needs to mix Events mixin in</p>"
            },
            {
              "name": "prefix",
              "type": "String",
              "description": "<p>Prefix to add to event name</p>"
            },
            {
              "name": "transformCase",
              "type": "Boolean",
              "description": "<p>Specify false to prevent making first letter of event name uppercase</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeAllListeners",
          "description": "<p>Removes all listeners registered to this object</p>",
          "scope": "instance"
        },
        {
          "name": "onListen",
          "access": "internal",
          "description": "<p>This method is called when the first listener for an event is added.</p>",
          "parameters": [
            {
              "name": "eventName",
              "type": "String"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onUnlisten",
          "access": "internal",
          "description": "<p>This method is called when the last listener for an event is removed.</p>",
          "parameters": [
            {
              "name": "eventName",
              "type": "String"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachAutoDetacher",
          "access": "private",
          "description": "<p>Internal function used to hook destroy() calls when using thisObj</p>",
          "scope": "instance"
        },
        {
          "name": "detachAutoDetacher",
          "access": "private",
          "description": "<p>Internal function used restore hooked destroy() calls when using thisObj</p>",
          "scope": "instance"
        },
        {
          "name": "trigger",
          "description": "<p>Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener\nmakes function return false.</p>",
          "parameters": [
            {
              "name": "eventName",
              "type": "String",
              "description": "<p>Event name for which to trigger listeners</p>"
            },
            {
              "name": "param",
              "type": "Object",
              "description": "<p>Single parameter passed on to listeners, source property will be added to it (this)</p>",
              "optional": true
            },
            {
              "name": "param.bubbles",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to indicate that the event will bubble up the widget\nownership hierarchy. For example up a Menu-&gt;parent Menu tree, or a Field-&gt;Container tree.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Boolean",
              "Promise"
            ],
            "description": "<p>Returns false if any listener returned false, or a Promise yielding\ntrue / false based on what is returned from the async listener functions, otherwise true</p>"
          }
        },
        {
          "name": "suspendEvents",
          "description": "<p>Prevents events from being triggered until <a href=\"#Core/mixin/Events#function-resumeEvents\">resumeEvents()</a> is called. Optionally queues events that are triggered while\nsuspended. Multiple calls stack to require matching calls to <code>resumeEvents()</code> before actually resuming.</p>",
          "parameters": [
            {
              "name": "queue",
              "type": "Boolean",
              "description": "<p>Specify true to queue events triggered while suspended</p>",
              "default": false
            }
          ],
          "scope": "instance"
        },
        {
          "name": "resumeEvents",
          "description": "<p>Resume event triggering after a call to <a href=\"#Core/mixin/Events#function-suspendEvents\">suspendEvents()</a>. If any triggered events were queued they will be triggered.</p>",
          "scope": "instance",
          "returns": {
            "description": "<p><code>true</code> if events have been resumed (multiple calls to suspend require an equal number of resume calls to resume).</p>"
          }
        }
      ]
    },
    {
      "name": "Factoryable",
      "modulePath": "Core/mixin/Factoryable",
      "description": "<p>This mixin is applied to base classes of a type that will be dynamically created by type name aliases.</p>\n<pre class=\"prettyprint source\"><code> class Layout extends Base.mixin(Factoryable) {\n     static get factoryable() {\n         return {\n             defaultType : 'default'\n         };\n     }\n\n     static get type() {\n         return 'default';\n     }\n }\n\n class Fit extends Layout {\n     static get type() {\n         return 'fit';\n     }\n }\n</code></pre>\n<p>Once a family of classes has been defined, instances are created using the <code>create()</code> method:</p>\n<pre class=\"prettyprint source\"><code> const layout = Layout.create(config);\n</code></pre>\n<p>In the above example, <code>config</code> can be a type name (such as &quot;fit&quot;) or a config object with a <code>type</code> property that\nholds the type name.</p>\n<p>Factories can also extend other factories. For example, one factory creates objects that are useful across a wide\nrange of consumers, and a second factory creates objects for a more specialized consumer. If that specialized\nconsumer can also consume objects from the first factory, then the second factory can specify this relationship:</p>\n<pre class=\"prettyprint source\"><code> class General extends Base.mixin(Factoryable) {\n     ...\n }\n\n class Specialized extends Base.mixin(Factoryable) {\n     static get factoryable() {\n         return {\n             extends : General,\n             ...\n         };\n     }\n }\n</code></pre>\n<p>The <code>extends</code> factoryable option can be either a class that mixes in <code>Factoryable</code> or an array of such classes.</p>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Factoryable.js",
      "path": "/Calendar/lib/Core/mixin",
      "properties": [
        {
          "name": "factoryable",
          "access": "internal",
          "description": "<p>This property getter returns options that control the factory process. This property getter must be\ndefined by the class that mixes in <code>Factoryable</code> in order to initialize the factory properly.</p>\n<pre class=\"prettyprint source\"><code> static get factoryable() {\n     return {\n         defaultType : 'default'\n     };\n }\n</code></pre>\n<p>If there are no special options to provide, this method can return nothing (<code>undefined</code>):</p>\n<pre class=\"prettyprint source\"><code> static get factoryable() {\n     // initialize the factory with all default options\n }\n</code></pre>",
          "type": "Object",
          "scope": "static",
          "properties": [
            {
              "name": "factoryable.caseless",
              "type": "Boolean",
              "description": "<p>Specify <code>false</code> to use case-sensitive type names. The\ndefault is to ignore case.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "factoryable.defaultType",
              "type": "String",
              "description": "<p>The default type to create when a config object has\nno <code>typeKey</code> property.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "factoryable.extends",
              "type": [
                "function",
                "Array.<function()>"
              ],
              "description": "<p>One or more classes that mix in <code>Factoryable</code> to\nuse for resolving type names when a type name is not found in this factory.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "factoryable.typeKey",
              "type": "String",
              "description": "<p>The name of the property in a config object that holds\nthe type name.</p>",
              "default": "'type'",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "alias",
          "access": "internal",
          "description": "<p>One or more additional type name aliases for this class. This can be useful for renaming and maintaining\na previous type name.</p>\n<pre class=\"prettyprint source\"><code> class Fit extends Layout {\n     static get type() {\n         return 'fit';\n     }\n\n     static get alias() {\n         return 'fill';  // deprecated type name (now known as 'fit')\n     }\n }\n</code></pre>",
          "type": [
            "String",
            "Array.<String>"
          ],
          "scope": "static"
        },
        {
          "name": "type",
          "description": "<p>The (canonical) type name for this class by which instances can be created using the static\n<a href=\"#Core/mixin/Factoryable#function-create-static\">create()</a> method.</p>",
          "type": "String",
          "scope": "static"
        }
      ],
      "functions": [
        {
          "name": "register",
          "access": "internal",
          "description": "<p>Registers a class (<code>cls</code>) associated with the given <code>type</code>.</p>",
          "parameters": [
            {
              "name": "type",
              "type": [
                "String",
                "Array.<String>"
              ],
              "description": "<p>A string, array of strings or a comma-separated string containing the type names\nfor the specified <code>cls</code> class.</p>"
            },
            {
              "name": "cls",
              "type": "function",
              "description": "<p>The class (constructor function)</p>"
            },
            {
              "name": "replace",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to overwrite existing registered types. Otherwise, this method will throw\nan exception if the <code>type</code> is already registered with this factory.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "isA",
          "description": "<p>Returns 'true` if the passed instance is of the passed type or of a derived class.</p>",
          "parameters": [
            {
              "name": "instance",
              "type": "Object",
              "description": "<p>The object to test.</p>"
            },
            {
              "name": "type",
              "type": "String",
              "description": "<p>The type to test against</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "isType",
          "description": "<p>Returns 'true` if the passed instance is of the passed type.</p>",
          "parameters": [
            {
              "name": "instance",
              "type": "Object",
              "description": "<p>The object to test.</p>"
            },
            {
              "name": "type",
              "type": "String",
              "description": "<p>The type to test against</p>"
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to return <code>true</code> if the class is a subclass of the passed type.</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "create",
          "description": "<p>Creates an instance from this factory, given the type name or a config object.</p>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The type name string or config object.</p>"
            },
            {
              "name": "options",
              "type": [
                "String",
                "function",
                "Object"
              ],
              "description": "<p>Creation options (for details see <a href=\"#Core/mixin/Factoryable#function-reconfigure-static\">reconfigure</a>).</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "reconfigure",
          "description": "<p>Reconfigures an optional existing instance based on the provided config and returns the correctly configured\ninstance. This will be the <code>existingInstance</code> if the <code>config</code> does not specify a different type.</p>\n<p>If <code>config</code> is <code>null</code> (or simply falsy), this method will destroy the <code>existingInstance</code> (if any) and return\n<code>null</code>.</p>\n<p>If there is no <code>existingInstance</code>, the config must specify a type. That is, it must be a string (the type name)\nor an object containing a <code>type</code> property, the <code>defaultType</code> must be provided or the factory itself must have\na <code>defaultType</code> specified (see <a href=\"#Core/mixin/Factoryable#property-factoryable-static\">factoryable</a>).</p>\n<p>When an <code>existingInstance</code> is provided and a type is specified, the instance will be reconfigured via <code>setConfig</code>\nif it is of that type. Otherwise, the <code>existingInstance</code> is destroyed (if it is owned by the <code>options.owner</code>)\nand a new instance of the correct type is created.</p>",
          "parameters": [
            {
              "name": "existingInstance",
              "type": "Object",
              "description": "<p>The instance to reconfigure. This can be <code>null</code>.</p>"
            },
            {
              "name": "config",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The type name string or config object.</p>"
            },
            {
              "name": "options",
              "type": [
                "String",
                "function",
                "Object"
              ],
              "description": "<p>Additional options to control the reconfiguration process. If this\nvalue is a string or a class constructor, it treated as <code>options.type</code>. If this value is an class instance, it\nis used as the <code>options.owner</code>. If this is a function, it is treated as <code>options.setup</code>. NOTE: functions declared\nusing the <code>function</code> keyword are equivalent to class constructors. Use an arrow function or a class method to\navoid this when a <code>setup</code> function is intended.</p>",
              "optional": true
            },
            {
              "name": "options.type",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The default type to use if the <code>config</code> object does not specify a type.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.owner",
              "type": "Object",
              "description": "<p>The owner of any created instances. If the <code>existingInstance</code> is being replaced,\nthis value determines if the instance will be destroyed.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.defaults",
              "type": "Object",
              "description": "<p>A config object of default values to use when creating a new instance.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.setup",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>A function or the name of a method (on the <code>options.owner</code>) to call\nprior to creating a new instance. It is passed the config object that will be used to create the instance. If a\ntruthy value is returned, that value is passed to the constructor instead of the provided config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.transform",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>A function or the name of a method (on the <code>options.owner</code>) to call\nwith the raw config object prior to processing and the value it returns replaces the raw value. This function is\nused to transform strings or arrays (for example) into proper config objects.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.cleanup",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>A function or the name of a method (on the <code>options.owner</code>) to call\nprior to destroying the <code>existingInstance</code>. The <code>existingInstance</code> is passed as the sole argument.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object",
            "description": "<p>The reconfigured instance (either <code>existingInstance</code> or a new instance of the desired type)</p>"
          }
        },
        {
          "name": "resolveType",
          "description": "<p>This method returns the constructor of the class registered for the given type name.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>The type name to look up.</p>"
            },
            {
              "name": "optional",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to return <code>null</code> if <code>type</code> is not found instead of throwing an exception.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "function"
          }
        }
      ]
    },
    {
      "name": "Featureable",
      "modulePath": "Core/mixin/Featureable",
      "description": "<p>This mixin provides management of a set of features that can be manipulated via the <code>features</code> config.</p>\n<p>The first step in using <code>Featureable</code> is to define the family of features using <code>Factoryable</code> to declare a base\nclass for features to extend:</p>\n<pre class=\"prettyprint source\"><code> class SuperWidgetFeature extends InstancePlugin.mixin(Factoryable) {\n     static get factoryable() {\n         //\n     }\n }\n</code></pre>\n<p>The various feature classes extend the <code>SuperWidgetFeature</code> base class and call <code>initClass()</code> to register themselves:</p>\n<pre class=\"prettyprint source\"><code> export default class AmazingSuperWidgetFeature extends SuperWidgetFeature {\n     static get type() {\n         return 'amazing';\n     }\n }\n\n AmazingSuperWidgetFeature.initClass();\n</code></pre>\n<p>A class that supports these features via <code>Featureable</code> is declared like so:</p>\n<pre class=\"prettyprint source\"><code> class SuperWidget extends Widget.mixin(Featureable) {\n     static get featureable() {\n         return {\n             factory : SuperWidgetFeature\n         };\n     }\n\n     static get configurable() {\n         return {\n             // Declare the default features. These can be disabled by setting them to a falsy value. Using\n             // configurable(), the value defined by this class is merged with values defined by derived classes\n             // and ultimately the instance.\n             features : {\n                 amazing : {\n                     ...\n                 }\n             }\n         };\n     }\n }\n</code></pre>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Featureable.js",
      "path": "/Calendar/lib/Core/mixin",
      "configs": [
        {
          "name": "features",
          "description": "<p>Specifies the features to create and associated with the instance. The keys of this object are the names\nof features. The values are config objects for those feature instances.</p>\n<p>After construction, this property can be used to access the feature instances and even reconfigure them.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code> instance.features.amazing = {\n     // reconfigure this feature\n }\n</code></pre>\n<p>This can also be done in bulk:</p>\n<pre class=\"prettyprint source\"><code> instance.features = {\n     amazing : {\n         // reconfigure this feature\n     },\n     // reconfigure other features\n }\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "featureable",
          "access": "internal",
          "description": "<p>This property getter returns options that control feature management for the derived class. This\nproperty getter must be defined by the class that mixes in <code>Featureable</code> in order to initialize the\nclass properly.</p>\n<pre class=\"prettyprint source\"><code> class SuperWidget extends Widget.mixin(Featureable) {\n     static get featureable() {\n         return {\n             factory : SuperWidgetFeature\n         };\n     }\n     ...\n }\n</code></pre>",
          "type": "Object",
          "scope": "static",
          "properties": [
            {
              "name": "featureable.factory",
              "type": "Core.mixin.Factoryable",
              "description": "<p>The factoryable class (not one of its instances)\nthat will be used to create feature instances.</p>",
              "isSubParam": true
            },
            {
              "name": "featureable.ownerName",
              "type": "String",
              "description": "<p>The config or property to assign on each feature as\na reference to its creator, the <code>Featureable</code> instance.</p>",
              "default": "'client'",
              "optional": true,
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "hasFeature",
          "description": "<p>Returns <code>true</code> if the specified feature is active for this instance and <code>false</code> otherwise.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The feature name</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "Finalizable",
      "modulePath": "Core/mixin/Finalizable",
      "description": "<p>This mixin provides an asynchronous completion mechanism. This allows a process to coordinate its async actions\n(such as Ajax requests or user interaction) with cleanup.</p>\n<p>Consider a context tracking helper class, for example:</p>\n<pre class=\"prettyprint source\"><code> class Context extends Base.mixin(Finalizable) {\n     // ...\n\n     async finish() {\n         this.owner.trigger('finish', {\n             context : this\n         });\n\n         // Wait for any scheduled finalizer to run...\n         await this.finalize();\n     }\n\n     doFinalize() {\n         this.destroy();\n     }\n }\n</code></pre>\n<p>When the <code>finish</code> event is processed, the receiver can register a promise for whatever processing it would like to\nperform:</p>\n<pre class=\"prettyprint source\"><code> class Foo {\n     onFinish({ context }) {\n         context.finalizer = this.askUser(context);\n     }\n\n     async askUser(context) {\n         //\n     }\n }\n</code></pre>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Finalizable.js",
      "path": "/Calendar/lib/Core/mixin",
      "properties": [
        {
          "name": "finalizer",
          "description": "<p>This property can be set any time prior to calling <a href=\"#Core/mixin/Finalizable#function-finalize\">finalize</a> (i.e., when the\n<a href=\"#Core/mixin/Finalizable#property-isFinalizing\">isFinalizing</a> property goes to <code>true</code>). When set, this instance will <code>await</code> this\npromise before completing the finalization process by calling <a href=\"#Core/mixin/Finalizable#function-doFinalize\">doFinalize</a>.</p>",
          "type": "Promise",
          "scope": "inner"
        },
        {
          "name": "finalizing",
          "access": "private",
          "description": "<p>This property holds the <code>Promise</code> that will resolve when <a href=\"#Core/mixin/Finalizable#function-finalize\">finalize</a> has completed. It is\nset when <a href=\"#Core/mixin/Finalizable#function-finalize\">finalize</a> is called and cleared on return.</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "isFinalized",
          "description": "<p>This property is <code>true</code> once the instance completes the <a href=\"#Core/mixin/Finalizable#function-finalize\">finalize</a> method.</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "isFinalizing",
          "description": "<p>This property is set to <code>true</code> when <a href=\"#Core/mixin/Finalizable#function-finalize\">finalize</a> is called.</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "doFinalize",
          "description": "<p>This template method is called at the end of <a href=\"#Core/mixin/Finalizable#function-finalize\">finalize</a>. By default it calls <code>destroy()</code>, but\ncan be replaced by the derived class. This can be useful if it is not the <code>Finalizable</code> instance that awaits\nthe <a href=\"#Core/mixin/Finalizable#function-finalize\">finalize</a> method.</p>",
          "scope": "instance"
        },
        {
          "name": "finalize",
          "description": "<p>This method is called (typically by this instance or its owner) to cleanup this instance while possibly first\nwaiting for the <a href=\"#Core/mixin/Finalizable#property-finalizer\">finalizer</a> promise to settle. Once settled, the <a href=\"#Core/mixin/Finalizable#function-doFinalize\">doFinalize</a>\nmethod is called.</p>",
          "scope": "instance",
          "async": true
        }
      ]
    },
    {
      "name": "Hoverable",
      "modulePath": "Core/mixin/Hoverable",
      "description": "<p>This mixin provides mouse hover tracking.</p>\n<pre class=\"prettyprint source\"><code> class Tracker extends Base.mixin(Hoverable) {\n     hoverEnter(leaving) {\n         // this.hoverTarget has been entered from &quot;leaving&quot;\n         // this.hoverTarget will never be null, but leaving may be null\n     }\n\n     hoverLeave(leaving) {\n         // this.hoverTarget has been entered from &quot;leaving&quot;\n         // this.hoverTarget may be null, but leaving will never be null\n     }\n\n     hoverMove(event) {\n         // called when a mousemove is made within a hover target\n         // this.hoverTarget will never be null\n     }\n }\n\n let tracker = new Tracker({\n     hoverRootElement : document.body,\n     hoverSelector    : '.hoverable'\n });\n</code></pre>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Hoverable.js",
      "path": "/Calendar/lib/Core/mixin",
      "configs": [
        {
          "name": "hoverCls",
          "description": "<p>A CSS class to add to the <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">target</a> element.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hoverAnimationCls",
          "description": "<p>A CSS class to add to the <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">target</a> element to enable CSS animations. This class\nis added after calling <a href=\"#Core/mixin/Hoverable#function-hoverEnter\">hoverEnter</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hoverRootCls",
          "description": "<p>A CSS class to add to the <a href=\"#Core/mixin/Hoverable#config-hoverRootElement\">root</a> element.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hoverRootActiveCls",
          "description": "<p>A CSS class to add to the <a href=\"#Core/mixin/Hoverable#config-hoverRootElement\">root</a> element when there is an active\n<a href=\"#Core/mixin/Hoverable#config-hoverTarget\">target</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hoverDelay",
          "description": "<p>The number of milliseconds to delay notification of changes in the <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "hoverElement",
          "access": "private",
          "description": "<p>The current element that the cursor is inside as determined by <code>mouseover</code> and <code>mouseout</code>. Changes in\nthis config trigger re-evaluation of the <a href=\"#Core/mixin/Hoverable#config-hoverSelector\">hoverSelector</a> to determine if there is a\n<a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "hoverIgnoreElement",
          "description": "<p>An element to ignore. Mouse entry into this element will not trigger a change in either of the\n<a href=\"#Core/mixin/Hoverable#config-hoverElement\">hoverElement</a> or <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a> values.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "hoverEdges",
          "description": "<p>This property is a string containing one character for each edge that is hoverable. For example, a\nvalue of &quot;tb&quot; indicates that the top and bottom edges are hoverable.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hoverEdgeSize",
          "description": "<p>When <a href=\"#Core/mixin/Hoverable#config-hoverEdges\">hoverEdges</a> is used, this value determines the size (in pixels) of the edge. When\nthe cursor is within this number of pixels of an edge listed in <code>hoverEdges</code>, the appropriate CSS class\nis added to the <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>:</p>\n<ul>\n<li><code>b-hover-top</code></li>\n<li><code>b-hover-right</code></li>\n<li><code>b-hover-bottom</code></li>\n<li><code>b-hover-left</code></li>\n</ul>\n<p>Depending on the values of <code>hoverEdges</code>, it is possible to have at most two of these classes present at\nany one time (when the cursor is in a corner).</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10
        },
        {
          "name": "hoverRootElement",
          "description": "<p>The outer element where hover tracking will operate (attach events to it and use as root limit when\nlooking for ancestors).</p>\n<p>A common choice for this will be <code>document.body</code>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "hoverSelector",
          "description": "<p>A selector for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\">closest</a> API to\ndetermine the actual element of interest. This selector is used to process changes to the\n<a href=\"#Core/mixin/Hoverable#config-hoverElement\">hoverElement</a> to determine the <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hoverTarget",
          "description": "<p>The currently active hover target. This will be the same as <a href=\"#Core/mixin/Hoverable#config-hoverElement\">hoverElement</a> unless there is\na <a href=\"#Core/mixin/Hoverable#config-hoverSelector\">hoverSelector</a>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "hoverTrack",
          "description": "<p>Set to <code>true</code> to include tracking of <code>mousemove</code> events for the active <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>. This\nis required for the <a href=\"#Core/mixin/Hoverable#function-hoverMove\">hoverMove</a> method to be called.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "hoverZone",
          "access": "private",
          "description": "<p>A string value containing one character per active edge (e.g., &quot;tr&quot;).</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "hoverEnter",
          "description": "<p>This method is called when the cursor enters the <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>. The <code>hoverTarget</code> will not be\n<code>null</code>.</p>",
          "parameters": [
            {
              "name": "leaving",
              "type": "HTMLElement",
              "description": "<p>The element that was previously the <code>hoverTarget</code>. This value may be null.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hoverIgnore",
          "access": "protected",
          "description": "<p>This method should return true if the given <code>element</code> should be ignored. By default, this is <code>true</code> if the\n<code>element</code> is contained inside the <a href=\"#Core/mixin/Hoverable#config-hoverIgnoreElement\">hoverIgnoreElement</a>.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "hoverLeave",
          "description": "<p>This method is called when the cursor leaves the <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>. The <code>hoverTarget</code> may be <code>null</code>\nor refer to the new <code>hoverTarget</code></p>",
          "parameters": [
            {
              "name": "leaving",
              "type": "HTMLElement",
              "description": "<p>The element that was previously the <code>hoverTarget</code>. This value will not be null.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hoverMove",
          "description": "<p>This method is called when the mouse moves within a <a href=\"#Core/mixin/Hoverable#config-hoverTarget\">hoverTarget</a>, but only if enabled by the\n<a href=\"#Core/mixin/Hoverable#config-hoverTrack\">hoverTrack</a> config.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Identifiable",
      "modulePath": "Core/mixin/Identifiable",
      "description": "<p>A mixin which provides identifier services such as auto-creation of <code>id</code>s and registration and\nlookup of instances by <code>id</code>.</p>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Identifiable.js",
      "path": "/Calendar/lib/Core/mixin",
      "configs": [
        {
          "name": "id",
          "description": "<p>The id of this object.  If not specified one will be generated. Also used for lookups through the\nstatic <code>getById</code> of the class which mixes this in. An example being <a href=\"#Core/widget/Widget\">Widget</a>.</p>\n<p>For a <a href=\"#Core/widget/Widget\">Widget</a>, this is assigned as the <code>id</code> of the DOM\n<a href=\"#Core/widget/Widget#config-element\">element</a> and must be unique across all elements\nin the page's <code>document</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "generateAutoId",
          "access": "internal",
          "description": "<p>This method generates an id for this instance.</p>",
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "generateId",
          "description": "<p>Generate a new id, using an internal counter and a prefix.</p>",
          "parameters": [
            {
              "name": "prefix",
              "type": "String",
              "description": "<p>Id prefix</p>",
              "default": "generatedId"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>Generated id</p>"
          }
        },
        {
          "name": "unregisterInstance",
          "description": "<p>Unregister Identifiable instance, normally done on destruction</p>",
          "parameters": [
            {
              "name": "instance",
              "type": "Object",
              "description": "<p>Object to unregister</p>"
            },
            {
              "name": "id",
              "type": "String",
              "description": "<p>The id of the instance to unregister.</p>"
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "InstancePlugin",
      "modulePath": "Core/mixin/InstancePlugin",
      "classDescription": "<p>Base class for plugins. Published functions will be available from the other class. <code>this</code> in published functions is\nreferenced to the plugin, access the other class using <code>this.client</code>.</p>\n<p>Observe that plugin doesn't apply itself on class level but instead on instance level. Plugin is its own instance\nthat can have own functions and data that is not exposed to target class.</p>\n<p>Functions can be published in four ways:</p>\n<ul>\n<li><code>assign</code> (when function is not already available on target)</li>\n<li><code>before</code> (when function is already available on target, will be called before original function)</li>\n<li><code>after</code> (when function is already available on target, will be called after original function)</li>\n<li><code>override</code> (replaces function on target, but old function can be reached)</li>\n</ul>\n<p>To configure which functions get published and in what way, specify <code>pluginConfig</code> getter on plugin:</p>\n<pre class=\"prettyprint source\"><code>class Sort extends InstancePlugin {\n  static get pluginConfig {\n     return {\n         before   : ['init'],\n         after    : ['destroy', 'onElementClick'],\n         override : ['render']\n     };\n  }\n}\n</code></pre>",
      "extends": [
        "Core/Base"
      ],
      "mixes": [
        "Core/localization/Localizable",
        "Core/mixin/Events"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "InstancePlugin.js",
      "path": "/Calendar/lib/Core/mixin",
      "properties": [
        {
          "name": "disabled",
          "description": "<p>Get/set the plugin/feature <code>disabled</code> state.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "client",
          "description": "<p>The Widget which was passed into the constructor,\nwhich is the Widget we are providing extra services for.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner",
          "readonly": true,
          "category": "Misc"
        },
        {
          "name": "enabled",
          "access": "internal",
          "description": "<p>Simple wrapper for <a href=\"#Core/mixin/InstancePlugin#property-disabled\">disabled</a> to make optional chaining simple:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.features.myFeature?.enabled // returns true when feature exists and is enabled\n</code></pre>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "disabled",
          "description": "<p>The plugin/feature <code>disabled</code> state.</p>\n<p>For a feature that is <strong>off</strong> by default that you want to enable later during runtime,\nconfigure it with <code>disabled : true</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n     features : {\n         featureName : {\n             disabled : true // on and disabled, can be enabled later\n         }\n     }\n});\n\n// enable the feature\ngrid.features.featureName.disabled = false;\n</code></pre>\n<p>If the feature is <strong>off</strong> by default, and you want to include and enable the feature, configure it as <code>true</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n     features : {\n         featureName : true // on and enabled, can be disabled later\n     }\n});\n\n// disable the feature\ngrid.features.featureName.disabled = true;\n</code></pre>\n<p>If the feature is <strong>on</strong> by default, but you want to turn it <strong>off</strong>, configure it as <code>false</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n     features : {\n         featureName : false // turned off, not included at all\n     }\n});\n</code></pre>\n<p>If the feature is <strong>enabled</strong> by default and you have no need of reconfiguring it,\nyou can omit the feature configuration.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Common"
        },
        {
          "name": "client",
          "description": "<p>The widget which this plugin is to attach to.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "initPlugins",
          "access": "internal",
          "description": "<p>Call from another instance to add plugins to it.</p>",
          "parameters": [
            {
              "name": "plugInto",
              "description": "<p>Instance to mix into (usually this)</p>"
            },
            {
              "name": "plugins",
              "description": "<p>Classes to plug in</p>",
              "isRestParam": true
            }
          ],
          "examples": [
            "InstancePlugin.initPlugins(this, Search, Stripe);"
          ],
          "scope": "static"
        },
        {
          "name": "applyPluginConfig",
          "access": "private",
          "description": "<p>Applies config as found in plugInto.pluginConfig, or published all if no config found.</p>",
          "parameters": [
            {
              "name": "plugInto",
              "description": "<p>Target instance to plug into</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "applyAssign",
          "access": "private",
          "description": "<p>Applies assigning for specified functions.</p>",
          "parameters": [
            {
              "name": "plugInto"
            },
            {
              "name": "fnNames"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "applyChain",
          "access": "private",
          "description": "<p>Applies chaining for specified functions.</p>",
          "parameters": [
            {
              "name": "plugInto"
            },
            {
              "name": "functions"
            },
            {
              "name": "after",
              "default": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "applyOverride",
          "access": "private",
          "description": "<p>Applies override for specified functions.</p>",
          "parameters": [
            {
              "name": "plugInto"
            },
            {
              "name": "fnNames"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "assign",
          "access": "private",
          "description": "<p>Assigns specified functions.</p>",
          "parameters": [
            {
              "name": "plugInto"
            },
            {
              "name": "fnName"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "chain",
          "access": "private",
          "description": "<p>Chains functions. When the function is called on the target class all functions in the chain will be called in\nthe order they where added.</p>",
          "parameters": [
            {
              "name": "plugInto"
            },
            {
              "name": "intoName"
            },
            {
              "name": "hookName"
            },
            {
              "name": "after",
              "default": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "functionChainRunner",
          "access": "private",
          "description": "<p>Used to run multiple plugged in functions with the same name, see chain above. Returning false from a\nfunction will abort chain.</p>",
          "parameters": [
            {
              "name": "chain",
              "type": "Array"
            },
            {
              "name": "params",
              "type": "Array"
            }
          ],
          "scope": "instance",
          "returns": {
            "description": "<p>value returned from last function in chain (or false if any returns false)</p>"
          }
        },
        {
          "name": "doDisable",
          "description": "<p>Called when disabling/enabling the plugin/feature, not intended to be called directly. To enable or disable a\nplugin/feature, see <a href=\"#Core/mixin/InstancePlugin#property-disabled\">disabled</a>.</p>\n<p>By default removes the cls of the plugin from its client. Override in subclasses to take any other actions necessary.</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "disable",
          "description": "<p>Fired when the plugin/feature is disabled.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.InstancePlugin"
            }
          ]
        },
        {
          "name": "enable",
          "description": "<p>Fired when the plugin/feature is enabled.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.mixin.InstancePlugin"
            }
          ]
        }
      ]
    },
    {
      "name": "LoadMaskable",
      "modulePath": "Core/mixin/LoadMaskable",
      "description": "<p>Simple mixin for load masking configs and helper methods.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "LoadMaskable.js",
      "path": "/Calendar/lib/Core/mixin",
      "configs": [
        {
          "name": "loadMaskDefaults",
          "description": "<p>A <a href=\"#Core/widget/Mask\">Mask</a> config object to adjust the <a href=\"#Core/widget/Widget#config-maskDefaults\">maskDefaults</a>\nwhen data is loading. The message and optional configuration from the\n<a href=\"#Core/mixin/LoadMaskable#config-loadMask\">loadMask</a> config take priority over these options, just as they do\nfor <code>maskDefaults</code>, respectively.</p>\n<p>The final mask configuration for a load mask is as if the following were applied:</p>\n<pre class=\"prettyprint source\"><code> Object.assign({},\n     widget.maskDefaults,\n     widget.loadMaskDefaults,\n     widget.loadMask);\n</code></pre>",
          "type": [
            "Object",
            "Core.widget.Mask"
          ],
          "scope": "inner",
          "category": "Masking"
        },
        {
          "name": "loadMaskError",
          "description": "<p>A <a href=\"#Core/widget/Mask\">Mask</a> config object to adjust the <a href=\"#Core/widget/Widget#config-maskDefaults\">maskDefaults</a>\nwhen an error occurs loading data.</p>\n<p>The final mask configuration for an error mask is as if the following were applied:</p>\n<pre class=\"prettyprint source\"><code> Object.assign({},\n     widget.maskDefaults,\n     widget.loadMaskDefaults,\n     widget.loadMaskError,\n     errorMessage);\n</code></pre>",
          "type": [
            "Object",
            "Core.widget.Mask"
          ],
          "scope": "inner",
          "category": "Masking"
        },
        {
          "name": "loadMask",
          "description": "<p>A <a href=\"#Core/widget/Mask\">Mask</a> config object, or a message to be shown when a store is performing a remote operation,\nor Crud Manager is loading data from the sever. Set to <code>null</code> to disable default load mask.</p>",
          "type": [
            "String",
            "Object",
            "null"
          ],
          "scope": "inner",
          "defaultValue": "\"Loading...\"",
          "category": "Masking"
        },
        {
          "name": "syncMask",
          "description": "<p>A <a href=\"#Core/widget/Mask\">Mask</a> config object, or a message to be shown when Crud Manager\nis persisting changes on the server. Set to <code>null</code> to disable default sync mask.</p>\n<p>This config is similar to <a href=\"#Core/mixin/LoadMaskable#config-loadMask\">loadMask</a> but designed for saving data.</p>\n<p>To create a custom sync mask need to subscribe to the Crud Manager events and show\n<a href=\"#Core/widget/Mask\">Mask</a> on <code>beforeSend</code> and hide it on <code>requestDone</code> and <code>requestFail</code>.</p>\n<p>To create a custom sync mask, set this config to <code>null</code> and subscribe to the CrudManager's events to\nshow or hide the <a href=\"#Core/widget/Widget#config-masked\">mask</a> as desired.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> widget.crudManager.on({\n     loadStart() {\n         widget.masked = {\n             text : 'Data is loading...'\n         };\n     },\n     load() {\n         widget.masked = null;\n     },\n     loadCanceled() {\n         widget.masked = null;\n     },\n     syncStart() {\n         widget.masked = null;\n     },\n     sync() {\n         widget.masked = null;\n     },\n     syncCanceled() {\n         widget.masked = null;\n     },\n     requestFail({ response }) {\n         widget.masked.error = response.message || 'Sync failed';\n     }\n });\n\n store.load();\n</code></pre>",
          "type": [
            "String",
            "Object",
            "null"
          ],
          "scope": "inner",
          "defaultValue": "\"Saving changes, please wait...\"",
          "category": "Masking"
        }
      ],
      "functions": [
        {
          "name": "applyLoadMask",
          "access": "internal",
          "description": "<p>Applies the <a href=\"#Core/mixin/LoadMaskable#config-loadMask\">loadMask</a> as the <a href=\"#Core/widget/Widget#config-masked\">mask</a>\nfor this widget.</p>",
          "scope": "instance"
        },
        {
          "name": "applyMaskError",
          "access": "internal",
          "description": "<p>Updates the current <a href=\"#Core/widget/Widget#config-masked\">mask</a> for this widget to present the specified\n<code>error</code>.</p>",
          "parameters": [
            {
              "name": "error",
              "type": "String",
              "description": "<p>The error message to display in the mask.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Override",
      "modulePath": "Core/mixin/Override",
      "classDescription": "<p>Simplifies overriding class methods by allowing methods from another class to be used as overrides.\nOverrides are defined as own classes. They must at a minimum contain a static getter named targetClass, which\nshould return the class to override. Apply the override by calling <a href=\"#Core/mixin/Override#function-apply-static\">apply()</a>.</p>",
      "examples": [
        "class TemplateColumnOverride {\n    static get target() {\n        return {\n            class      : TemplateColumn,\n            product    : 'grid',\n            minVersion : '1.0',\n            maxVersion : '1.5'\n        }\n    }\n\n    renderer(renderData) {\n        // call overridden function (optional)\n        const value = this._overridden.renderer.call(this, renderData);\n\n        return 'HELLO' + value;\n    }\n}\nOverride.apply(TemplateColumnOverride);"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Override.js",
      "path": "/Calendar/lib/Core/mixin",
      "functions": [
        {
          "name": "apply",
          "description": "<p>Apply override. We strongly suggest that you at least specify a maxVersion for your overrides.</p>\n<pre class=\"prettyprint source\"><code>class OriginalOverride {\n    static get target() {\n        return {\n            class      : Original,\n            product    : 'grid',\n            minVersion : '1.0',\n            maxVersion : '1.5'\n        }\n    }\n}\n</code></pre>",
          "parameters": [
            {
              "name": "override",
              "type": "Object",
              "description": "<p>An override class definition</p>"
            }
          ],
          "scope": "static"
        },
        {
          "name": "shouldApplyOverride",
          "access": "private",
          "description": "<p>Checks versions if an override should be applied. Specify version in your overrides target config</p>",
          "parameters": [
            {
              "name": "override"
            }
          ],
          "examples": [
            "class OriginalOverride {\n    static get target() {\n        return {\n            class      : Original,\n            product    : 'grid',\n            minVersion : '1.0',\n            maxVersion : '1.5'\n        }\n    }\n}"
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "Pluggable",
      "modulePath": "Core/mixin/Pluggable",
      "description": "<p>Enables using plugins for a class by specifying property plugins as an array of plugin classes. If only a single plugin\nis used, just give the plugin class instead of an array. This class isn't required for using plugins, just makes it\neasier. Without mixin you can otherwise use <code>InstancePlugin.initPlugins(this, PluginClass)</code>.</p>",
      "mixin": true,
      "examples": [
        "new Store({\n  plugins: [PluginClass, ...]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Pluggable.js",
      "path": "/Calendar/lib/Core/mixin",
      "configs": [
        {
          "name": "plugins",
          "description": "<p>Specify plugins (an array of classes) in config</p>",
          "type": "Array.<function()>",
          "scope": "inner",
          "category": "Misc"
        }
      ],
      "properties": [
        {
          "name": "plugins",
          "description": "<p>Map of applied plugins</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Misc"
        }
      ],
      "functions": [
        {
          "name": "initPlugins",
          "access": "internal",
          "description": "<p>Template method which may be implemented in subclasses to initialize any plugins.\nThis method is empty in the <code>Pluggable</code> base class.</p>",
          "scope": "instance"
        },
        {
          "name": "addPlugins",
          "description": "<p>Adds plugins to an instance.</p>",
          "parameters": [
            {
              "name": "plugins",
              "type": "Array.<function()>",
              "description": "<p>The plugins to add</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hasPlugin",
          "description": "<p>Checks if instance has plugin.</p>",
          "parameters": [
            {
              "name": "pluginClassOrName",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>Plugin or name to check for</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "getPlugin",
          "description": "<p>Get a plugin instance.</p>",
          "parameters": [
            {
              "name": "pluginClassOrName",
              "type": [
                "String",
                "function"
              ]
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        }
      ]
    },
    {
      "name": "State",
      "modulePath": "Core/mixin/State",
      "description": "<p>A mixin that handles accessing, saving, and restoring an object's persistent state.</p>\n<h2>Using Stateful Components</h2>\n<p>Instances of classes that use this mixin (i.e., &quot;stateful components&quot;) have a <a href=\"#Core/mixin/State#property-state\">state</a> property that\nprovides read/write access to their persistable state in the form of a simple object. These state objects can be\nsaved and restored under application control, e.g., using <code>localStorage</code>.</p>\n<p>This approach can be streamlined using a <a href=\"#Core/state/StateProvider\">StateProvider</a> either by setting the\n<a href=\"#Core/state/StateProvider#property-instance-static\">default state provider</a> or by using an instance-level\n<a href=\"#Core/mixin/State#config-stateProvider\">stateProvider</a> config.</p>\n<p>When using a state provider, stateful components with a <a href=\"#Core/mixin/State#config-stateId\">stateId</a> or an\n<a href=\"#Core/widget/Widget#config-id\">id</a> will automatically save (see <a href=\"#Core/mixin/State#function-saveState\">saveState</a>) and restore\n(see <a href=\"#Core/mixin/State#function-loadState\">loadState</a>) their <code>state</code>. This use of the <code>id</code> as a <code>stateId</code> can be disabled by assigning\nthe <a href=\"#Core/mixin/State#config-stateful\">stateful</a> config to <code>false</code>. When using a <code>stateId</code> and a state provider, it is not necessary to\ncall the <a href=\"#Core/mixin/State#function-loadState\">loadState</a> and <a href=\"#Core/mixin/State#function-saveState\">saveState</a> methods directly.</p>\n<h3>Simple vs Complex State</h3>\n<p>Some stateful components (e.g., <a href=\"#Core/widget/Panel\">panels</a>) have state that can be described purely by their\nconfig properties. For these components, the <a href=\"#Core/mixin/State#config-stateful\">stateful</a> config can be used to control which config\nproperties to include in their persistent state. For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const mainPanel = new Panel({\n     collapsible : true,\n     stateId     : 'mainPanel',\n     stateful    : ['collapsed']\n });\n</code></pre>\n<p>Other components have a complex state (e.g., <code>GridState</code>), and do not use the <code>stateful</code> config in this way. In all\nother ways, however, these components behave the same as their simple state counterparts.</p>\n<h2>Implementing Stateful Components</h2>\n<p>Implementors of stateful components have two main design points to consider:</p>\n<ul>\n<li>Getting and setting their persistent <a href=\"#Core/mixin/State#property-state\">state</a> object.</li>\n<li>Initiating calls to <a href=\"#Core/mixin/State#function-saveState\">saveState</a> when the object's persistent state changes.</li>\n</ul>\n<h3>Persistent State</h3>\n<p>For simple cases, the <a href=\"#Core/mixin/State#config-stateful\">stateful</a> config can be set to the list of config property names that should be\nsaved:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MyStatefulComponent extends Base.mixin(State) {\n     static get configurable() {\n         return {\n             stateful : ['text', 'size']\n         };\n     }\n }\n</code></pre>\n<p>While the <code>stateful</code> config supports an object form (where keys with truthy values are the config names), this form\nis typically reserved for configuring instances.</p>\n<p>Classes can chose to implement the <a href=\"#Core/mixin/State#function-getState\">getState</a> and <a href=\"#Core/mixin/State#function-applyState\">applyState</a> methods to enhance\nthe <code>state</code> object with data not easily mapped to config properties. These method can call their <code>super</code> methods or\nfully replace them.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MyStatefulComponent extends Base.mixin(State) {\n     getState() {\n         return {\n             text : this.text,\n             size : this.size\n         };\n     }\n\n     applyState(state) {\n         this.text = state.text;\n         this.size = state.size;\n     }\n }\n</code></pre>\n<h3>Saving State</h3>\n<p>When the persistent state of a stateful component changes, it must call <a href=\"#Core/mixin/State#function-saveState\">saveState</a>. This method\nschedules an update of the component's persistence <a href=\"#Core/mixin/State#property-state\">state</a> with the appropriate\n<a href=\"#Core/mixin/State#config-stateProvider\">stateProvider</a>. When a config property named in the <a href=\"#Core/mixin/State#config-stateful\">stateful</a> config changes, this\ncall will be made automatically. This means that even if a component replaces <a href=\"#Core/mixin/State#function-getState\">getState</a> and\n<a href=\"#Core/mixin/State#function-applyState\">applyState</a>, it can still be helpful to specify a value for the <code>stateful</code> config.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MyStatefulComponent extends Base.mixin(State) {\n     static get configurable() {\n         return {\n             stateful : ['text', 'size']\n         };\n     }\n\n     getState() { ... }\n     applyState(state) { ... }\n }\n</code></pre>\n<p>Another way to ensure <a href=\"#Core/mixin/State#function-saveState\">saveState</a> is called when necessary is to use <a href=\"#Core/mixin/State#config-statefulEvents\">statefulEvents</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MyStatefulComponent extends Base.mixin(State) {\n     static get configurable() {\n         return {\n             statefulEvents : ['change', 'resize']\n         };\n     }\n }\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "State.js",
      "path": "/Calendar/lib/Core/mixin",
      "configs": [
        {
          "name": "stateful",
          "description": "<p>This value can be one of the following:</p>\n<ul>\n<li><code>false</code> to not use an explicitly assigned <a href=\"#Core/widget/Widget#config-id\">id</a> as the component's\n<a href=\"#Core/mixin/State#config-stateId\">stateId</a> (this is only necessary when there is a <a href=\"#Core/mixin/State#config-stateProvider\">stateProvider</a>).</li>\n<li>An array of strings naming the config properties to save in the component's <a href=\"#Core/mixin/State#property-state\">state</a>\nobject.</li>\n<li>An object whose truthy keys are the config properties to save in the component's <a href=\"#Core/mixin/State#property-state\">state</a>\nobject.</li>\n</ul>\n<p>These last two uses of the <code>stateful</code> config property do not apply to components that have a complex\nstate, as described in the <a href=\"#Core/mixin/State\">State mixin documentation</a>.</p>\n<p>This config property is typically set by derived classes to a value including any config property that\nthe user can affect via the user interface. For example, the <a href=\"#Core/widget/Panel#config-collapsed\">collapsed</a>\nconfig property is listed for a <a href=\"#Core/widget/Panel\">Panel</a> since the user can toggle this config property\nusing the <a href=\"#Core/widget/panel/PanelCollapser#config-tool\">collapse tool</a>.</p>",
          "type": [
            "Boolean",
            "Object",
            "Array.<String>"
          ],
          "scope": "inner",
          "category": "State"
        },
        {
          "name": "statefulEvents",
          "description": "<p>The events that, when fired by this component, should trigger it to save its state by calling\n<a href=\"#Core/mixin/State#function-saveState\">saveState</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MyStatefulComponent extends Base.mixin(State) {\n     static get configurable() {\n         return {\n             statefulEvents : [ 'change', 'resize' ]\n         };\n     }\n }\n</code></pre>\n<p>In the above example, <a href=\"#Core/mixin/State#function-saveState\">saveState</a> will be called any time an instance of this class\nfires the <code>change</code> or <code>resize</code> event.</p>\n<p>This config is typically set by derived classes as a way to ensure <a href=\"#Core/mixin/State#function-saveState\">saveState</a> is called\nwhenever their persistent state changes.</p>",
          "type": [
            "Object",
            "Array.<String>"
          ],
          "scope": "inner",
          "defaultValue": "{\"$config\":\"\",\"value\":\"\"}",
          "category": "State"
        },
        {
          "name": "stateId",
          "description": "<p>The key to use when saving this object's state in the <a href=\"#Core/mixin/State#config-stateProvider\">stateProvider</a>. If this config is\nnot assigned, and <a href=\"#Core/mixin/State#config-stateful\">stateful</a> is not set to <code>false</code>, the <a href=\"#Core/widget/Widget#config-id\">id</a>\n(if explicitly specified) will be used as the <code>stateId</code>.</p>\n<p>If neither of these is given, the <a href=\"#Core/mixin/State#function-loadState\">loadState</a> and <a href=\"#Core/mixin/State#function-saveState\">saveState</a> methods\nwill need to be called directly to make use of the <code>stateProvider</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "State"
        },
        {
          "name": "stateProvider",
          "description": "<p>The <code>StateProvider</code> to use to save and restore this object's <a href=\"#Core/mixin/State#property-state\">state</a>. By default, <code>state</code>\nwill be saved using the <a href=\"#Core/state/StateProvider#property-instance-static\">default state provider</a>.</p>",
          "type": "Core.state.StateProvider",
          "scope": "inner",
          "category": "State"
        }
      ],
      "properties": [
        {
          "name": "isStateful",
          "description": "<p>Returns <code>true</code> if this instance implements the <a href=\"#Core/mixin/State\">State</a> interface.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "state",
          "description": "<p>Gets or sets a component's state</p>",
          "type": "Object",
          "scope": "instance",
          "category": "State"
        },
        {
          "name": "statefulId",
          "access": "private",
          "description": "<p>Returns the state key to use for this instance. This will be either the <a href=\"#Core/mixin/State#config-stateId\">stateId</a> or the\n<a href=\"#Core/widget/Widget#config-id\">id</a> (if explicitly specified and <a href=\"#Core/mixin/State#config-stateful\">stateful</a> is not <code>false</code>).</p>",
          "type": "String",
          "scope": "instance",
          "category": "State"
        },
        {
          "name": "statefulness",
          "access": "private",
          "description": "<p>Returns an object whose truthy keys are the config properties to include in this object's <a href=\"#Core/mixin/State#property-state\">state</a>.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "State"
        }
      ],
      "functions": [
        {
          "name": "applyState",
          "description": "<p>Applies the given <code>state</code> to this instance.</p>\n<p>This method is not called directly, but is called when the <a href=\"#Core/mixin/State#property-state\">state</a> property is assigned a value.</p>\n<p>This method is implemented by derived classes that have complex state which exceeds the simple list of config\nproperties provided by <a href=\"#Core/mixin/State#config-stateful\">stateful</a>. In these cases, the <code>super</code> method can be called to handle any\nconfig properties that are part of the complex state. The default implementation of this method will only assign\nthose config properties listed in <a href=\"#Core/mixin/State#config-stateful\">stateful</a> from the provided <code>state</code> object.</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Object",
              "description": "<p>The state object to apply to this instance.</p>"
            }
          ],
          "scope": "instance",
          "category": "State"
        },
        {
          "name": "getState",
          "description": "<p>Returns this object's state information.</p>\n<p>This method is not called directly, but is called to return the value of the <a href=\"#Core/mixin/State#property-state\">state</a> property.</p>\n<p>This method is implemented by derived classes that have complex state which exceeds the simple list of config\nproperties provided by <a href=\"#Core/mixin/State#config-stateful\">stateful</a>. In these cases, the <code>super</code> method can be called to gather the\nconfig properties that are part of the complex state. The default implementation of this method will only copy\nthose config properties listed in <a href=\"#Core/mixin/State#config-stateful\">stateful</a> to the returned <code>state</code> object.</p>",
          "scope": "instance",
          "category": "State",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "loadState",
          "description": "<p>Loads this object's state from its <a href=\"#Core/mixin/State#config-stateProvider\">stateProvider</a> and applies it to its <a href=\"#Core/mixin/State#property-state\">state</a>.</p>\n<p>This method is called automatically during construction when a <a href=\"#Core/mixin/State#config-stateId\">stateId</a> or (in some cases) an\nexplicit <a href=\"#Core/widget/Widget#config-id\">id</a> is provided.</p>\n<p>This method only acts upon its first invocation for a given instance. This allows for flexibility in the timing\nof that call during the early stages of the instances' lifecycle. To reload the state after this time, manually\nassign the desired value to the <a href=\"#Core/mixin/State#property-state\">state</a> property.</p>",
          "parameters": [
            {
              "name": "stateId",
              "type": "String",
              "description": "<p>An overriding key to use instead of this object's <a href=\"#Core/mixin/State#config-stateId\">stateId</a>.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "State"
        },
        {
          "name": "saveState",
          "description": "<p>Saves this object's state to its <a href=\"#Core/mixin/State#config-stateProvider\">stateProvider</a>.</p>\n<p>When a <a href=\"#Core/mixin/State#config-stateId\">stateId</a> or (in some cases) an explicit <a href=\"#Core/widget/Widget#config-id\">id</a> is provided,\nthis method will be called automatically any time a config property listed in <a href=\"#Core/mixin/State#config-stateful\">stateful</a> changes or\nwhen a <a href=\"#Core/mixin/State#config-statefulEvents\">stateful event</a> is fired.</p>\n<p>Derived classes are responsible for calling this method whenever the persistent <a href=\"#Core/mixin/State#property-state\">state</a> of the\nobject changes.</p>",
          "parameters": [
            {
              "name": "options",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>Options that affect the state saving process or, if a string, the state <code>id</code>.</p>",
              "optional": true
            },
            {
              "name": "options.id",
              "type": "String",
              "description": "<p>The state id for the saved state (overrides <a href=\"#Core/mixin/State#config-stateId\">stateId</a>).</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.immediate",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to save the data synchronously instead of on a delay.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "State"
        },
        {
          "name": "pruneState",
          "access": "private",
          "description": "<p>Returns an object that copies the <a href=\"#Core/mixin/State#config-stateful\">stateful</a> config properties from the provided <code>state</code> object.</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Object",
              "description": "<p>A state object from which to copy stateful configs.</p>"
            }
          ],
          "scope": "instance",
          "category": "State",
          "returns": {
            "type": "Object"
          }
        }
      ]
    },
    {
      "name": "StateProvider",
      "modulePath": "Core/state/StateProvider",
      "classDescription": "<p>Instances of this class are used to manage data storage for objects that use the <a href=\"#Core/mixin/State\">State</a> mixin -\nstateful components. When such component receives notification about changed state, it notifies state provider which\nstarts a short timeout before actually saving the state. Timeout is required to buffer several consequent\nstate changes into one.\nWhen timeout expires provider asks stateful component to save its state immediately and eventually\n<a href=\"#Core/state/StateStorage#function-setItem\">setItem</a> of the underlying <a href=\"#Core/state/StateProvider#property-storage\">storage</a> gets called.</p>\n<p>There are two (2) implementations provided:</p>\n<ul>\n<li><code>local</code> : Stores data in the browser's <code>localStorage</code>. Because of this, all instances share data if they have\nthe same <a href=\"#Core/state/StateProvider#config-prefix\">prefix</a>.</li>\n<li><code>memory</code> : Stores data in the provider's memory. Each instance has its own storage.</li>\n</ul>\n<h2>The <code>local</code> StateProvider</h2>\n<p>This provider is typically created as a singleton for the page or application:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> StateProvider.instance = 'local';\n</code></pre>\n<p>With this provider in place, objects using the <a href=\"#Core/mixin/State\">State</a> mixin will save data to this provider by\ndefault.</p>\n<p>Because this provider uses <code>localStorage</code>, it uses a string prefix to isolate its data from other users. The default\nprefix is <code>'bryntum-state:'</code>, but this can be configured to a different value. This could be desired, for example,\nto isolate state data from multiple pages or for version changes.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> StateProvider.instance = new StateProvider({\n     storage : 'local',\n     prefix  : 'myApp-v1:'\n });\n</code></pre>\n<p>Alternatively, this provider can be instantiated directly, and given to stateful widgets like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const stateProvider = new StateProvider({\n     storage : 'local',\n     prefix  : 'mainPage:'\n });\n\n const panel = new Panel({\n     stateProvider\n });\n</code></pre>\n<h2>The <code>memory</code> StateProvider</h2>\n<p>This provider can created as a singleton like above:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> StateProvider.instance = 'memory';\n</code></pre>\n<p>Alternatively, this provider can be instantiated directly, and given to stateful widgets like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const stateProvider = new StateProvider({ storage : 'memory' });\n\n const panel = new Panel({\n     stateProvider\n });\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "StateProvider.js",
      "path": "/Calendar/lib/Core/state",
      "configs": [
        {
          "name": "prefix",
          "description": "<p>The key prefix applied when saving data to <code>localStorage</code>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "bryntum-state:"
        },
        {
          "name": "storage",
          "description": "<p>One of the following storage types:</p>\n<ul>\n<li><code>local</code> : Stores data in the browser's <code>localStorage</code> using the <a href=\"#Core/state/StateProvider#config-prefix\">prefix</a>.</li>\n<li><code>memory</code> : Stores data in the provider's memory.</li>\n</ul>",
          "type": [
            "String",
            "Core.state.StateStorage"
          ],
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "storage",
          "description": "<p>Storage instance</p>",
          "type": "Core.state.StateStorage",
          "scope": "inner"
        },
        {
          "name": "instance",
          "description": "<p>The default <a href=\"#Core/mixin/State#config-stateProvider\">stateProvider</a> for stateful objects.</p>",
          "type": "Core.state.StateProvider",
          "scope": "static"
        }
      ],
      "functions": [
        {
          "name": "saveStateful",
          "access": "internal",
          "description": "<p>This method is called to schedule saving the given <code>stateful</code> object.</p>",
          "parameters": [
            {
              "name": "stateful",
              "type": "Core.mixin.State",
              "description": "<p>The stateful object to save.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An object of options that affect the state saving process.</p>",
              "optional": true
            },
            {
              "name": "options.id",
              "type": "String",
              "description": "<p>The key for the saved state.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.immediate",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to save the data synchronously instead of on a delay.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "writeStatefuls",
          "access": "private",
          "description": "<p>A delayable method that flushes pending stateful objects.</p>",
          "scope": "instance"
        },
        {
          "name": "getValue",
          "access": "internal",
          "description": "<p>Returns the stored state given its <code>key</code>.</p>",
          "parameters": [
            {
              "name": "key",
              "type": "String",
              "description": "<p>The identifier of the state to return.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "setValue",
          "access": "internal",
          "description": "<p>Saves the given state <code>value</code> under the specified <code>key</code>.</p>",
          "parameters": [
            {
              "name": "key",
              "type": "String",
              "description": "<p>The identifier of the state.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The state value to save.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "StateStorage",
      "modulePath": "Core/state/StateStorage",
      "classDescription": "<p>Empty class representing interface used by the <a href=\"#Core/state/StateProvider\">StateProvider</a> to actually store the state data.\nImplement methods of this class to take control of state persistence.\nThis class declares a subset of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\"><code>Storage</code></a> API which\nallows using <code>window.localStorage</code> as storage.</p>\n<p>See <a href=\"https://bryntum.com/examples/grid/state\">state</a> demo for custom StateStorage implementation.</p>",
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StateStorage.js",
      "path": "/Calendar/lib/Core/state",
      "functions": [
        {
          "name": "clear",
          "description": "<p>Clears data object</p>",
          "scope": "instance"
        },
        {
          "name": "getItem",
          "description": "<p>Returns key value</p>",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "String",
              "null"
            ],
            "description": "<p>JSON string</p>"
          }
        },
        {
          "name": "removeItem",
          "description": "<p>Removes key</p>",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setItem",
          "description": "<p>Sets key</p>",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            },
            {
              "name": "value",
              "type": "String",
              "description": "<p>JSON string</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Child",
      "modulePath": "Core/test/docs/Child",
      "classDescription": "<p>Child of TestDocsBase.\nThis class is required to check how docs are generated.</p>",
      "extends": [
        "Core/test/docs/TestDocsBase"
      ],
      "mixes": [
        "Core/test/docs/ChildMixin"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Child.js",
      "path": "/Calendar/lib/Core/test/docs",
      "configs": [
        {
          "name": "_testGrandChildDescription",
          "access": "private",
          "description": "<p>Child node. This description is NOT used in the docs of GrandChild because description is specified in GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testChildDescription",
          "access": "private",
          "description": "<p>Child node. This description is USED in the docs of GrandChild because there is no description in GrandChild and ChildMixin, and Child is the closest relative.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinGrandChildDescription",
          "access": "private",
          "description": "<p>Child node. This description is NOT used in the docs of GrandChild because description is specified in GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinChildDescription",
          "access": "private",
          "description": "<p>Child node. This description is NOT used in the docs of GrandChild because description is specified in ChildMixin and there is no description in GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        }
      ]
    },
    {
      "name": "ChildMixin",
      "modulePath": "Core/test/docs/ChildMixin",
      "classDescription": "<p>Mixin for children of TestDocsBase.\nThis class is required to check how docs are generated.</p>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ChildMixin.js",
      "path": "/Calendar/lib/Core/test/docs",
      "configs": [
        {
          "name": "_testMixinGrandChildDescription",
          "access": "private",
          "description": "<p>ChildMixin node. This description is NOT used in the docs of GrandChild because description is specified in GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinChildDescription",
          "access": "private",
          "description": "<p>ChildMixin node. This description is USED in the docs of GrandChild because there is no description in GrandChild and mixin is more important than relatives.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinBaseDescription",
          "access": "private",
          "description": "<p>ChildMixin node. This description is USED in the docs of GrandChild because there is no description in GrandChild and mixin is more important than relatives.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        }
      ]
    },
    {
      "name": "GrandChild",
      "modulePath": "Core/test/docs/GrandChild",
      "classDescription": "<p>Child of Child of TestDocsBase.\nThis class is required to check how docs are generated.</p>",
      "extends": [
        "Core/test/docs/Child"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "GrandChild.js",
      "path": "/Calendar/lib/Core/test/docs",
      "configs": [
        {
          "name": "_testGrandChildDescription",
          "access": "private",
          "description": "<p>GrandChild node. This description is USED in the docs of GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinGrandChildDescription",
          "access": "private",
          "description": "<p>GrandChild node. This description is USED in the docs of GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        }
      ]
    },
    {
      "name": "TestDocsBase",
      "modulePath": "Core/test/docs/TestDocsBase",
      "classDescription": "<p>Base class for subclassing.\nThis class is required to check how docs are generated.</p>",
      "extends": [
        "Core/Base"
      ],
      "access": "internal",
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TestDocsBase.js",
      "path": "/Calendar/lib/Core/test/docs",
      "configs": [
        {
          "name": "_testGrandChildDescription",
          "access": "private",
          "description": "<p>TestDocsBase node. This description is NOT used in the docs of GrandChild because description is specified in GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testChildDescription",
          "access": "private",
          "description": "<p>TestDocsBase node. This description is NOT used in the docs of GrandChild because description is specified in Child and there is no description in GrandChild and ChildMixin.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testBaseDescription",
          "access": "private",
          "description": "<p>TestDocsBase node. This description is USED in the docs of GrandChild because there is no description in Child, GrandChild and ChildMixin.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinGrandChildDescription",
          "access": "private",
          "description": "<p>TestDocsBase node. This description is NOT used in the docs of GrandChild because description is specified in GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinChildDescription",
          "access": "private",
          "description": "<p>TestDocsBase node. This description is NOT used in the docs of GrandChild because description is specified in ChildMixin and there is no description in GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        },
        {
          "name": "_testMixinBaseDescription",
          "access": "private",
          "description": "<p>TestDocsBase node. This description is NOT used in the docs of GrandChild because description is specified in ChildMixin and there is no description in Child and GrandChild.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Test"
        }
      ]
    },
    {
      "name": "Animator",
      "modulePath": "Core/util/Animator",
      "classDescription": "<p>Manages one or more <a href=\"#Core/util/Animator#typedef-AnimatorTransition\">style transitions</a> or other <code>Animator</code> instances. Unlike typical\nconfig objects, the config object for this class is a mixture of config properties and style names that define\n<a href=\"#Core/util/Animator#typedef-AnimatorTransition\">style transitions</a>.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const anim = Animator.run({\n     element,\n     duration : 500,\n\n     // style transitions:\n     opacity : 0\n });\n\n await anim.done();\n</code></pre>\n<p>The static <a href=\"#Core/util/Animator#function-run-static\">run</a> method is typically used (as above) instead of the <code>new Animator()</code> style for\nbrevity (since a manually created <code>Animator</code> must also be manually <a href=\"#Core/util/Animator#function-start\">started</a>).</p>\n<p>An <code>Animator</code> can be <a href=\"#Core/util/Animator#function-done\">awaited</a> and will resolve once all of its transitions and/or child\nanimations complete or are aborted (via <code>destroy()</code>).</p>\n<h2>Compound Transitions</h2>\n<p>The following custom transitions can present in the <code>Animator</code> config object as if they were normal style transitions:</p>\n<ul>\n<li><a href=\"#Core/util/Animator#function-puff-static\">puff</a></li>\n</ul>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const anim = Animator.run({\n     element,\n     marginLeft : -200,\n     puff       : true   // true for default scale, a number, or config object\n });\n</code></pre>",
      "extends": [
        "Core/Base"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Animator.js",
      "path": "/Calendar/lib/Core/util",
      "typedefs": [
        {
          "name": "AnimatorTransition",
          "access": "internal",
          "description": "<p>These objects are passed as values in the config object of an <code>Animator</code>. The <code>property</code> name is the key in the\nconfig object.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const anim = Animator.run({\n     element,\n     opacity : {\n         // AnimatorTransition properties\n     }\n });\n</code></pre>\n<p>The <a href=\"#Core/util/Animator#config-items\">anim.items</a> array will contain a single <code>AnimatorTransition</code> instance.</p>",
          "properties": [
            {
              "name": "property",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The name of the style property from the key in the <code>Animator</code> config object (in\nthe above example, this will be <code>'opacity'</code>).</p>"
            },
            {
              "name": "completed",
              "type": "Boolean",
              "description": "<p>This readonly property is set to <code>true</code> when the transition completes.</p>"
            },
            {
              "name": "delay",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The delay before starting the transition. Numbers less than 10 are assumed to be\nseconds (instead of milliseconds) unless the <code>unit</code> property is specified.</p>",
              "default": 0,
              "optional": true
            },
            {
              "name": "duration",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The duration of the transition. Numbers less than 10 are assumed to be\nseconds (instead of milliseconds) unless the <code>unit</code> property is specified.</p>",
              "default": 200,
              "optional": true
            },
            {
              "name": "from",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The value from which to start the transition.</p>",
              "optional": true
            },
            {
              "name": "retain",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to retain the style property value after the transition. This defaults to\n<code>true</code> if a <a href=\"#Core/util/Animator#config-finalize\">finalize</a> function is not specified.</p>",
              "optional": true
            },
            {
              "name": "timing",
              "type": "String",
              "description": "<p>The transition\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function\">timing function</a>.</p>",
              "default": "'ease-in-out'",
              "optional": true
            },
            {
              "name": "to",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>The final value to which the transition will animate.</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The duration/delay unit (either <code>'s'</code> or <code>'ms'</code>).</p>",
              "optional": true
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "delay",
          "description": "<p>The optional delay before starting the animation. Numbers less than 10 are assumed to be seconds\n(instead of milliseconds) unless the <code>unit</code> property is specified.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "duration",
          "description": "<p>The duration of the animation. Numbers less than 10 are assumed to be seconds (instead of milliseconds)\nunless the <code>unit</code> property is specified.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "element",
          "description": "<p>The element to animate.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "finalize",
          "description": "<p>A callback function called when the animation completes. This is called after restoring styles to the\noriginal values (based on <a href=\"#Core/util/Animator#config-retain\">retain</a>). When this function is provided, <code>retain</code> defaults to\n<code>false</code>. By implementing this function, a CSS class can be applied to the <a href=\"#Core/util/Animator#config-element\">element</a> to\ngive the proper style, while the inline styles are removed (e.g., a hide animation based on opacity).</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const anim = Animator.run({\n     element,\n     duration : 500,\n     opacity  : 0,\n\n     finalize() {\n         element.classList.add('hidden');\n     }\n });\n\n await anim.done();\n</code></pre>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "prefinalize",
          "access": "internal",
          "description": "<p>A callback function called when the animation completes. This is called prior to restoring styles to the\noriginal values (based on <a href=\"#Core/util/Animator#config-retain\">retain</a>).</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "retain",
          "description": "<p>Set to <code>true</code> to retain the style property values after the animation. This defaults to <code>true</code> if a\n<a href=\"#Core/util/Animator#config-finalize\">finalize</a> function is not specified, and <code>false</code> otherwise. When a <code>finalize</code> function\nis provided, it is typically to apply a CSS class to achieve the desired styling so that inline styles\ncan be removed.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "timing",
          "description": "<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function\">timing function</a> for\nthe animation.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'ease-in-out'"
        },
        {
          "name": "unit",
          "description": "<p>The duration/delay unit (either <code>'s'</code> or <code>'ms'</code>).</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "items",
          "description": "<p>When passed at construction time, <code>items</code> can be an array of other <code>Animator</code> config objects. This can be\nused to animate multiple elements and wait for this instance to be <a href=\"#Core/util/Animator#function-done\">done</a>.</p>",
          "type": "Array.<Core.util.Animator>",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "completed",
          "description": "<p>This readonly property is set to <code>true</code> when the animation completes or <code>false</code> if the animation is\naborted (by calling the <code>destroy()</code> method).</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "items",
          "description": "<p>An array containing a mixture of <code>Animator</code> and/or <code>AnimatorTransition</code> objects, depending on what was\nspecified at construction time.</p>",
          "type": [
            "Array.<Core.util.Animator>",
            "Array.<Core.util.Animator#AnimatorTransition>"
          ],
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "run",
          "description": "<p>A short-hand way to create an <code>Animator</code> instance and call its <a href=\"#Core/util/Animator#function-start\">start</a> method.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const anim = Animator.run({\n     element,\n     duration : 500,\n\n     // style transitions:\n     opacity : 0\n });\n\n await anim.done();\n</code></pre>",
          "parameters": [
            {
              "name": "options",
              "type": [
                "Core.util.Animator",
                "Object"
              ],
              "description": "<p>A config object for an <code>Animator</code> instance.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.util.Animator"
          }
        },
        {
          "name": "done",
          "description": "<p>Returns a <code>Promise</code> that resolves to a <code>Boolean</code> when this animation completes. The resolved value is that of\nthis instance's <a href=\"#Core/util/Animator#property-completed\">completed</a> property.</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "start",
          "description": "<p>Starts this animation and returns a reference to itself. This method is called automatically by the\n<a href=\"#Core/util/Animator#function-run-static\">run</a> method.</p>",
          "scope": "instance",
          "returns": {
            "type": "Core.util.Animator"
          }
        },
        {
          "name": "puff",
          "description": "<p>A compound animation to achieve <code>transform: scale()</code> and <code>opacity: 0</code>. The <code>scale</code> defaults to 8 but can be set\nin the <code>anim</code> config object.</p>\n<p>For example</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const puff = Animator.puff(element);\n\n const puff = Animator.puff({\n     element,\n     scale : 12\n });\n</code></pre>\n<p>This compound animation can also be specified in an <code>Animator</code> config object along with other style transitions:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const anim = Animator.run({\n     element,\n     marginLeft : -200,\n     puff       : true   // true for default scale, a number, or config object\n });\n</code></pre>",
          "parameters": [
            {
              "name": "anim",
              "type": [
                "Element",
                "Object",
                "Core.util.Animator"
              ],
              "description": "<p>The element to animate or the config object containing at least\nthe <code>element</code> property. This config object can contain an optional <code>scale</code> property to adjust the animation's\n<code>transform: scale()</code> value.</p>"
            },
            {
              "name": "anim.scale",
              "type": "Number",
              "description": "<p>The scale value for the <code>transform:scale()</code> transition.</p>",
              "default": 8,
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.util.Animator"
          }
        }
      ]
    },
    {
      "name": "Bag",
      "modulePath": "Core/util/Bag",
      "classDescription": "<p>A simple collection class to contain unique, keyed items.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Bag.js",
      "path": "/Calendar/lib/Core/util",
      "functions": [
        {
          "name": "get",
          "description": "<p>Returns the item with the passed <code>id</code>.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "*",
              "description": "<p>The <code>id</code> to find.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>The found item, or <code>undefined</code>.</p>"
          }
        },
        {
          "name": "add",
          "description": "<p>Adds the passed item(s) to this Bag. Existing items with the same ID\nwill be replaced.</p>",
          "parameters": [
            {
              "name": "toAdd",
              "type": [
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Item(s) to add.</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "at",
          "description": "<p>Returns <code>nth</code> item in this Bag.</p>",
          "parameters": [
            {
              "name": "nth",
              "type": "Number",
              "description": "<p>The index of the matching item. Negative numbers index for the last item. For example, -1\nreturns the last item, -2 the 2nd to last item etc..</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>The matched item, or <code>undefined</code>.</p>"
          }
        },
        {
          "name": "remove",
          "description": "<p>Removes the passed item(s) from this Bag.</p>",
          "parameters": [
            {
              "name": "toRemove",
              "type": [
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Item(s) to remove.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "countOf",
          "description": "<p>Returns the number of items in this Bag which elicits a truthy return value from the passed function.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function, which, when passed an item, returns <code>true</code> to select it as the item to return.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>The number of matched items.</p>"
          }
        },
        {
          "name": "changeId",
          "description": "<p>Change the id of an existing member by mutating its idProperty.</p>",
          "parameters": [
            {
              "name": "item",
              "type": [
                "String",
                "Number",
                "Object"
              ],
              "description": "<p>The item or id of the item to change.</p>"
            },
            {
              "name": "newId",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>The id to set in the existing member.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "filter",
          "description": "<p>Extracts the matching items from this Bag into an array based upon the passed value filter function.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function, which, when passed an item, returns a <code>true</code> to place into the resulting array.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference when the function is called.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>An array of values extracted from this Bag.</p>"
          }
        },
        {
          "name": "includes",
          "description": "<p>Returns <code>true</code> if this Collection includes an item with the same <code>id</code> as the passed item.</p>",
          "parameters": [
            {
              "name": "item",
              "type": [
                "Object",
                "String",
                "Number"
              ],
              "description": "<p>The item to find, or an <code>id</code> to find.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>True if the passed item is found.</p>"
          }
        },
        {
          "name": "map",
          "description": "<p>Extracts the content of this Bag into an array based upon the passed\nvalue extraction function.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function, which, when passed an item, returns a value to place into the resulting array.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference when the function is called.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>An array of values extracted from this Bag.</p>"
          }
        },
        {
          "name": "forEach",
          "description": "<p>Executes the passed function for each item in this Bag, passing in the item.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to execute.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference when the function is called.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "find",
          "description": "<p>Returns <code>nth</code> item in this Bag which elicits a truthy return value from the provided matcher function <code>fn</code>.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function which, when passed an item, returns <code>true</code> to select the item as a match.</p>"
            },
            {
              "name": "nth",
              "type": "Number",
              "description": "<p>The index of the matching item. By default, 0 returns the first item that matches\naccording to <code>fn</code>. Negative numbers index for the last item. For example, -1 returns the last matching item,\n-2 the 2nd to last matching item etc..</p>",
              "default": 0,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>The matched item, or <code>undefined</code>.</p>"
          }
        },
        {
          "name": "sort",
          "description": "<p>Sort the values of this Bag using the passed comparison function.</p>\n<p>Setting this property replaces the data set.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Comparison function which returns -ve, 0, or +ve</p>"
            }
          ],
          "scope": "instance"
        }
      ],
      "properties": [
        {
          "name": "count",
          "description": "<p>The number of items in this Bag.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "values",
          "description": "<p>The set of values of this Bag.</p>\n<p>Setting this property replaces the data set.</p>",
          "type": "Array.<Object>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ClickRepeater",
      "modulePath": "Core/util/ClickRepeater",
      "classDescription": "<p>A helper class, which, when applied to an <a href=\"#Core/util/ClickRepeater#config-element\">element</a> means that a mousedown\nand hold on that element will, after a configured <a href=\"#Core/util/ClickRepeater#config-delay\">delay</a>, begin\nautorepeating <code>click</code> events on that element, starting at a rate of\n<a href=\"#Core/util/ClickRepeater#config-startRate\">startRate</a> clicks per second, and over <a href=\"#Core/util/ClickRepeater#config-accelerateDuration\">accelerateDuration</a>\nmilliseconds, accelerate to firing clicks at <a href=\"#Core/util/ClickRepeater#config-endRate\">endRate</a> times per second.</p>\n<p>An example of this is used by the <a href=\"#Core/widget/NumberField\">NumberField</a>'s\nspinner triggers.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ClickRepeater.js",
      "path": "/Calendar/lib/Core/util",
      "configs": [
        {
          "name": "element",
          "description": "<p>The element on which to fire autorepeating <code>click</code> events when the mouse is held down.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "delegate",
          "description": "<p>A query selector which specifies subtargets of this ClickRepeater's <a href=\"#Core/util/ClickRepeater#config-element\">element</a>\nwhich act as the click auto repeat event targets.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "delay",
          "description": "<p>How long in milliSeconds to pause before starting the click repeats.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 500
        },
        {
          "name": "startRate",
          "description": "<p>Clicks per second to start firing after the initial <a href=\"#Core/util/ClickRepeater#config-delay\">delay</a></p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 2
        },
        {
          "name": "endRate",
          "description": "<p>Clicks per second to fire at top speed, after accelerating over the <a href=\"#Core/util/ClickRepeater#config-accelerateDuration\">accelerateDuration</a></p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 20
        },
        {
          "name": "accelerateDuration",
          "description": "<p>How long in milliseconds to accelerate from the\n<a href=\"#Core/util/ClickRepeater#config-startRate\">startRate</a> to the <a href=\"#Core/util/ClickRepeater#config-startRate\">startRate</a>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 4000
        }
      ]
    },
    {
      "name": "Collection",
      "modulePath": "Core/util/Collection",
      "classDescription": "<p>A class which encapsulates a <a href=\"#Core/util/Collection#function-get\">keyed</a>,\n<a href=\"#Core/util/Collection#function-addFilter\">filterable</a>, <a href=\"#Core/util/Collection#function-addSorter\">sortable</a>\ncollection of objects. Entries may not be atomic data types such as <code>string</code> or <code>number</code>.</p>\n<p>The entries are keyed by their <code>id</code> which is determined by interrogating the <a href=\"#Core/util/Collection#config-idProperty\">idProperty</a>.</p>\n<p>To filter a Collection, add a <a href=\"#Core/util/CollectionFilter\">CollectionFilter</a>\nusing the <a href=\"#Core/util/Collection#function-addFilter\">addFilter</a> method. A Filter config object may be specified here\nwhich will be promoted to a CollectionFilter instance.</p>\n<p>To sort a Collection, add a <a href=\"#Core/util/CollectionSorter\">CollectionSorter</a>\nusing the <a href=\"#Core/util/Collection#function-addSorter\">addSorter</a> method. A Sorter config object may be specified here\nwhich will be promoted to a CollectionSorter instance.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Collection.js",
      "path": "/Calendar/lib/Core/util",
      "configs": [
        {
          "name": "idProperty",
          "description": "<p>Specify the name of the property of added objects which provides the lookup key</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "id"
        },
        {
          "name": "extraKeys",
          "description": "<p>Specify the names or index configs of properties which are to be indexed for fast lookup.</p>\n<p>Index configs use the format <code>{ property : string, unique : boolean }</code>. Unique indices stores one index\nper entry, non-unique stores a <code>Set</code>. If left out, <code>unique</code> defaults to <code>true</code></p>",
          "type": [
            "Array.<String>",
            "Array.<Object>"
          ],
          "scope": "inner"
        },
        {
          "name": "autoFilter",
          "description": "<p>Automatically apply filters on item add.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "autoSort",
          "description": "<p>Automatically apply sorters on item add.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "sorters",
          "description": "<p>A <a href=\"#Core/util/CollectionSorter\">Sorter</a>, or Sorter config object, or\nan array of these, to use to sort this Collection.</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "defaultValue": "{\"$config\":\"\",\"value\":\"\"}"
        }
      ],
      "properties": [
        {
          "name": "generation",
          "description": "<p>A counter which is incremented whenever the Collection is mutated in a meaningful way.</p>\n<p>If a <a href=\"#Core/util/Collection#function-splice\">splice</a> call results in no net replacement, removal or addition,\nthen the <code>generation</code> will not be incremented.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "values",
          "description": "<p>The set of values of this Collection. If this Collection <a href=\"#Core/util/Collection#property-isFiltered\">isFiltered</a>,\nthis yields the filtered data set.</p>\n<p>Setting this property replaces the data set.</p>",
          "type": "Array.<Object>",
          "scope": "instance"
        },
        {
          "name": "allValues",
          "description": "<p>The set of all values of this Collection regardless of filters applied.</p>",
          "type": "Array.<Object>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "count",
          "description": "<p>The number of items in this collection. Note that this honours filtering.\nSee <a href=\"#Core/util/Collection#property-totalCount\">totalCount</a>;</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "totalCount",
          "description": "<p>The number of items in this collection regardless of filtering.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "idProperty",
          "description": "<p>The property name used to extract item <code>id</code>s from added objects.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "sorters",
          "description": "<p>The Collection of <a href=\"#Core/util/CollectionSorter\">Sorters</a> for this Collection.</p>",
          "type": "Core.util.Collection",
          "scope": "inner"
        },
        {
          "name": "isSorted",
          "description": "<p>A flag which is <code>true</code> if this Collection has active <a href=\"#Core/util/Collection#property-sorters\">sorters</a>.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "sortFunction",
          "description": "<p>A sorter function which encapsulates the <a href=\"#Core/util/CollectionSorter\">Sorters</a>\nfor this Collection.</p>",
          "type": "function",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "filters",
          "description": "<p>The Collection of <a href=\"#Core/util/CollectionFilter\">Filters</a> for this Collection.</p>",
          "type": "Core.util.Collection",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isFiltered",
          "description": "<p>A flag which is <code>true</code> if this Collection has active <a href=\"#Core/util/Collection#property-filters\">filters</a>.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "filterFunction",
          "description": "<p>A filter function which encapsulates the <a href=\"#Core/util/CollectionFilter\">Filters</a>\nfor this Collection.</p>",
          "type": "function",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "clear",
          "description": "<p>Clears this collection.</p>",
          "scope": "instance"
        },
        {
          "name": "equals",
          "description": "<p>Compares the content of this Collection with the content of the passed Collection or\nwith the passed array. Order insensitive. This returns <code>true</code> if the two objects passed\ncontain the same set of items.</p>",
          "parameters": [
            {
              "name": "other",
              "type": [
                "Core.util.Collection",
                "Array"
              ],
              "description": "<p>The Collection or array to compare with.</p>"
            },
            {
              "name": "map",
              "type": "function",
              "description": "<p>Optionally a function to convert the items into a comparable object\nto compare. For example <code>item =&gt; item.id</code> could be used to compare the ids of the\nconstituent items.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the two objects passed have the same content.</p>"
          }
        },
        {
          "name": "replaceValues",
          "access": "internal",
          "description": "<p>Replaces the internal <code>values</code> array with the passed <code>values</code>, or <code>filteredValues</code> array with the passed <code>filteredValues</code>.\nIf <code>filteredValues</code> are not passed explicitly, but storage is filtered, decides internally <code>values</code> or <code>filteredValues</code> should\nbe replaced by passed <code>values</code>.</p>\n<p>Note that this takes ownership of the array, and the array must not be mutated by outside code.</p>\n<p>This is an internal utility method, not designed for use by application code.</p>",
          "parameters": [
            {
              "name": "params",
              "type": "Object",
              "description": "<p>Values and parameters to replace</p>"
            },
            {
              "name": "params.values",
              "type": "Array.<Object>",
              "description": "<p>The new <code>values</code> array</p>",
              "isSubParam": true
            },
            {
              "name": "params.filteredValues",
              "type": "Array.<Object>",
              "description": "<p>The new <code>filteredValues</code> array. Applicable only when storage is filtered.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "params.silent",
              "type": "Boolean",
              "description": "<p>If true, <code>change</code> event will not be fired</p>",
              "default": false,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "params.isNewDataset",
              "type": "Boolean",
              "description": "<p>If true, <code>values</code> is a new dataset</p>",
              "default": false,
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:change"
          ]
        },
        {
          "name": "forEach",
          "description": "<p>Executes the passed function for each item in this Collection, passing in the item,\nths index, and the full item array.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to execute.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to include all items, bypassing filters.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "map",
          "description": "<p>Extracts ths content of this Collection into an array based upon the passed\nvalue extraction function.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function, which, when passed an item, returns a value to place into the resulting array.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to process an item even if it is filtered out.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>An array of values extracted from this Collection.</p>"
          }
        },
        {
          "name": "find",
          "description": "<p>Returns the first item in this Collection which elicits a <em>truthy</em> return value from the passed function.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function, which, when passed an item, returns <code>true</code> to select it as the item to return.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to include filtered out items.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>The matched item, or <code>undefined</code>.</p>"
          }
        },
        {
          "name": "add",
          "description": "<p>Adds items to this Collection. Multiple new items may be passed.</p>\n<p>By default, new items are appended to the existing values.</p>\n<p>Any <a href=\"#Core/util/Collection#property-sorters\">sorters</a> <a href=\"#Core/util/Collection#property-sorters\">sorters</a> present are re-run.</p>\n<p>Any <a href=\"#Core/util/Collection#property-filters\">filters</a> <a href=\"#Core/util/Collection#property-filters\">filters</a> present are re-run.</p>\n<p><em>Note that if application functionality requires add and remove, the\n<a href=\"#Core/util/Collection#function-splice\">splice</a> operation is preferred as it performs both\noperations in an atomic manner</em></p>",
          "parameters": [
            {
              "name": "items",
              "type": "Object",
              "description": "<p>The item(s) to add.</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "remove",
          "description": "<p>Removes items from this Collection. Multiple items may be passed.</p>\n<p>Any <a href=\"#Core/util/Collection#property-sorters\">sorters</a> <a href=\"#Core/util/Collection#property-sorters\">sorters</a> present are re-run.</p>\n<p>Any <a href=\"#Core/util/Collection#property-filters\">filters</a> <a href=\"#Core/util/Collection#property-filters\">filters</a> present are re-run.</p>\n<p><em>Note that if application functionality requires add and remove, the\n<a href=\"#Core/util/Collection#function-splice\">splice</a> operation is preferred as it performs both\noperations in an atomic manner</em></p>",
          "parameters": [
            {
              "name": "items",
              "type": "Object",
              "description": "<p>The item(s) to remove.</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "move",
          "description": "<p>Moves an individual item, or a block of items to another location.</p>",
          "parameters": [
            {
              "name": "items",
              "type": [
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>The item/items to move.</p>"
            },
            {
              "name": "beforeItem",
              "type": "Object",
              "description": "<p>the item to insert the first item before. If omitted, the <code>item</code>\nis moved to the end of the Collection.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>The new index of the <code>item</code>.</p>"
          }
        },
        {
          "name": "splice",
          "description": "<p>The core data set mutation method. Removes and adds at the same time. Analogous\nto the <code>Array</code> <code>splice</code> method.</p>\n<p>Note that if items that are specified for removal are also in the <code>toAdd</code> array,\nthen those items are <em>not</em> removed then appended. They remain in the same position\nrelative to all remaining items.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index at which to remove a block of items. Only valid if the\nsecond, <code>toRemove</code> argument is a number.</p>",
              "default": 0
            },
            {
              "name": "toRemove",
              "type": [
                "Array.<Object>",
                "Number"
              ],
              "description": "<p>Either the number of items to remove starting\nat the passed <code>index</code>, or an array of items to remove (If an array is passed, the <code>index</code> is ignored).</p>",
              "optional": true
            },
            {
              "name": "toAdd",
              "type": [
                "Array.<Object>",
                "Object"
              ],
              "description": "<p>An item, or an array of items to add.</p>",
              "optional": true,
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "changeId",
          "description": "<p>Change the id of an existing member by mutating its <a href=\"#Core/util/Collection#config-idProperty\">idProperty</a>.</p>",
          "parameters": [
            {
              "name": "item",
              "type": [
                "String",
                "Number",
                "Object"
              ],
              "description": "<p>The item or id of the item to change.</p>"
            },
            {
              "name": "newId",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>The id to set in the existing member.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "get",
          "description": "<p>Returns the item with the passed <code>id</code>. By default, filtered are honoured, and\nif the item with the requested <code>id</code> is filtered out, nothing will be returned.</p>\n<p>To return the item even if it has been filtered out, pass the second parameter as <code>true</code>.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "*",
              "description": "<p>The <code>id</code> to find.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to return an item even if it is filtered out.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>The found item, or <code>undefined</code>.</p>"
          }
        },
        {
          "name": "getBy",
          "description": "<p>Returns the item with passed property name equal to the passed value. By default,\nfiltered are honoured, and if the item with the requested <code>id</code> is filtered out,\nnothing will be returned.</p>\n<p>To return the item even if it has been filtered out, pass the third parameter as <code>true</code>.</p>",
          "parameters": [
            {
              "name": "propertyName",
              "type": "String",
              "description": "<p>The property to test.</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to find.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to return an item even if it is filtered out.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>The found item, or <code>undefined</code>.</p>"
          }
        },
        {
          "name": "addSorter",
          "description": "<p>Adds a Sorter to the Collection of Sorters which are operating on this Collection.</p>\n<p>A Sorter may be an specified as an instantiated <a href=\"#Core/util/CollectionSorter\">CollectionSorter</a>, or a config object for a CollectionSorter of the form</p>\n<pre><code>{\n    property  : 'age',\n    direction : 'desc'\n}\n</code></pre>\n<p>Note that by default, a Sorter <em>replaces</em> a Sorter with the same <code>property</code> to make\nit easy to change existing Sorters. A Sorter's <code>id</code> is its <code>property</code> by default. You\ncan avoid this and add multiple Sorters for one property by configuring Sorters with <code>id</code>s.</p>\n<p>A Sorter may also be specified as a function which compares two objects eg:</p>\n<pre><code>(lhs, rhs) =&gt; lhs.customerDetails.age - rhs.customerDetails.age\n</code></pre>",
          "parameters": [
            {
              "name": "sorter",
              "type": "Object",
              "description": "<p>A Sorter of Sorter configuration object to add to the Collection\nof Sorters operating on this Collection.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.util.CollectionSorter",
            "description": "<p>The resulting Sorter to make it easy to remove Sorters.</p>"
          }
        },
        {
          "name": "addFilter",
          "description": "<p>Adds a Filter to the Collection of Filters which are operating on this Collection.</p>\n<p>A Filter may be an specified as an instantiated <a href=\"#Core/util/CollectionFilter\">CollectionFilter</a>, or a config object for a CollectionFilter of the form</p>\n<pre><code>{\n    property : 'age',\n    operator : '&gt;=',\n    value    : 21\n}\n</code></pre>\n<p>Note that by default, a Filter <em>replaces</em> a Filter with the same <code>property</code> to make\nit easy to change existing Filters. A Filter's <code>id</code> is its <code>property</code> by default. You\ncan avoid this and add multiple Filters for one property by configuring Filters with <code>id</code>s.</p>\n<p>A Filter may also be specified as a function which filters candidate objects eg:</p>\n<pre><code>candidate =&gt; candidate.customerDetails.age &gt;= 21\n</code></pre>",
          "parameters": [
            {
              "name": "filter",
              "type": "Object",
              "description": "<p>A Filter or Filter configuration object to add to the Collection\nof Filters operating on this Collection.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.util.CollectionFilter",
            "description": "<p>The resulting Filter to make it easy to remove Filters.</p>"
          }
        },
        {
          "name": "addIndex",
          "access": "internal",
          "description": "<p>Adds a lookup index for the passed property name or index config. The index is built lazily when an index is\nsearched</p>",
          "parameters": [
            {
              "name": "indexConfig",
              "type": "Object",
              "description": "<p>An index config</p>"
            },
            {
              "name": "indexConfig.property",
              "type": "String",
              "description": "<p>The property name to add an index for</p>",
              "isSubParam": true
            },
            {
              "name": "indexConfig.unique",
              "type": "Boolean",
              "description": "<p>Specify <code>false</code> to allow multiple entries of the same index, turning\nentries into sets</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "indexConfig.dependentOn",
              "type": "Object",
              "description": "<p>The properties that make the key</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "findIndex",
          "description": "<p>Return the index of the item with the specified key having the specified value.</p>\n<p>By default, filtering is taken into account and this returns the index in the filtered dataset if present. To\nbypass this, pass the third parameter as <code>true</code>.</p>\n<p>Only useful for indices configured with <code>unique: true</code>.</p>",
          "parameters": [
            {
              "name": "propertyName",
              "type": "String",
              "description": "<p>The name of the property to test.</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to test for.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to return the index in\nthe original data set if the item is filtered out.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>The index of the item or <code>-1</code> if not found for unique indices</p>"
          }
        },
        {
          "name": "findItem",
          "description": "<p>Return the item with the specified key having the specified value.</p>\n<p>By default, filtering is taken into account. To bypass this, pass the third parameter as <code>true</code>.</p>\n<p>For indices configured with <code>unique: false</code>, a Set of items will be returned.</p>",
          "parameters": [
            {
              "name": "propertyName",
              "type": "String",
              "description": "<p>The name of the property to test.</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value to test for.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to return the index in\nthe original data set if the item is filtered out.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Object",
              "Set"
            ],
            "description": "<p>The found item or Set of items or null</p>"
          }
        },
        {
          "name": "indexOf",
          "description": "<p>Returns the index of the item with the same <code>id</code> as the passed item.</p>\n<p>By default, filtering is honoured, so if the item in question has been added, but is currently filtered out of\nvisibility, <code>-1</code> will be returned.</p>\n<p>To find the index in the master, unfiltered dataset, pass the second parameter as <code>true</code>;</p>",
          "parameters": [
            {
              "name": "item",
              "type": [
                "Object",
                "String",
                "Number"
              ],
              "description": "<p>The item to find, or an <code>id</code> to find.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to find the index in the master, unfiltered data set.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>The index of the item, or <code>-1</code> if not found.</p>"
          }
        },
        {
          "name": "includes",
          "description": "<p>Returns <code>true</code> if this Collection includes an item with the same <code>id</code> as the passed item.</p>\n<p>By default, filtering is honoured, so if the item in question has been added,\nbut is currently filtered out of visibility, <code>false</code> will be returned.</p>\n<p>To query inclusion in the master, unfiltered dataset, pass the second parameter as <code>true</code>;</p>",
          "parameters": [
            {
              "name": "item",
              "type": [
                "Object",
                "String",
                "Number"
              ],
              "description": "<p>The item to find, or an <code>id</code> to find.</p>"
            },
            {
              "name": "ignoreFilters",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to find the index in the master, unfiltered data set.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>True if the passed item is found.</p>"
          }
        },
        {
          "name": "rebuildIndices",
          "access": "internal",
          "description": "<p>Called when the Collection is mutated and the indices have been flagged as invalid.</p>\n<p>Rebuilds the indices object to allow lookup by keys.</p>",
          "scope": "instance"
        },
        {
          "name": "addToIndices",
          "access": "private",
          "description": "<p>Add an item to all indices</p>",
          "parameters": [
            {
              "name": "item",
              "type": "*",
              "description": "<p>Item already available in the Collection</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeFromIndices",
          "access": "private",
          "description": "<p>Remove an item from all indices</p>",
          "parameters": [
            {
              "name": "item",
              "type": "*",
              "description": "<p>Item already available in the Collection</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeIndexEntry",
          "access": "private",
          "description": "<p>Remove an entry from an index, and if filtering is used also from the filtered index.</p>",
          "parameters": [
            {
              "name": "item",
              "type": "*",
              "description": "<p>Item already available in the Collection</p>"
            },
            {
              "name": "propertyName",
              "type": "String",
              "description": "<p>Property of the item, will be matched with configured indices</p>"
            },
            {
              "name": "oldValue",
              "type": "*",
              "description": "<p>Value to remove</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "addIndexEntry",
          "access": "private",
          "description": "<p>Add a new entry to an index, and if filtering is used also to the filtered index.</p>",
          "parameters": [
            {
              "name": "item",
              "type": "*",
              "description": "<p>Item already available in the Collection</p>"
            },
            {
              "name": "propertyName",
              "type": "String",
              "description": "<p>Property of the item, will be matched with configured indices</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to store</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onItemMutation",
          "access": "internal",
          "description": "<p>Call externally to update indices on item mutation (from Store)</p>",
          "parameters": [
            {
              "name": "item",
              "type": "*",
              "description": "<p>Item already available in the Collection</p>"
            },
            {
              "name": "wasSet",
              "type": "Object",
              "description": "<p>Uses the <code>wasSet</code> format from Store, <code>{ field : { oldValue, newValue } }</code></p>"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "<p>Fired when items are added, replace or removed</p>",
          "parameters": [
            {
              "name": "action",
              "type": "String",
              "description": "<p>The underlying operation which caused data change.\nMay be <code>'splice'</code> (meaning an atomic add/remove operation, <code>'sort'</code> or <code>'filter'</code>)</p>"
            },
            {
              "name": "source",
              "type": "Core.util.Collection",
              "description": "<p>This Collection.</p>"
            },
            {
              "name": "removed",
              "type": "Array.<Object>",
              "description": "<p>An array of removed items. If the <code>action</code> is <code>'filter'</code>, the\nremoved property represents the records which were filtered out by the action.</p>"
            },
            {
              "name": "added",
              "type": "Array.<Object>",
              "description": "<p>An array of added items. If the <code>action</code> is <code>'filter'</code>, the\nadded property represents the records which were filtered in by the action.</p>"
            },
            {
              "name": "replaced",
              "type": "Array.<Object>",
              "description": "<p>An array of replacements, each entry of which contains <code>[oldValue, newValue]</code>.</p>"
            },
            {
              "name": "oldCount",
              "type": "Number",
              "description": "<p>The number of items in the full, unfiltered collection prior to the splice operation.</p>"
            }
          ]
        },
        {
          "name": "noChange",
          "description": "<p>Fired when a <a href=\"#Core/util/Collection#function-splice\">splice</a> operation is requested but the operation\nis a no-op and has caused no change to this Collection's dataset. The splice\nmethod's parameters are passed for reference.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index at which to remove a block of items.</p>"
            },
            {
              "name": "toRemove",
              "type": [
                "Array.<Object>",
                "Number"
              ],
              "description": "<p>Either the number of items to remove starting\nat the passed <code>index</code>, or an array of items to remove (If an array is passed, the <code>index</code> is ignored).</p>",
              "optional": true
            },
            {
              "name": "toAdd",
              "type": [
                "Array.<Object>",
                "Object"
              ],
              "description": "<p>An item, or an array of items to add.</p>",
              "optional": true
            }
          ]
        }
      ]
    },
    {
      "name": "CollectionFilter",
      "modulePath": "Core/util/CollectionFilter",
      "classDescription": "<p>A class which encapsulates a single filter operation which may be applied to any object to decide whether to\ninclude or exclude it from a set.</p>\n<p>A CollectionFilter generally has at least three main properties:</p>\n<ul>\n<li><code>property</code> - The name of a property in candidate objects from which to extract the value to test</li>\n<li><code>value</code> - The value which  this filter uses to test against.</li>\n<li><code>operator</code> - The comparison operator, eg: <code>'='</code> or <code>'&gt;'</code> etc.</li>\n</ul>\n<p>Given these three essential values, further configurations may affect how the filter is applied:</p>\n<ul>\n<li><code>caseSensitive</code> - If configured as <code>false</code>, string comparisons are case insensitive.</li>\n<li><code>convert</code> - A function which, when passed the extracted value from the candidate object, returns the value to test.</li>\n</ul>\n<p>A filter may also be configured with a single <code>filterBy</code> property. This function is just passed the raw\ncandidate object and must return <code>true</code> or <code>false</code>.</p>\n<p>A CollectionFilter may be configured to encapsulate a single filtering function by passing that function as the sole\nparameter to the constructor:</p>\n<pre><code>new CollectionFilter(candidate =&gt; candidate.title.contains('search string'));\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "CollectionFilter.js",
      "path": "/Calendar/lib/Core/util",
      "configs": [
        {
          "name": "value",
          "description": "<p>The value against which to compare the <a href=\"#Core/util/CollectionFilter#config-property\">property</a> of candidate objects.</p>",
          "type": "*",
          "scope": "inner"
        },
        {
          "name": "operator",
          "description": "<p>The operator to use when comparing a candidate object's <a href=\"#Core/util/CollectionFilter#config-property\">property</a> with this CollectionFilter's <a href=\"#Core/util/CollectionFilter#config-value\">value</a>.\nMay be: <code>'='</code>, <code>'!='</code>, <code>'&gt;'</code>, <code>'&gt;='</code>, <code>'&lt;'</code>, <code>'&lt;='</code>, <code>'*'</code>, <code>'startsWith'</code>, <code>'endsWith'</code>, <code>'isIncludedIn'</code></p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "filterBy",
          "description": "<p>May be used in place of the <a href=\"#Core/util/CollectionFilter#config-property\">property</a>, <a href=\"#Core/util/CollectionFilter#config-value\">value</a> and <a href=\"#Core/util/CollectionFilter#config-property\">property</a> configs. A function which\naccepts a candidate object and returns <code>true</code> or <code>false</code></p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "convert",
          "description": "<p>A function which accepts a value extracted from a candidate object using the <a href=\"#Core/util/CollectionFilter#config-property\">property</a> name, and\nreturns the value which the filter should use to compare against its <a href=\"#Core/util/CollectionFilter#config-value\">value</a>.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "caseSensitive",
          "description": "<p>Configure as <code>false</code> to have string comparisons case insensitive.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "id",
          "description": "<p>The <code>id</code> of this Filter for when used by a <a href=\"#Core/util/Collection\">Collection</a> Collection.\nBy default the <code>id</code> is the <a href=\"#Core/util/CollectionFilter#config-property\">property</a> value.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "property",
          "description": "<p>The name of a property of candidate objects which yields the value to compare against this CollectionFilter's <a href=\"#Core/util/CollectionFilter#config-value\">value</a>.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "property",
          "description": "<p>The name of a property of candidate objects which yields the value to compare against this CollectionFilter's <a href=\"#Core/util/CollectionFilter#config-value\">value</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "id",
          "access": "private",
          "description": "<p>When in a Collection (A Collection holds its Filters in a Collection), we need an id.</p>",
          "type": "String",
          "scope": "instance"
        },
        {
          "name": "filterBy",
          "description": "<p>May be used in place of the <a href=\"#Core/util/CollectionFilter#config-property\">property</a>, <a href=\"#Core/util/CollectionFilter#config-value\">value</a> and <a href=\"#Core/util/CollectionFilter#config-property\">property</a> configs. A function which\naccepts a candidate object and returns <code>true</code> or <code>false</code></p>",
          "type": "function",
          "scope": "instance"
        },
        {
          "name": "value",
          "description": "<p>The value against which to compare the <a href=\"#Core/util/CollectionFilter#config-property\">property</a> of candidate objects.</p>",
          "type": "*",
          "scope": "instance"
        },
        {
          "name": "operator",
          "description": "<p>The operator to use when comparing a candidate object's <a href=\"#Core/util/CollectionFilter#config-property\">property</a> with this CollectionFilter's <a href=\"#Core/util/CollectionFilter#config-value\">value</a>.\nMay be: <code>'='</code>, <code>'!='</code>, <code>'&gt;'</code>, <code>'&gt;='</code>, <code>'&lt;'</code>, <code>'&lt;='</code>, <code>'*'</code>, <code>'startsWith'</code>, <code>'endsWith'</code>, <code>'isIncludedIn'</code></p>",
          "type": "String",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "CollectionSorter",
      "modulePath": "Core/util/CollectionSorter",
      "classDescription": "<p>A class which encapsulates a single sorter operation which may be applied to any object to decide whether to\ninclude or exclude it from a set.</p>\n<p>A CollectionSorter generally has two properties:</p>\n<ul>\n<li><code>property</code> - The name of a property in collection objects by which to sort</li>\n<li><code>direction</code> - The sort direction, <code>'ASC'</code> or <code>'DESC'</code>.</li>\n</ul>\n<p>It may also be configured with just a <a href=\"#Core/util/CollectionSorter#config-sortFn\">sortFn</a> function which returns the desired comparison\nresult when passed two objects to compare. Note that this does <em>not</em> require or use the\n<a href=\"#Core/util/CollectionSorter#config-property\">property</a> config. Two collection items are passed for comparison.</p>\n<p>Further configurations may affect how the sorter is applied:</p>\n<ul>\n<li><code>convert</code> - A function which, when passed the <a href=\"#Core/util/CollectionSorter#config-property\">property</a> value from\na collection object, returns the value to sort by.</li>\n</ul>\n<p>A CollectionSorter may be configured to encapsulate a <a href=\"#Core/util/CollectionSorter#config-sortFn\">sortFn</a> by passing that function as the sole\nparameter to the constructor:</p>\n<pre><code>new CollectionSorter((lhs, rhs) =&gt; {\n    lhs = lhs.customerDetails.companyName.toLowerCase();\n    rhs = rhs.customerDetails.companyName.toLowerCase();\n\n    if (lhs &lt; rhs) {\n        return -1;\n    }\n    else if (lhs &gt; rhs) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n});\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "CollectionSorter.js",
      "path": "/Calendar/lib/Core/util",
      "configs": [
        {
          "name": "property",
          "description": "<p>The name of a property of collection objects which yields the value to sort by.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "direction",
          "description": "<p>The direction to sort in, <code>'ASC'</code> or <code>'DESC'</code></p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "ASC"
        },
        {
          "name": "sortFn",
          "description": "<p>A function which takes the place of using <a href=\"#Core/util/CollectionSorter#config-property\">property</a> and <a href=\"#Core/util/CollectionSorter#config-direction\">direction</a>.\nThe function is passed two objects from the collection to compare and must return the comparison result.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "convert",
          "description": "<p>When using <a href=\"#Core/util/CollectionSorter#config-property\">property</a>, this may be specified as a function which takes the raw\nproperty value and returns the value to actually sort by.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "id",
          "description": "<p>The <code>id</code> of this Sorter for when used by a <a href=\"#Core/util/Collection\">Collection</a> Collection.\nBy default the <code>id</code> is the <a href=\"#Core/util/CollectionSorter#config-property\">property</a> value.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "useLocaleSort",
          "description": "<p>Use <code>localeCompare()</code> when sorting, which lets the browser sort in a locale specific order. Set to <code>true</code>,\na locale string or a locale config to enable.</p>\n<p>Enabling this has big negative impact on sorting\nperformance. For more info on <code>localeCompare()</code>, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\">MDN</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>collection.addSorter({ field: 'name', useLocaleSort : 'sv-SE' });\n</code></pre>",
          "type": [
            "Boolean",
            "String",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "properties": [
        {
          "name": "id",
          "access": "private",
          "description": "<p>When in a Collection (A Collection holds its Sorters in a Collection), we need an id.</p>",
          "type": "String",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "defaultSortFn",
          "access": "private",
          "description": "<p>Default sortFn used when no sortFn specified. Uses the <a href=\"#Core/util/CollectionSorter#config-property\">property</a>,\n<a href=\"#Core/util/CollectionSorter#config-direction\">direction</a>, and <a href=\"#Core/util/CollectionSorter#config-convert\">convert</a>.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DayTime",
      "modulePath": "Core/util/DayTime",
      "classDescription": "<p>This class encapsulates time of day calculations.</p>\n<p>The goal is to describe a &quot;day&quot; (a 24-hour period) that starts at a specific time (other than midnight). In a\ncalendar day view, this would look like this:</p>\n<pre class=\"prettyprint source\"><code>             startShift=0                          startShift='12:00'\n      00:00  +-------+                      12:00  +-------+\n             |       |                             |       |\n      01:00  |- - - -|                      13:00  |- - - -|\n                ...                                   ...\n             |       |                             |       |\n      08:00  |- - - -|   &lt;-- timeStart -->  20:00  |- - - -|\n             |       |                             |       |\n      09:00  |- - - -|                      21:00  |- - - -|\n             |       |                             |       |\n      10:00  |- - - -|                      22:00  |- - - -|\n             |       |                             |       |\n      11:00  |- - - -|                      23:00  |- - - -|\n             |       |                             |       |\n      12:00  |- - - -|                      00:00  |- - - -|\n             |       |                             |       |\n      13:00  |- - - -|                      01:00  |- - - -|\n             |       |                             |       |\n      14:00  |- - - -|                      02:00  |- - - -|\n             |       |                             |       |\n      15:00  |- - - -|                      03:00  |- - - -|\n             |       |                             |       |\n      16:00  |- - - -|                      04:00  |- - - -|\n             |       |                             |       |\n      17:00  |- - - -|    &lt;-- timeEnd -->   05:00  |- - - -|\n             |       |                             |       |\n                ...                                   ...\n             |       |                             |       |\n      23:00  |- - - -|                      11:00  |- - - -|\n             |       |                             |       |\n      00:00  +-------+                      12:00  +-------+\n</code></pre>\n<p>In a horizontal format with X for times to render:</p>\n<pre class=\"prettyprint source\"><code> startShift = 0\n\n     +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n     |   |   |  ...  |   |XXX|XXX|  ...  |XXX|XXX|   |  ...  |   |\n     +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n     00  01  02      07  08  09  10      15  16  17  18      23  00\n                         ^                       ^\n                     timeStart               timeEnd\n\n startShift = '12:00'\n\n     +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n     |   |   |  ...  |   |XXX|XXX|X ... X|XXX|XXX|   |  ...  |   |\n     +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n     12  13  14      19  20  21  22      03  04  05  06      11  12\n                         ^                       ^\n                     timeStart               timeEnd\n</code></pre>\n<p>When the day wraps over midnight, it is describing this (note timeEnd &lt; timeStart):</p>\n<pre class=\"prettyprint source\"><code>     +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n     |XXX|XXX|X ... X|XXX|   |   |  ...  |   |   |XXX|X ... X|XXX|\n     +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n     00  01  02      04  05  06  07      18  19  20  21      23  00\n                         ^                       ^\n                     timeEnd                 timeStart\n</code></pre>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DayTime.js",
      "path": "/Calendar/lib/Core/util",
      "functions": [
        {
          "name": "format",
          "access": "private",
          "description": "<p>Returns a string of &quot;HH:MM&quot; for a given time of day in milliseconds.</p>",
          "parameters": [
            {
              "name": "timeOfDay",
              "type": "Number",
              "description": "<p>The time of day in milliseconds.</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "parse",
          "access": "private",
          "description": "<p>Parses a time of day which may be a number (0-24 for the hour of the day) or a string in &quot;H:MM&quot; format and\nreturns the time of day as a number of milliseconds.</p>\n<p>If <code>time</code> is a <code>Date</code> instance, its time of day is returned.</p>",
          "parameters": [
            {
              "name": "time",
              "type": [
                "Date",
                "Number",
                "String"
              ]
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "ceil",
          "description": "<p>Returns <code>Date</code> object for the nearest (shifted) day ending after the given <code>date</code>. The time of this <code>Date</code> will\nbe the <code>startShift</code>.</p>\n<p>It is possible for this date to be in the next day on a midnight-based calendar. For example, if the <code>startShift</code>\nis 6PM and <code>date</code> is 7PM on May 20, this method will return 6PM of May 21 (the nearest day ending).</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date for which to find the nearest day ending.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Date"
          }
        },
        {
          "name": "contains",
          "description": "<p>Returns <code>true</code> if the time of day for the given <code>date</code> is between <code>timeStart</code> and <code>timeEnd</code>.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "Number",
                "String"
              ],
              "description": "<p>The hour number, 'HH:MM' time or a <code>Date</code> instance to test.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "dateKey",
          "description": "<p>Returns a &quot;YYYY-MM-DD&quot; string for the given <code>date</code>. This value will match the <code>date</code> if the time of day is at or\nafter <code>startShift</code>, but will be the prior date otherwise.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "Number"
              ],
              "description": "<p>The date from which to compute the 'YYYY-MM-DD' key.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "dayOfDate",
          "description": "<p>Returns a <code>Date</code> instance with <code>startShift</code> as the time of day and the Y/M/D of the given <code>date</code>.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date's year, month, and day values.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Date"
          }
        },
        {
          "name": "dayOfWeek",
          "description": "<p>Returns the day of week (0-8) for the given <code>date</code>. This value will match the <code>date</code> if the time of day is at or\nafter <code>startShift</code>, but will be the prior day otherwise.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "Number"
              ],
              "description": "<p>The date from which to compute the day of week.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "delta",
          "description": "<p>Returns the difference between the time of day of the given <code>date</code> and <code>timeStart</code> in the specified time <code>unit</code>.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "Number",
                "String"
              ],
              "description": "<p>The hour number, 'HH:MM' time or a <code>Date</code> instance.</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The desired unit of time to return (see <a href=\"#Core/helper/DateHelper#function-as-static\">as</a>).</p>",
              "default": "ms"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "duration",
          "description": "<p>Returns the duration of the visible day (between <code>timeStart</code> and <code>timeEnd</code>) in the specified time <code>unit</code>.</p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The desired unit of time to return (see <a href=\"#Core/helper/DateHelper#function-as-static\">as</a>).</p>",
              "default": "ms"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "equals",
          "description": "<p>Returns <code>true</code> if this instance describes the same day as the <code>other</code>.</p>",
          "parameters": [
            {
              "name": "other",
              "type": "Core.util.DayTime",
              "description": "<p>The other instance to which <code>this</code> instance should be tested for equality.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "intersects",
          "description": "<p>Returns <code>true</code> if the times of day described by <code>startDate</code> and <code>endDate</code> intersect the visible time of this day.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the date range or an event record containing both startDate and endDate\nfields.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date if <code>startDate</code> is not an event record.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isIntraDay",
          "description": "<p>Returns <code>true</code> if the given date range is contained within one day.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the date range or an event record containing both startDate and endDate\nfields.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date if <code>startDate</code> is not an event record.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "outside",
          "description": "<p>Returns -1, 0, or 1 based on whether the time of day for the given <code>date</code> is before <code>timeStart</code> (-1), or after\n<code>timeEnd</code> (1), or between these times (0).</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "Number",
                "String"
              ],
              "description": "<p>The hour number, 'HH:MM' time or a <code>Date</code> instance to test.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "shiftDate",
          "description": "<p>Returns the given <code>date</code> shifted forward (<code>direction</code> &gt; 0) or backward (<code>direction</code> &lt; 0) by the <code>startShift</code>.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Number",
                "Date"
              ],
              "description": "<p>The date as a <code>Date</code> or the millisecond UTC epoch.</p>"
            },
            {
              "name": "direction",
              "type": "Number",
              "description": "<p>A value &gt; 0 to shift <code>date</code> forward, or &lt; 0 to shift it backwards.</p>",
              "default": 1
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Date"
          }
        },
        {
          "name": "sortEvents",
          "access": "internal",
          "description": "<p>Sorts the given set of <code>events</code> by the maximum of <code>startDate</code> and <code>startOfDay</code> for the given <code>date</code>, followed\nby <code>duration</code> in case of a tie.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The day for which events are to be sorted.</p>"
            },
            {
              "name": "events",
              "type": "Array.<Object>",
              "description": "<p>The events to sort, typically an <code>Scheduler.model.EventModel[]</code> but any objects with\nboth <code>startDate</code> and <code>endDate</code> fields are acceptable.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>The passed <code>events</code> array.</p>"
          }
        },
        {
          "name": "startOfDay",
          "description": "<p>Returns <code>Date</code> object for the nearest started (shifted) day prior to the given <code>date</code>. The time of this <code>Date</code>\nwill be the <code>startShift</code>.</p>\n<p>It is possible for this date to be in the prior day on a midnight-based calendar. For example, if the <code>startShift</code>\nis 6PM and <code>date</code> is 6AM on May 20, this method will return 6PM of May 19 (the nearest started day).</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date for which to find the nearest started day.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Date"
          }
        },
        {
          "name": "timeRange",
          "description": "<p>TODO</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the date range or an event record containing both startDate and endDate\nfields.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date if <code>startDate</code> is not an event record.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Number>"
          }
        },
        {
          "name": "_dateRangeArgs",
          "access": "private",
          "description": "<p>Decodes the arguments and returns a pair of <code>Date</code> objects for the start and end of the date range.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the date range or an event record containing both startDate and endDate\nfields.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date if <code>startDate</code> is not an event record.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Date>"
          }
        }
      ],
      "configs": [
        {
          "name": "startShift",
          "description": "<p>Either the hour number or a <em>24 hour</em> <code>HH:MM</code> string denoting the start time for the day. This is\nmidnight by default.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "0"
        },
        {
          "name": "timeStart",
          "description": "<p>Either the hour number or a <em>24 hour</em> <code>HH:MM</code> string denoting the first visible time of day. You can also\nset this value to a ms timestamp representing time from midnight.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "0"
        },
        {
          "name": "timeEnd",
          "description": "<p>Either the hour number or a <em>24 hour</em> <code>HH:MM</code> string denoting the last visible time of day. You can also\nset this value to a ms timestamp representing time from midnight.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "24"
        }
      ],
      "properties": [
        {
          "name": "startTimeOffsetMs",
          "description": "<p>The number of milliseconds from the day's <code>startShift</code> to its <code>timeStart</code>.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "today",
          "description": "<p>The <code>Date</code> object for the most recently started, shifted day. The time of this <code>Date</code> will be the <code>startShift</code>.\nIt is possible for this date to be yesterday on a midnight-based calendar. For example, if the <code>startShift</code> is\n6PM and the current time is 6AM on May 20, this value will be 6PM of May 19 (the most recently started day).</p>",
          "type": "Date",
          "scope": "instance"
        },
        {
          "name": "MIDNIGHT",
          "description": "<p>The <code>DayTime</code> instance representing a canonical calendar day (starting at midnight).</p>",
          "type": "Core.util.DayTime",
          "scope": "static",
          "readonly": true
        }
      ]
    },
    {
      "name": "DynamicObject",
      "modulePath": "Core/util/DynamicObject",
      "classDescription": "<p>This class is used to manage dynamic creation and configuration of individual properties of an object. This pattern\nis used to allow the names of an object to each represent a dynamically instantiated object. For example, the\n<code>features</code> config of Calendar is defined like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Calendar extends ... {\n     static get configurable() {\n         return {\n             features : {\n                 drag : {\n                     // configs for Drag feature\n                 }\n             }\n         }\n     }\n }\n</code></pre>\n<p>This class is used to manage the <code>features</code> objects in the above case. The <code>drag</code> property value is promoted from\nthe config object defined by the class and user instance on first request. Like config properties themselves, these\nfeatures may access other features during their initialization. These accesses are trapped by this class to ensure\nthe config object is promoted to an instantiated instance.</p>\n<p>A <a href=\"#Core/util/DynamicObject#config-factory\">factory</a> is provided to this object to allow it to create instances from names like <code>'drag'</code>.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DynamicObject.js",
      "path": "/Calendar/lib/Core/util",
      "configs": [
        {
          "name": "cleanup",
          "description": "<p>Optional function that will be passed an instance prior to destroying it.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The property name in the Dynamic object by which the new instance may be referenced.</p>"
            },
            {
              "name": "instance",
              "type": "Object",
              "description": "<p>The value of the property.</p>"
            }
          ]
        },
        {
          "name": "configName",
          "description": "<p>Optional name of the config property managed by this instance. If changes are made directly, this\nproperty is used to run the <code>onConfigChange</code> method of the <code>owner</code>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "created",
          "description": "<p>Optional function to call as instances are created. Each new instance is passed to this function.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "instance",
              "type": "Object",
              "description": "<p>The newly created instance.</p>"
            },
            {
              "name": "key",
              "type": "String",
              "description": "<p>The property name in the dynamic object by which the new instance may be referenced.</p>"
            }
          ]
        },
        {
          "name": "factory",
          "description": "<p>The <a href=\"#Core/mixin/Factoryable\">factory</a> to use to create instances.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "inferType",
          "description": "<p>By default, the name of the member is used for the type. Set this config to <code>true</code> to also allow the\nconfig object for a property to contain a <code>type</code> property. Set this to <code>false</code> to ignore the name of the\nmember and rely on the <a href=\"#Core/util/DynamicObject#config-factory\">factory</a> to process the config object.</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "name"
        },
        {
          "name": "owner",
          "description": "<p>The owning object to pass along to the instances as the <code>ownerName</code> property.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "ownerName",
          "description": "<p>The property name by which to store the <code>owner</code> on each instance.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "proxyable",
          "access": "private",
          "description": "<p>Set to <code>false</code> to prevent using a <code>Proxy</code> even if that JavaScript platform feature is available. Using\na <code>Proxy</code> is ideal because it allows for all forms of access to the dynamic properties to be handled\ninstead of only those that have predefined configuration values.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "setup",
          "description": "<p>Optional function that will be passed a config object prior to instantiating an object. This function\ncan either modify the passed object or return a new object.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The config object used to create the object</p>"
            },
            {
              "name": "name",
              "type": "String",
              "description": "<p>The property name in the Dynamic object by which the new instance may be referenced.</p>"
            }
          ]
        },
        {
          "name": "transform",
          "description": "<p>Optional function that will be passed a raw config object prior to processing and the value it returns\nreplaces the raw value. This function is used to transform strings or arrays (for example) into proper\nconfig objects.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "config",
              "type": "*",
              "description": "<p>The original value of the config object parameter</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "defaults",
          "access": "private",
          "description": "<p>Holds config objects for each defined object. These are used to hold class and instance config values\nand use them to create instances on first request, or when <code>flush()</code> is called. Further, if the instance\nis initially assigned instead of retrieved, these values act as the defaults for the instance and are\ncombined with those provided in the assignment.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "instances",
          "access": "private",
          "description": "<p>This object holds the actual instances that are retrieved by the dynamic accessor or <code>Proxy</code>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "object",
          "access": "private",
          "description": "<p>The object that contains the dynamic accessors for each instance. This object is not used when using a\n<code>Proxy</code>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "proxy",
          "access": "private",
          "description": "<p>Returns the <code>Proxy</code> instance used to manage dynamic assignments. If the JavaScript platform does not support the\n<code>Proxy</code> class, this will be <code>null</code>.</p>",
          "type": "Proxy",
          "scope": "instance"
        },
        {
          "name": "target",
          "access": "internal",
          "description": "<p>Returns the object that contains the dynamic properties. This may be a <code>Proxy</code> instance or an object with getter\nand setter accessors.</p>",
          "type": "Object",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "define",
          "access": "private",
          "description": "<p>This method establishes the initial definition of a dynamic property. When using a <code>Proxy</code>, this method simply\nneeds to cache away the initial config for use by the getter. When <code>Proxy</code> is unavailable, this method will\nalso defined a getter/setter to intercept access to the dynamic property.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the dynamic property.</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The initial config object for the dynamic property.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "defineProp",
          "access": "private",
          "description": "<p>Define the get/set accessors for <code>name</code> on our <code>object</code> or its prototype.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "base",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to indicate the property should be defined on the prototype.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "flush",
          "access": "internal",
          "description": "<p>Ensures that all defined members are touched to trigger their creation.</p>",
          "scope": "instance"
        },
        {
          "name": "get",
          "access": "private",
          "description": "<p>Returns (lazily creating as necessary) the value of a dynamic property given its name.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "set",
          "access": "private",
          "description": "<p>Sets the value of a dynamic property given its name and value.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "value",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setDefaults",
          "access": "private",
          "description": "<p>Stores the default config values for use in the factory reconfiguration process.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name and default type of the dynamic property. Depending on <a href=\"#Core/util/DynamicObject#config-inferType\">inferType</a>,\nthis may not be overridden by a type property in the config object.</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The config object.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "update",
          "access": "internal",
          "description": "<p>Updates the members of <code>object</code> based on the provided configuration.</p>",
          "parameters": [
            {
              "name": "members",
              "type": "Object",
              "description": "<p>The configuration for the instances of <code>object</code>.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Month",
      "modulePath": "Core/util/Month",
      "classDescription": "<p>A class which encapsulates a calendar view of a month, and offers information about\nthe weeks and days within that calendar view.</p>\n<pre class=\"prettyprint source\"><code>  // December 2018 using Monday as week start\n  const m = new Month({\n      date         : '2018-12-01',\n      weekStartDay : 1\n  });\n\n  m.eachWeek((week, dates) => console.log(dates.map(d => d.getDate())))\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Month.js",
      "path": "/Calendar/lib/Core/util",
      "configs": [
        {
          "name": "date",
          "description": "<p>The date which the month should encapsulate. May be a <code>Date</code> object, or a\n<code>YYYY-MM-DD</code> format string.</p>\n<p>Mutating a passed <code>Date</code> after initializing a <code>Month</code> object has no effect on\nthe <code>Month</code> object.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "weekStartDay",
          "description": "<p>The week start day, 0 meaning Sunday, 6 meaning Saturday.\nDefaults to <a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "hideNonWorkingDays",
          "description": "<p>Configure as <code>true</code> to have the visibleDayColumnIndex and visibleColumnCount properties\nrespect the configured <a href=\"#Core/util/Month#config-nonWorkingDays\">nonWorkingDays</a>.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "nonWorkingDays",
          "description": "<p>Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is <code>true</code>.\nDefaults to <a href=\"#Core/helper/DateHelper#property-nonWorkingDays-static\">nonWorkingDays</a>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "sixWeeks",
          "description": "<p>Configure as <code>true</code> to always have the month encapsulate six weeks.\nThis is useful for UIs which must be a fixed height.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "dateChange",
          "description": "<p>Fired when setting the <a href=\"#Core/util/Month#config-date\">date</a> property causes the encapsulated date to change\nin <strong>any</strong> way, date, week, month or year.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.util.Month",
              "description": "<p>The Month which triggered the event.</p>"
            },
            {
              "name": "newDate",
              "type": "Date",
              "description": "<p>The new encapsulated date value.</p>"
            },
            {
              "name": "oldDate",
              "type": "Date",
              "description": "<p>The previous encapsulated date value.</p>"
            },
            {
              "name": "changes",
              "type": "Number",
              "description": "<p>An object which contains properties which indicate what part of the date changed.</p>"
            },
            {
              "name": "changes.d",
              "type": "Boolean",
              "description": "<p>True if the date changed in any way.</p>",
              "isSubParam": true
            },
            {
              "name": "changes.w",
              "type": "Boolean",
              "description": "<p>True if the week changed (including same week in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.m",
              "type": "Boolean",
              "description": "<p>True if the month changed (including same month in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.y",
              "type": "Boolean",
              "description": "<p>True if the year changed.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "weekChange",
          "description": "<p>Fired when setting the <a href=\"#Core/util/Month#config-date\">date</a> property causes a change of week. Note that\nweeks are calculated in the ISO standard form such that if there are fewer than four\ndays in the first week of a year, then that week is owned by the previous year.</p>\n<p>The <a href=\"#Core/util/Month#config-weekStartDay\">weekStartDay</a> is honoured when making this calculation and this is a\nlocale-specific value which defaults to the ISO standard of 1 (Monday) in provided European\nlocales and 0 (Sunday) in the provided US English locale.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.util.Month",
              "description": "<p>The Month which triggered the event.</p>"
            },
            {
              "name": "newDate",
              "type": "Date",
              "description": "<p>The new encapsulated date value.</p>"
            },
            {
              "name": "oldDate",
              "type": "Date",
              "description": "<p>The previous encapsulated date value.</p>"
            },
            {
              "name": "changes",
              "type": "Number",
              "description": "<p>An object which contains properties which indicate what part of the date changed.</p>"
            },
            {
              "name": "changes.d",
              "type": "Boolean",
              "description": "<p>True if the date changed in any way.</p>",
              "isSubParam": true
            },
            {
              "name": "changes.w",
              "type": "Boolean",
              "description": "<p>True if the week changed (including same week in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.m",
              "type": "Boolean",
              "description": "<p>True if the month changed (including same month in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.y",
              "type": "Boolean",
              "description": "<p>True if the year changed.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "monthChange",
          "description": "<p>Fired when setting the <a href=\"#Core/util/Month#config-date\">date</a> property causes a change of month. This\nwill fire when changing to the same month in a different year.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.util.Month",
              "description": "<p>The Month which triggered the event.</p>"
            },
            {
              "name": "newDate",
              "type": "Date",
              "description": "<p>The new encapsulated date value.</p>"
            },
            {
              "name": "oldDate",
              "type": "Date",
              "description": "<p>The previous encapsulated date value.</p>"
            },
            {
              "name": "changes",
              "type": "Number",
              "description": "<p>An object which contains properties which indicate what part of the date changed.</p>"
            },
            {
              "name": "changes.d",
              "type": "Boolean",
              "description": "<p>True if the date changed in any way.</p>",
              "isSubParam": true
            },
            {
              "name": "changes.w",
              "type": "Boolean",
              "description": "<p>True if the week changed (including same week in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.m",
              "type": "Boolean",
              "description": "<p>True if the month changed (including same month in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.y",
              "type": "Boolean",
              "description": "<p>True if the year changed.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "yearChange",
          "description": "<p>Fired when setting the <a href=\"#Core/util/Month#config-date\">date</a> property causes a change of year.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.util.Month",
              "description": "<p>The Month which triggered the event.</p>"
            },
            {
              "name": "newDate",
              "type": "Date",
              "description": "<p>The new encapsulated date value.</p>"
            },
            {
              "name": "oldDate",
              "type": "Date",
              "description": "<p>The previous encapsulated date value.</p>"
            },
            {
              "name": "changes",
              "type": "Number",
              "description": "<p>An object which contains properties which indicate what part of the date changed.</p>"
            },
            {
              "name": "changes.d",
              "type": "Boolean",
              "description": "<p>True if the date changed in any way.</p>",
              "isSubParam": true
            },
            {
              "name": "changes.w",
              "type": "Boolean",
              "description": "<p>True if the week changed (including same week in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.m",
              "type": "Boolean",
              "description": "<p>True if the month changed (including same month in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.y",
              "type": "Boolean",
              "description": "<p>True if the year changed.</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "canonicalDayNumbers",
          "description": "<p>For use when this Month's <code>weekStartDay</code> is non-zero.</p>\n<p>An array to map the days of the week 0-6 of this Calendar to the canonical day numbers\nused by the Javascript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a> object.</p>",
          "type": "Array.<Number>",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "visibleDayColumnIndex",
          "description": "<p>An array to map a canonical day number to a <em>visible</em> column index.\nFor example, if we have <code>weekStartDay</code> as Monday which is 1, and non working days as\nWednesday, and <code>hideNonWorkingDays : true</code>, then the calendar would look like</p>\n<pre class=\"prettyprint source\"><code>┌────┬────┬────┬────┬────┬────┐\n| Mo | Tu | Th | Fr | Sa | Su |\n└────┴────┴────┴────┴────┴────┘\n</code></pre>\n<p>So we'd need this array: <code>[ 5, 0, 1, undefined, 2, 3, 4]</code></p>",
          "type": "Array.<Number>",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "dayColumnIndex",
          "description": "<p>An array to map a canonical day number to a 0-6 column index.\nFor example, if we have <code>weekStartDay</code> as Monday which is 1, then the calendar would look like</p>\n<pre class=\"prettyprint source\"><code>┌────┬────┬────┬────┬────┬────┬────┐\n| Mo | Tu | We | Th | Fr | Sa | Su |\n└────┴────┴────┴────┴────┴────┴────┘\n</code></pre>\n<p>So we'd need this array: <code>[ 6, 0, 1, 2, 3, 4, 5]</code></p>",
          "type": "Array.<Number>",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "weekLength",
          "description": "<p>The number of visible days in the week as defined by the <code>nonWorkingDays</code> and\n<code>hideNonWorkingDays</code> options.</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "dayCount",
          "description": "<p>The number of days in the calendar for this month. This will always be\na multiple of 7, because this represents the number of calendar cells\noccupied by this month.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "weekCount",
          "description": "<p>The number of weeks in the calendar for this month.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "startDate",
          "description": "<p>The date of the first cell in the calendar view of this month.</p>",
          "type": "Date",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "endDate",
          "description": "<p>The date of the last cell in the calendar view of this month.</p>",
          "type": "Date",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "getWeekStart",
          "description": "<p>Returns the week start date, based on the configured <a href=\"#Core/util/Month#config-weekStartDay\">weekStartDay</a> of the\npassed week.</p>",
          "parameters": [
            {
              "name": "week",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>The week number in the current year, or an array containing\n<code>[year, weekOfYear]</code> for any year.</p>\n<p>Week numbers greater than the number of weeks in the year just wrap into the following year.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "eachDay",
          "description": "<p>Iterates through all calendar cells in this month, calling the passed function for each date.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "fn.date",
              "type": "Date",
              "description": "<p>The date for the cell.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "eachWeek",
          "description": "<p>Iterates through all weeks in this month, calling the passed function\nfor each week.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "fn.week",
              "type": "Array.<Number>",
              "description": "<p>An array containing <code>[year, weekNumber]</code></p>",
              "isSubParam": true
            },
            {
              "name": "fn.dates",
              "type": "Array.<Date>",
              "description": "<p>The dates for the week.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getWeekNumber",
          "description": "<p>Returns the week of the year for the passed date. This returns an array containing <em>two</em> values,\nthe year <strong>and</strong> the week number are returned.</p>\n<p>The week number is calculated according to ISO rules, meaning that if the first week of the year\ncontains less than four days, it is considered to be the last week of the preceding year.</p>\n<p>The configured <a href=\"#Core/util/Month#config-weekStartDay\">weekStartDay</a> is honoured in this calculation. So if the weekStartDay\nis <strong>NOT</strong> the ISO standard of <code>1</code>, (Monday), then the weeks do not coincide with ISO weeks.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to calculate the week for.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Number>",
            "description": "<p>A numeric array: <code>[year, week]</code></p>"
          }
        }
      ]
    },
    {
      "name": "ScrollManager",
      "modulePath": "Core/util/ScrollManager",
      "classDescription": "<p>Monitors the mouse position over an element and scrolls the element if the cursor is close to edges. This is used by\nvarious features to scroll the grid section element, for example dragging elements close to edges.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Instantiate manager for the container element having overflowing content\nconst manager = new ScrollManager({ element : document.querySelector('.container') });\n\n// Start monitoring. When pointer approaches 50px region within monitored element edge, scrolling begins\nmanager.startMonitoring();\n\n// Stop monitoring.\nmanager.stopMonitoring();\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ScrollManager.js",
      "path": "/Calendar/lib/Core/util",
      "configs": [
        {
          "name": "element",
          "description": "<p>Default element to use for scrolling. Can be overridden in calls to <code>startMonitoring()</code>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "zoneWidth",
          "description": "<p>Width in pixels of the area at the edges of an element where scrolling should be triggered</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 50
        },
        {
          "name": "scrollSpeed",
          "description": "<p>Scroll speed, higher number is slower. Calculated as &quot;distance from zone edge / scrollSpeed&quot;</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "direction",
          "description": "<p>The direction(s) to scroll ('horizontal', 'vertical' or 'both')</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "startScrollDelay",
          "description": "<p>Number of milliseconds to wait before scroll starts when the mouse is moved close to an edge monitored by this scroll manager</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 500
        },
        {
          "name": "stopScrollWhenPointerOut",
          "description": "<p>Set to true to stop scrolling when pointing device leaves the scrollable element.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "properties": [
        {
          "name": "isScrolling",
          "description": "<p>Returns true if some of the monitored elements is being scrolled at the moment.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "startMonitoring",
          "description": "<p>Starts monitoring an element. It will be scrolled if mouse is pressed and within <code>zoneWidth</code> pixels from element\nedge. Supports monitoring multiple elements using <code>scrollables</code> option:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new ScrollManager({ element : '.item' }).startMonitoring({\n    scrollables : [\n        {\n            // Applies config to all elements matching `.item .child-item`\n            // selector\n            element : '.child-item',\n            // Only manage vertical scroll\n            direction : 'vertical',\n            // Specific callback for this scrollable. Shared callback is\n            // ignored.\n            callback : () => console.log('Specific callback')\n        },\n        {\n            // Instance can be used\n            element : document.querySelector('.item .child2')\n            // Direction and callback are not provided, so element will\n            // be scrollable in horizontal direction and will use shared\n            // callback\n        }\n    ],\n    direction : 'horizontal',\n    callback  : () => console.log('Shared callback')\n})\n</code></pre>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Element which might be scrolled or config { element, callback, thisObj }</p>"
            },
            {
              "name": "config.direction",
              "type": "String",
              "description": "<p>Direction to scroll. Overrides default scroll direction</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.callback",
              "type": "function",
              "description": "<p>Callback to execute on every scroll of the target element.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>startMonitoring({\n    callback(monitor) {\n        // Current left and top scroll of the monitored element\n        console.log(monitor.scrollLeft)\n        console.log(monitor.scrollTop)\n        // Scroll position relative to the initial position\n        console.log(monitor.relativeScrollLeft)\n        console.log(monitor.relativeScrollTop)\n    }\n})\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.thisObj",
              "type": "Object",
              "description": "<p>Scope for the callback.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.scrollables",
              "type": "Array.<Object>",
              "description": "<p>Array of configs if multiple elements should be monitored.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.scrollables.0.element",
              "type": [
                "HTMLElement",
                "String"
              ],
              "description": "<p>Element or selector.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.scrollables.0.direction",
              "type": "String",
              "description": "<p>Direction to scroll. Overrides upper config object direction.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.scrollables.0.callback",
              "type": "function",
              "description": "<p>Callback to execute on every scroll of the target element.\nOverrides upper config object callback.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "function",
            "description": "<p>Returns function to cleanup instantiated monitors</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const detacher = new ScrollManager({ element }).startMonitoring({ ... });\ndetacher(); // All monitors setup by the previous call are removed\n</code></pre>"
          }
        },
        {
          "name": "stopMonitoring",
          "description": "<p>Stops monitoring an element. If no particular element is given, stop monitoring everything.</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Array.<HTMLElement>"
              ],
              "description": "<p>Element or array of elements for which monitoring is not desired any\nmore and should stop as soon as possible.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DragContext",
      "modulePath": "Core/util/drag/DragContext",
      "classDescription": "<p>This class is created during drag operations of <a href=\"#Core/mixin/Draggable\">Draggable</a>. It holds the state of an ongoing drag\noperation.</p>",
      "extends": [
        "Core/Base"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragContext.js",
      "path": "/Calendar/lib/Core/util/drag",
      "configs": [
        {
          "name": "itemElement",
          "description": "<p>The element that will have the <a href=\"#Core/mixin/Draggable#property-draggingItemCls\">draggingItemCls</a>. This element is\ndetermined by the <a href=\"#Core/mixin/Draggable#config-dragItemSelector\">dragItemSelector</a>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "scrollManager",
          "access": "private",
          "description": "<p>The <code>ScrollManager</code> instance to use for scrolling while dragging.</p>",
          "type": "Core.util.ScrollManager",
          "scope": "inner"
        },
        {
          "name": "monitoringConfig",
          "access": "private",
          "description": "<p>Config for <code>startMonitoring</code> call.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "source",
          "description": "<p>The source of the drag operation.</p>",
          "type": "Core.mixin.Draggable",
          "scope": "inner"
        },
        {
          "name": "threshold",
          "description": "<p>The minimum distance from the touchstart/mousedown/pointerdown that must be moved to actually start a\ndrag operation.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "touchStartDelay",
          "description": "<p>The minimum amount of time a touch must be maintained before it will initiate a drag. Movement prior to\nthis time will cancel the drag in order to allow touch scrolling.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 300
        }
      ],
      "properties": [
        {
          "name": "target",
          "description": "<p>The current target of the drag.</p>",
          "type": "Core.mixin.Droppable",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "targetElement",
          "access": "private",
          "description": "<p>The current target element of the drag.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "event",
          "description": "<p>The current DOM event being processed.</p>",
          "type": "Event",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "altKey",
          "description": "<p>This property holds the <code>altKey</code> state of the most recent event.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "cleaners",
          "access": "private",
          "description": "<p>An array of functions to call when cleaning up the context instance.</p>",
          "type": "Array.<function()>",
          "scope": "inner"
        },
        {
          "name": "ctrlKey",
          "description": "<p>This property holds the <code>ctrlKey</code> state of the most recent event.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "data",
          "access": "private",
          "description": "<p>Container for data associated with the drag. Data items are added by the <a href=\"#Core/mixin/Draggable\">Draggable</a>\nwhen the drag starts.</p>",
          "type": "Map",
          "scope": "inner"
        },
        {
          "name": "element",
          "description": "<p>The element from which the drag operation started.</p>",
          "type": "HTMLElement",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "endEvent",
          "description": "<p>The event that completed the drag (a <code>mouseup</code>, <code>pointerup</code> or <code>touchend</code>).</p>",
          "type": "Event",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "lastMoveEvent",
          "access": "private",
          "description": "<p>The most recent <code>mousemove</code>, <code>pointermove</code> or <code>touchmove</code> event.</p>",
          "type": "Event",
          "scope": "inner"
        },
        {
          "name": "metaKey",
          "description": "<p>This property holds the <code>metaKey</code> state of the most recent event.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "previousTarget",
          "description": "<p>The previous <a href=\"#Core/util/drag/DragContext#property-target\">target</a> of the drag.</p>",
          "type": "Core.mixin.Droppable",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "scrollerAction",
          "access": "private",
          "description": "<p>The scroll actions reported by the <a href=\"#Core/util/drag/DragContext#config-scrollManager\">scrollManager</a>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "shiftKey",
          "description": "<p>This property holds the <code>shiftKey</code> state of the most recent event.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "state",
          "access": "internal",
          "description": "<p>This property holds the current state of the drag process.</p>\n<p>This will be one of the following values:</p>\n<ul>\n<li><code>DragContext.STATE.INIT</code> - The button is down but there is insufficient movement to start the drag.</li>\n<li><code>DragContext.STATE.DRAGGING</code> - The button is down and movement has started the drag.</li>\n<li><code>DragContext.STATE.DROPPED</code> - The button has been released and drop has occurred.</li>\n<li><code>DragContext.STATE.ABORTED</code> - The drag has been aborted (this happens if the user presses the <code>ESC</code>\nkey or if the <a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method is called).</li>\n</ul>",
          "type": "Symbol",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "startEvent",
          "description": "<p>The event that started the drag operation.</p>",
          "type": "Event",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "touchStartTimer",
          "access": "private",
          "description": "<p>The timer that fires when a touch pointermove is allowed to start the drag. A touch pointermove event\nprior to this will <code>abort()</code> the drag to allow touch scrolling.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "_valid",
          "access": "private",
          "description": "<p>Stores the value from writes to the <a href=\"#Core/util/drag/DragContext#property-valid\">valid</a> property.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "aborted",
          "description": "<p>This property is <code>true</code> if the <a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method was called and <code>false</code> otherwise. This\nis typically because the user pressed the ESC key, however, a drag can be aborted for other reasons.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "completed",
          "description": "<p>Returns <code>true</code> if the drag has completed either by mouse/pointerup or the <a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "pending",
          "description": "<p>This property is <code>true</code> if the drag <a href=\"#Core/util/drag/DragContext#config-threshold\">threshold</a> has not yet been reached.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "started",
          "description": "<p>This property is <code>true</code> if the drag <a href=\"#Core/util/drag/DragContext#config-threshold\">threshold</a> has been reached and the drag operation is active.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "valid",
          "description": "<p>This property is <code>true</code> when the drag is in a valid drop state. This can be set to <code>false</code> to indicate the drop\nis invalid. Setting to <code>true</code> does not ensure that the property will be <code>true</code> when next read due to other factors\nthat are required to make the drop valid. For example, setting <code>valid = true</code> will still return <code>false</code> if called\nbefore the drag <a href=\"#Core/util/drag/DragContext#config-threshold\">threshold</a> has not been reached or if the <a href=\"#Core/util/drag/DragContext#function-abort\">abort</a> method has been\ncalled.</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "get",
          "description": "<p>Retrieves a data item from the drag source. This method can only be called after the drag has completed.</p>",
          "parameters": [
            {
              "name": "name",
              "type": [
                "String",
                "Array.<String>"
              ],
              "description": "<p>The name of the data item.</p>"
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "*"
          }
        },
        {
          "name": "has",
          "description": "<p>Returns <code>true</code> if the named data item is present.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the data item.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "peek",
          "description": "<p>Retrieves a data item from the drag source if it is available. This will return <code>true</code> for an item that was\n<a href=\"#Core/util/drag/DragContext#function-set\">set</a> using a renderer function.</p>",
          "parameters": [
            {
              "name": "name",
              "type": [
                "String",
                "Array.<String>"
              ],
              "description": "<p>The name of the data item.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*"
          }
        },
        {
          "name": "set",
          "description": "<p>Sets a data item for the drag. If a function is passed, it is called to render the data only if that data is\nactually requested via the <a href=\"#Core/util/drag/DragContext#function-get\">get</a> method. A data renderer function can be <code>async</code>.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the data item.</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>The value of the data item.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "abort",
          "description": "<p>Aborts the drag. After calling this method, <a href=\"#Core/util/drag/DragContext#property-aborted\">aborted</a> will be <code>true</code>, <a href=\"#Core/util/drag/DragContext#property-valid\">valid</a>\nwill be <code>false</code> and <a href=\"#Core/util/drag/DragContext#property-completed\">completed</a> will be <code>true</code>.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DragProxy",
      "modulePath": "Core/util/drag/DragProxy",
      "classDescription": "<p>Drag proxies are helper classes that represent the object being dragged in some visual way. This is an abstract\nbase with which particular drag proxy classes (such as, <a href=\"#Core/util/drag/DragTipProxy\">DragTipProxy</a> are registered.</p>\n<p>Derived classes the various template methods of this class to manage their particular form of visual feedback.</p>",
      "extends": [
        "Core/Base"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragProxy.js",
      "path": "/Calendar/lib/Core/util/drag",
      "configs": [
        {
          "name": "dragging",
          "description": "<p>The currently active <code>DragContext</code>. This context will be active prior to be passed to the proxy. This\nconfig is set by <a href=\"#Core/util/drag/DragProxy#function-dragStart\">dragStart</a> and cleared by <a href=\"#Core/util/drag/DragProxy#function-dragEnd\">dragEnd</a>.</p>",
          "type": "Core.util.drag.DragContext",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "owner",
          "description": "<p>The <code>Draggable</code> instance that owns this drag proxy.</p>",
          "type": "Core.mixin.Draggable",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "close",
          "description": "<p>This template method is called when <a href=\"#Core/util/drag/DragProxy#config-dragging\">dragging</a> is reset to <code>null</code>.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag instance.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "open",
          "description": "<p>This template method is called when <a href=\"#Core/util/drag/DragProxy#config-dragging\">dragging</a> is set to a non-<code>null</code> value.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag instance.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragStart",
          "description": "<p>This template method is called by the <code>Draggable</code> instance when the drag officially starts.\nThis sets the <a href=\"#Core/util/drag/DragProxy#config-dragging\">dragging</a> config to <code>drag</code>, which triggers the call to <a href=\"#Core/util/drag/DragProxy#function-open\">open</a>.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag instance.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragMove",
          "description": "<p>This template method is called by the <code>Draggable</code> instance as drag movement occurs.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag instance.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "dragEnd",
          "description": "<p>This template method is called by the <code>Draggable</code> instance when the drag completes.</p>\n<p>This sets the <a href=\"#Core/util/drag/DragProxy#config-dragging\">dragging</a> config to <code>null</code>, which triggers the call to <a href=\"#Core/util/drag/DragProxy#function-close\">close</a>.</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Core.util.drag.DragContext",
              "description": "<p>The drag instance.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DragTipProxy",
      "modulePath": "Core/util/drag/DragTipProxy",
      "classDescription": "<p>This drag proxy manages a <a href=\"#Core/util/drag/DragTipProxy#config-tooltip\">tooltip</a> (or derived class) and aligns the tooltip to the current drag\nposition adjusted by the <a href=\"#Core/util/drag/DragTipProxy#config-align\">align</a> config.</p>",
      "extends": [
        "Core/util/drag/DragProxy"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragTipProxy.js",
      "path": "/Calendar/lib/Core/util/drag",
      "classType": "tip",
      "configs": [
        {
          "name": "align",
          "description": "<p>Controls how the tooltip will be aligned to the current drag position.</p>\n<p>See <a href=\"#Core/helper/util/Rectangle#function-alignTo\">alignTo</a> for details.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "t10-b50"
        },
        {
          "name": "offset",
          "description": "<p>The number of pixels to offset from the drag position.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 20
        },
        {
          "name": "tooltip",
          "description": "<p>The tooltip to be shown, hidden and repositioned to track the drag position.</p>",
          "type": "Core.widget.Tooltip",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Button",
      "modulePath": "Core/widget/Button",
      "classDescription": "<p>Button widget, wraps and styles a regular <code>&lt;button&gt;</code> element. Can display text and icon and also\nallows specifying button <a href=\"#Core/widget/Button#config-color\">color</a>. Supports different appearances, by setting <a href=\"#Core/widget/Button#config-cls\">cls</a> to one\nof:</p>\n<ul>\n<li>'b-raised' - Raised buttons</li>\n<li>'b-rounded' - Round buttons</li>\n<li>'b-transparent' - Buttons without border or background</li>\n</ul>\n<h2>Default appearance</h2>\n<p>By default buttons uses a flat look in all themes:</p>\n<p><div class=\"external-example \" data-file=\"Core/widget/ButtonDefault.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Green button with text and icon\nconst button = new Button({\n    appendTo : document.body,\n    icon    : 'b-fa-plus-circle',\n    text    : 'Add',\n    color   : 'green',\n    onClick : () => {}\n});\n</code></pre>\n<h2>Raised appearance</h2>\n<p>By configuring a button with <code>cls : 'b-raised'</code> its appearance change. In Material the button appears raised, in the\nother themes it is instead filled:</p>\n<p><div class=\"external-example \" data-file=\"Core/widget/ButtonRaised.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Raised green button with text and icon\nconst button = new Button({\n    appendTo : document.body,\n    cls     : 'b-raised',\n    icon    : 'b-fa-plus-circle',\n    text    : 'Add',\n    color   : 'green',\n    onClick : () => {}\n});\n</code></pre>\n<h2>Rounded appearance</h2>\n<p>Configure a button with <code>cls : 'b-rounded'</code> to make it round. Works best for icon only buttons or buttons with very\nshort texts:</p>\n<p><div class=\"external-example \" data-file=\"Core/widget/ButtonRounded.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Rounded button with icon\nconst button = new Button({\n    appendTo : document.body,\n    cls     : 'b-raised b-rounded',\n    icon    : 'b-fa-plus-circle',\n    color   : 'green',\n    onClick : () => {}\n});\n</code></pre>\n<h2>Transparent appearance</h2>\n<p>Configure a button with <code>cls : 'b-transparent'</code> to display it without border or background:</p>\n<p><div class=\"external-example \" data-file=\"Core/widget/ButtonTransparent.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Transparent green button with text and icon\nconst button = new Button({\n    appendTo : document.body,\n    cls     : 'b-transparent',\n    icon    : 'b-fa-plus-circle',\n    text    : 'Add',\n    color   : 'green',\n    onClick : () => {}\n});\n</code></pre>\n<h2>Button with menu</h2>\n<p>Buttons can also have a menu that is shown on click:</p>\n<p><div class=\"external-example \" data-file=\"Core/widget/ButtonWithMenu.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Transparent green button with text and icon\nconst button = new Button({\n    appendTo : document.body,\n    icon    : 'b-fa-chart',\n    menu    : {\n        items : [\n            {\n                text : 'Click me',\n                onItem : () => console.log('I was clicked')\n            }\n        ]\n    }\n});\n</code></pre>\n<p>This class may be operated by the keyboard. <code>Space</code> pressses the button and invokes any\nclick handler, and <code>ArrowDown</code> activates any configured <a href=\"#Core/widget/Button#config-menu\">menu</a>.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "mixes": [
        "Core/widget/mixin/Badge"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Button.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "button",
      "properties": [
        {
          "name": "icon",
          "description": "<p>Get/set the Button icon</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "pressedIcon",
          "description": "<p>Get/set the Button pressed icon</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "iconAlign",
          "description": "<p>Get/Set the Button icon alignment.\nMay be <code>'start'</code> or <code>'end'</code>. Defaults to <code>'start'</code></p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "text",
          "description": "<p>Get/set text displayed on the button.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "pressed",
          "description": "<p>Get/set button pressed state</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "menu",
          "description": "<p>Returns the instantiated menu widget as configured by <a href=\"#Core/widget/Button#config-menu\">menu</a>.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "icon",
          "description": "<p>Button icon class.</p>\n<p>All <a href=\"https://fontawesome.com/cheatsheet\">Font Awesome</a> icons may also be specified as <code>'b-fa-' + iconName</code>.</p>\n<p>Otherwise this is a developer-defined CSS class string which results in the desired icon.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "menuIcon",
          "description": "<p>The menu icon class to show when the button has a menu. Set to <code>null</code> to not show a menu icon.</p>\n<p>All <a href=\"https://fontawesome.com/cheatsheet\">Font Awesome</a> icons may also be specified as <code>'b-fa-' + iconName</code>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-icon-picker"
        },
        {
          "name": "pressedIcon",
          "description": "<p>Icon class for the buttons pressed state. Only applies to toggle buttons</p>\n<p>All <a href=\"https://fontawesome.com/cheatsheet\">Font Awesome</a> icons may also be specified as <code>'b-fa-' + iconName</code>.</p>\n<p>Otherwise this is a developer-defined CSS class string which results in the desired icon.</p>\n<pre class=\"prettyprint source\"><code>new Button({\n   // Icon for unpressed button\n   icon        : 'b-fa-wine-glass',\n\n   // Icon for pressed button\n   pressedIcon : 'b-fa-wine-glass-alt',\n\n   // Only applies to toggle buttons\n   toggleable  : true\n});\n</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "iconAlign",
          "description": "<p>Button icon alignment. May be <code>'start'</code> or <code>'end'</code>. Defaults to <code>'start'</code></p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "text",
          "description": "<p>The button's text.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "color",
          "description": "<p>Button color (should have match in button.scss or your custom styling). Valid values in Bryntum themes\nare:</p>\n<ul>\n<li>b-amber</li>\n<li>b-blue</li>\n<li>b-dark-gray</li>\n<li>b-deep-orange</li>\n<li>b-gray</li>\n<li>b-green</li>\n<li>b-indigo</li>\n<li>b-lime</li>\n<li>b-light-gray</li>\n<li>b-light-green</li>\n<li>b-orange</li>\n<li>b-purple</li>\n<li>b-red</li>\n<li>b-teal</li>\n<li>b-white</li>\n<li>b-yellow\nCombine with specifying <code>b-raised</code> for raised/filled style (theme dependent).</li>\n</ul>\n<pre class=\"prettyprint source\"><code>new Button({\n   color : 'b-teal b-raised'\n});\n</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "toggleable",
          "description": "<p>Enabled toggling of the button (stays pressed when pressed).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "pressed",
          "description": "<p>Initially pressed or not. Only applies with <code>toggleable = true</code>.</p>\n<pre class=\"prettyprint source\"><code>const toggleButton = new Button({\n   toggleable : true,\n   text : 'Enable cool action'\n});\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "toggleGroup",
          "description": "<p>Indicates that this button is part of a group where only one button can be pressed. Assigning a value\nalso sets <code>toggleable</code> to <code>true</code>.</p>\n<p>When part of a <a href=\"#Core/widget/ButtonGroup\">ButtonGroup</a>, you can set <a href=\"#Core/widget/ButtonGroup#config-toggleGroup\">toggleGroup</a>\non it as an alternative to on each button. This config can then be used to override that value if needed.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const yesButton = new Button({\n   toggleGroup : 'yesno',\n   text        : 'Yes'\n});\n\nconst noButton = new Button({\n   toggleGroup : 'yesno',\n   text        : 'No'\n});\n</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "menu",
          "description": "<p>A submenu configuration object, or an array of MenuItem configuration\nobjects from which to create a submenu which is shown when this button is pressed.</p>\n<p>Note that this does not have to be a Menu. The <code>type</code> config can be used\nto specify any widget as the submenu.</p>\n<p>May also be specified as a fully instantiated <a href=\"#Core/widget/Widget#config-floating\">floating Widget</a>\nsuch as a <a href=\"#Core/widget/Popup\">Popup</a>.</p>",
          "type": [
            "Object",
            "Array.<Object>",
            "Core.widget.Widget"
          ],
          "scope": "inner"
        },
        {
          "name": "href",
          "description": "<p>If provided, turns the button into a link</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "target",
          "description": "<p>The <code>target</code> attribute for the <a href=\"#Core/widget/Button#config-href\">href</a> config</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "eachWidget",
          "description": "<p>Iterate over all widgets owned by this widget and any descendants.</p>\n<p><em>Note</em>: Due to this method aborting when the function returns <code>false</code>, beware of using short form arrow\nfunctions. If the expression executed evaluates to <code>false</code>, iteration will terminate.</p>\n<p><em>Due to the <a href=\"#Core/widget/Button#config-menu\">menu</a> config being a lazy config and only being converted to be a\n<code>Menu</code> instance just before it's shown, the menu will not be part of the iteration before\nit has been shown once</em>.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function to execute upon all descendant widgets.\nIteration terminates if this function returns <code>false</code>.</p>"
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to only consider immediate child widgets.</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if iteration was not aborted by a step returning <code>false</code></p>"
          }
        },
        {
          "name": "onInternalClick",
          "access": "internal",
          "description": "<p>Triggers events when user clicks button</p>",
          "scope": "instance",
          "fires": [
            "event:click",
            "event:action"
          ]
        },
        {
          "name": "toggle",
          "description": "<p>Toggle button state (only use with toggleable = true)</p>",
          "parameters": [
            {
              "name": "pressed",
              "type": "Boolean",
              "description": "<p>Specify to force a certain toggle state</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:toggle"
          ]
        }
      ],
      "events": [
        {
          "name": "toggle",
          "description": "<p>Fires when the button is toggled via a UI interaction (the <a href=\"#Core/widget/Button#property-pressed\">pressed</a> state is changed). If the button is part of a\n<a href=\"#Core/widget/Button#config-toggleGroup\">toggleGroup</a> and you need to process the pressed button only, consider using\n<a href=\"#Core/widget/Button#event-click\">click</a> event or <a href=\"#Core/widget/Button#event-action\">action</a> event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Button",
              "description": "<p>Toggled button</p>"
            },
            {
              "name": "pressed",
              "type": "Boolean",
              "description": "<p>New pressed state</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>DOM event</p>"
            }
          ]
        },
        {
          "name": "click",
          "description": "<p>Fires when the button is clicked</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Button",
              "description": "<p>The button</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>DOM event</p>"
            }
          ]
        },
        {
          "name": "action",
          "description": "<p>Fires when the default action is performed (the button is clicked)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Button",
              "description": "<p>The button</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>DOM event</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ButtonGroup",
      "modulePath": "Core/widget/ButtonGroup",
      "classDescription": "<p>A specialized container that holds buttons, displaying them in a horizontal group with borders adjusted to make them\nstick together.</p>\n<p>Trying to add other widgets than buttons will throw an exception.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new ButtonGroup({\n    items : [\n        { icon : 'b-fa b-fa-kiwi-bird' },\n        { icon : 'b-fa b-fa-kiwi-otter' },\n        { icon : 'b-fa b-fa-kiwi-rabbit' },\n        ...\n    ]\n});\n</code></pre>",
      "extends": [
        "Core/widget/Container"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ButtonGroup.js",
      "path": "/Calendar/lib/Core/widget",
      "externalExamples": [
        "Core/widget/ButtonGroup.js"
      ],
      "classType": "buttonGroup",
      "events": [
        {
          "name": "click",
          "description": "<p>Fires when a button in the group is clicked</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Button",
              "description": "<p>Clicked button</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>DOM event</p>"
            }
          ]
        },
        {
          "name": "action",
          "description": "<p>Fires when the default action is performed on a button in the group (the button is clicked)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Button",
              "description": "<p>Clicked button</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>DOM event</p>"
            }
          ]
        },
        {
          "name": "toggle",
          "description": "<p>Fires when a button in the group is toggled (the <a href=\"#Core/widget/Button#property-pressed\">pressed</a> state is changed).\nIf you need to process the pressed button only, consider using <a href=\"#Core/widget/ButtonGroup#event-click\">click</a> event or <a href=\"#Core/widget/ButtonGroup#event-action\">action</a> event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Button",
              "description": "<p>Toggled button</p>"
            },
            {
              "name": "pressed",
              "type": "Boolean",
              "description": "<p>New pressed state</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>DOM event</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "cls",
          "description": "<p>Custom CSS class to add to element. When using raised buttons (cls 'b-raised' on the buttons), the group\nwill look nicer if you also set that cls on the group.</p>\n<pre class=\"prettyprint source\"><code>new ButtonGroup({\n  cls : 'b-raised,\n  items : [\n      { icon : 'b-fa b-fa-unicorn', cls : 'b-raised' },\n      ...\n  ]\n});\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "items",
          "description": "<p>An array of Buttons or typed Button config objects.</p>",
          "type": [
            "Array.<Object>",
            "Array.<Core.widget.Button>"
          ],
          "scope": "inner"
        },
        {
          "name": "color",
          "description": "<p>Default color to apply to all contained buttons, see <a href=\"#Core/widget/Button#config-color\">Button#color</a>.\nIndividual buttons can override the default.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "toggleGroup",
          "description": "<p>Set to <code>true</code> to turn the ButtonGroup into a toggle group, assigning a generated value to each contained\nbuttons <a href=\"#Core/widget/Button#config-toggleGroup\">toggleGroup config</a>. Individual buttons can\noverride the default.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "CalendarPanel",
      "modulePath": "Core/widget/CalendarPanel",
      "classDescription": "<p>A Panel which displays a month of date cells.</p>\n<p>This is a base class for UI widgets like <a href=\"#Core/widget/DatePicker\">DatePicker</a> which need to display a calendar layout\nand should not be used directly.</p>",
      "extends": [
        "Core/widget/Panel"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "CalendarPanel.js",
      "path": "/Calendar/lib/Core/widget",
      "properties": [
        {
          "name": "date",
          "description": "<p>Gets or sets the date that orientates the panel to display a particular month.\nChanging this causes the content to be refreshed.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "startDate",
          "description": "<p>The date of the first day cell in this panel.\nNote that this may <em>not</em> be the first of this panel's current month.</p>",
          "type": "Date",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "endDate",
          "description": "<p>The end date of this view. Note that in terms of full days, this is exclusive,\nie: 2020-01-012 to 2020-01-08 is <em>seven</em> days. The end is 00:00:00 on the 8th.</p>\n<p>Note that this may <em>not</em> be the last date of this panel's current month.</p>",
          "type": "Date",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "visibleWeekCount",
          "description": "<p>The number of rows displayed in this month. If <a href=\"#Core/widget/CalendarPanel#config-sixWeeks\">sixWeeks</a> is not set,\nthis may be from 4 to 6.</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "date",
          "description": "<p>The date which this CalendarPanel encapsulates.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "month",
          "description": "<p>A <a href=\"#Core/util/Month\">Month</a> Month utility object which encapsulates this Panel's month\nand provides contextual information and navigation services.</p>",
          "type": [
            "Core.util.Month",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "weekStartDay",
          "description": "<p>The week start day, 0 meaning Sunday, 6 meaning Saturday.\nDefaults to <a href=\"#Core/helper/DateHelper#property-weekStartDay-static\">weekStartDay</a>.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "sixWeeks",
          "description": "<p>Configure as <code>true</code> to always show a six week calendar.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showWeekNumber",
          "description": "<p>Configure as <code>true</code> to show a week number column at the start of the calendar block.</p>",
          "type": "Boolean",
          "scope": "inner",
          "deprecated": true
        },
        {
          "name": "showWeekColumn",
          "description": "<p>Configure as <code>true</code> to show a week number column at the start of the calendar block.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "disabledDates",
          "description": "<p>Either an array of <code>Date</code> objects which are to be disabled, or\na function (or the name of a function), which, when passed a <code>Date</code> returns <code>true</code> if the\ndate is disabled.</p>",
          "type": [
            "function",
            "Array.<Date>",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "headerRenderer",
          "description": "<p>A function (or the name of a function) which creates content in, and may mutate a day header element.\nThe following parameters are passed:</p>\n<ul>\n<li>cell <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\">HTMLElement</a> The header element.</li>\n<li>day <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a> The day number conforming to the specified <a href=\"#Core/widget/CalendarPanel#config-weekStartDay\">weekStartDay</a>. Will be in the range 0 to 6.</li>\n<li>weekDay <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a> The canonical day number where Monday is 0 and Sunday is.</li>\n</ul>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "weekRenderer",
          "description": "<p>A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.\nThe following parameters are passed:</p>\n<ul>\n<li>cell <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\">HTMLElement</a> The header element.</li>\n<li>week <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number[]</a> An array containing <code>[year, weekNumber]</code>.</li>\n</ul>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "cellRenderer",
          "description": "<p>A function (or the name of a function) which creates content in, and may mutate a day cell element.\nThe following parameters are passed:</p>\n<ul>\n<li>cell <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\">HTMLElement</a> The header element.</li>\n<li>date <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a> The date for the cell.</li>\n<li>day <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a> The day for the cell (0 to 6 for Sunday to Saturday).</li>\n<li>rowIndex <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number[]</a> The row index, 0 to month row count (6 if <a href=\"#Core/widget/CalendarPanel#config-sixWeeks\">sixWeeks</a> is <code>true</code>).\n_ row <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\">HTMLElement</a> The row element encapsulating the week which the cell is a part of.</li>\n<li>cellIndex <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number[]</a> The cell index in the whole panel. May be from 0 to up to 42.</li>\n<li>columnIndex <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number[]</a> The column index, 0 to 6.</li>\n<li>visibleColumnIndex <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number[]</a> The visible column index taking hidden non working days into account.</li>\n</ul>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "disableWeekends",
          "description": "<p>Configure as <code>true</code> to render weekends as <a href=\"#Core/widget/CalendarPanel#config-disabledDates\">disabledDates</a>.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "nonWorkingDays",
          "description": "<p>Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is <code>true</code>.\nDefaults to <a href=\"#Core/helper/DateHelper#property-nonWorkingDays-static\">nonWorkingDays</a>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "tip",
          "description": "<p>A config object to create a tooltip which will show on hover of a date cell\nincluding disabled, weekend, and &quot;other month&quot; cells.</p>\n<p>It is the developer's responsibility to hook the <code>beforeshow</code> event\nto either veto the show by returning <code>false</code> or provide contextual\ncontent for the date.</p>\n<p>The tip instance will be primed with a <code>date</code> property.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "disabledCls",
          "access": "private",
          "description": "<p>The class name to add to disabled calendar cells.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "otherMonthCls",
          "access": "private",
          "description": "<p>The class name to add to calendar cells which are in the previous or next month.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "weekendCls",
          "access": "private",
          "description": "<p>The class name to add to calendar cells which are weekend dates.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "todayCls",
          "access": "private",
          "description": "<p>The class name to add to the calendar cell which contains today's date.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "nonWorkingDayCls",
          "access": "private",
          "description": "<p>The class name to add to calendar cells which are <a href=\"#Core/widget/CalendarPanel#config-nonWorkingDays\">nonWorkingDays</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dayNameFormat",
          "description": "<p>The <a href=\"#Core/helper/DateHelper\">DateHelper</a> format string to format the day names.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "ddd"
        },
        {
          "name": "minRowHeight",
          "description": "<p>By default, week rows flex to share available Panel height equally.</p>\n<p>Set this config if the available height is too small, and the cell height needs\nto be larger to show events.</p>\n<p>Setting this config causes the month grid to become scrollable in the <code>Y</code> axis.</p>\n<p>May be specified as a number in which case it will be taken to mean pixels,\nor a length in standard CSS units.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "minColumnWidth",
          "description": "<p>By default, day cells flex to share available Panel width equally.</p>\n<p>Set this config if the available width is too small, and the cell width needs\nto be larger to show events.</p>\n<p>Setting this config causes the month grid to become scrollable in the <code>X</code> axis.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "alwaysRefreshOnMonthChange",
          "access": "internal",
          "description": "<p>By default, when the <a href=\"#Core/widget/CalendarPanel#property-date\">date</a> changes, the UI will only refresh\nif it doesn't contain a cell for that date, so as to keep a stable UI when\nnavigating.</p>\n<p>Configure this as <code>true</code> to refresh the UI whenever the month changes, even if\nthe UI already shows that date.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "updateDate",
          "description": "<p>The date which this CalendarPanel encapsulates. Setting this causes the\ncontent to be refreshed.</p>",
          "scope": "instance"
        },
        {
          "name": "updateWeekStartDay",
          "description": "<p>Set to 0 for Sunday (the default), 1 for Monday etc.</p>\n<p>Set to <code>null</code> to use the default value from <a href=\"#Core/helper/DateHelper\">DateHelper</a>.</p>",
          "scope": "instance"
        },
        {
          "name": "refresh",
          "description": "<p>Refreshes the UI after changing a config that would affect the UI.</p>",
          "scope": "instance"
        },
        {
          "name": "doRefresh",
          "access": "private",
          "description": "<p>Implementation of the UI refresh.</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "dateChange",
          "description": "<p>Fires when the date of this CalendarPanel is set.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Date",
              "description": "<p>The new date.</p>"
            },
            {
              "name": "oldValue",
              "type": "Date",
              "description": "<p>The old date.</p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>An object which contains properties which indicate what part of the date changed.</p>"
            },
            {
              "name": "changes.d",
              "type": "Boolean",
              "description": "<p>True if the date changed in any way.</p>",
              "isSubParam": true
            },
            {
              "name": "changes.w",
              "type": "Boolean",
              "description": "<p>True if the week changed (including same week in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.m",
              "type": "Boolean",
              "description": "<p>True if the month changed (including same month in a different year).</p>",
              "isSubParam": true
            },
            {
              "name": "changes.y",
              "type": "Boolean",
              "description": "<p>True if the year changed.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "beforeRefresh",
          "description": "<p>Fires before this CalendarPanel refreshes in response to changes in its month.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.DatePicker",
              "description": "<p>This DatePicker.</p>"
            }
          ]
        },
        {
          "name": "refresh",
          "description": "<p>Fires when this CalendarPanel refreshes.</p>"
        }
      ]
    },
    {
      "name": "Checkbox",
      "modulePath": "Core/widget/Checkbox",
      "classDescription": "<p>Checkbox field, wraps <code>&lt;input type=&quot;checkbox&quot;&gt;</code>.\nColor can be specified and you can optionally configure <a href=\"#Core/widget/Checkbox#config-text\">text</a>\nto display in a label to the right of the checkbox in addition to a standard\nfield <a href=\"#Core/widget/Checkbox#config-label\">label</a>.</p>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/Checkbox.js\"></div></p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.</p>\n<h2>Nested Items</h2>\n<p>A checkbox can also have a <a href=\"#Core/widget/Checkbox#config-container\">container</a> of additional <a href=\"#Core/widget/Container#config-items\">items</a>. These\nitems can be displayed immediately following the field's label (which is the default when there is only one item) or\nbelow the checkbox. This can be controlled using the <a href=\"#Core/widget/Checkbox#config-inline\">inline</a> config.</p>\n<p>In the demo below notice how additional fields are displayed when the checkboxes are checked:</p>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/Checkbox-items.js\"></div></p>",
      "extends": [
        "Core/widget/Field"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Checkbox.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "checkbox",
      "configs": [
        {
          "name": "autoCollapse",
          "description": "<p>Specify <code>true</code> to automatically <a href=\"#Core/widget/FieldContainer#config-collapsed\">collapse</a> the field's\n<a href=\"#Core/widget/Checkbox#config-container\">container</a> when the field is not <a href=\"#Core/widget/Checkbox#property-checked\">checked</a>.</p>\n<p>Alternatively, this can be a function that returns the desired <code>collapse</code> state when passed the field\ninstance as its one parameter.</p>",
          "type": [
            "Boolean",
            "function"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "text",
          "description": "<p>Text to display on checkbox label</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "checkedValue",
          "description": "<p>The value to provide for this widget in <a href=\"#Core/widget/Container#property-values\">values</a> when it is\n<a href=\"#Core/widget/Checkbox#property-checked\">checked</a>.\nA value of <code>undefined</code> will cause this widget not to include its value when checked.</p>",
          "type": "*",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "uncheckedValue",
          "description": "<p>The value to provide for this widget in <a href=\"#Core/widget/Container#property-values\">values</a> when it is not\n<a href=\"#Core/widget/Checkbox#property-checked\">checked</a>.</p>\n<p>A value of <code>undefined</code> will cause this widget to not include its value when it is unchecked.</p>",
          "type": "*",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "checked",
          "description": "<p>The checked state. The same as <code>value</code>.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "color",
          "description": "<p>Checkbox color, must have match in CSS</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Sets input fields value attribute</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "name",
          "description": "<p>Get/set label</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Get/set value</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "checked",
          "description": "<p>Get/set checked state. Equivalent to <code>value</code> config.</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "check",
          "description": "<p>Check the box</p>",
          "scope": "instance"
        },
        {
          "name": "uncheck",
          "description": "<p>Uncheck the box</p>",
          "scope": "instance"
        },
        {
          "name": "toggle",
          "description": "<p>Toggle checked state. If you want to force a certain state, assign to <a href=\"#Core/widget/Checkbox#property-checked\">checked</a> instead.</p>",
          "scope": "instance"
        },
        {
          "name": "internalOnChange",
          "access": "private",
          "description": "<p>Triggers events when user toggles the checkbox</p>",
          "scope": "instance",
          "fires": [
            "event:beforeChange",
            "event:change",
            "event:action"
          ]
        },
        {
          "name": "triggerChange",
          "access": "private",
          "description": "<p>Triggers events when checked state is changed</p>",
          "scope": "instance",
          "fires": [
            "event:beforeChange",
            "event:change",
            "event:action"
          ]
        }
      ],
      "events": [
        {
          "name": "click",
          "description": "<p>Fires when the checkbox is clicked</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Checkbox",
              "description": "<p>The checkbox</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>DOM event</p>"
            }
          ]
        },
        {
          "name": "beforeChange",
          "description": "<p>Fired before checkbox is toggled. Returning false from a listener prevents the checkbox from being toggled.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Checkbox",
              "description": "<p>Checkbox</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>Checked or not</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "change",
          "description": "<p>Fired when checkbox is toggled</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Checkbox",
              "description": "<p>Checkbox</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>Checked or not</p>"
            }
          ]
        },
        {
          "name": "action",
          "description": "<p>User performed the default action (toggled the checkbox)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Checkbox",
              "description": "<p>Checkbox</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>Checked or not</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ChipView",
      "modulePath": "Core/widget/ChipView",
      "classDescription": "<p>Displays an inline series of Chips which may be navigated to, selected and deleted.</p>",
      "extends": [
        "Core/widget/List"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ChipView.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "chipview",
      "configs": [
        {
          "name": "closable",
          "description": "<p>Configure as <code>true</code> to display a clickable close icon after the <a href=\"#Core/widget/List#config-itemTpl\">itemTpl</a>.\nWhen tapped, the configured <a href=\"#Core/widget/ChipView#config-closeHandler\">closeHandler</a> is called passing the\nassociated record.</p>\n<p>Chips may also be selected using the <code>LEFT</code> and <code>RIGHT</code> arrows (And the <code>Shift</code> key to\ndo multiple, contiguous election). Pressing the <code>DELETE</code> or <code>BACKSPACE</code> key passes the\nselected records to the <a href=\"#Core/widget/ChipView#config-closeHandler\">closeHandler</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "iconTpl",
          "description": "<p>A template function, which, when passed a record, returns the markup which\nencapsulates a chip's icon to be placed before the <a href=\"#Core/widget/List#config-itemTpl\">itemTpl</a>.</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "closeHandler",
          "description": "<p>If <a href=\"#Core/widget/ChipView#config-closable\">closable</a> is <code>true</code>, this is the name of a callback function\nto handle what the &quot;close&quot; action means.</p>",
          "type": [
            "String",
            "function"
          ],
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Combo",
      "modulePath": "Core/widget/Combo",
      "classDescription": "<p>Combo (dropdown) widget. Consists of a text field with a trigger icon, which displays a List. Can be\npopulated from a Store.</p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.</p>\n<p>Please be aware that when populating the Combo with objects or records you have to configure <a href=\"#Core/widget/Combo#config-valueField\">valueField</a> and <a href=\"#Core/widget/Combo#config-displayField\">displayField</a>\nto point to the correct field names in your data.</p>\n<h3>Basic scenarios</h3>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/Combo.js\"></div></p>\n<h3>Multiselect + grouped list</h3>\n<p><div class=\"external-example \" data-file=\"Core/widget/ComboMultiselect.js\"></div></p>\n<h2>Snippet: Loading data from simple string array</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>const combo = new Combo({\n    items       : ['Small', 'Smaller', 'Really small', 'Tiny'],\n    placeholder : 'Pick size of diamond for ring'\n});\n</code></pre>\n<h2>Snippet: Loading data from array with item configs</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>const combo = new Combo({\n    items : [{ value: 'a', text: 'First' }, { value: 'z', text: 'Last' }]\n});\n</code></pre>\n<h2>Snippet: Loading data from store</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>const combo = new Combo({\n    store        : memberStore,\n    valueField   : 'id',\n    displayField : 'name'\n});\n</code></pre>\n<h2>Snippet: Grouped list</h2>\n<p>To group the list contents, simply group your store using <a href=\"#Core/data/mixin/StoreGroup#config-groupers\">groupers</a>. You\ncan decide if clicking a header should toggle all group children (or if it should do nothing) with the\n<a href=\"#Core/widget/List#config-allowGroupSelect\">allowGroupSelect</a> flag.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const combo = new Combo({\n    width            : 400,\n    displayField     : 'name',\n    valueField       : 'id',\n    multiSelect      : true,\n    picker : {\n        allowGroupSelect : false,\n        // Show icon based on group name\n        groupHeaderTpl   : (record, groupName) => `\n            &lt;i class=&quot;icon-${groupName}&quot;>&lt;/i>${groupName}\n        `\n    },\n    value : [1, 4],\n    store : new Store({\n        fields : [\n            'type'\n        ],\n        groupers : [\n            { field : 'type', ascending : true }\n        ],\n        data : [\n            { id : 1, name : 'pizza', type : 'food' },\n            { id : 2, name : 'bacon', type : 'food' },\n            { id : 3, name : 'egg', type : 'food' },\n            { id : 4, name : 'Gin tonic', type : 'drinks' },\n            { id : 5, name : 'Wine', type : 'drinks' },\n            { id : 6, name : 'Beer', type : 'drinks' }\n        ]\n    })\n});\n</code></pre>\n<p>This may be operated using the keyboard. <code>ArrowDown</code> opens the picker, ann then <code>ArrowDown</code> and\n<code>ArrowUp</code> navigate the picker's options. <code>Enter</code> selects an active option in the picker. <code>Escape</code>\ncloses the picker.</p>",
      "extends": [
        "Core/widget/PickerField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Combo.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "combo",
      "configs": [
        {
          "name": "primaryFilter",
          "description": "<p>Optionally a <a href=\"#Core/util/CollectionFilter\">Filter</a> config object which\nthe combo should use for filtering using the typed value.\nThis may use a <code>filterBy</code> property to test its <code>value</code> against any field\nin the passed record.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    type          : 'combo',\n    store         : myStore,\n    primaryFilter : {\n        filterBy(record) {\n            if (this.value == null) {\n                return true;\n            }\n            const value = this.value.toLowerCase();\n\n            // Match typed value with forename or surname\n            return record.forename.toLowerCase().startsWith(value) || record.surname.toLowerCase().startsWith(value);\n        }\n    }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "multiSelect",
          "description": "<p>Configure as <code>true</code> to allow selection of multiple values from the dropdown list.</p>\n<p>Each value is displayed as a &quot;Chip&quot; to the left of the input area. Chips may be\nselected using the <code>LEFT</code> and <code>RIGHT</code> arrow keys and deleted using the <code>DELETE</code> key\nto remove values from the field. There is also a clickable close icon in each chip.</p>\n<p>Use <a href=\"#Core/widget/List#config-toggleAllIfCtrlPressed\">toggleAllIfCtrlPressed</a> to implement &quot;select all&quot; behaviour.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    type   : 'combo',\n    store  : myStore,\n    picker : {\n        toggleAllIfCtrlPressed : true\n    }\n}\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "items",
          "description": "<p>Rows to display in the dropdown (list items).</p>\n<p>If an object, the property names provide the <a href=\"#Core/widget/Combo#config-value\">value</a> for the Combo, and\nthe property values provide the displayed test in the list and input area eg:</p>\n<pre><code>items : {\n    small  : 'Small',\n    medium : 'Medium',\n    large  : 'Large'\n}\n</code></pre>\n<p>If an array, each entry may be</p>\n<ul>\n<li>an object containing properties which must include\nthe <a href=\"#Core/widget/Combo#config-valueField\">valueField</a> and <a href=\"#Core/widget/Combo#config-displayField\">displayField</a> which populates the dropdown\nwith text and provides the corresponding field value.</li>\n<li>An array whose first value provides the <a href=\"#Core/widget/Combo#config-value\">value</a> for the Combo and whose\nsecond value provides the displayed test in the list and input area.</li>\n<li>An array of values where the <a href=\"#Core/widget/Combo#config-valueField\">valueField</a> and <a href=\"#Core/widget/Combo#config-displayField\">displayField</a> are the same.</li>\n</ul>\n<p>eg:</p>\n<pre><code>items : [\n    {value : 'small',  text : 'Small'},\n    {value : 'medium', text : 'Medium'},\n    {value : 'large',  text : 'Large'},\n]\n</code></pre>\n<p>or</p>\n<pre><code>items : [\n    ['small',  'Small'],\n    ['medium', 'Medium'],\n    ['large',  'Large'],\n]\n</code></pre>\n<p>or</p>\n<pre><code>items : [ 'Small', 'Medium', 'Large' ]\n</code></pre>",
          "type": [
            "Array.<Object>",
            "Array.<String>",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "store",
          "description": "<p>A store used to populate items.</p>",
          "type": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "valueField",
          "description": "<p>Field used for item value when populating from store. Setting this to <code>null</code> will\nyield the selected record as the Combo's <a href=\"#Core/widget/Combo#property-value\">value</a>.</p>",
          "type": [
            "String",
            "null"
          ],
          "scope": "inner"
        },
        {
          "name": "displayField",
          "description": "<p>Field used for item text when populating from store</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "pickerWidth",
          "description": "<p>Width of picker, defaults to this combo's <a href=\"#Core/widget/Combo#config-pickerAlignElement\">pickerAlignElement</a> width</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "minChars",
          "description": "<p>The minimum string length to trigger the filtering, only relevant when <a href=\"#Core/widget/Combo#config-editable\">editable</a> is <code>true</code>.</p>\n<p>This defaults to <code>1</code> in the case of local filtering, but <code>4</code> if the\n<a href=\"#Core/widget/Combo#config-filterParamName\">filterParamName</a> is set to cause remote dropdown loading.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "listItemTpl",
          "description": "<p>Template string used to render the list items in the dropdown list</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Combo({\n    listItemTpl : ({ text }) => `&lt;div class=&quot;combo-color-box ${text}&quot;>&lt;/div>${text}`,\n    editable    : false,\n    items       : [\n        'Black',\n        'Green',\n        'Orange',\n        'Pink',\n        'Purple',\n        'Red',\n        'Teal'\n    ]\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "String"
          },
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record representing the item being rendered</p>"
            }
          ]
        },
        {
          "name": "displayValueRenderer",
          "description": "<p>Template function that can be used to customize the displayed value</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "String"
          },
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record to provide a textual value for.</p>"
            },
            {
              "name": "combo",
              "type": "Core.widget.Combo",
              "description": "<p>A reference to this Combo.</p>"
            }
          ]
        },
        {
          "name": "listCls",
          "description": "<p>CSS class to add to picker</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "filterParamName",
          "description": "<p>If the dropdown is to be populated with a filtered query to a remote server, specify the\nname of the parameter to pass the typed string here. By default, the string is simply sent\nas the value of the parameter. For special encoding, configure the combo with <a href=\"#Core/widget/Combo#config-encodeFilterParams\">encodeFilterParams</a></p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "encodeFilterParams",
          "description": "<p>A function which creates an array of values for the {#config-filterParamName} to pass\nany filters to the server upon load.</p>\n<p>The default behaviour is just to set the parameter value to the filter's <code>value</code>,\nbut the filter can be fully encoded for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>   {\n       encodeFilterParams(filters) {\n           const result = [];\n\n           for (const { property, operator, value, caseSensitive } of filters) {\n               result.push(JSON.stringify({\n                   field : property,\n                   operator,\n                   value,\n                   caseSensitive\n               }));\n          }\n       return result;\n   }\n</code></pre>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "filterOnEnter",
          "description": "<p>If <code>false</code>, filtering will be triggered once you exceed <a href=\"#Core/widget/Combo#config-minChars\">minChars</a>. To filter only when\nhitting Enter key, set this to <code>true</code>;</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "hideTrigger",
          "description": "<p>Configure as <code>true</code> to hide the expand trigger. This is automatically set to <code>true</code> if\nremote filtering is enabled by setting the <a href=\"#Core/widget/Combo#config-filterParamName\">filterParamName</a> config.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "overlayAnchor",
          "description": "<p>This implies that the picker will display an anchor pointer, but also means that the picker will align closer\nto the input field so that the pointer pierces the <a href=\"#Core/widget/Combo#config-pickerAlignElement\">pickerAlignElement</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "keyStrokeFilterDelay",
          "description": "<p>The delay in milliseconds to wait after the last keystroke before filtering the list.</p>\n<p>This is a minimum of 300ms for remote filtering to keep network requests manageable, and\ndefaults to 10ms for locally filtered stores.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "triggerAction",
          "description": "<p>How to query the store upon click of the expand trigger. Specify one of these values:</p>\n<ul>\n<li><code>'all'</code> - Clear the filter and display the whole dataset in the dropdown.</li>\n<li><code>'last'</code> - Filter the dataset using the last filter value.</li>\n<li><code>null</code>/any other - Use the value in the input field to filter the dataset.</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "all"
        },
        {
          "name": "filterOperator",
          "description": "<p>The name of an operator type as implemented in <a href=\"#Core/util/CollectionFilter#config-operator\">operator</a>\nto use when filtering the dropdown list based upon the typed value.</p>\n<p>This defaults to <code>'startsWith'</code>, but the <code>'*'</code> operator may be used to match all\nvalues which <em>contain</em> the typed value.</p>\n<p>Not used when <a href=\"#Core/widget/Combo#config-filterParamName\">filterParamName</a> is set to cause remote dropdown loading.\nThe exact filtering operation is up to the server.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "caseSensitive",
          "description": "<p>Configure as <code>true</code> to force case matching when filtering the dropdown list based upon the typed value.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "hidePickerOnSelect",
          "description": "<p>By default, the picker is hidden on selection in single select mode, and\nremains to allow more selections when <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> is <code>true</code>.\nSetting this to a <code>Boolean</code> value can override that default.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "chipView",
          "description": "<p>A config object to configure the <a href=\"#Core/widget/ChipView\">ChipView</a> to display the\nselected value set when <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> is <code>true</code>.</p>\n<p>For example the <a href=\"#Core/widget/List#config-itemTpl\">itemTpl</a> or\n<a href=\"#Core/widget/ChipView#config-iconTpl\">iconTpl</a> might be configured to display\nricher chips for selected items.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "filterSelected",
          "description": "<p>When <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> is <code>true</code>, you may configure <code>filterSelected</code> as\n<code>true</code> to hide items in the dropdown when they are added to the selection.\nIt will appear as if the requested item has &quot;moved&quot; into the field's\n<a href=\"#Core/widget/Combo#config-chipView\">ChipView</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "emptyText",
          "description": "<p>Text to display in the drop down when there are no items in the underlying store</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>The initial value of this Combo box. In single select mode (default) it's a simple string value, for\n<a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> mode, it should be an array of record ids.</p>",
          "type": [
            "String",
            "Array.<Number>",
            "Array.<String>"
          ],
          "scope": "inner"
        },
        {
          "name": "validateFilter",
          "description": "<p><code>true</code> to cause the field to be in an invalid state while the typed filter string does not match a record in the store.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "clearTextOnPickerHide",
          "description": "<p><code>true</code> to clear value typed to a multiselect combo when picker is collapsed</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "multiValueSeparator",
          "description": "<p>A key value which, when typed in a <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> Combo, selects the\ncurrently active item in the picker, and clears the input field ready for another\nmatch to be typed.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": ","
        },
        {
          "name": "createOnUnmatched",
          "description": "<p>If configured as <code>true</code>, this means that when an unmatched string is typed into the\ncombo's input field, and <code>ENTER</code>, or the <a href=\"#Core/widget/Combo#config-multiValueSeparator\">multiValueSeparator</a> is typed,\na new record will be created using the typed string as the <a href=\"#Core/widget/Combo#config-displayField\">displayField</a>.</p>\n<p>If configured as a function, or the name of a function in the owning component hierarchy, the function\nwill be called passing the string and combo field instance and should return the record to add (if any).</p>\n<p>The new record will be appended to the store, and the value selected.</p>\n<p>If the Store is an <a href=\"#Core/data/AjaxStore\">AjaxStore</a>, the new record will be eiligible for\nsyncing to the database through its <a href=\"#Core/data/AjaxStore#config-createUrl\">createUrl</a>.</p>\n<p>If the <code>AjaxStore</code> is configured to <a href=\"#Core/data/AjaxStore#config-autoCommit\">autoCommit</a>,\nthe record will be synced immediately. If the server does not accept the new addition,\nthe field is placed temporarily into an invalid state with a message that explains this.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    new Combo({\n        label : 'Employee name',\n        store : employees,\n        createOnUnmatched(name, combo) {\n            name = validateEmployeeName(name);\n\n            if (name) {\n                return new Employee({\n                    name,\n                    email : generateEmployeeEmail(name)\n                });\n            }\n            else {\n                combo.setError('Invalid new employee name');\n            }\n        }\n    });\n</code></pre>",
          "type": [
            "function",
            "String",
            "Boolean"
          ],
          "scope": "inner"
        },
        {
          "name": "inlinePicker",
          "description": "<p>Configure this as <code>true</code> to render the dropdown list as a permanently visible list\nin the document flow immediately below the input area instead of as a popup.</p>\n<p>This also hides the expand trigger since it is not needed.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "properties": [
        {
          "name": "store",
          "description": "<p>Get/set store to display items from. Also accepts a Store config object.</p>",
          "type": "Core.data.Store",
          "accepts": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "filterOperator",
          "description": "<p>Get/sets of the operator type for the combo primary filter.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Get/sets combo value, selects corresponding item in the list\nSetting null clears the field.</p>\n<p>If <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> is <code>true</code>, then multiple values may be passed as an array.\nIf the values are records, these become the selected record set held by <a href=\"#Core/widget/Combo#property-valueCollection\">valueCollection</a>,\nand the <code>value</code> yielded by this field is an array of all the <a href=\"#Core/widget/Combo#config-valueField\">valueField</a>s from the records.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "queryLast",
          "description": "<p>A constant value for the <a href=\"#Core/widget/Combo#config-triggerAction\">triggerAction</a> config to indicate that clicking the trigger should\nfilter the dataset using the last filter query string, <em>not</em> the input field value.</p>",
          "type": "String",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "isEmpty",
          "description": "<p>Returns <code>true</code> if this field has no selected records.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "valueCollection",
          "description": "<p>A <a href=\"#Core/util/Collection\">Collection</a> which holds the currently selected records\nfrom the store which dictates this field's value.</p>\n<p>Usually, this will contain one record, the record selected.</p>\n<p>When <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> is <code>true</code>, there may be several records selected.</p>",
          "type": "Core.util.Collection",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "record",
          "description": "<p>Get selected record.</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "records",
          "description": "<p>Get the selected record(s).</p>",
          "type": "Array.<Core.data.Model>",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "changeItems",
          "access": "private",
          "description": "<p>Prepares items to work in attached menu (converts strings to items)</p>",
          "scope": "instance"
        },
        {
          "name": "onEditComplete",
          "access": "internal",
          "description": "<p>Check if field value is valid</p>",
          "scope": "instance"
        },
        {
          "name": "onTriggerClick",
          "access": "private",
          "description": "<p>User clicked trigger icon, toggle list.</p>",
          "scope": "instance"
        },
        {
          "name": "internalOnInput",
          "access": "private",
          "description": "<p>User types into input field in editable combo, show list and filter it.</p>",
          "scope": "instance"
        },
        {
          "name": "onValueCollectionChange",
          "access": "private",
          "description": "<p>This reacts to our <a href=\"#Core/widget/Combo#property-valueCollection\">valueCollection</a> being mutated in any way.\nThe <code>change</code>, <code>select</code> and <code>action</code> events are fired here.</p>\n<p>This could happen in four ways:</p>\n<ul>\n<li>User selected or deselected an item in the dropdown list.</li>\n<li><code>set value</code> changes the content.</li>\n<li>The <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> Chip view (which uses this in its store) deletes a record.</li>\n<li>The application programmatically mutates the <a href=\"#Core/widget/Combo#property-valueCollection\">valueCollection</a>.</li>\n</ul>",
          "scope": "instance"
        },
        {
          "name": "onValueCollectionNoChange",
          "access": "private",
          "description": "<p>This listens for when a record from the list is selected, but is already part of\nthe selection and so the <a href=\"#Core/widget/Combo#property-valueCollection\">valueCollection</a> rejects that as a no-op.\nAt this point, the user will still expect the picker to hide.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Object",
              "description": "<p>The noChange event containing the splice parameters</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "changePicker",
          "access": "internal",
          "description": "<p>Creates default picker widget</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "input",
          "description": "<p>User typed into the field. Please note that the value attached to this event is the raw input field value and\nnot the combos value</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Combo",
              "description": "<p>The combo</p>"
            },
            {
              "name": "value",
              "type": "String",
              "description": "<p>Raw input value</p>"
            }
          ]
        },
        {
          "name": "select",
          "description": "<p>An item in the list was selected</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Combo",
              "description": "<p>The combo</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Selected record</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Selected records as an array if <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> is <code>true</code></p>"
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p><code>true</code> if the value change is due to user interaction.</p>"
            }
          ]
        },
        {
          "name": "action",
          "description": "<p>Th default action was performed (an item in the list was selected)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Combo",
              "description": "<p>The combo</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>The <a href=\"#Core/widget/Combo#config-valueField\">value</a> of the selected record</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Selected record</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Selected records as an array if <a href=\"#Core/widget/Combo#config-multiSelect\">multiSelect</a> is <code>true</code></p>"
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p><code>true</code> if the value change is due to user interaction.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Container",
      "modulePath": "Core/widget/Container",
      "classDescription": "<p>Widget that can contain other widgets. Layout is flexbox by default, see the <a href=\"#Core/widget/Container#config-layout\">layout</a> config.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// create a container with two widgets\nlet container = new Container({\n    items : [\n        { type : 'text', label : 'Name' },\n        { type : 'number', label : 'Score' }\n    ]\n});\n</code></pre>\n<p>Containers can have child widgets added, or removed during their lifecycle to accommodate business needs.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myTaskPopup.on({\n    beforeShow() {\n        if (task.type === task.MASTER) {\n            // Insert the childTask multiselect before the masterTask field\n            myPopup.insert(childTaskMultiselect, masterTaskField)\n\n            // We don't need this for master tasks\n            myPopup.remove(masterTaskField);\n        }\n        else {\n            // Insert the masterTask combo before the childTask multiselect\n            myPopup.insert(masterTaskField, childTaskMultiselect)\n\n            // We don't need this for child tasks\n            myPopup.remove(childTaskMultiselect);\n        }\n    }\n});\n</code></pre>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Container.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "container",
      "externalExamples": [
        "Core/widget/Container.js"
      ],
      "configs": [
        {
          "name": "items",
          "description": "<p>An object containing typed child widget config objects or Widgets. May also be specified\nas an array.</p>\n<p>If configured as an Object, the property names are used as the child component's\n<a href=\"#Core/widget/Widget#config-ref\">ref</a> name, and the value is the child component's config object.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>\n class MyContainer extends Container {\n     static get configurable() {\n         return {\n             items : {\n                 details : {\n                     type : 'panel',\n                     ....\n                 },\n                 button : {\n                     type : 'button',\n                     text : 'Save'\n                 }\n             }\n         }\n     }\n }\n\n new MyContainer({\n     title    : 'Test Container',\n     floating : true,\n     centered : true,\n     width    : 600,\n     height   : 400,\n     layout   : 'fit',\n     items    : {\n         button : {\n             disabled : true\n         },\n         details : {\n             title : 'More coolness',\n             html  : 'Details content'\n     }\n }).show();\n</code></pre>\n<p>The order of the child widgets is determined by the order they are defined in <code>items</code>, but can also be\naffected by configuring a <a href=\"#Core/widget/Widget#config-weight\">weight</a> on one or more widgets.</p>\n<p>If you want to customize child items of an existing class, you can do this using the child widget\n'ref' identifier (useful for reconfiguring Event Editor in Scheduler / Gantt):</p>\n<pre class=\"prettyprint source lang-javascript\"><code> new MyCustomTabPanel({\n     items    : {\n         // Reconfigure tabs\n         firstTab : {\n             title : 'My custom title'\n         },\n         secretTab : null // hide this tab\n     }\n }).show();\n</code></pre>",
          "type": [
            "Object",
            "Array.<Object>",
            "Array.<Core.widget.Widget>"
          ],
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "lazyItems",
          "description": "<p>An array of <a href=\"#Core/widget/Container#config-items\">child item</a> <em>config objects</em> which is to be converted into\ninstances only when this Container is rendered, rather than eagerly at construct time.</p>\n<p><em>This is mutually exclusive with the <a href=\"#Core/widget/Container#config-items\">items</a> config.</em></p>",
          "type": [
            "Object",
            "Array.<Object>",
            "Array.<Core.widget.Widget>"
          ],
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "defaults",
          "description": "<p>A config object containing default settings to apply to all child widgets.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "layoutStyle",
          "description": "<p>The CSS style properties to apply to the <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>\n<p>By default, a Container's <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a> uses flexbox layout, so this\nconfig may contain the following properties:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\">flexDirection</a> default '<code>row</code>'</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\">flexWrap</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow\">flexFlow</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\">justifyContent</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\">alignItems</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\">alignContent</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/place-content\">placeContent</a></li>\n</ul>",
          "type": "Object",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "itemCls",
          "description": "<p>An optional CSS class to add to child items of this container.</p>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "layout",
          "description": "<p>The short name of a helper class which manages rendering and styling of child items.</p>\n<p>Or a config object which includes a <code>type</code> property which specifies which type\nof layout to use, and how to configure that layout.</p>\n<p>By default, the only special processing that is applied is that the Container class's\n<a href=\"#Core/widget/Container#config-itemCls\">itemCls</a> is added to child items.</p>\n<p>Containers use CSS flexbox in its default configuration to arrange child items. You may either use the\n<a href=\"#Core/widget/Container#config-layoutStyle\">layoutStyle</a> configuration to tune how child items are layed out, or use one of the built\nin helper classes which include:</p>\n<ul>\n<li><code>fit</code> A single child item is displayed fitting exactly into the\n<a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</li>\n<li><code>card</code> Child items are displayed one at a time, size to fit the\n<a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a> and are slid in from the side when activated.</li>\n<li><code>box</code> Child items are layed out using flexbox.</li>\n</ul>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    id     : 'myContainer',\n    // Our child items flow downwards and are stretched to fill our width\n    layout : {\n        type       : 'box',\n        direction  : 'column'\n        align      : 'stretch'\n    }\n}</code></pre>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "namedItems",
          "description": "<p>An object containing named config objects which may be referenced by name in any <a href=\"#Core/widget/Container#config-items\">items</a>\nobject. For example, a specialized <a href=\"#Core/widget/Menu\">Menu</a> subclass may have a <code>namedItems</code> default\nvalue defined like this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> namedItems : {\n     removeRow : {\n         text : 'Remove row',\n         onItem() {\n             this.ownerGrid.remove(this.ownerGrid.selectedRecord);\n         }\n     }\n }\n</code></pre>\n<p>Then whenever that subclass is instantiated and configured with an <a href=\"#Core/widget/Container#config-items\">items</a> object, the\nitems may be configured like this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> items : {\n     removeRow : true,   // The referenced namedItem will be applied to this\n     otherItemRef : {\n         text : 'Option 2',\n         onItem() {\n         }\n     }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "overflowable",
          "access": "internal",
          "description": "<p>When set to <code>true</code>, this widget is considered as a whole when processing <a href=\"#Core/widget/Toolbar\">Toolbar</a>\noverflow. When <code>false</code>, this widget's child items are considered instead.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Layout"
        },
        {
          "name": "textContent",
          "description": "<p>Specify <code>true</code> for a container used to show text markup. It will apply the CSS class <code>b-text-content</code>\nwhich specifies a default max-width that makes long text more readable.</p>\n<p>This CSS class is automatically removed if the container adds/defines child Widgets.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Content"
        },
        {
          "name": "record",
          "access": "internal",
          "description": "<p>Record whose values will be used to populate fields in the container.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "autoUpdateRecord",
          "description": "<p>Update assigned <a href=\"#Core/widget/Container#config-record\">record</a> automatically on field changes</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "autoUpdateFields",
          "access": "internal",
          "description": "<p>Update fields if the <a href=\"#Core/widget/Container#config-record\">record</a> changes</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "hideWhenEmpty",
          "description": "<p>Specify <code>true</code> to make this container hide when it has no visible children (Either empty\nor all children hidden).</p>\n<p>Container will show itself when there are visible children, ie: hidden children are\nshown, or new visible children are added.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "isolateFields",
          "access": "internal",
          "description": "<p>Specify <code>true</code> to isolate record changes to this container and its ancestors. Prevents record\nupdates from propagating up from here and also prevents record updates from parent from\npropagating down to us.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "defaultFocus",
          "description": "<p>A <a href=\"#Core/widget/Container#function-query\">query</a> selector function which can identify the descendant widget to which\nfocus should be directed by default.</p>\n<p>By default, the first focusable descendant widget is chosen. This may direct focus to a different\nwidget:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    new Popup({\n        title        : 'Details',\n        width        : '25em',\n        centered     : true,\n        modal        : true,\n\n        // Focus goes straight to OK button in the bottom toolbar on show\n        defaultFocus : w => w.ref ==='okButton',\n        items        : {\n            nameField : {\n                type  : 'textfield',\n                label : 'Name'\n            },\n            ageField  : {\n                type  : 'numberfield',\n                label : 'Name'\n            }\n        },\n        bbar     : {\n            items : {\n                okButton : {\n                    text    : 'OK',\n                    handler : okFunction\n                },\n                cncelButton : {\n                    text    : 'Cancel',\n                    handler : cancelFunction\n                }\n            }\n        }\n    }).show();\n</code></pre>",
          "type": "function",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "layout",
          "description": "<p>The <a href=\"#Core/widget/Container#config-layout\">layout</a> as an instance of <a href=\"#Core/widget/layout/Layout\">Layout</a>.\nThis is a helper class which adds and removes child widgets to this Container's\nDOM and applies CSS classes based upon its requirements.</p>\n<p>The <a href=\"#Core/widget/layout/Card\">card</a> layout provides for showing one child\nwidget at a time, and provides a switching API to change which child widget is\ncurrently active.</p>",
          "type": "Core.widget.layout.Layout",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "focusDescendant",
          "access": "internal",
          "description": "<p>Can be set to <code>true</code> to make a focus of a focusable encapsulating element rely\nfocus down into a focusable child. This is normally <code>false</code> to allow mousedown\nto begin text selection in Popups.</p>",
          "scope": "inner"
        },
        {
          "name": "initialItems",
          "access": "internal",
          "description": "<p>This property is <code>true</code> until the container's initial <code>items</code> config has been processed. This property\nis set to <code>false</code> by the <code>updateItems</code> method.</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "layoutStyle",
          "description": "<p>Sets multiple flexbox settings which affect how child widgets are arranged.</p>\n<p>By default, Containers use flexbox layout, so this property may contain the following properties:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\">flexDirection</a> default '<code>row</code>'</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\">flexWrap</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow\">flexFlow</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\">justifyContent</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\">alignItems</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\">alignContent</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/place-content\">placeContent</a></li>\n</ul>",
          "type": "Object",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "record",
          "description": "<p>The <a href=\"#Core/data/Model\">record</a> to be applied to the fields contained in this Container. Any descendant\nwidgets of this Container with a <code>name</code> property will have its value set to the value of that named property of\nthe record. If no record is passed, the widget has its value set to <code>null</code>.</p>",
          "type": "Core.data.Model",
          "scope": "inner"
        },
        {
          "name": "firstItem",
          "description": "<p>Returns the first widget in this Container.</p>",
          "type": "Core.widget.Widget",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "lastItem",
          "description": "<p>Returns the last widget in this Container.</p>",
          "type": "Core.widget.Widget",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "items",
          "description": "<p>A property, which, when <em>read</em>, returns an array of the child items of this container in rendered order.</p>\n<p>This property may also be <em>set</em> to change the child items of the container. Just as in the\n<a href=\"#Core/widget/Container#config-items\">initial items configuration</a>, the new value may either be an array of\nWidgets/Widget configs or an object.</p>\n<p>If specified as an Object, the property names are used as the child Widget's\n<a href=\"#Core/widget/Widget#config-ref\">ref</a> name, and the value is the child Widget/Widget config.</p>\n<p>When setting this, any items which are <em>only</em> in the outgoing child items which were created\nby this container from raw config objects are destroyed.</p>\n<p>Usage patterns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myContainer.items = {\n    name : {\n        type  : 'textfield',\n        label : 'User name'\n    },\n    age : {\n        type  : 'numberfield',\n        label : 'User age'\n    }\n};\n</code></pre>\n<p>or</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myContainer.items = [{\n    ref   : 'name',\n    type  : 'textfield',\n    label : 'User name'\n},\n    ref   : 'age',\n    type  : 'numberfield',\n    label : 'User age'\n}];\n</code></pre>",
          "type": "Array.<Core.widget.Widget>",
          "accepts": [
            "Core.widget.Widget[]",
            "Object"
          ],
          "scope": "instance"
        },
        {
          "name": "visibleChildCount",
          "description": "<p>The number of <em>visible</em> child items shown in this Container.</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true,
          "category": "Widget hierarchy"
        },
        {
          "name": "widgetMap",
          "description": "<p>An object which contains a map of descendant widgets keyed by their <a href=\"#Core/widget/Widget#config-ref\">ref</a>.\nAll descendant widgets will be available in the <code>widgetMap</code>.</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Widget hierarchy"
        },
        {
          "name": "isValid",
          "description": "<p>Returns <code>true</code> if all contained fields are valid, otherwise <code>false</code></p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "values",
          "description": "<p>Retrieves or sets all values from/to contained widgets.</p>\n<p>The property set or read from a contained widget is its <a href=\"#Core/widget/Widget#config-defaultBindProperty\">defaultBindProperty</a>.</p>\n<p>This defaults to the <code>value</code> for fields.</p>\n<p>You may add child widgets which may accept and yield a value to/from another property,\nsuch as a <code>Button</code> having its <a href=\"#Core/widget/Button#config-href\">href</a> set.</p>\n<p>Accepts and returns a map, using <a href=\"#Core/widget/Field#config-name\">name</a>,\n<a href=\"#Core/widget/Widget#config-ref\">ref</a> or <a href=\"#Core/widget/Widget#config-id\">id</a> (in that order) as keys.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const container = new Container({\n    appendTo : document.body,\n    items    : {\n        firstName : {\n            type : 'textfield\n        },\n        surName : {\n            type : 'textfield\n        }\n        saveButton : {\n            type                : 'button',\n            text                : 'Save',\n            defaultBindProperty : 'href'\n            href                : '#'\n        }\n    }\n});\n\ncontainer.values = {\n    firstName  : 'Clark',\n    surname    : 'Kent',\n    saveButton : '#save-route'\n};\n</code></pre>",
          "type": "Object",
          "scope": "instance"
        },
        {
          "name": "isSettingValues",
          "description": "<p>Returns <code>true</code> if currently setting values. Allows fields change highlighting to distinguishing between initially\nsetting values and later on changing values.</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "getAt",
          "description": "<p>Returns the widget at the specified <code>index</code> in this Container.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>The index of the widget to return. Negative numbers index for the last item. For example,\n<code>index = -1</code> returns the last matching item, -2 the 2nd to last matching item etc..</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.widget.Widget",
            "description": "<p>The requested widget.</p>"
          }
        },
        {
          "name": "remove",
          "description": "<p>Removes the passed child/children from this Container.</p>",
          "parameters": [
            {
              "name": "toRemove",
              "type": "Core.widget.Widget",
              "description": "<p>The child or children to remove.</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Core.widget.Widget",
              "Array.<Core.widget.Widget>"
            ],
            "description": "<p>All the removed items. An array if multiple items\nwere removed, otherwise, just the item removed.</p>"
          }
        },
        {
          "name": "removeAll",
          "description": "<p>Removes all children from this Container.</p>",
          "scope": "instance",
          "returns": {
            "type": "Array.<Core.widget.Widget>",
            "description": "<p>All the removed items.</p>"
          }
        },
        {
          "name": "add",
          "description": "<p>Appends the passed widget / widgets or config(s) describing widgets to this Container.</p>\n<p>If the widgets specify a <code>weight</code>, they are inserted at the correct index compared to the existing items weights.</p>",
          "parameters": [
            {
              "name": "toAdd",
              "type": [
                "Object",
                "Array.<Object>",
                "Core.widget.Widget",
                "Array.<Core.widget.Widget>"
              ],
              "description": "<p>The child or children instances (or config objects) to add.</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Core.widget.Widget",
              "Array.<Core.widget.Widget>"
            ],
            "description": "<p>All the added widgets. An array if multiple items\nwere added, otherwise just the item added.</p>"
          }
        },
        {
          "name": "insert",
          "description": "<p>Inserts the passed widget into this Container at the specified position.</p>",
          "parameters": [
            {
              "name": "toAdd",
              "type": "Core.widget.Widget",
              "description": "<p>The child to insert.</p>"
            },
            {
              "name": "index",
              "type": [
                "Number",
                "Core.widget.Widget"
              ],
              "description": "<p>The index to insert at or the existing child to insert before.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.widget.Widget",
            "description": "<p>The added widget.</p>"
          }
        },
        {
          "name": "onFieldChange",
          "access": "internal",
          "description": "<p>A function called by descendant widgets after they trigger their 'change' event, in reaction to field changes.\nBy default implements the functionality for the <code>autoUpdateRecord</code> config.</p>",
          "parameters": [
            {
              "name": "params",
              "type": "Object",
              "description": "<p>Normally the event params used when triggering the 'change' event</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getWidgetById",
          "description": "<p>Returns a directly contained widget by id</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>The widget id</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.widget.Widget"
          }
        },
        {
          "name": "processWidgetConfig",
          "description": "<p>This function is called prior to creating widgets, override it in subclasses to allow containers to modify the\nconfiguration of each widget. When adding a widget to a container hierarchy each parent containers\n<code>processWidgetConfig</code> will be called. Returning false from the function prevents the widget from being added at\nall.</p>",
          "scope": "instance"
        },
        {
          "name": "setupWidgetConfig",
          "access": "internal",
          "description": "<p>This method combines container <a href=\"#Core/widget/Container#config-defaults\">defaults</a></p>",
          "parameters": [
            {
              "name": "widgetConfig",
              "type": "Object"
            },
            {
              "name": "type",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The type of widget described by <code>widgetConfig</code>.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "createWidget",
          "access": "internal",
          "description": "<p>This function converts a Widget config object into a Widget.</p>",
          "parameters": [
            {
              "name": "widget",
              "type": "Object",
              "description": "<p>A Widget config object.</p>"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "beforeSetRecord",
          "description": "<p>Fired before this container will load record values into its child fields. This is useful if you\nwant to modify the UI before data is loaded (e.g. set some input field to be readonly)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Container",
              "description": "<p>The container</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "DateField",
      "modulePath": "Core/widget/DateField",
      "classDescription": "<p>Date field widget (text field + date picker).</p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.\nIt is used as the default editor for the <a href=\"#Grid/column/DateColumn\">DateColumn</a>.</p>\n<p>This widget may be operated using the keyboard. <code>ArrowDown</code> opens the date picker, which itself\nis keyboard navigable. <code>Shift+ArrowDown</code> activates the <a href=\"#Core/widget/DateField#config-step\">step</a> back trigger.\n<code>Shift+ArrowUp</code> activates the <a href=\"#Core/widget/DateField#config-step\">step</a> forwards trigger.</p>",
      "extends": [
        "Core/widget/PickerField"
      ],
      "examples": [
        "// minimal DateField config with date format specified\nlet dateField = new DateField({\n  format: 'YYMMDD'\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DateField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "datefield",
      "externalExamples": [
        "Core/widget/DateField.js"
      ],
      "properties": [
        {
          "name": "format",
          "description": "<p>Get / set format for date displayed in field (see <a href=\"#Core/helper/DateHelper#function-format-static\">format</a>\nfor formatting options).</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "min",
          "description": "<p>Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\nthe specified <a href=\"#Core/widget/DateField#config-format\">format</a>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "max",
          "description": "<p>Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\nthe specified <a href=\"#Core/widget/DateField#config-format\">format</a>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "step",
          "description": "<p>The <code>step</code> property may be set in object form specifying two properties, <code>magnitude</code>, a Number, and\n<code>unit</code>, a String.</p>\n<p>If a Number is passed, the steps's current unit is used (or <code>day</code> if no current step set) and just the\nmagnitude is changed.</p>\n<p>If a String is passed, it is parsed by <a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a>, for\nexample <code>'1d'</code>, <code>'1 d'</code>, <code>'1 day'</code>, or <code>'1 day'</code>.</p>\n<p>Upon read, the value is always returned in object form containing <code>magnitude</code> and <code>unit</code>.</p>",
          "type": "Object",
          "accepts": [
            "String",
            "Number",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Get/set value, which can be set as a Date or a string but always returns a Date. If a string is\nspecified, it will be converted using the specified <a href=\"#Core/widget/DateField#config-format\">format</a></p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "format",
          "description": "<p>Format for date displayed in field. Defaults to using long date format, as defined by current locale (<code>L</code>)</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "L"
        },
        {
          "name": "keepTime",
          "description": "<p>A flag which indicates what time should be used for selected date.\n<code>false</code> by default which means time is reset to midnight.</p>\n<p>Possible options are:</p>\n<ul>\n<li><code>false</code> to reset time to midnight</li>\n<li><code>true</code> to keep original time value</li>\n<li><code>'17:00'</code> a string which is parsed automatically</li>\n<li><code>new Date(2020, 0, 1, 17)</code> a date object to copy time from</li>\n<li><code>'entered'</code> to keep time value entered by user (in case <a href=\"#Core/widget/DateField#config-format\">format</a> includes time info)</li>\n</ul>",
          "type": [
            "Boolean",
            "Date",
            "String"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "pickerFormat",
          "description": "<p>Format for date in the <a href=\"#Core/widget/DateField#config-picker\">picker</a>. Uses localized format per default</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "validateDateOnly",
          "access": "internal",
          "description": "<p>Set to true to first clear time of the field's value before comparing it to the max value</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "min",
          "description": "<p>Min value</p>",
          "type": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "max",
          "description": "<p>Max value</p>",
          "type": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "step",
          "description": "<p>Time increment duration value. If specified, <code>forward</code> and <code>back</code> triggers are displayed.\nThe value is taken to be a string consisting of the numeric magnitude and the units.\nThe units may be a recognised unit abbreviation of this locale or the full local unit name.\nFor example <code>'1d'</code> or <code>'1w'</code> or <code>'1 week'</code>. This may be specified as an object containing\ntwo properties: <code>magnitude</code>, a Number, and <code>unit</code>, a String</p>",
          "type": [
            "String",
            "Number",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "weekStartDay",
          "description": "<p>The week start day in the <a href=\"#Core/widget/DateField#config-picker\">picker</a>, 0 meaning Sunday, 6 meaning Saturday.\nUses localized value per default.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "picker",
          "description": "<p>A config object used to configure the <a href=\"#Core/widget/DatePicker\">datePicker</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dateField = new DateField({\n     picker    : {\n         multiSelect : true\n     }\n });\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Value, which can be a Date or a string. If a string is specified, it will be converted using the\nspecified <a href=\"#Core/widget/DateField#config-format\">format</a></p>",
          "type": [
            "String",
            "Date"
          ],
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "changePicker",
          "access": "internal",
          "description": "<p>Creates default picker widget</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DatePicker",
      "modulePath": "Core/widget/DatePicker",
      "classDescription": "<p>A Panel which can display a month of date cells, which navigates between the cells, fires events upon user selection\nactions, optionally navigates to other months in response to UI gestures, and optionally displays information about\neach date cell.</p>\n<p>This class is used by the <a href=\"#Core/widget/DateField\">DateField</a> class.</p>\n<p><div class=\"external-example \" data-file=\"Core/widget/DatePicker.js\"></div></p>\n<h2>Custom cell rendering</h2>\n<p>You can easily control the content of each date cell using the <a href=\"#Core/widget/DatePicker#config-cellRenderer\">cellRenderer</a>. The example below shows\na view typically seen when booking hotel rooms or apartments.</p>\n<p><div class=\"external-example \" data-file=\"Core/widget/DatePickerCellRenderer.js\"></div></p>",
      "extends": [
        "Core/widget/CalendarPanel"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DatePicker.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "datepicker",
      "configs": [
        {
          "name": "activeDate",
          "description": "<p>The date that the user has navigated to using the UI <em>prior</em> to setting the widget's\nvalue by selecting.</p>\n<p>This may be changed using keyboard navigation. The <a href=\"#Core/widget/CalendarPanel#property-date\">date</a> is set\nby pressing <code>ENTER</code> when the desired date is reached.</p>\n<p>Programmatically setting the <a href=\"#Core/widget/CalendarPanel#config-date\">date</a>, or using the UI to select the date\nby clicking it also sets the <code>activeDate</code></p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "date",
          "description": "<p>The initially selected date.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "minDate",
          "description": "<p>The minimum selectable date. Selection of and navigation to dates prior\nto this date will not be possible.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "maxDate",
          "description": "<p>The maximum selectable date. Selection of and navigation to dates after\nthis date will not be possible.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "focusDisabledDates",
          "description": "<p>By default, disabled dates cannot be navigated to, and they are skipped over\nduring keyboard navigation. Configure this as <code>true</code> to enable navigation to\ndisabled dates.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "multiSelect",
          "description": "<p>Configure as <code>true</code> to enable selecting a single date range by selecting a\nstart and end date. Hold &quot;SHIFT&quot; button to select date range.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "editMonth",
          "description": "<p>By default, the month and year are editable. Configure this as <code>false</code> to prevent that.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "dayNameFormat",
          "description": "<p>The <a href=\"#Core/helper/DateHelper\">DateHelper</a> format string to format the day names.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "dd"
        },
        {
          "name": "outOfRangeCls",
          "access": "private",
          "description": "<p>The class name to add to the calendar cell whose date which is outside of the\n<a href=\"#Core/widget/DatePicker#config-minDate\">minDate</a>/<a href=\"#Core/widget/DatePicker#config-maxDate\">maxDate</a> range.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "activeCls",
          "access": "private",
          "description": "<p>The class name to add to the currently focused calendar cell.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "selectedCls",
          "access": "private",
          "description": "<p>The class name to add to selected calendar cells.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "selectionChange",
          "description": "<p>Fires when a date is selected. If <a href=\"#Core/widget/DatePicker#config-multiSelect\">multiSelect</a> is specified, this\nwill fire upon deselection and selection of dates.</p>",
          "parameters": [
            {
              "name": "selection",
              "type": "Array.<Date>",
              "description": "<p>The selected date. If <a href=\"#Core/widget/DatePicker#config-multiSelect\">multiSelect</a> is specified\nthis may be a two element array specifying start and end dates.</p>"
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p>This will be <code>true</code> if the change was caused by user interaction\nas opposed to programmatic setting.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "onUIDateSelect",
          "access": "internal",
          "description": "<p>Called when the user uses the UI to select the current activeDate. So ENTER when focused\nor clicking a date cell.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The active date to select</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>the instigating event, either a <code>click</code> event or a <code>keydown</code> event.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DateTimeField",
      "modulePath": "Core/widget/DateTimeField",
      "classDescription": "<p>A field combining a <a href=\"#Core/widget/DateField\">DateField</a> and a <a href=\"#Core/widget/TimeField\">TimeField</a>.</p>",
      "extends": [
        "Core/widget/Field"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DateTimeField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "datetimefield",
      "externalExamples": [
        "Core/widget/DateTimeField.js"
      ],
      "properties": [
        {
          "name": "timeField",
          "description": "<p>Returns the TimeField instance</p>",
          "type": "Core.widget.TimeField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "dateField",
          "description": "<p>Returns the DateField instance</p>",
          "type": "Core.widget.DateField",
          "scope": "inner",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "timeField",
          "description": "<p>Configuration for <a href=\"#Core/widget/TimeField\">TimeField</a></p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "dateField",
          "description": "<p>Configuration for <a href=\"#Core/widget/DateField\">DateField</a></p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "weekStartDay",
          "description": "<p>The week start day in the <a href=\"#Core/widget/DateField#config-picker\">picker</a>, 0 meaning Sunday, 6 meaning Saturday.\nUses localized value per default.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "DisplayField",
      "modulePath": "Core/widget/DisplayField",
      "classDescription": "<p>A widget used to show a read only value. Can also use a <a href=\"#Core/widget/DisplayField#config-template\">template string</a> to show custom\nmarkup inside a Container.</p>",
      "extends": [
        "Core/widget/Field"
      ],
      "examples": [
        "let displayField = new DisplayField({\n  appendTo : document.body,\n  label: 'name',\n  value : 'John Doe',\n  // or use a template\n  // template : name => `${name} is the name`\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DisplayField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "displayField",
      "externalExamples": [
        "Core/widget/DisplayField.js"
      ],
      "configs": [
        {
          "name": "template",
          "description": "<p>A template string used to render the value of this field. Please note you are responsible for encoding\nany strings protecting against XSS.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new DisplayField({\n    appendTo : document.body,\n    name     : 'age',\n    label    : 'Age',\n    template : data => `${data.value} years old`\n})\n</code></pre>",
          "type": "function",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "DurationField",
      "modulePath": "Core/widget/DurationField",
      "classDescription": "<p>A specialized field allowing a user to also specify duration unit when editing the duration value.</p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.\nIt is used as the default editor for the <code>DurationColumn</code>.</p>",
      "extends": [
        "Core/widget/TextField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DurationField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "durationfield",
      "externalExamples": [
        "Core/widget/DurationField.js"
      ],
      "configs": [
        {
          "name": "value",
          "description": "<p>The <code>value</code> config may be set in Object form specifying two properties,\n<code>magnitude</code>, a Number, and <code>unit</code>, a String.</p>\n<p>If a String is passed, it is parsed in accordance with current locale rules.\nThe string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of\nthe unit.</p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "step",
          "description": "<p>Step size for spin button clicks.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1,
          "category": "Common"
        },
        {
          "name": "unit",
          "description": "<p>The duration unit to use with the current magnitude value.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "magnitude",
          "description": "<p>The duration magnitude to use with the current unit value. Can be either an integer or a float value.\nBoth &quot;,&quot; and &quot;.&quot; are valid decimal separators.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "useAbbreviation",
          "description": "<p>When set to <code>true</code> the field will use short names of unit durations\n(as returned by <a href=\"#Core/helper/DateHelper#function-getShortNameOfUnit-static\">getShortNameOfUnit</a>) when creating the\ninput field's display value.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "allowNegative",
          "description": "<p>Set to <code>true</code> to allow negative duration</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "decimalPrecision",
          "description": "<p>The number of decimal places to allow. Defaults to no constraint.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "min",
          "description": "<p>Minimum duration value (e.g. 1d)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "max",
          "description": "<p>Max duration value (e.g. 10d)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "allowedUnits",
          "description": "<p>Comma-separated list of units to allow in this field, e.g. &quot;day,hour,year&quot;. Leave blank to allow all\nvalid units (the default)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "<p>Fired when this field's value changes.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Core.data.Duration",
              "description": "<p>This field's value</p>"
            },
            {
              "name": "oldValue",
              "type": "Core.data.Duration",
              "description": "<p>This field's previous value</p>"
            },
            {
              "name": "valid",
              "type": "Boolean",
              "description": "<p>True if this field is in a valid state.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The triggering DOM event if any.</p>",
              "optional": true
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p>Triggered by user taking an action (<code>true</code>) or by setting a value (<code>false</code>)</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.DurationField",
              "description": "<p>This field</p>"
            }
          ]
        },
        {
          "name": "action",
          "description": "<p>User performed default action (typed into this field or hit the triggers).</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Core.data.Duration",
              "description": "<p>This field's value</p>"
            },
            {
              "name": "oldValue",
              "type": "Core.data.Duration",
              "description": "<p>This field's previous value</p>"
            },
            {
              "name": "valid",
              "type": "Boolean",
              "description": "<p>True if this field is in a valid state.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The triggering DOM event if any.</p>",
              "optional": true
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p>Triggered by user taking an action (<code>true</code>) or by setting a value (<code>false</code>)</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.DurationField",
              "description": "<p>This field</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "min",
          "description": "<p>Get/set the min value (e.g. 1d)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "max",
          "description": "<p>Get/set the max value</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "allowedUnits",
          "description": "<p>Get/set the allowed units, e.g. &quot;day,hour,year&quot;.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "unit",
          "description": "<p>Get/Set duration unit to use with the current magnitude value.\nValid values are:</p>\n<ul>\n<li>&quot;millisecond&quot; - Milliseconds</li>\n<li>&quot;second&quot; - Seconds</li>\n<li>&quot;minute&quot; - Minutes</li>\n<li>&quot;hour&quot; - Hours</li>\n<li>&quot;day&quot; - Days</li>\n<li>&quot;week&quot; - Weeks</li>\n<li>&quot;month&quot; - Months</li>\n<li>&quot;quarter&quot; - Quarters</li>\n<li>&quot;year&quot;- Years</li>\n</ul>",
          "type": "String",
          "scope": "instance",
          "category": "Common"
        },
        {
          "name": "magnitude",
          "description": "<p>Get/Set numeric magnitude <code>value</code> to use with the current unit value.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Common"
        },
        {
          "name": "value",
          "description": "<p>The <code>value</code> property may be set in Object form specifying two properties, <code>magnitude</code>, a Number, and <code>unit</code>, a\nString.</p>\n<p>If a Number is passed, the field's current unit is used and just the magnitude is changed.</p>\n<p>If a String is passed, it is parsed in accordance with current locale rules. The string is taken to be the\nnumeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.</p>\n<p>Upon read, the value is always a <a href=\"#Core/data/Duration\">Duration</a> object containing <code>magnitude</code> and <code>unit</code>.</p>",
          "type": "Core.data.Duration",
          "accepts": [
            "String",
            "Number",
            "Object",
            "Core.data.Duration"
          ],
          "scope": "instance",
          "category": "Common"
        },
        {
          "name": "milliseconds",
          "description": "<p>The <code>milliseconds</code> property is a read only property which returns the number of milliseconds in this field's\nvalue</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true
        }
      ]
    },
    {
      "name": "Editor",
      "modulePath": "Core/widget/Editor",
      "classDescription": "<p>Displays an input field, optionally editing a field of a record at a particular position.</p>\n<p>Offers events to signal edit completion upon <code>ENTER</code> or focus loss (if configured to do so),\nor edit cancellation on <code>ESC</code>, or focus loss if configured that way.</p>",
      "extends": [
        "Core/widget/Container"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Editor.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "Editor",
      "configs": [
        {
          "name": "inputField",
          "description": "<p>A config object, or the <code>type</code> string of the widget (usually a <a href=\"#Core/widget/Field\">Field</a> subclass,\ni.e. <a href=\"#Core/widget/TextField\">TextField</a>) which this editor will encapsulate.</p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "textfield"
        },
        {
          "name": "blurAction",
          "description": "<p>What action should be taken when focus moves out of the editor, either by <code>TAB</code> or clicking outside.\nMay be <code>'complete'</code> or <code>'cancel</code>'. Any other value results in no action being taken upon focus leaving the editor\nleaving the application to listen for the <a href=\"#Core/widget/Editor#event-focusOut\">focusOut</a> event.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "complete"
        },
        {
          "name": "completeKey",
          "description": "<p>The name of the <code>key</code> which completes the edit.</p>\n<p>See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for key names.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "Enter"
        },
        {
          "name": "cancelKey",
          "description": "<p>The name of the <code>key</code> which cancels the edit.</p>\n<p>See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for key names.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "Escape"
        },
        {
          "name": "invalidAction",
          "description": "<p>How to handle a request to complete the edit if the field is invalid. There are three choices:</p>\n<ul>\n<li><code>block</code> The default. The edit is not exited, the field remains focused.</li>\n<li><code>allow</code> Allow the edit to be completed.</li>\n<li><code>revert</code> The field value is reverted and the edit is completed.</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "block"
        },
        {
          "name": "completeOnChange",
          "description": "<p>Configure as <code>true</code> to have editing complete as soon as the field fires its <code>change</code> event.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "events": [
        {
          "name": "beforeStart",
          "description": "<p>Fired before the editor is shown to start an edit operation. Returning <code>false</code> from a handler vetoes the edit operation.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The value to be edited.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "start",
          "description": "<p>Fired when an edit operation has begun.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The starting value of the field.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ]
        },
        {
          "name": "beforeComplete",
          "description": "<p>Fired when an edit completion has been requested, either by <code>ENTER</code>, or focus loss (if configured to complete on blur).\nThe completion may be vetoed, in which case, focus is moved back into the editor.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The new value.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            },
            {
              "name": "finalize",
              "type": "function",
              "description": "<p>An async function may be injected into this property\nwhich performs asynchronous finalization tasks such as complex validation of confirmation. The\nvalue <code>true</code> or <code>false</code> must be returned.</p>",
              "optional": true
            },
            {
              "name": "finalize.context",
              "type": "Object",
              "description": "<p>An object describing the editing context upon requested completion of the edit.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "preventable": true
        },
        {
          "name": "complete",
          "description": "<p>Edit has been completed, and any associated record or element has been updated.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The new value.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ]
        },
        {
          "name": "beforeCancel",
          "description": "<p>Fired when cancellation has been requested, either by <code>ESC</code>, or focus loss (if configured to cancel on blur).\nThe cancellation may be vetoed, in which case, focus is moved back into the editor.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The new value.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Included if the cancellation was triggered by a DOM event</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "cancel",
          "description": "<p>Edit has been canceled without updating the associated record or element.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The value of the field.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Included if the cancellation was triggered by a DOM event</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ]
        },
        {
          "name": "keypress",
          "description": "<p>Fire to relay a <code>keypress</code> event from the field.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The key event.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "startEdit",
          "description": "<p>Start editing</p>",
          "parameters": [
            {
              "name": "editObject",
              "type": "Object",
              "description": "<p>An object containing details about what to edit.</p>"
            },
            {
              "name": "editObject.target",
              "type": [
                "HTMLElement",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>the element or Rectangle to align to.</p>",
              "isSubParam": true
            },
            {
              "name": "editObject.align",
              "type": "String",
              "description": "<p>How to align to the target.</p>",
              "default": "t0-t0",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editObject.matchSize",
              "type": "Boolean",
              "description": "<p>Match editor size to target size.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editObject.matchFont",
              "type": "Boolean",
              "description": "<p>Match editor's font-size size to target's font-size.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editObject.record",
              "type": "Core.data.Model",
              "description": "<p>The record to edit.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editObject.field",
              "type": "String",
              "description": "<p>The field name in the record to edit. This defaults to the <code>name</code> of the <a href=\"#Core/widget/Editor#config-inputField\">inputField</a>.\nAlso if record has method set + capitalized field, method will be called, e.g. if record has method named\n<code>setFoobar</code> and this config is <code>foobar</code>, then instead of <code>record.foobar = value</code>, <code>record.setFoobar(value)</code> will be called.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editObject.value",
              "type": "Object",
              "description": "<p>The value to edit.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editObject.focus",
              "type": "Boolean",
              "description": "<p>Focus the field.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editObject.fitTargetContent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to allow the Editor to expand beyond the\nwidth of its target element if its content overflows horizontally. This is useful if the editor has\ntriggers to display, such as a combo.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "completeEdit",
          "description": "<p>Complete the edit, and, if associated with a record, update the record if possible.\nIf editing is completed, the editor is hidden.</p>\n<p>If the field is invalid, the <code><a href=\"#Core/widget/Editor#config-invalidAction\">invalidAction</a></code> config is used to decide\nupon the course of action.</p>\n<p>If a <a href=\"#Core/widget/Editor#event-beforeComplete\">beforeComplete</a> handler returns <code>false</code> then editing is not completed.</p>\n<p>If the field's values has not been changed, then editing is terminated through <a href=\"#Core/widget/Editor#function-cancelEdit\">cancelEdit</a>.</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "description": "<p><code>true</code> if editing ceased, <code>false</code> if the editor is still active.</p>"
          }
        },
        {
          "name": "cancelEdit",
          "description": "<p>Cancel the edit and hide the editor.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Field",
      "modulePath": "Core/widget/Field",
      "classDescription": "<p>Base class for <a href=\"#Core/widget/TextField\">TextField</a> and <a href=\"#Core/widget/NumberField\">NumberField</a>. Not to be\nused directly.</p>\n<p>Most subclasses can be used as editors for the <a href=\"#Grid/column/Column\">Column</a>. The most popular are:</p>\n<ul>\n<li><a href=\"#Core/widget/TextField\">TextField</a></li>\n<li><a href=\"#Core/widget/NumberField\">NumberField</a></li>\n<li><a href=\"#Core/widget/DateField\">DateField</a></li>\n<li><a href=\"#Core/widget/TimeField\">TimeField</a></li>\n<li><a href=\"#Core/widget/Combo\">Combo</a></li>\n</ul>",
      "extends": [
        "Core/widget/Widget"
      ],
      "mixes": [
        "Core/widget/mixin/Badge",
        "Core/widget/mixin/Labelable"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Field.js",
      "path": "/Calendar/lib/Core/widget",
      "hideConfigs": [
        "htmlCls",
        "content",
        "tag",
        "scrollable",
        "html"
      ],
      "configs": [
        {
          "name": "placeholder",
          "description": "<p>Text to display in empty field.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Default value</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "name",
          "description": "<p>Name of the field which is used as a key to get/set values from/to the field.\nUsed prior to <a href=\"#Core/widget/Widget#config-ref\">ref</a> and <a href=\"#Core/widget/Widget#config-id\">id</a> in\n<a href=\"#Core/widget/Container#property-values\">Container.values</a>.</p>\n<p>The config is useful when the field is used in EventEditor or TaskEditor to load/save values automatically.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "labels",
          "description": "<p>The labels to add either before or after the input field.\nEach label may have the following properties:</p>\n<ul>\n<li><code>html</code> The label text.</li>\n<li><code>align</code> <code>'start'</code> or <code>'end'</code> which end of the field the label should go.</li>\n</ul>",
          "type": "Object",
          "scope": "inner",
          "category": "Label"
        },
        {
          "name": "required",
          "description": "<p>Configure as <code>true</code> to indicate that a <code>null</code> field value is to be marked as invalid.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "clearable",
          "description": "<p>Show a trigger to clear field, and allow <code>SHIFT+BACKSPACE</code> key to clear field if this field is\nnot <a href=\"#Core/widget/Field#config-readOnly\">readOnly</a>. The trigger is available in the <a href=\"#Core/widget/Field#property-triggers\">triggers</a> object\nunder the name <code>clear</code>. May also be an object which configures the <code>clear</code> <a href=\"#Core/widget/Field#property-triggers\">trigger</a>.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "revertOnEscape",
          "description": "<p>If this field is not <a href=\"#Core/widget/Field#config-readOnly\">readOnly</a>, then setting this option means that pressing\nthe <code>ESCAPE</code> key after editing the field will revert the field to the value it had when\nthe user focused the field. If the field is <em>not</em> changed from when focused, the <a href=\"#Core/widget/Field#config-clearable\">clearable</a>\nbehaviour will be activated.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "hint",
          "description": "<p>An optional string to display inside the input field as an overlay. This can be useful for displaying\na field's units.</p>\n<p>This config is ignored if <a href=\"#Core/widget/Field#config-hintHtml\">hintHtml</a> is set.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     type  : 'numberfield',\n     label : 'Temperature',\n     hint  : '°C'\n }\n</code></pre>\n<p>This config can be set to a function to dynamically generate the <code>hint</code> text:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     type  : 'numberfield',\n     label : 'Duration',\n     hint  : ({ value }) => (value === 1) ? 'Day' : 'Days'\n }\n</code></pre>\n<p>The function is passed an object with the following properties:</p>\n<ul>\n<li><code>source</code> A reference to the field instance.</li>\n<li><code>value</code> The current value of the field.</li>\n</ul>\n<p>A <code>hint</code> function will be called when the field changes value.</p>",
          "type": [
            "String",
            "function"
          ],
          "scope": "inner",
          "category": "Label"
        },
        {
          "name": "hintHtml",
          "description": "<p>This config is similar to <a href=\"#Core/widget/Field#config-hint\">hint</a> except that this config is used to display HTML content.\nSince this can allow malicious content to be executed, be sure not to include user-entered data or to\nencode such data (see <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a>).</p>\n<p>If this config is set, <a href=\"#Core/widget/Field#config-hint\">hint</a> is ignored.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     type     : 'numberfield',\n     label    : 'Temperature',\n     hintHtml : '&lt;i>°C&lt;/i>'\n }\n</code></pre>\n<p>This config can be set to a function to dynamically generate the <code>hintHtml</code> text:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     type     : 'numberfield',\n     label    : 'Duration',\n     hintHtml : ({ value }) => (value === 1) ? '&lt;i>Day&lt;/i>' : '&lt;i>Days&lt;/i>'\n }\n</code></pre>\n<p>The function is passed an object with the following properties:</p>\n<ul>\n<li><code>source</code> A reference to the field instance.</li>\n<li><code>value</code> The current value of the field.</li>\n</ul>\n<p>A <code>hintHtml</code> function will be called when the field changes value.</p>",
          "type": [
            "String",
            "function"
          ],
          "scope": "inner",
          "category": "Label"
        },
        {
          "name": "inputWidth",
          "description": "<p>The width to apply to the <code>&lt;input&gt;</code> element. If a number is specified, <code>px</code> will be used.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "keyStrokeChangeDelay",
          "description": "<p>The delay in milliseconds to wait after the last keystroke before triggering a change event.\nSet to 0 to not trigger change events from keystrokes (listen for input event instead to have\nimmediate feedback, change will still be triggered on blur)</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "readOnly",
          "description": "<p>Makes the field unmodifiable by user action. The input area is not editable, and triggers\nare unresponsive.</p>\n<p>This is a wider-acting setting than <a href=\"#Core/widget/Field#config-editable\">editable</a> which <em>only</em> sets the\n<code>readOnly</code> attribute of the <code>&lt;input&gt;</code> field.</p>\n<p>PickerFields such as <code>Combo</code> and <code>DateField</code> can be <code>editable : false</code>, but still\nmodifiable through the UI.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "editable",
          "description": "<p>Set to false to prevent user from editing the field. For TextFields it is basically the same as setting\n<a href=\"#Core/widget/Field#config-readOnly\">readOnly</a>, but for PickerFields there is a distinction where it allows you to pick a value\nbut not to type one in the field.</p>\n<p>PickerFields such as <code>Combo</code> and <code>DateField</code> can be <code>editable : false</code>, but still\nmodifiable through the UI.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "triggers",
          "description": "<p>The triggers to add either before or after the input field. Each property name is the reference by which\nan instantiated Trigger Widget may be retrieved from the live <code><a href=\"#Core/widget/Field#property-triggers\">triggers</a></code> property.</p>\n<p>Each trigger may have the following properties:</p>\n<ul>\n<li><code>cls</code> The CSS class to apply.</li>\n<li><code>handler</code> A method in the field to call upon click</li>\n<li><code>align</code> <code>'start'</code> or <code>'end'</code> which end of the field the trigger should go.</li>\n<li><code>weight</code> (Optional) Higher weighted triggers gravitate towards the input field.</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code>const textField = new TextField({\n  triggers : {\n      check : {\n          cls : 'b-fa b-fa-check',\n          handler() {\n              ...\n          }\n      },\n      ...\n  }\n})\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "highlightExternalChange",
          "description": "<p>Specify <code>false</code> to prevent field from being highlighted when on external value changes</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "autoSelect",
          "description": "<p>Specify <code>true</code> to auto select field contents on focus</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "autoComplete",
          "description": "<p>Sets the native <code>autocomplete</code> property of the underlying input element. For more information, please refer to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\">MDN</a></p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "off",
          "category": "Input element"
        },
        {
          "name": "spellCheck",
          "description": "<p>Sets the native <code>spellcheck</code> property of the underlying input element. For more information, please refer to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck\">MDN</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "validateOnInput",
          "description": "<p>Set to <code>false</code> to not highlight a field as invalid while typing, to instead show it on ENTER key press\nor similar.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "inputAttributes",
          "description": "<p>Sets custom attributes of the underlying input element. For more information, please refer to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\">MDN</a></p>",
          "type": "Object",
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "inputType",
          "description": "<p>Sets the <code>type</code> attribute of the underlying input element (password, hidden, date, color, etc).</p>",
          "type": "String",
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "inputAlign",
          "description": "<p>Text alignment for the input field.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "container",
          "description": "<p>The configuration for additional items associated to this field. This is typically used to add contextual\nfields related to a <a href=\"#Core/widget/Checkbox\">checkbox</a> or <a href=\"#Core/widget/Radio\">radio button</a>. See\nthese classes for examples of nested fields.</p>\n<p>This config can be provided as an array of widget config objects, an object with named widgets (see\n<a href=\"#Core/widget/FieldContainer#config-namedItems\">namedItems</a>, or a config object for the whole\n<a href=\"#Core/widget/FieldContainer\">field container</a>.</p>\n<p>To determine if the object is a <code>namedItems</code> object or a <a href=\"#Core/widget/FieldContainer\">field container</a>\nconfig, the object is checked for either a <code>type</code> or an <code>items</code> property. If it has either of these\nproperties, it is a field container config object. Configuring the container is useful for applying\n<a href=\"#Core/widget/FieldContainer#config-cls\">classes</a> or <a href=\"#Core/widget/FieldContainer#config-style\">styles</a>\nto the container as a whole.</p>\n<p>For example, to add named items:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> new Checkbox({\n     text : 'Separate shipping address',\n     container : {\n         address1 : {\n             type : 'textfield'\n         },\n         address2 : {\n             type : 'textfield'\n         }\n     }\n });\n</code></pre>\n<p>To style the container as well, move the items to the <code>items</code> property and add <code>cls</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> new Checkbox({\n     text : 'Separate shipping address',\n     container : {\n         cls   : 'address-form',\n         items : {\n             address1 : {\n                 type : 'textfield'\n             },\n             address2 : {\n                 type : 'textfield'\n             }\n         }\n     }\n });\n</code></pre>",
          "type": "Core.widget.FieldContainer",
          "scope": "inner",
          "category": "Container"
        },
        {
          "name": "containerDefaults",
          "access": "internal",
          "description": "<p>The default configuration for the <a href=\"#Core/widget/Field#config-container\">container</a>.</p>",
          "type": "Core.widget.FieldContainer",
          "scope": "inner",
          "category": "Container"
        },
        {
          "name": "containValues",
          "description": "<p>The config controls how the value of nested items are handled when a parent container gets or sets its\n<a href=\"#Core/widget/Container#property-values\">values</a>.</p>\n<p>The valid values for this config are:</p>\n<ul>\n<li><code>null</code> (the default) will include the values of this field's items if this field stores its own value.</li>\n<li><code>true</code> to always include the values of this field's items.</li>\n<li><code>false</code> to never include the values of this field's items.</li>\n<li><code>'nested'</code> to include the values of this field's items as a nested object under the field's <code>name</code>.\nThis field's <code>value</code> is stored as the <code>'value'</code> property of that object.</li>\n<li>Any other string is treated as the name of a property on this field. When truthy, the values of this\nfield's items will be included.</li>\n<li>A function can be supplied that must return a value given this field as its sole argument. If that\nvalue is truthy, this field's items will be included.</li>\n</ul>",
          "type": [
            "Boolean",
            "String",
            "function"
          ],
          "scope": "inner",
          "category": "Container"
        },
        {
          "name": "inline",
          "description": "<p>Set this config to <code>true</code> to always display items horizontally along with this field. This assigns an\n<a href=\"#Core/widget/layout/Box\">hbox</a> as the <a href=\"#Core/widget/Container#config-layout\">layout</a> to the\n<a href=\"#Core/widget/Field#config-container\">container</a>.</p>\n<p>Alternatively, set this config to <code>false</code> to wrap this field's items below. This assigns a\n<a href=\"#Core/widget/layout/VBox\">VBox</a> as the <a href=\"#Core/widget/Container#config-layout\">layout</a> to the\n<a href=\"#Core/widget/Field#config-container\">container</a>.</p>\n<p>This config defaults to <code>true</code> if there is exactly one item, and <code>false</code> otherwise.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Container"
        }
      ],
      "properties": [
        {
          "name": "value",
          "description": "<p>Gets or sets the value. The returned type will depend upon the Field subclass.</p>\n<p><code>TextField</code> returns a <code>String</code>.</p>\n<p><code>NumberField</code> returns a <code>Number</code>.</p>\n<p><code>DateField</code> and <code>TimeField</code> return a <code>Date</code> object, and <code>null</code> if the field is empty.</p>\n<p><code>Combo</code> will return a <code>String</code> if configured with <code>items</code> as a simple string array.\nOtherwise it will return the <a href=\"#Core/widget/Combo#config-valueField\">valueField</a> value from the\nselected record, or <code>null</code> if no selection has been made.</p>",
          "type": "*",
          "scope": "inner"
        },
        {
          "name": "triggers",
          "description": "<p>The trigger Widgets as specified by the <a href=\"#Core/widget/Field#config-triggers\">triggers</a> configuration and the\n<a href=\"#Core/widget/Field#config-clearable\">clearable</a> configuration. Each is a <a href=\"#Core/widget/Widget\">Widget</a> instance which may\nbe hidden, shown and observed and styled just like any other widget.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "attributes",
          "access": "private",
          "description": "<p>A list of property names to be set in the underlying input element from properties\nby the same name in this Field object if the value is not <code>== null</code>.</p>",
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "errorTip",
          "description": "<p>A singleton error tooltip which activates on hover of invalid fields.\nbefore show, it gets a reference to the field and interrogates its\nactive error list to display as the tip content.</p>",
          "type": "Core.widget.Tooltip",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "errorTip",
          "description": "<p>A singleton error tooltip which activates on hover of invalid fields.\nbefore show, it gets a reference to the field and interrogates its\nactive error list to display as the tip content.</p>\n<p>Please note: Not applicable when using widgets inside a shadow root</p>",
          "type": "Core.widget.Tooltip",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "isValid",
          "description": "<p>Returns true if the field value is valid</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isEmpty",
          "description": "<p>Returns <code>true</code> if this field is empty. That is, if it would violate the <a href=\"#Core/widget/Field#config-required\">required</a>\nsetting.</p>\n<p>This may have different definitions in subclasses from simple text fields.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isEmptyInput",
          "description": "<p>Returns true if the field's input is empty</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "validity",
          "access": "private",
          "description": "<p>Returns the DOM <code>ValidityState</code> for this widget's input element, or <code>null</code> if there\nisn't one.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "ValidityState"
                ]
              }
            }
          ]
        },
        {
          "name": "inputValue",
          "access": "internal",
          "description": "<p>A String representation of the value of this field for <a href=\"#Core/widget/Field#function-syncInputFieldValue\">syncInputFieldValue</a> to use\nas the input element's value.</p>\n<p>Subclasses may override this to create string representations.</p>\n<p>For example, <a href=\"#Core/widget/DateField\">DateField</a>'s implementation will format the field date\nvalue according to its configured <a href=\"#Core/widget/DateField#config-format\">format</a>. And <a href=\"#Core/widget/Combo\">Combo</a>'s\nimplementation will return the <a href=\"#Core/widget/Combo#config-displayField\">displayField</a> of the selected record.</p>",
          "scope": "instance",
          "readonly": true
        }
      ],
      "events": [
        {
          "name": "input",
          "description": "<p>Fired when the user types into this field.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Field",
              "description": "<p>This field.</p>"
            },
            {
              "name": "value",
              "type": "String",
              "description": "<p>This field's value</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The triggering DOM event.</p>"
            }
          ]
        },
        {
          "name": "change",
          "description": "<p>Fired when this field's value changes.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "String",
              "description": "<p>This field's value</p>"
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "<p>This field's previous value</p>"
            },
            {
              "name": "valid",
              "type": "Boolean",
              "description": "<p>True if this field is in a valid state.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The triggering DOM event if any.</p>",
              "optional": true
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p>Triggered by user taking an action (<code>true</code>) or by setting a value (<code>false</code>)</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Field",
              "description": "<p>This Field</p>"
            }
          ]
        },
        {
          "name": "action",
          "description": "<p>User performed default action (typed into this field).</p>",
          "parameters": [
            {
              "name": "value",
              "type": "String",
              "description": "<p>This field's value</p>"
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "<p>This field's previous value</p>"
            },
            {
              "name": "valid",
              "type": "Boolean",
              "description": "<p>True if this field is in a valid state.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The triggering DOM event if any.</p>",
              "optional": true
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p>Triggered by user taking an action (<code>true</code>) or by setting a value (<code>false</code>)</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Field",
              "description": "<p>This Field</p>"
            }
          ]
        },
        {
          "name": "clear",
          "description": "<p>Fired when this field is <a href=\"#Core/widget/Field#function-clear\">cleared</a>.</p>\n<p>This will be triggered when a user clicks this field's clear <a href=\"#Core/widget/Field#property-triggers\">trigger</a></p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Field",
              "description": "<p>This Field</p>"
            }
          ]
        },
        {
          "name": "trigger",
          "description": "<p>User clicked one of this field's <a href=\"#Core/widget/Field#property-triggers\">triggers</a></p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Field",
              "description": "<p>This field</p>"
            },
            {
              "name": "trigger",
              "type": "Core.widget.Widget",
              "description": "<p>The trigger activated by click or touch tap.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "onEditComplete",
          "access": "internal",
          "description": "<p>Template function which may be implemented by subclasses to synchronize\ninput state and validity state upon completion of the edit.</p>",
          "scope": "instance"
        },
        {
          "name": "getAfterValue",
          "access": "private",
          "description": "<p>Returns the input value for this field's input element that will be present if\nthe event carrying the given text is allowed to proceed.</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "select",
          "description": "<p>Selects the field contents. Optionally may be passed a start and end.</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Number",
              "description": "<p>The start index from which to select the input.</p>",
              "optional": true
            },
            {
              "name": "end",
              "type": "Number",
              "description": "<p>The index at which to end the selection of the input.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hasChanged",
          "access": "private",
          "description": "<p>Compares this field's value with its previous value. May be overridden in subclasses\nwhich have more complex value types. See, for example, <a href=\"#Core/widget/DurationField\">DurationField</a>.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "*"
            },
            {
              "name": "newValue",
              "type": "*"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "syncInputFieldValue",
          "access": "private",
          "description": "<p>Called by the base Field class's <code>set value</code> to sync the state of the UI with the field's value.</p>\n<p>Relies upon the class implementation of <code>get inputValue</code> to return a string representation of\nthe value for user consumption and editing.</p>",
          "scope": "instance"
        },
        {
          "name": "internalOnChange",
          "access": "private",
          "description": "<p>Trigger event when fields input changes</p>",
          "scope": "instance",
          "fires": [
            "event:change"
          ]
        },
        {
          "name": "internalOnInput",
          "access": "private",
          "description": "<p>Trigger event when user inputs into field</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:input"
          ]
        },
        {
          "name": "clear",
          "description": "<p>Clears the value of this Field, and triggers the <a href=\"#Core/widget/Field#event-clear\">clear</a> event.</p>",
          "scope": "instance"
        },
        {
          "name": "onDisabled",
          "access": "private",
          "description": "<p>Called when disabled state is changed.\nUsed to add or remove 'b-invalid' class for the invalid field based on current disabled state.</p>",
          "scope": "instance"
        },
        {
          "name": "setError",
          "description": "<p>Adds an error message to the list of errors on this field.\nBy default the field's valid/invalid state is updated; pass\n<code>false</code> as the second parameter to disable that if multiple\nchanges are being made to the error state.</p>",
          "parameters": [
            {
              "name": "error",
              "type": "String",
              "description": "<p>A locale string, or message to use as an error message.</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to skip updating the field's valid/invalid state.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clearError",
          "description": "<p>Removes an error message from the list of errors on this field.\nBy default the field's valid/invalid state is updated; pass\n<code>false</code> as the second parameter to disable that if multiple\nchanges are being made to the error state.</p>",
          "parameters": [
            {
              "name": "error",
              "type": "String",
              "description": "<p>A locale string, or message to remove. If not passed, all errors are cleared.</p>",
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to skip updating the field's valid/invalid state.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getErrors",
          "description": "<p>Returns an array of error messages as set by <a href=\"#Core/widget/Field#function-setError\">setError</a>, or\n<code>undefined</code> if there are currently no errors.</p>",
          "scope": "instance",
          "returns": {
            "type": "Array.<String>",
            "description": "<p>The errors for this field, or <code>undefined</code> if there are no errors.</p>"
          }
        }
      ]
    },
    {
      "name": "FieldContainer",
      "modulePath": "Core/widget/FieldContainer",
      "classDescription": "<p>This widget is created by <a href=\"#Core/widget/Field#config-container\">container</a> and is not created directly.</p>",
      "extends": [
        "Core/widget/Container"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "FieldContainer.js",
      "path": "/Calendar/lib/Core/widget",
      "configs": [
        {
          "name": "animation",
          "access": "internal",
          "description": "<p>An animation config object to use when expanding or collapsing the field's\n<a href=\"#Core/widget/Field#config-container\">container</a>.</p>",
          "type": "Object",
          "scope": "inner",
          "properties": [
            {
              "name": "animation.duration",
              "type": "Number",
              "description": "<p>The duration of the animation (in milliseconds).</p>",
              "default": 200,
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "collapsed",
          "description": "<p>Controls whether the field is collapsed (that is, the field's <a href=\"#Core/widget/Field#config-container\">container</a>\nis hidden).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "collapser",
          "access": "private",
          "description": "<p>The animator performing the field's currently running expand or collapse animation.</p>",
          "type": "Core.util.Animator",
          "scope": "inner"
        },
        {
          "name": "syncableConfigs",
          "access": "internal",
          "description": "<p>A mapping object for config properties of the items in the <a href=\"#Core/widget/Field#config-container\">container</a>.\nThe keys are the config names and the values are functions that compute the config value when passed\nthe field instance.</p>\n<p>For example, this is the default:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>     syncableConfigs : {\n         disabled : field => field.disabled\n     }\n</code></pre>\n<p>This indicates that the config property named with the key ('disabled') should be assigned to the result\nof the function assigned to that key (<code>field =&gt; field.disabled</code>). In other words, when the field is\n<a href=\"#Core/widget/Field#config-disabled\">disabled</a>, all of the field's items should also be disabled.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "syncConfigTriggers",
          "access": "internal",
          "description": "<p>This object holds truthy values for each config property that, when modified, should trigger a sync of\nthis field's items as defined in <a href=\"#Core/widget/FieldContainer#config-syncableConfigs\">syncableConfigs</a>.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "collapsing",
          "description": "<p>This property is <code>true</code> if the field container is currently collapsing.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "collapsingExpanding",
          "access": "internal",
          "description": "<p>This property is <code>true</code> if the field container is currently either collapsing or expanding.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "expanding",
          "description": "<p>This property is <code>true</code> if the field container is currently expanding.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "FieldSet",
      "modulePath": "Core/widget/FieldSet",
      "classDescription": "<p>The <code>FieldSet</code> widget wraps an <code>&lt;fieldset&gt;</code> element. A fieldset is a specially styled\n<a href=\"#Core/widget/Panel\">Panel</a> intended to hold form fields.</p>",
      "extends": [
        "Core/widget/Panel"
      ],
      "mixes": [
        "Core/widget/mixin/Labelable"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "FieldSet.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "fieldset",
      "configs": [
        {
          "name": "inline",
          "description": "<p>Setting this config to <code>true</code> assigns a horizontal box layout (<code>flex-flow: row</code>) to the items in this\ncontainer, while <code>false</code> assigns a vertical box layout (<code>flex-flow: column</code>).</p>\n<p>By default, this value is automatically determined based on the <a href=\"#Core/widget/FieldSet#config-label\">label</a> and\n<a href=\"#Core/widget/FieldSet#config-labelPosition\">labelPosition</a> configs.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "FileField",
      "modulePath": "Core/widget/FileField",
      "classDescription": "<p>FileField widget. Wraps native &lt;input type=&quot;file&quot;&gt;.</p>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/FileField.js\"></div></p>\n<p>There is a nicer styled wrapper for this field, see <a href=\"#Core/widget/FilePicker\">FilePicker</a></p>",
      "extends": [
        "Core/widget/Field"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "FileField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "filefield",
      "configs": [
        {
          "name": "multiple",
          "description": "<p>Set to true to allow picking multiple files. Note that when set to a truthy value,\nthe field is set to accept multiple files, but the value returned will be\nan empty string since this is what is rendered into the HTML.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "accept",
          "description": "<p>Comma-separated list of file extensions or MIME type to to accept. E.g.\n&quot;.jpg,.png,.doc&quot; or &quot;image/*&quot;. Null by default, allowing all files.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "files",
          "description": "<p>Returns list of selected files</p>",
          "type": "FileList",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "pickFile",
          "access": "internal",
          "description": "<p>Opens browser file picker</p>",
          "scope": "instance"
        },
        {
          "name": "clear",
          "description": "<p>Clears field value</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "FilePicker",
      "modulePath": "Core/widget/FilePicker",
      "classDescription": "<p>File input field wrapped into <a href=\"#Core/widget/Button\">button</a>. Clicking button opens browser file picker window.\nWhen files are chosen, badge appears showing amount of files. Hovering the button shows tip with file names.</p>\n<p>By default only single file allowed.</p>",
      "extends": [
        "Core/widget/Container"
      ],
      "examples": [
        "let fileField = new FilePicker({\n  fileFieldConfig : {\n     multiple : true,\n     accept   : \"image/*\"\n  },\n  buttonConfig : {\n      text : 'Pick file...'\n  }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "FilePicker.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "filepicker",
      "externalExamples": [
        "Core/widget/FilePicker.js"
      ],
      "configs": [
        {
          "name": "defaultBindProperty",
          "description": "<p>The name of the property to set when a single value is to be applied to this FilePicker. Such as when used\nin a grid WidgetColumn, this is the property to which the column's <code>field</code> is applied.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "value",
          "category": "Misc"
        },
        {
          "name": "buttonConfig",
          "description": "<p>Wrapper button config object. See <a href=\"#Core/widget/Button\">Button</a> for list of available configs.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "fileFieldConfig",
          "description": "<p>Underlying field config object. See <a href=\"#Core/widget/FileField\">FileField</a> for list of available configs.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "<p>Fires after user closes file picker dialog.</p>",
          "parameters": [
            {
              "name": "files",
              "type": "FileList",
              "description": "<p>List of picked files</p>"
            }
          ]
        },
        {
          "name": "clear",
          "description": "<p>Fires when field is cleared with <a href=\"#Core/widget/FilePicker#function-clear\">clear</a> method</p>"
        }
      ],
      "properties": [
        {
          "name": "files",
          "description": "<p>List of selected files</p>",
          "type": "FileList",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "clear",
          "description": "<p>Clears field</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "FilterField",
      "modulePath": "Core/widget/FilterField",
      "classDescription": "<p>A simple text field for filtering a store.</p>\n<p>Allows filtering by <a href=\"#Core/widget/FilterField#config-field\">field</a>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const filterField = new FilterField({\n   store : eventStore,\n   field : 'name'\n});\n</code></pre>\n<p>Or by using a <a href=\"#Core/widget/FilterField#config-filterFunction\">filter function</a> for greater control/custom logic:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const filterField = new FilterField({\n   store          : eventStore,\n   filterFunction : (record, value) => record.name.includes(value)\n});\n</code></pre>",
      "extends": [
        "Core/widget/TextField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "FilterField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "filterfield",
      "configs": [
        {
          "name": "field",
          "description": "<p>The model field name to filter by. Can optionally be replaced by <a href=\"#Core/widget/FilterField#config-filterFunction\">filterFunction</a></p>",
          "type": "String",
          "scope": "inner",
          "category": "Filtering"
        },
        {
          "name": "store",
          "description": "<p>The store to filter.</p>",
          "type": "Core.data.Store",
          "scope": "inner",
          "category": "Filtering"
        },
        {
          "name": "filterFunction",
          "description": "<p>Optional filter function to be called with record and value as parameters for store filtering.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    type           : 'filterfield',\n    store          : myStore,\n    filterFunction : (record, value)  => {\n       return record.text.includes(value);\n    }\n}\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Boolean",
            "description": "<p>Return true if record matches comparison requirements</p>"
          },
          "category": "Filtering",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record for comparison</p>"
            },
            {
              "name": "value",
              "type": "String",
              "description": "<p>Value to compare with</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "List",
      "modulePath": "Core/widget/List",
      "classDescription": "<p>Displays a list of items which the user can navigate using the keyboard and select using either pointer gestures or the keyboard.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "List.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "list",
      "externalExamples": [
        "Core/widget/List.js"
      ],
      "configs": [
        {
          "name": "items",
          "description": "<p>An array of Objects which are converted into records and used to create this\nList's <a href=\"#Core/widget/List#config-store\">store</a></p>",
          "type": "Array.<Object>",
          "scope": "inner"
        },
        {
          "name": "displayField",
          "description": "<p>The model field to render into each list item</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "text"
        },
        {
          "name": "store",
          "description": "<p>A <a href=\"#Core/data/Store\">Store</a> which provides the records which map to List items. Each record is passed through the\n<a href=\"#Core/widget/List#config-itemTpl\">itemTpl</a> to produce the DOM structure of the List. May be generated from an array of <a href=\"#Core/widget/List#config-items\">items</a>.</p>",
          "type": [
            "Object",
            "Core.data.Store"
          ],
          "scope": "inner"
        },
        {
          "name": "multiSelect",
          "description": "<p>Configure as <code>true</code> to allow multi select and add checkboxes to the items</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "toggleAllIfCtrlPressed",
          "description": "<p>Select/deselect all if <code>CMD</code>/<code>CTRL</code> is pressed when clicking</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "selectAllItem",
          "description": "<p>Set to <code>true</code> to add a &quot;Select all&quot; item to the list to select/unselect all items at once.\nOnly applies when <a href=\"#Core/widget/List#config-multiSelect\">multiSelect</a> mode is enabled.</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "itemTpl",
          "description": "<p>Template function which, when passed a record, returns the textual HTML for that item. Defaults to a\nfunction returning the value of the record´s <a href=\"#Core/widget/List#config-displayField\">displayField</a></p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record</p>"
            }
          ]
        },
        {
          "name": "groupHeaderTpl",
          "description": "<p>Template function which is passed a group record and the uppercased group field name. The text returned\nwill be rendered as the group header.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record</p>"
            },
            {
              "name": "groupName",
              "type": "String",
              "description": "<p>The current group name</p>"
            }
          ]
        },
        {
          "name": "allowGroupSelect",
          "description": "<p>Configure as <code>true</code> to allow selecting groups (all the group child records will be toggled). Only\napplicable when the store is grouped.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "selected",
          "description": "<p>A <a href=\"#Core/util/Collection\">Collection</a>, or Collection config object\nto use to contain this List's selected records.</p>\n<p>Or, an array encapsulating the initial selection which this List is to have upon\nStore load. This may be an array of <code>id</code>s , or an array of objects with an <code>id</code> property:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new List({\n    // initially select record IDs 1 and 5 when store loads\n    selected : [1, 5]\n});\n</code></pre>",
          "type": [
            "Array.<Object>",
            "Array.<Number>",
            "Array.<String>",
            "Core.util.Collection",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "activateOnMouseover",
          "description": "<p>Configure as <code>true</code> to activate items on mouseover. This is used by the Combo\nfield when using a List as its dropdown.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "item",
          "description": "<p>User activated an item in the list either by pointer or keyboard.\nThe active record, list item index, and the triggering event are passed.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Object",
              "description": "<p>Activated record</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>List item index</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Triggering event</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getRecordFromElement",
          "description": "<p>Searches up from the specified element for a list item and returns the associated record.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element somewhere within a list item element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Record for the item</p>"
          }
        },
        {
          "name": "restoreActiveItem",
          "access": "internal",
          "description": "<p>Sets the passed record as the current focused record for keyboard navigation and selection purposes.</p>",
          "parameters": [
            {
              "name": "activeItem",
              "type": "Core.data.Model",
              "description": "<p>The item to highlight as the active (&quot;focused&quot;) item.</p>"
            },
            {
              "name": "block",
              "type": [
                "String",
                "Boolean"
              ],
              "description": "<p>The block scroll specification to scroll\nthe item into view. Defaults to <code>'nearest'</code> which means a minimal scroll, only if\nthe item is actually out of view. Passing <code>true</code> is for when the List is aligned\nto a picker and the selected item should be scrolled to be close to the picker,\nhowever that is aligned. See <code>Combo.showPicker</code> for usage.</p>",
              "default": "'nearest'",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onMouseOver",
          "access": "private",
          "description": "<p>Focuses list items on hover.</p>",
          "scope": "instance"
        },
        {
          "name": "onClick",
          "access": "private",
          "description": "<p>Selects list items on click.</p>",
          "scope": "instance"
        },
        {
          "name": "onInternalKeyDown",
          "access": "private",
          "description": "<p>Key events which are not navigation are delegated up to here by the Navigator</p>",
          "scope": "instance"
        },
        {
          "name": "onSelectionChange",
          "access": "private",
          "description": "<p>Handles items being added or removed from the selected Collection</p>",
          "parameters": [
            {
              "name": "changeEvent",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "selectAll",
          "description": "<p>Selects all items in this list.</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectAll",
          "description": "<p>Deselects all selected items</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "select",
          "description": "<p>Selects the passed item(s).</p>\n<p>An item to select may be the <code>id</code> of a record in this List's <a href=\"#Core/widget/List#config-store\">store</a>, or\nit may be an object with an <code>id</code> <strong>property</strong> which is the <code>id</code> of a record in this List's\n<a href=\"#Core/widget/List#config-store\">store</a> (For example one of the records).</p>",
          "parameters": [
            {
              "name": "toSelect",
              "type": [
                "String",
                "Array.<String>",
                "Number",
                "Array.<Number>",
                "Object",
                "Array.<Object>"
              ]
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselect",
          "description": "<p>Deselects the passed item(s).</p>\n<p>An item to deselect may be the <code>id</code> of a record in this List's <a href=\"#Core/widget/List#config-store\">store</a>, or\nit may be an object with an <code>id</code> <strong>property</strong> which is the <code>id</code> of a record in this List's\n<a href=\"#Core/widget/List#config-store\">store</a> (For example one of the records).</p>",
          "parameters": [
            {
              "name": "toSelect",
              "type": [
                "String",
                "Array.<String>",
                "Number",
                "Array.<Number>",
                "Object",
                "Array.<Object>"
              ]
            }
          ],
          "scope": "instance",
          "category": "Selection"
        }
      ],
      "properties": [
        {
          "name": "items",
          "description": "<p>May be <em>set</em> as an array of Objects which are converted into records and used to create this\nList's <a href=\"#Core/widget/List#config-store\">store</a></p>",
          "type": "Array.<Object>",
          "scope": "inner"
        },
        {
          "name": "selected",
          "description": "<p>Get the collection of selected records</p>",
          "type": "Core.util.Collection",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "store",
          "description": "<p>Get the backing store, a <a href=\"#Core/data/Store\">Store</a> holding the records used to generate list items</p>",
          "type": "Core.data.Store",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "Mask",
      "modulePath": "Core/widget/Mask",
      "classDescription": "<p>Masks a target element (document.body if none is specified). Call static methods for ease of use or make instance\nfor reusability.</p>",
      "examples": [
        "Mask.mask('hello');\nMask.unmask();",
        "// Using progress by calling static method\nlet mask = Mask.mask({\n  text:'The task is in progress',\n  progress: 0,\n  maxProgress: 100\n}, document.body);\nlet timer = setInterval(()=>{\n  mask.progress += 5;\n  if(mask.progress >= mask.maxProgress) {\n    Mask.unmask();\n    clearInterval(timer)\n  }\n},100)",
        "// Using progress to mask a Bryntum component\nscheduler.mask({\n text:'Loading in progress',\n  progress: 0,\n  maxProgress: 100\n})\nlet timer = setInterval(()=>{\n  scheduler.masked.progress += 5;\n  if(scheduler.masked.progress >= scheduler.masked.maxProgress) {\n    scheduler.unmask();\n    clearInterval(timer)\n  }\n},100)"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Mask.js",
      "path": "/Calendar/lib/Core/widget",
      "externalExamples": [
        "Core/widget/Mask.js"
      ],
      "configs": [
        {
          "name": "autoClose",
          "access": "private",
          "description": "<p>Set this config to trigger an automatic close after the desired delay:</p>\n<pre class=\"prettyprint source\"><code> mask.autoClose = 2000;\n</code></pre>\n<p>If the mask has an <code>owner</code>, its <code>onMaskAutoClosing</code> method is called when the close starts and its\n<code>onMaskAutoClose</code> method is called when the close finishes.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "cover",
          "access": "private",
          "description": "<p>The portion of the <a href=\"#Core/widget/Mask#config-target\">target</a> element to be covered by this mask. By default, the mask fully\ncovers the <code>target</code>. In some cases, however, it may be desired to only cover the <code>'body'</code> (for example,\nin a grid).</p>\n<p>This config is set in conjunction with <code>owner</code> which implements the method <code>syncMaskCover</code>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "icon",
          "description": "<p>The icon to show next to the text. Defaults to showing a spinner</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-icon b-icon-spinner"
        },
        {
          "name": "mode",
          "description": "<p>Mode: bright, bright-blur, dark or dark-blur</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "dark"
        },
        {
          "name": "owner",
          "description": "<p>The owning widget of this mask. This is required if <code>target</code> is a string.</p>",
          "type": [
            "Object",
            "Core.widget.Widget"
          ],
          "scope": "inner"
        },
        {
          "name": "target",
          "description": "<p>The element to be masked. If this config is a string, that string is the name of the property of the\n<code>owner</code> that holds the <code>HTMLElement</code> that is the actual target of the mask.</p>\n<p>NOTE: In prior releases, this used to be specified as the <code>element</code> config, but that is now, as with\n<code>Widget</code>, the primary element of the mask.</p>",
          "type": [
            "String",
            "HTMLElement"
          ],
          "scope": "inner"
        },
        {
          "name": "text",
          "description": "<p>The text (or HTML) to show in mask</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "showDelay",
          "description": "<p>The number of milliseconds to delay before making the mask visible. If set, the mask will have an\ninitial <code>opacity</code> of 0 but will function in all other ways as a normal mask. Setting this delay can\nreduce flicker in cases where load operations are typically short (for example, a second or less).</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "maxProgress",
          "description": "<p>The maximum value of the progress indicator</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "progress",
          "description": "<p>Number expressing the progress</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "mask",
          "description": "<p>Shows a mask with the specified message</p>",
          "parameters": [
            {
              "name": "text",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Message</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The element to mask</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Core.widget.Mask"
          }
        },
        {
          "name": "unmask",
          "description": "<p>Unmask</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to unmask</p>"
            }
          ],
          "scope": "static",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the mask is gone</p>"
          }
        },
        {
          "name": "show",
          "description": "<p>Show mask</p>",
          "scope": "instance"
        },
        {
          "name": "hide",
          "description": "<p>Hide mask</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the mask is hidden, or immediately if already hidden</p>"
          }
        },
        {
          "name": "close",
          "description": "<p>Close mask (removes it)</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the mask is closed</p>"
          }
        }
      ]
    },
    {
      "name": "Menu",
      "modulePath": "Core/widget/Menu",
      "classDescription": "<p>Menu widget, displays a list of items which the user can select from using mouse or keyboard. Can have submenus.</p>",
      "extends": [
        "Core/widget/Popup"
      ],
      "examples": [
        "let menu = new Menu({\n    forElement : btn.element,\n    items      : [\n        {\n            icon : 'b-icon b-icon-add',\n            text : 'Add'\n        },\n        {\n            icon : 'b-icon b-icon-trash',\n            text : 'Remove'\n        },\n        {\n            icon     : 'b-icon b-icon-lock',\n            disabled : true,\n            text     : 'I am disabled'\n        },\n        {\n            text : 'Sub menu',\n            menu : [{\n                icon : 'b-icon b-fa-play',\n                text : 'Play'\n            }]\n        }\n    ],\n    // Method is called for all ancestor levels\n    onItem({ item }) {\n        Toast.show('You clicked ' + item.text);\n    }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Menu.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "menu",
      "externalExamples": [
        "Core/widget/Menu.js"
      ],
      "configs": [
        {
          "name": "focusOnHover",
          "description": "<p>Specify false to prevent the menu from getting focus when hovering items</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "currentSubMenu",
          "description": "<p>Currently open sub menu, if any</p>",
          "type": "Core.widget.Menu",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "isSubMenu",
          "description": "<p>Returns true if this menu is a sub menu.\nTo find out which menu is the parent, check <a href=\"#Core/widget/Menu#property-parentMenu\">parentMenu</a>.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "selectedElement",
          "description": "<p>Get/set focused menu item.\nShows submenu if newly focused item has a menu and is not disabled.</p>",
          "type": "HTMLElement",
          "scope": "instance"
        },
        {
          "name": "parentMenu",
          "description": "<p>Gets the parent Menu if this Menu is a submenu, or <code>undefined</code>.</p>",
          "type": "Core.widget.Menu",
          "scope": "instance"
        },
        {
          "name": "rootMenu",
          "access": "private",
          "description": "<p>Gets this menus root menu, the very first menu shown in a sub menu hierarchy</p>",
          "type": "Core.widget.Menu",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "item",
          "description": "<p>A descendant menu item has been activated.</p>\n<p>Note that this event bubbles up through parents and can be\nlistened for on a top level <a href=\"#Core/widget/Menu\">Menu</a> for convenience.</p>",
          "parameters": [
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>The menu item which is being actioned.</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>Menu containing the menu item</p>"
            }
          ]
        },
        {
          "name": "toggle",
          "description": "<p>The checked state of a descendant menu item has changed.</p>\n<p>Note that this event bubbles up through parents and can be\nlistened for on a top level <a href=\"#Core/widget/Menu\">Menu</a> for convenience.</p>",
          "parameters": [
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>The menu item whose checked state changed.</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>Menu containing the menu item</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>The <em>new</em> checked state.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "onMouseClick",
          "access": "private",
          "description": "<p>Activates a menu item if user clicks on it</p>",
          "scope": "instance"
        },
        {
          "name": "onMouseOver",
          "access": "private",
          "description": "<p>Activates menu items on hover. On real mouse hover, not on a touchstart.</p>",
          "scope": "instance"
        },
        {
          "name": "onInternalKeyDown",
          "access": "private",
          "description": "<p>Keyboard navigation. Up/down, close with esc, activate with enter</p>",
          "scope": "instance"
        },
        {
          "name": "triggerElement",
          "access": "private",
          "description": "<p>Activate a menu item (from its element)</p>",
          "parameters": [
            {
              "name": "menuItemElement"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:item"
          ]
        },
        {
          "name": "openSubMenu",
          "access": "private",
          "description": "<p>Opens a submenu anchored to a menu item</p>",
          "parameters": [
            {
              "name": "element"
            },
            {
              "name": "item"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "MenuItem",
      "modulePath": "Core/widget/MenuItem",
      "classDescription": "<p>A widget representing a single menu item in a <a href=\"#Core/widget/Menu\">Menu</a>. May be configured with a\n<a href=\"#Core/widget/MenuItem#config-checked\">checked</a> state which creates a checkbox which may be toggled. Can also be\n<a href=\"#Core/widget/Widget#config-disabled\">disabled</a>, which affects item appearance and blocks interactions.</p>\n<p>Fires events when activated which bubble up through the parent hierarchy and may be listened for on an ancestor. See\n<a href=\"#Core/widget/Menu\">Menu</a> for more details on usage.</p>\n<p>To add a border below a menuitem, you can set the item´s <a href=\"#Core/widget/MenuItem#config-cls\">cls</a> to <code>b-separator</code>.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "MenuItem.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "menuitem",
      "configs": [
        {
          "name": "checked",
          "description": "<p>If configured with a <code>Boolean</code> value, a checkbox is displayed\nas the start icon, and the <a href=\"#Core/widget/MenuItem#event-toggle\">toggle</a> event is fired\nwhen the checked state changes.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "toggleGroup",
          "description": "<p>Indicates that this menu item is part of a group where only one can be checked. Assigning a value\nalso sets <code>toggleable</code> to <code>true</code>.</p>\n<pre class=\"prettyprint source\"><code>const yesButton = new Button({\n   toggleGroup : 'yesno',\n   text        : 'Yes'\n});\n\nconst noButton = new Button({\n   toggleGroup : 'yesno',\n   text        : 'No'\n});\n</code></pre>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "menu",
          "description": "<p>A submenu configuration object, or an array of MenuItem configuration\nobjects from which to create a submenu.</p>\n<p>Configuration object example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Menu({\n    // Menu items\n    items : {\n        move : {\n            text : 'Main item',\n            menu : {\n                // Submenu items\n                firstItem : {\n                    text : 'Sub-item 1',\n                    onItem({ eventRecord }) {}\n                },\n                secondItem : {\n                    text : 'Sub-item 2',\n                    onItem({ eventRecord }) {}\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Array of items example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Menu({\n    // Menu items\n    items : {\n        move : {\n            text : 'Main item',\n            // Submenu items\n            menu : [\n                {\n                    text : 'Sub-item 1',\n                    onItem({ eventRecord }) {}\n                },\n                {\n                    text : 'Sub-item 2',\n                    onItem({ eventRecord }) {}\n                }\n            ]\n        }\n    }\n});\n</code></pre>\n<p>Note that this does not have to be a Menu. The <code>type</code> config can be used to specify any widget as the submenu.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Menu({\n    // Menu items\n    items : {\n        move : {\n            text : 'Main item',\n            // Submenu items\n            menu : [\n                {\n                    type  : 'textfield',\n                    label : 'Type here'\n                },\n                {\n                    type : 'button',\n                    text : 'Confirm'\n                }\n            ]\n        }\n    }\n});\n</code></pre>",
          "type": [
            "Object",
            "Array.<Object>"
          ],
          "scope": "inner"
        },
        {
          "name": "icon",
          "description": "<p>Item icon class.</p>\n<p>All <a href=\"https://fontawesome.com/cheatsheet\">Font Awesome</a> icons may also be specified as <code>'b-fa-' + iconName</code>.</p>\n<p>Otherwise this is a developer-defined CSS class string which results in the desired icon.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "text",
          "description": "<p>The text to be displayed in the item</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "closeParent",
          "description": "<p>By default, upon activate, non-checkbox menu items will collapse\nthe owning menu hierarchy.</p>\n<p>Configure this as <code>false</code> to cause the menu to persist after\nactivating an item</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "href",
          "description": "<p>If provided, turns the menu item into a link</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "target",
          "description": "<p>The <code>target</code> attribute for the <a href=\"#Core/widget/MenuItem#config-href\">href</a> config</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "menu",
          "description": "<p>Returns the instantiated menu widget as configured by <a href=\"#Core/widget/MenuItem#config-menu\">menu</a>.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "checked",
          "description": "<p>Get/sets the checked state of this <code>MenuItem</code> and fires the <a href=\"#Core/widget/MenuItem#event-toggle\">toggle</a>\nevent upon change.</p>\n<p>Note that this must be configured as a <code>Boolean</code> to enable the checkbox UI.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "doAction",
          "description": "<p>Actions this item. Fires the <a href=\"#Core/widget/MenuItem#event-item\">item</a> event, and if this\nif a <a href=\"#Core/widget/MenuItem#config-checked\">checked</a> item, toggles the checked state, firing\nthe <a href=\"#Core/widget/MenuItem#event-toggle\">toggle</a> event.</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "item",
          "description": "<p>This menu item has been activated.</p>\n<p>Note that this event bubbles up through parents and can be\nlistened for on a top level <a href=\"#Core/widget/Menu\">Menu</a> for convenience.</p>",
          "parameters": [
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>The menu item which is being actioned.</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>Menu containing the menu item</p>"
            }
          ]
        },
        {
          "name": "toggle",
          "description": "<p>The checked state of this menu item has changed.</p>\n<p>Note that this event bubbles up through parents and can be listened for on a top level\n<a href=\"#Core/widget/Menu\">Menu</a> for convenience.</p>",
          "parameters": [
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>The menu item whose checked state changed.</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>Menu containing the menu item</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>The <em>new</em> checked state.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "MessageDialog",
      "modulePath": "Core/widget/MessageDialog",
      "description": "<p>A singleton class which shows common dialogs, similar to the native browser APIs (though these methods do not block the UI thread):</p>\n<ul>\n<li><a href=\"#Core/widget/MessageDialog#function-confirm\">confirm</a> shows a confirmation dialog with Ok / Cancel buttons</li>\n<li><a href=\"#Core/widget/MessageDialog#function-alert\">alert</a> shows an dialog with a message</li>\n<li><a href=\"#Core/widget/MessageDialog#function-prompt\">prompt</a> shows a dialog with a text input field</li>\n</ul>",
      "extends": [
        "Core/widget/Popup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "MessageDialog.js",
      "path": "/Calendar/lib/Core/widget",
      "singleton": true,
      "externalExamples": [
        "Core/widget/MessageDialog.js"
      ],
      "properties": [
        {
          "name": "okButton",
          "description": "<p>The enum value for the OK button</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "cancelButton",
          "description": "<p>The enum value for the Cancel button</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "confirm",
          "description": "<p>Shows a confirm dialog with &quot;Ok&quot; and &quot;Cancel&quot; buttons. The returned promise resolves passing the button identifier\nof the button that was pressed (<a href=\"#Core/widget/MessageDialog#property-okButton\">okButton</a> or <a href=\"#Core/widget/MessageDialog#property-cancelButton\">cancelButton</a>).</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An options object for what to show.</p>"
            },
            {
              "name": "options.title",
              "type": "String",
              "description": "<p>The title to show in the dialog header.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.message",
              "type": "String",
              "description": "<p>The message to show in the dialog body.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.rootElement",
              "type": "String",
              "description": "<p>The root element of this widget, defaults to document.body. Use this\nif you use the MessageDialog inside a web component ShadowRoot</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.cancelButton",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A text or a config object to apply to the Cancel button.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.okButton",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A text or config object to apply to the OK button.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "inner",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the dialog is closed</p>"
          }
        },
        {
          "name": "alert",
          "description": "<p>Shows an alert popup with a message. The returned promise resolves when the button is clicked.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An options object for what to show.</p>"
            },
            {
              "name": "options.title",
              "type": "String",
              "description": "<p>The title to show in the dialog header.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.message",
              "type": "String",
              "description": "<p>The message to show in the dialog body.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.rootElement",
              "type": "String",
              "description": "<p>The root element of this widget, defaults to document.body. Use this\nif you use the MessageDialog inside a web component ShadowRoot</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.okButton",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A text or config object to apply to the OK button.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "inner",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the dialog is closed</p>"
          }
        },
        {
          "name": "prompt",
          "description": "<p>Shows a popup with a basic <a href=\"#Core/widget/TextField\">TextField</a> along with a message. The returned promise resolves when\nthe dialog is closed and yields an Object with a <code>button</code> (<a href=\"#Core/widget/MessageDialog#property-okButton\">okButton</a> or <a href=\"#Core/widget/MessageDialog#property-cancelButton\">cancelButton</a>)\nand a <code>text</code> property with the text the user provided</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An options object for what to show.</p>"
            },
            {
              "name": "options.title",
              "type": "String",
              "description": "<p>The title to show in the dialog header.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.message",
              "type": "String",
              "description": "<p>The message to show in the dialog body.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.rootElement",
              "type": "String",
              "description": "<p>The root element of this widget, defaults to document.body. Use this\nif you use the MessageDialog inside a web component ShadowRoot</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.textField",
              "type": "Object",
              "description": "<p>A config object to apply to the TextField.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.cancelButton",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A text or a config object to apply to the Cancel button.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.okButton",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A text or config object to apply to the OK button.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "inner",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the dialog is closed. The promise yields an Object with\na <code>button</code> (<a href=\"#Core/widget/MessageDialog#property-okButton\">okButton</a> or <a href=\"#Core/widget/MessageDialog#property-cancelButton\">cancelButton</a>) and a <code>text</code> property with the text the\nuser provided</p>"
          }
        }
      ]
    },
    {
      "name": "NumberField",
      "modulePath": "Core/widget/NumberField",
      "classDescription": "<p>Number field widget. Similar to native <code>&lt;input type=&quot;number&quot;&gt;</code>, but implemented as <code>&lt;input type=&quot;text&quot;&gt;</code> to support\nformatting.</p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.\nIt is used as the default editor for the <a href=\"#Grid/column/NumberColumn\">NumberColumn</a>,\n<a href=\"#Grid/column/PercentColumn\">PercentColumn</a>, <a href=\"#Grid/column/AggregateColumn\">AggregateColumn</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const number = new NumberField({\n    min   : 1,\n    max   : 5,\n    value : 3\n});\n</code></pre>",
      "extends": [
        "Core/widget/Field"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "NumberField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "numberfield",
      "externalExamples": [
        "Core/widget/NumberField.js"
      ],
      "configs": [
        {
          "name": "min",
          "description": "<p>Min value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "max",
          "description": "<p>Max value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "step",
          "description": "<p>Step size for spin button clicks. Also used when pressing up/down keys in the field.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        },
        {
          "name": "largeStep",
          "description": "<p>Large step size, defaults to 10 * <code>step</code>. Applied when pressing SHIFT and stepping either by click or\nusing keyboard.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": "10"
        },
        {
          "name": "value",
          "description": "<p>Initial value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "format",
          "description": "<p>The format to use for rendering numbers.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source\"><code> format: '9,999.00##'\n</code></pre>\n<p>The above enables digit grouping and will display at least 2 (but no more than 4) fractional digits.</p>",
          "type": [
            "String",
            "Object",
            "Core.helper.util.NumberFormat"
          ],
          "scope": "inner"
        },
        {
          "name": "decimalPrecision",
          "description": "<p>The number of decimal places to allow. Defaults to no constraint.</p>\n<p>This config has been replaced by <a href=\"#Core/widget/NumberField#config-format\">format</a>. Instead of this:</p>\n<pre class=\"prettyprint source\"><code> decimalPrecision : 3\n</code></pre>\n<p>Use <code>format</code>:</p>\n<pre class=\"prettyprint source\"><code> format : '9.###'\n</code></pre>\n<p>To set both <code>decimalPrecision</code> and <code>leadingZeroes</code> (say to <code>3</code>), do this:</p>\n<pre class=\"prettyprint source\"><code> format : '3>9.###'\n</code></pre>",
          "type": "Number",
          "scope": "inner",
          "deprecated": true
        },
        {
          "name": "leadingZeroes",
          "description": "<p>The maximum number of leading zeroes to show. Defaults to no constraint.</p>\n<p>This config has been replaced by <a href=\"#Core/widget/NumberField#config-format\">format</a>. Instead of this:</p>\n<pre class=\"prettyprint source\"><code> leadingZeros : 3\n</code></pre>\n<p>Use <code>format</code>:</p>\n<pre class=\"prettyprint source\"><code> format : '3>9'\n</code></pre>\n<p>To set both <code>leadingZeroes</code> and <code>decimalPrecision</code> (say to <code>2</code>), do this:</p>\n<pre class=\"prettyprint source\"><code> format : '3>9.##'\n</code></pre>",
          "type": "Number",
          "scope": "inner",
          "deprecated": true
        },
        {
          "name": "changeOnSpin",
          "description": "<p>Controls how change events are triggered when stepping the value up or down using either spinners or\narrow keys.</p>\n<p>Configure with:</p>\n<ul>\n<li><code>true</code> to trigger a change event per step</li>\n<li><code>false</code> to not trigger change while stepping. Will trigger on blur/Enter</li>\n<li>A number of milliseconds to buffer the change event, triggering when no steps are performed during that\nperiod of time.</li>\n</ul>",
          "type": [
            "Boolean",
            "Number"
          ],
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "inputType",
          "description": "<p>This can be set to <code>'number'</code> to enable the numeric virtual keyboard on\nmobile devices. Doing so limits this component's ability to handle keystrokes\nand format properly as the user types, so this is not recommended for\ndesktop applications. This will also limit similar features of automated\ntesting tools that mimic user input.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "text"
        }
      ],
      "properties": [
        {
          "name": "step",
          "description": "<p>Step size for spin button clicks.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "changeValue",
          "description": "<p>Get/set the NumberField's value, or <code>undefined</code> if the input field is empty</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "PagingToolbar",
      "modulePath": "Core/widget/PagingToolbar",
      "classDescription": "<p>A special Toolbar class, which, when attached to an <a href=\"#Core/data/AjaxStore\">AjaxStore</a>, which has been configured\nto be <a href=\"#Core/data/AjaxStore#property-isPaged\">paged</a>, controls the loading of that store to page through the data\nset.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n     bbar : {\n         type  : 'pagingtoolbar'\n     }\n});\n</code></pre>\n<h3>Default toolbar items</h3>\n<p>The toolbar provides some default buttons and other items as described below:</p>\n<p>| Reference              | Weight  Description                                              |\n|------------------------|--------|---------------------------------------------------------|\n| <code>firstPageButton</code>      | 100    | Go to first page                                        |\n| <code>previousPageButton</code>   | 110    | Go to previous page                                     |\n| <code>pageNumber</code>           | 120    | TextCurrent page number                                 |\n| <code>pageCount</code>            | 130    | Label showing number of pages                           |\n| <code>nextPageButton</code>       | 140    | Go to next page                                         |\n| <code>lastPageButton</code>       | 150    | Go to last page                                         |\n| <code>reloadButton</code>         | 160    | Reload data                                             |\n| <code>dataSummary</code>          | 170    | Summary text                                            |</p>\n<h3>Customizing the toolbar items</h3>\n<p>The toolbar items can be customized, existing items can be changed or removed,\nand new items can be added. This is handled using the <a href=\"#Core/widget/PagingToolbar#config-items\">items</a> config.</p>\n<p>Adding additional buttons or widgets to the paging toolbar can be done like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>bbar : {\n    type  : 'pagingtoolbar',\n    items : {\n        click : {\n            type : 'button',\n            text : 'Click me',\n            weight : 175 // Add after last item\n        }\n    }\n}\n</code></pre>",
      "extends": [
        "Core/widget/Toolbar"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "PagingToolbar.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "toolbar",
      "configs": [
        {
          "name": "store",
          "description": "<p>The <a href=\"#Core/data/AjaxStore\">AjaxStore</a> that this PagingToolbar is to control.</p>",
          "type": "Core.data.AjaxStore",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Panel",
      "modulePath": "Core/widget/Panel",
      "classDescription": "<p>Panel widget. A general purpose container which may be used to contain child <a href=\"#Core/widget/Container#config-items\">items</a>\nor <a href=\"#Core/widget/Widget#config-html\">html</a>.</p>\n<p>Also may dock a <a href=\"#Core/widget/Panel#config-header\">header</a> and <a href=\"#Core/widget/Panel#config-footer\">footer</a> either at top/bottom or left/right</p>",
      "extends": [
        "Core/widget/Container"
      ],
      "examples": [
        "let panel = new Panel({\n  title   : 'A Test Panel',\n  items : [\n    { type : 'text', placeholder: 'Text' },\n  ],\n  bbar : [{\n    text : 'Proceed',\n    onClick : () => {\n      alert('Proceeding!');\n    }\n  }]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Panel.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "panel",
      "externalExamples": [
        "Core/widget/Panel.js"
      ],
      "typedefs": [
        {
          "name": "PanelHeader",
          "description": "<p>An object that describes a Panel's header.</p>",
          "properties": [
            {
              "name": "cls",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Additional CSS class or classes to add to the header element.</p>",
              "optional": true
            },
            {
              "name": "dock",
              "type": "String",
              "description": "<p>Specify &quot;left&quot;, &quot;bottom&quot;, or &quot;right&quot; to control panel edge to which the header docks.</p>",
              "default": "\"top\"",
              "optional": true
            },
            {
              "name": "title",
              "type": "String"
            },
            {
              "name": "titleAlign",
              "type": "String",
              "description": "<p>Specify &quot;center&quot; or &quot;end&quot; to align the panel's title differently.</p>",
              "default": "\"start\"",
              "optional": true
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "collapsed",
          "description": "<p>Controls whether the panel is collapsed (the body of the panel is hidden while only the header is\nvisible). Only valid if the panel is <a href=\"#Core/widget/Panel#config-collapsible\">collapsible</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "collapsible",
          "description": "<p>This config enables collapsibility for the panel. See <a href=\"#Core/widget/Panel#config-collapsed\">collapsed</a>.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>     {\n         type        : 'panel',\n         collapsible : true\n     }\n</code></pre>\n<p>This is managed by an instance of <a href=\"#Core/widget/panel/PanelCollapser\">PanelCollapser</a> which can be configured if an\nobject is passed for this config property:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>     {\n         type        : 'panel',\n         collapsible : {\n             direction : 'left'\n         }\n     }\n</code></pre>",
          "type": [
            "Boolean",
            "Core.widget.panel.PanelCollapser"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "bodyCls",
          "description": "<p>Custom CSS classes to add to the panel's body element.</p>\n<p>May be specified as a space separated string, or as an object in which property names\nwith truthy values are used as the class names:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> bodyCls : {\n     'b-my-class'     : 1,\n     [this.extraCls]  : 1,\n     [this.activeCls] : this.isActive\n }\n</code></pre>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "trapFocus",
          "description": "<p>By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel\nforwards or backwards.\nConfigure this as <code>true</code> to disallow tabbing out of the Panel, and make tabbing circular within this Panel.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Content"
        },
        {
          "name": "title",
          "description": "<p>A title to display in the header. Causes creation and docking of a header\nto the top if no header is configured.</p>\n<p>If specified, overrides any title configured within the <a href=\"#Core/widget/Panel#config-header\">header</a> configuration.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "header",
          "description": "<p>A config <a href=\"#Core/widget/Panel#typedef-PanelHeader\">object</a> for the panel's header or a string in place of a <code>title</code>.</p>\n<p>Configuring this as <code>false</code> explicitly removes the header bar, overriding any\n<a href=\"#Core/widget/Panel#config-tools\">tools</a> or <a href=\"#Core/widget/Panel#config-title\">title</a> configs.</p>",
          "type": [
            "String",
            "Boolean",
            "Core.widget.Panel#PanelHeader"
          ],
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "stripDefaults",
          "access": "internal",
          "description": "<p>An object containing config defaults for corresponding <a href=\"#Core/widget/Panel#config-strips\">strips</a> objects with a matching name.</p>\n<p>By default, this object contains the keys <code>'bbar'</code> and <code>'tbar'</code> to provide default config values for the\n<a href=\"#Core/widget/Panel#config-bbar\">bbar</a> and <a href=\"#Core/widget/Panel#config-tbar\">tbar</a> configs.</p>\n<p>This object also contains a key named <code>'*'</code> with default config properties to apply to all strips. This\nobject provides the default <code>type</code> (<code>'toolbar') and <a href=\"#Core/widget/Widget#config-dock\">dock</a> (</code>'top'`)\nproperty for strips.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "strips",
          "description": "<p>An object containing widgets keyed by name. By default (when no <code>type</code> is given), strips are\n<a href=\"#Core/widget/Toolbar\">toolbars</a>. If the value assigned to a strip is an array, it is converted to\nthe toolbar's <a href=\"#Core/widget/Container#config-items\">items</a>.</p>\n<p>The <a href=\"#Core/widget/Panel#config-bbar\">bbar</a> and <a href=\"#Core/widget/Panel#config-tbar\">tbar</a> configs are shortcuts for adding toolbars to the\npanel's <code>strips</code>.</p>\n<p>Strips are arranged based on their <a href=\"#Core/widget/Widget#config-dock\">dock</a> and\n<a href=\"#Core/widget/Widget#config-weight\">weight</a> configs.</p>\n<p>For widgets using a <code>dock</code> of <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code>, <code>'right'</code>, <code>'start'</code> or <code>'end'</code>(an &quot;edge\nstrip&quot;), the higher the <code>weight</code> assigned to a widget, the closer that widget will be to the panel body.</p>\n<p>For widgets with <code>'header'</code> or <code>'pre-header'</code> for <code>dock</code> (a &quot;header strip&quot;), higher <code>weight</code> values\ncause the widget to be placed closer to the panel's title.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> new Panel({\n     title : 'Test',\n     html  : 'Panel strip test',\n     strips : {\n         left : [{\n             text : 'Go'\n         }]\n     }\n });\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "footer",
          "description": "<p>Config object of a footer. May contain a <code>dock</code>, <code>html</code> and a <code>cls</code> property. A footer is not a widget,\nbut rather plain HTML that follows the last element of the panel's body and <a href=\"#Core/widget/Panel#config-strips\">strips</a>.</p>\n<p>The <code>dock</code> property may be <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, <code>start</code> or <code>end</code></p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "revealed",
          "access": "private",
          "description": "<p>This config is used with <a href=\"#Core/widget/panel/PanelCollapserOverlay\">PanelCollapserOverlay</a> to programmatically control the\nvisibility of the panel's body. In this mode of collapse, the body of a collapsed panel is a floating\noverlay. Setting this config to <code>true</code> will show this element, while <code>false</code> will hide it.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "tools",
          "description": "<p>The <a href=\"#Core/widget/Tool\">tools</a> to add either before or after the <code>title</code> in the Panel header. Each\nproperty name is the reference by which an instantiated tool may be retrieved from the live\n<code><a href=\"#Core/widget/mixin/Toolable#property-tools\">tools</a></code> property.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "tbar",
          "description": "<p>A Config object representing the configuration of a <a href=\"#Core/widget/Toolbar\">Toolbar</a>,\nor array of config objects representing the child items of a Toolbar.</p>\n<p>This creates a toolbar docked to the top of the panel immediately below the header.</p>",
          "type": [
            "Array.<Object>",
            "Object"
          ],
          "scope": "inner",
          "category": "Content"
        },
        {
          "name": "bbar",
          "description": "<p>A Config object representing the configuration of a <a href=\"#Core/widget/Toolbar\">Toolbar</a>,\nor array of config objects representing the child items of a Toolbar.</p>\n<p>This creates a toolbar docked to the bottom of the panel immediately above the footer.</p>",
          "type": [
            "Array.<Object>",
            "Object"
          ],
          "scope": "inner",
          "category": "Content"
        }
      ],
      "properties": [
        {
          "name": "tools",
          "description": "<p>The tool Widgets as specified by the <a href=\"#Core/widget/Panel#config-tools\">tools</a> configuration\n(and the <a href=\"#Core/widget/Popup#config-closable\">closable</a> configuration in the Popup subclass).\nEach is a <a href=\"#Core/widget/Widget\">Widget</a> instance which may be hidden, shown and observed and styled\njust like any other widget.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "tbar",
          "description": "<p>Get toolbar <a href=\"#Core/widget/Toolbar\">Toolbar</a> docked to the top of the panel</p>",
          "type": "Core.widget.Toolbar",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "bbar",
          "description": "<p>Get toolbar <a href=\"#Core/widget/Toolbar\">Toolbar</a> docked to the bottom of the panel</p>",
          "type": "Core.widget.Toolbar",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "collapsing",
          "description": "<p>This property is <code>true</code> if the panel is currently collapsing.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "collapsingExpanding",
          "access": "internal",
          "description": "<p>This property is <code>true</code> if the panel is currently either collapsing or expanding.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "expanding",
          "description": "<p>This property is <code>true</code> if the panel is currently expanding.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ],
      "events": [
        {
          "name": "toolClick",
          "description": "<p>A header <a href=\"#Core/widget/Panel#config-tools\">tool</a> has been clicked.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Tool",
              "description": "<p>This Panel.</p>"
            },
            {
              "name": "tool",
              "type": "Core.widget.Tool",
              "description": "<p>The tool which is being clicked.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "PasswordField",
      "modulePath": "Core/widget/PasswordField",
      "classDescription": "<p>Password field widget. Wraps native &lt;input type=&quot;password&quot;&gt;</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let textField = new PasswordField({\n    placeholder : 'Enter password'\n});\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Core/widget/PasswordField.js\"></div></p>",
      "extends": [
        "Core/widget/Field"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "PasswordField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "passwordfield"
    },
    {
      "name": "PickerField",
      "modulePath": "Core/widget/PickerField",
      "classDescription": "<p>Base class used for <a href=\"#Core/widget/Combo\">Combo</a>, <a href=\"#Core/widget/DateField\">DateField</a>, and <a href=\"#Core/widget/TimeField\">TimeField</a>.\nDisplays a picker (<a href=\"#Core/widget/List\">List</a>, <a href=\"#Core/widget/DatePicker\">DatePicker</a>) anchored to the field.\nNot intended to be used directly.</p>\n<p>This field's subclasses can be used as editors for the <a href=\"#Grid/column/Column\">Column</a>.</p>\n<p>When focused by means of <em>touch</em> tapping on the trigger element (eg, the down arrow on a Combo)\non a tablet, the keyboard will not be shown by default to allow for interaction with the dropdown.</p>\n<p>A second tap on the input area will then show the keyboard if required.</p>",
      "extends": [
        "Core/widget/TextField"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "PickerField.js",
      "path": "/Calendar/lib/Core/widget",
      "configs": [
        {
          "name": "editable",
          "description": "<p>User can edit text in text field (otherwise only pick from attached picker)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "pickerAlignElement",
          "description": "<p>The name of the element property to which the picker should size and align itself.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "element"
        },
        {
          "name": "autoClose",
          "description": "<p>By default PickerField's picker is transient, and will <a href=\"#Core/widget/PickerField#function-hidePicker\">hidePicker</a> when the user clicks or\ntaps outside or when focus moves outside picker.</p>\n<p>Configure as <code>false</code> to make picker non-transient.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "autoExpand",
          "description": "<p>Configure as <code>true</code> to have the picker expand upon focus enter.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "picker",
          "description": "<p>A config object which is merged into the generated picker configuration to allow specific use cases\nto override behaviour. For example:</p>\n<pre><code>picker: {\n    align: {\n        anchor: true\n    }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "picker",
          "description": "<p>Returns the instantiated picker widget as configured by <a href=\"#Core/widget/PickerField#config-picker\">picker</a>.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "eachWidget",
          "description": "<p>Iterate over all widgets owned by this widget and any descendants.</p>\n<p><em>Note</em>: Due to this method aborting when the function returns <code>false</code>, beware of using short form arrow\nfunctions. If the expression executed evaluates to <code>false</code>, iteration will terminate.</p>\n<p><em>Due to the <a href=\"#Core/widget/PickerField#config-picker\">picker</a> config being a lazy config and only being converted to be a\n<code>List</code> instance just before it's shown, the picker will not be part of the iteration before\nit has been shown once</em>.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function to execute upon all descendant widgets.\nIteration terminates if this function returns <code>false</code>.</p>"
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to only consider immediate child widgets.</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if iteration was not aborted by a step returning <code>false</code></p>"
          }
        },
        {
          "name": "onEditComplete",
          "access": "internal",
          "description": "<p>Check if field value is valid</p>",
          "scope": "instance"
        },
        {
          "name": "internalOnKeyEvent",
          "access": "private",
          "description": "<p>Allows using arrow keys to open/close list. Relays other keypresses to list if open.</p>",
          "scope": "instance"
        },
        {
          "name": "onTriggerClick",
          "access": "private",
          "description": "<p>User clicked trigger icon, toggle list.</p>",
          "scope": "instance"
        },
        {
          "name": "showKeyboard",
          "access": "private",
          "description": "<p>User clicked on an editable input field. If it's a touch event\nensure that the keyboard is shown.</p>",
          "scope": "instance"
        },
        {
          "name": "togglePicker",
          "description": "<p>Toggle the <a href=\"#Core/widget/PickerField#property-picker\">picker</a> visibility</p>",
          "scope": "instance"
        },
        {
          "name": "showPicker",
          "description": "<p>Show the <a href=\"#Core/widget/PickerField#property-picker\">picker</a></p>",
          "scope": "instance"
        },
        {
          "name": "hidePicker",
          "description": "<p>Hide picker</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Popup",
      "modulePath": "Core/widget/Popup",
      "classDescription": "<p>A floating Popup widget, which can contain child <a href=\"#Core/widget/Container#config-items\">widgets</a> or plain html. Serves as the base class\nfor Menu / Tooltip.</p>\n<p>When it contains focus, the <code>Escape</code> key <a href=\"#Core/widget/Popup#config-closeAction\">closes</a> the picker. When it hides,\nfocus is reverted to the element from which it entered the Popup, or, if that is no longer focusable,\na close relative of that element.</p>",
      "extends": [
        "Core/widget/Panel"
      ],
      "examples": [
        "let popup = new Popup({\n  forElement : document.querySelector('button'),\n  items      : [\n    { type : 'text', placeholder: 'Text' },\n    { type: 'button', text: 'Okay', style: 'width: 100%', color: 'b-orange'}\n  ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Popup.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "popup",
      "externalExamples": [
        "Core/widget/Popup.js"
      ],
      "configs": [
        {
          "name": "autoShow",
          "description": "<p>Auto show flag for Popup.\nIf truthy then Popup is shown automatically upon hover.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "autoClose",
          "description": "<p>By default a Popup is transient, and will <a href=\"#Core/widget/Popup#function-close\">close</a> when the user clicks or\ntaps outside its owned widgets and when focus moves outside its owned widgets.</p>\n<p><strong>Note</strong>: <a href=\"#Core/widget/Popup#config-modal\">Modal</a> popups won't <a href=\"#Core/widget/Popup#function-close\">close</a> when focus moves outside even if autoClose is <code>true</code>.</p>\n<p>Configure as <code>false</code> to make a Popup non-transient.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showOnClick",
          "description": "<p>Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "forElement",
          "description": "<p>DOM element to attach popup.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "closeAction",
          "description": "<p>The action to take when calling the <a href=\"#Core/widget/Popup#function-close\">close</a> method.\nBy default, the popup is hidden.</p>\n<p>This may be set to <code>'destroy'</code> to destroy the popup upon close.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "hide"
        },
        {
          "name": "trapFocus",
          "description": "<p>By default, tabbing within a Popup is circular - that is it does not exit.\nConfigure this as <code>false</code> to allow tabbing out of the Popup.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "focusOnToFront",
          "description": "<p>By default a Popup is focused when it is shown.\nConfigure this as <code>false</code> to prevent automatic focus on show.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "closable",
          "description": "<p>Show a tool in the header to close this Popup, and allow <code>ESC</code> close it.\nThe tool is available in the <a href=\"#Core/widget/mixin/Toolable#property-tools\">tools</a> object\nunder the name <code>close</code>. It uses the CSS class <code>b-popup-close</code> to apply a\ndefault close icon. This may be customized with your own CSS rules.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "maximizable",
          "description": "<p>Show a tool in the header to maximize this popup</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "modal",
          "description": "<p>Optionally show an opaque mask below this Popup when shown.\nConfigure this as <code>true</code> to show the mask.</p>\n<p>When a Popup is modal, it defaults to being <a href=\"#Core/widget/Widget#config-centered\">centered</a>.\nAlso it won't <a href=\"#Core/widget/Popup#function-close\">close</a> when focus moves outside even if <a href=\"#Core/widget/Popup#config-autoClose\">autoClose</a> is <code>true</code>.</p>\n<p>May also be an object containing the following properties:</p>\n<ul>\n<li><code>closeOnMaskTap</code> Specify as <code>true</code> to <a href=\"#Core/widget/Popup#function-close\">close</a> when mask is tapped.\nThe default action is to focus the popup.</li>\n</ul>\n<p>Usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Popup({\n    title  : 'I am modal',\n    modal  : {\n        closeOnMaskTap : true\n    },\n    height : 100,\n    width  : 200\n});\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "maximized",
          "description": "<p>Set to <code>true</code> to make this widget take all available space in the visible viewport.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Float & align"
        }
      ],
      "properties": [
        {
          "name": "maximized",
          "description": "<p>Set to <code>true</code> to make this widget take all available space in the visible viewport.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "modalMask",
          "access": "internal",
          "description": "<p>Returns the modal mask element for this Popup correctly positioned just below this Popup.</p>",
          "scope": "instance"
        },
        {
          "name": "modalMask",
          "access": "internal",
          "description": "<p>Returns the modal mask element. It does NOT guarantee its placement in the DOM relative\nto any Popup. To get the modal mask for a particular Popup, use the instance property.</p>",
          "scope": "static"
        }
      ],
      "functions": [
        {
          "name": "close",
          "description": "<p>Performs the configured <a href=\"#Core/widget/Popup#config-closeAction\">closeAction</a> upon this popup.\nBy default, the popup hides. The <a href=\"#Core/widget/Popup#config-closeAction\">closeAction</a> may be\nconfigured as <code>'destroy'</code>.</p>",
          "scope": "instance",
          "fires": [
            "event:beforeclose If popup is not hidden"
          ]
        }
      ],
      "events": [
        {
          "name": "beforeClose",
          "description": "<p>Fired when the <a href=\"#Core/widget/Popup#function-close\">close</a> method is called and the popup is not hidden.\nMay be vetoed by returning <code>false</code> from a handler.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Popup",
              "description": "<p>This Popup</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Radio",
      "modulePath": "Core/widget/Radio",
      "classDescription": "<p>The <code>Radio</code> widget wraps an <code>&lt;input type=&quot;radio&quot;&gt;</code> element.</p>\n<p>Color can be specified and you can optionally configure <a href=\"#Core/widget/Radio#config-text\">text</a> to display in a label to the right of\nthe radio button instead of, or in addition to, a standard field <a href=\"#Core/widget/Radio#config-label\">label</a>.</p>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/Radio.js\"></div></p>\n<h2>Nested Items</h2>\n<p>A radio button can also have a <a href=\"#Core/widget/Radio#config-container\">container</a> of additional <a href=\"#Core/widget/Container#config-items\">items</a>.\nThese items can be displayed immediately following the field's label (which is the default when there is only one\nitem) or below the radio button. This can be controlled using the <a href=\"#Core/widget/Radio#config-inline\">inline</a> config.</p>\n<p>In the demo below notice how additional fields are displayed for the checked radio button:</p>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/Radio-items.js\"></div></p>\n<p>For a simpler way to create a set of radio buttons, see the <a href=\"#Core/widget/RadioGroup\">RadioGroup</a> widget.</p>",
      "extends": [
        "Core/widget/Checkbox"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Radio.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "radio",
      "configs": [
        {
          "name": "clearable",
          "description": "<p>Set this to <code>true</code> so that clicking a checked radio button will clear its checked state.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "RadioGroup",
      "modulePath": "Core/widget/RadioGroup",
      "classDescription": "<p>The <code>RadioGroup</code> widget contains a set of related <code><a href=\"#Core/widget/Radio\">Radio</a></code> button widgets.</p>\n<p>For example, to present three choices and have the user select one of them:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     type    : 'radiogroup',\n     title   : 'Resolve Conflict',\n     name    : 'resolution',\n     value   : 'A',  // the default choice\n     options : {\n         A : 'Keep the original version',\n         B : 'Use the new version',\n         C : 'Reconcile individual conflicts'\n     }\n }\n</code></pre>\n<p>The <a href=\"#Core/widget/RadioGroup#config-name\">name</a> config is required for this widget and it will be assigned to all radio buttons created by\nprocessing the <a href=\"#Core/widget/RadioGroup#config-options\">options</a> config.</p>\n<h2>Nested Items</h2>\n<p>Radio buttons can also have a <a href=\"#Core/widget/Radio#config-container\">container</a> of additional\n<a href=\"#Core/widget/Container#config-items\">items</a>. These items can be displayed immediately following the field's label\n(which is the default when there is only one item) or below the radio button. This can be controlled using the\n<a href=\"#Core/widget/Radio#config-inline\">inline</a> config.</p>\n<p>In the demo below notice how additional fields are displayed for the checked radio button:</p>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/RadioGroup.js\"></div></p>",
      "extends": [
        "Core/widget/FieldSet"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RadioGroup.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "radiogroup",
      "configs": [
        {
          "name": "clearable",
          "description": "<p>Set this to <code>true</code> so that clicking the currently checked radio button will clear the check from all\nradio buttons in the group.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "name",
          "description": "<p>The name by which this widget's <a href=\"#Core/widget/RadioGroup#property-value\">value</a> is accessed using the parent container's\n<a href=\"#Core/widget/Container#property-values\">values</a>.</p>\n<p>The config must be provided as it is used to set the <a href=\"#Core/widget/Radio#config-name\">name</a> of the\nchild <a href=\"#Core/widget/Radio\">radio buttons</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "options",
          "description": "<p>The set of radio button options for this radio button group. This is a shorthand for defining these in\nthe <a href=\"#Core/widget/Container#config-items\">items</a>. The keys of this object hold the radio button's\n<a href=\"#Core/widget/Radio#config-checkedValue\">checkedValue</a> while the object values are a string for the radio button's\n<a href=\"#Core/widget/Radio#config-text\">text</a> or a config object for that radio button.</p>\n<p>The <a href=\"#Core/widget/RadioGroup#property-value\">value</a> of this radio button group will be one of the keys in this object or <code>null</code>\nif no radio button is checked.</p>\n<p>For example, consider the following configuration:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     type    : 'radiogroup',\n     name    : 'resolution',\n     value   : 'A',\n     options : {\n         A : 'Keep the original version',\n         B : 'Use the new version',\n         C : 'Reconcile individual conflicts'\n     }\n }\n</code></pre>\n<p>The above is equivalent to this configuration below using <a href=\"#Core/widget/RadioGroup#config-items\">items</a>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> {\n     type  : 'radiogroup',\n     items : [{\n         text         : 'Keep the original version',\n         name         : 'resolution',\n         ref          : 'resolution_A',\n         checked      : true,\n         checkedValue : 'A'\n     }, {\n         text         : 'Use the new version',\n         name         : 'resolution',\n         ref          : 'resolution_B',\n         checkedValue : 'B'\n     }, {\n         text         : 'Reconcile individual conflicts',\n         name         : 'resolution',\n         ref          : 'resolution_C',\n         checkedValue : 'C'\n     }]\n }\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "value",
          "description": "<p>This property corresponds to the <a href=\"#Core/widget/Radio#config-checkedValue\">checkedValue</a> of the currently\n<a href=\"#Core/widget/Radio#property-checked\">checked</a> radio button.</p>",
          "type": "String",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Renderable",
      "modulePath": "Core/widget/Renderable",
      "classDescription": "<p>This class provides element rendering and automatic synchronization based on config property changes.</p>\n<pre class=\"prettyprint source\"><code> class Label extends Renderable {\n     static get configurable() {\n         return {\n             text : {\n                 value: null,\n\n                 $config : 'render'\n             }\n         };\n     }\n\n     renderDom() {\n         return {\n             tag: 'label',\n             children: [\n                 this.text\n             ]\n         };\n     }\n }\n</code></pre>\n<p>A class can opt to not specify its render configs. In this case, these will be determined automatically, but with\nsome additional cost. This may not be worth considering if only a few instances are ever likely.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Renderable.js",
      "path": "/Calendar/lib/Core/widget",
      "configs": [
        {
          "name": "element",
          "description": "<p>The top-level DOM element for this object. This element is produced from the <a href=\"#Core/widget/Renderable#function-renderDom\">renderDom</a>\nmethod of the derived class. As configs used by <code>renderDom</code> change, a synchronization of the DOM is\nscheduled by calling <a href=\"#Core/widget/Renderable#function-refreshDom\">refreshDom</a>. This call is made automatically by this class, making\nit rarely necessary to call <code>refreshDom</code> directly.</p>",
          "type": "HTMLElement",
          "scope": "inner",
          "category": "DOM"
        }
      ],
      "properties": [
        {
          "name": "renderConfigs",
          "access": "private",
          "description": "<p>Returns the Set of configs defined as <code>render: true</code>, that is, the configs that determine the rendering (via\n<code>renderDom</code>). If no such configs are defined, this method returns <code>null</code>.</p>",
          "scope": "static",
          "returns": [
            {
              "type": {
                "names": [
                  "Set"
                ]
              }
            }
          ]
        },
        {
          "name": "classes",
          "description": "<p>Returns the <code>classList</code> of this instance's <code>element</code>.</p>",
          "type": "DOMTokenList",
          "scope": "instance"
        },
        {
          "name": "renderContext",
          "access": "private",
          "description": "<p>This property is the object to use when calling the <code>renderDom</code> method. It may evaluate to this instance (if\nthe class declares its render configs) or a helper object to track config usage during the <code>renderDom</code> call.</p>",
          "type": "Object",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "changeElement",
          "access": "private",
          "description": "<p>This is called when the <code>element</code> config is assigned (via the setter).</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The new element being assigned.</p>"
            },
            {
              "name": "oldElement",
              "type": [
                "HTMLElement",
                "null"
              ],
              "description": "<p>The old element (previously assigned) or <code>null</code>.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "fixRefOwnerId",
          "access": "private",
          "description": "<p>This method fixes the element's <code>$refOwnerId</code> when this instance's <code>id</code> is changing.</p>",
          "parameters": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "<p>The element to fix.</p>"
            },
            {
              "name": "id",
              "type": "String",
              "description": "<p>The new id being assigned.</p>"
            },
            {
              "name": "oldId",
              "type": "String",
              "description": "<p>The old id (previously assigned).</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachRef",
          "access": "private",
          "description": "<p>This method is called by <code>DomHelper.createElement</code> and <code>DomSync.sync</code> as new reference elements are created.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the element, i.e., the value of its <code>reference</code> attribute.</p>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "<p>The element instance</p>"
            },
            {
              "name": "domConfig",
              "type": "Object",
              "description": "<p>The DOM config object.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "detachRef",
          "access": "private",
          "description": "<p>This method is called by <code>DomSync.sync</code> as reference elements are removed from the DOM.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the element, i.e., the value of its <code>reference</code> attribute.</p>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "<p>The element instance</p>"
            },
            {
              "name": "domConfig",
              "type": "Object",
              "description": "<p>The DOM config object.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "renderDom",
          "description": "<p>This method returns a <a href=\"#Core/helper/DomHelper#function-createElement-static\">createElement</a> config object that describes\nthe desired elements for this instance.</p>\n<p>This method is called to produce the initial DOM structure and again as necessary to generate the DOM for the\ncurrent state. The DOM produced by these subsequent calls is then passed through\n<a href=\"#Core/helper/DomSync#function-sync-static\">DomSync.sync()</a> to update the DOM.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "refreshDom",
          "description": "<p>This method synchronized the DOM produced by <a href=\"#Core/widget/Renderable#function-renderDom\">renderDom</a> with what was previously produced and\nupdates the elements accordingly.</p>\n<p>This method is buffered such that calls to it do not immediately execute. To perform the refresh immediately,\ndo this:</p>\n<pre class=\"prettyprint source\"><code> instance.refreshDom.now();\n</code></pre>\n<p>To flush any potential updates to the DOM (and do nothing if there are none), do this:</p>\n<pre class=\"prettyprint source\"><code> instance.refreshDom.flush();\n</code></pre>\n<p>To determine if there are updates to the DOM pending, do this:</p>\n<pre class=\"prettyprint source\"><code> if (instance.refreshDom.isPending) {\n     ...\n }\n</code></pre>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "SlideToggle",
      "modulePath": "Core/widget/SlideToggle",
      "classDescription": "<p>SlideToggle field is a variation of <a href=\"#Core/widget/Checkbox\">Checkbox</a> with a sliding toggle instead of box with check mark.\nIt wraps <code>&lt;input type=&quot;checkbox&quot;&gt;</code>.\nColor can be specified and you can optionally configure <a href=\"#Core/widget/SlideToggle#config-text\">text</a> to display in a label to the right of\nthe toggle in addition to a standard field <a href=\"#Core/widget/SlideToggle#config-label\">label</a>.</p>\n<p><div class=\"external-example vertical\" data-file=\"Core/widget/SlideToggle.js\"></div></p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.</p>",
      "extends": [
        "Core/widget/Checkbox"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "SlideToggle.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "slidetoggle"
    },
    {
      "name": "Slider",
      "modulePath": "Core/widget/Slider",
      "classDescription": "<p>Wraps native &lt;input type=&quot;range&quot;&gt;</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "examples": [
        "let slider = new Slider({\n  text: 'Choose value'\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Slider.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "slider",
      "externalExamples": [
        "Core/widget/Slider.js"
      ],
      "properties": [
        {
          "name": "text",
          "description": "<p>Get/set text. Appends value if Slider.showValue is true</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "min",
          "description": "<p>Get/set min value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "max",
          "description": "<p>Get/set max value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "step",
          "description": "<p>Get/set step size</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Get/set value</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "text",
          "description": "<p>Slider label text</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "showValue",
          "description": "<p>Show value in label (appends in () if text is set)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showTooltip",
          "description": "<p>Show the slider value in a tooltip</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "min",
          "description": "<p>Minimum value</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "max",
          "description": "<p>Maximum value</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 100
        },
        {
          "name": "step",
          "description": "<p>Step size</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        },
        {
          "name": "value",
          "description": "<p>Initial value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "unit",
          "description": "<p>Unit to display next to the value, when configured with <code>showValue : true</code></p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "input",
          "description": "<p>Fired while slider thumb is being dragged.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Slider",
              "description": "<p>The slider</p>"
            },
            {
              "name": "value",
              "type": "String",
              "description": "<p>The value</p>"
            }
          ]
        },
        {
          "name": "change",
          "description": "<p>Fired after the slider value changes (on mouse up following slider interaction).</p>",
          "parameters": [
            {
              "name": "value",
              "type": "String",
              "description": "<p>The value</p>"
            },
            {
              "name": "userAction",
              "type": "Boolean",
              "description": "<p>Triggered by user taking an action (<code>true</code>) or by setting a value (<code>false</code>)</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Slider",
              "description": "<p>The slider</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Splitter",
      "modulePath": "Core/widget/Splitter",
      "classDescription": "<p>A simple splitter widget that resizes the elements next to it or above/below it depending on orientation.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Splitter.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "splitter",
      "externalExamples": [
        "Core/widget/Splitter.js"
      ],
      "events": [
        {
          "name": "dragStart",
          "description": "<p>Fired when a drag starts</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Splitter",
              "description": "<p>The Splitter</p>"
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ],
              "description": "<p>The DOM event</p>"
            }
          ]
        },
        {
          "name": "drag",
          "description": "<p>Fired while dragging</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Splitter",
              "description": "<p>The Splitter</p>"
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ],
              "description": "<p>The DOM event</p>"
            }
          ]
        },
        {
          "name": "drop",
          "description": "<p>Fired after a drop</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Splitter",
              "description": "<p>The Splitter</p>"
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ],
              "description": "<p>The DOM event</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "orientation",
          "description": "<p>Splitter orientation, see <a href=\"#Core/widget/Splitter#config-orientation\">orientation</a>. When set to 'auto' then actually used orientation\ncan be retrieved using <a href=\"#Core/widget/Splitter#property-currentOrientation\">currentOrientation</a>.</p>",
          "type": "String",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "currentOrientation",
          "description": "<p>Get actually used orientation, which is either the configured value for <code>orientation</code> or if configured with\n'auto' the currently used orientation.</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "orientation",
          "description": "<p>The splitters orientation, configurable with 'auto', 'horizontal' or 'vertical'.</p>\n<p>'auto' tries to determine the orientation by either checking the <code>flex-direction</code> of the parent element\nor by comparing the positions of the closest sibling elements to the splitter. If they are above and\nbelow 'horizontal' is used, if not it uses 'vertical'.</p>\n<pre class=\"prettyprint source\"><code>new Splitter({\n   orientation : 'horizontal'\n});\n</code></pre>\n<p>To receive the actually used orientation when configured with 'auto', see\n<a href=\"#Core/widget/Splitter#property-currentOrientation\">currentOrientation</a>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "auto"
        }
      ],
      "functions": [
        {
          "name": "syncState",
          "access": "private",
          "description": "<p>Determine orientation when set to <code>'auto'</code> and detects neighboring widgets to monitor their hidden/collapsed\nstates.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Tab",
      "modulePath": "Core/widget/Tab",
      "classDescription": "<p>This widget class is used to present items in a <a href=\"#Core/widget/TabPanel\">TabPanel</a> on its <a href=\"#Core/widget/TabBar\">tabBar</a>.\nA reference to this widget is stored via the <a href=\"#Core/widget/Widget#config-tab\">tab</a> config on the tab panel's items.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let tabPanel = new TabPanel({\n items: [\n     {\n         title: 'Settings',\n         // Tab configs\n         tab : {\n             // Show an icon in the tab\n             icon : 'b-fa b-fa-cog'\n         },\n         items: [\n             ...\n         ]\n     }\n ]\n});\n</code></pre>",
      "extends": [
        "Core/widget/Button"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Tab.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "tab",
      "configs": [
        {
          "name": "active",
          "description": "<p>This config is set to <code>true</code> when this tab represents the <code>activeTab</code> of a <a href=\"#Core/widget/TabPanel\">TabPanel</a>. It\nis managed by the tab panel is not set directly.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "index",
          "description": "<p>This config is set to the ordinal position of this tab in the <a href=\"#Core/widget/TabPanel\">TabPanel</a>. It is managed\nby the tab panel is not set directly.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "isFirst",
          "description": "<p>This config is set to <code>true</code> when this tab represents the first tab of a <a href=\"#Core/widget/TabPanel\">TabPanel</a>. It\nis managed by the tab panel is not set directly.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "isLast",
          "description": "<p>This config is set to <code>true</code> when this tab represents the last tab of a <a href=\"#Core/widget/TabPanel\">TabPanel</a>. It\nis managed by the tab panel is not set directly.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "item",
          "description": "<p>The <a href=\"#Core/widget/Widget\">Widget</a> in the <a href=\"#Core/widget/TabPanel\">TabPanel</a> corresponding to this tab. This is\nmanaged by the tab panel is not set directly.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner"
        },
        {
          "name": "tabPanel",
          "description": "<p>The tab panel that owns this tab.</p>",
          "type": "Core.widget.TabPanel",
          "scope": "inner"
        },
        {
          "name": "titleProperty",
          "description": "<p>The config property on this tab that will be set to the value of the <a href=\"#Core/widget/Tab#config-titleSource\">titleSource</a> property\nof this tab's <a href=\"#Core/widget/Tab#config-item\">item</a>.</p>\n<p>By default, the <a href=\"#Core/widget/Tab#config-text\">text</a> property of the tab is set to the <a href=\"#Core/widget/Widget#config-title\">title</a>\nproperty of its <a href=\"#Core/widget/Tab#config-item\">item</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "titleSource",
          "description": "<p>The config property on this tab's <a href=\"#Core/widget/Tab#config-item\">item</a> that is used to set the value of the\n<a href=\"#Core/widget/Tab#config-titleProperty\">titleProperty</a> of this tab.</p>\n<p>By default, the <a href=\"#Core/widget/Tab#config-text\">text</a> property of the tab is set to the <a href=\"#Core/widget/Widget#config-title\">title</a>\nproperty of its <a href=\"#Core/widget/Tab#config-item\">item</a>.</p>",
          "type": "String",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "TabBar",
      "modulePath": "Core/widget/TabBar",
      "classDescription": "<p>A special toolbar used by <a href=\"#Core/widget/TabPanel\">TabPanel</a> to present <a href=\"#Core/widget/Tab\">tabs</a> for the container's\nitems.</p>\n<p>The <a href=\"#Core/widget/Container#config-items\">items</a> of a tab bar are typically managed by the tab panel, however,\nitems can be added that do not correspond to items in the tab panel. The <a href=\"#Core/widget/Widget#config-weight\">weight</a>\nconfig of each tab defaults to 0 or the weight of its corresponding item.</p>",
      "extends": [
        "Core/widget/Toolbar"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TabBar.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "tabbar"
    },
    {
      "name": "TabPanel",
      "modulePath": "Core/widget/TabPanel",
      "classDescription": "<p>A tab panel widget which displays a collection of tabs, each of which can contain other widgets (or simple HTML). This\nwidget has a <a href=\"#Core/widget/TabBar\">tab bar</a> on top of its contents, and each <a href=\"#Core/widget/Tab\">tab</a> can be\ncustomized using the <a href=\"#Core/widget/Tab#config-tab\">tab</a> config.</p>",
      "extends": [
        "Core/widget/Container"
      ],
      "examples": [
        "let tabPanel = new TabPanel({\n items: [\n     {\n         title: 'First',\n         items: [\n             { type: 'textfield', label: 'Name' },\n             ...\n         ]\n     }, {\n         title: 'Settings',\n         tab : {\n             // Show an icon in the tab\n             icon : 'b-fa b-fa-cog'\n         },\n         items: [\n             ...\n         ]\n     }\n ]\n});\n\nThe tab selector buttons are focusable elememts. `Enter` or `Space` activates a tab, and moves\nfocus into the newly visible tab item. "
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TabPanel.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "tabpanel",
      "externalExamples": [
        "Core/widget/TabPanel.js"
      ],
      "properties": [
        {
          "name": "activeTab",
          "description": "<p>The index of the initially active tab.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "activeIndex",
          "description": "<p>The active tab index. Setting must be done through <a href=\"#Core/widget/TabPanel#property-activeTab\">activeTab</a></p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "activeItem",
          "description": "<p>The active child widget. Setting must be done through <a href=\"#Core/widget/TabPanel#property-activeTab\">activeTab</a></p>",
          "type": "Core.widget.Widget",
          "scope": "instance",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "activeTab",
          "description": "<p>The index of the initially active tab.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "animateTabChange",
          "description": "<p>Specifies whether to slide tabs in and out of visibility.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "autoHeight",
          "description": "<p>Set the height of all tabs to match the tab with the highest content.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "tabMinWidth",
          "description": "<p>Min width of a tab title. 0 means no minimum width. This is default.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "tabMaxWidth",
          "description": "<p>Max width of a tab title. 0 means no maximum width. This is default.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "beforeTabChange",
          "description": "<p>The active tab is about to be changed. Return <code>false</code> to prevent this.</p>",
          "parameters": [
            {
              "name": "activeIndex",
              "type": "Number",
              "description": "<p>The new active index.</p>"
            },
            {
              "name": "activeItem",
              "type": "Core.widget.Widget",
              "description": "<p>The new active child widget.</p>"
            },
            {
              "name": "prevActiveIndex",
              "type": "Number",
              "description": "<p>The previous active index.</p>"
            },
            {
              "name": "prevActiveItem",
              "type": "Core.widget.Widget",
              "description": "<p>The previous active child widget.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "tabChange",
          "description": "<p>The active tab has changed.</p>",
          "parameters": [
            {
              "name": "activeIndex",
              "type": "Number",
              "description": "<p>The new active index.</p>"
            },
            {
              "name": "activeItem",
              "type": "Core.widget.Widget",
              "description": "<p>The new active child widget.</p>"
            },
            {
              "name": "prevActiveIndex",
              "type": "Number",
              "description": "<p>The previous active index.</p>"
            },
            {
              "name": "prevActiveItem",
              "type": "Core.widget.Widget",
              "description": "<p>The previous active child widget.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "TextAreaField",
      "modulePath": "Core/widget/TextAreaField",
      "classDescription": "<p>TextAreaField widget for multiline text input. Wraps a native &lt;textarea&gt; HTML element.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const textAreaField = new TextAreaField({\n  placeholder: 'Enter some text'\n});\n</code></pre>",
      "extends": [
        "Core/widget/Field"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TextAreaField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "textareafield",
      "externalExamples": [
        "Core/widget/TextAreaField.js"
      ],
      "configs": [
        {
          "name": "resize",
          "description": "<p>The resize style to apply to the <code>&lt;textarea&gt;</code> element.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "none"
        }
      ]
    },
    {
      "name": "TextAreaPickerField",
      "modulePath": "Core/widget/TextAreaPickerField",
      "classDescription": "<p>TextAreaPickerField is a picker field with a drop down showing a <code>textarea</code> element for multiline text input. See also\n<a href=\"#Core/widget/TextAreaField\">TextAreaField</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let textAreaField = new TextAreaPickerField({\n  placeholder: 'Enter some text'\n});\n</code></pre>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for <a href=\"#Grid/column/Column\">Columns</a>.</p>",
      "extends": [
        "Core/widget/PickerField"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TextAreaPickerField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "textareapickerfield",
      "externalExamples": [
        "Core/widget/TextAreaPickerField.js"
      ],
      "configs": [
        {
          "name": "resize",
          "description": "<p>The resize style to apply to the <code>&lt;textarea&gt;</code> element.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "none"
        }
      ]
    },
    {
      "name": "TextField",
      "modulePath": "Core/widget/TextField",
      "classDescription": "<p>Textfield widget. Wraps native &lt;input type=&quot;text&quot;&gt;</p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.\nIt is used as the default editor for the <a href=\"#Grid/column/Column\">Column</a>, <a href=\"#Grid/column/TemplateColumn\">TemplateColumn</a>,\n<a href=\"#Grid/column/TreeColumn\">TreeColumn</a>, and for other columns if another editor is not specified explicitly,\nor disabled by setting <code>false</code> value.</p>",
      "extends": [
        "Core/widget/Field"
      ],
      "examples": [
        "let textField = new TextField({\n  placeholder: 'Enter some text'\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TextField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "textfield",
      "externalExamples": [
        "Core/widget/TextField.js"
      ],
      "configs": [
        {
          "name": "tabIndex",
          "description": "<p>The tab index of the input field</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Input element"
        },
        {
          "name": "minLength",
          "description": "<p>The min number of characters for the input field</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Field"
        },
        {
          "name": "maxLength",
          "description": "<p>The max number of characters for the input field</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Field"
        }
      ]
    },
    {
      "name": "TimeField",
      "modulePath": "Core/widget/TimeField",
      "classDescription": "<p>The time field widget is a text input field with a time picker drop down. It shows left/right arrows to increase or\ndecrease time by the <a href=\"#Core/widget/TimeField#config-step\">step value</a>.</p>\n<p>This field can be used as an <a href=\"#Grid/column/Column#config-editor\">editor</a> for the <a href=\"#Grid/column/Column\">Column</a>.\nIt is used as the default editor for the <a href=\"#Grid/column/TimeColumn\">TimeColumn</a>.</p>\n<h2>Configuring the picker hour / minute fields</h2>\n<p>You can easily configure the fields in the drop down picker, to control the increment of the up/down step arrows:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new TimeField({\n    label     : 'Time field',\n    appendTo  : document.body,\n    picker    : {\n        items : {\n            minute : {\n                step : 5\n            }\n        }\n    }\n});\n</code></pre>\n<p>This widget may be operated using the keyboard. <code>ArrowDown</code> opens the time picker, which itself\nis keyboard navigable. <code>Shift+ArrowDown</code> activates the <a href=\"#Core/widget/TimeField#config-step\">step</a> back trigger.\n<code>Shift+ArrowUp</code> activates the <a href=\"#Core/widget/TimeField#config-step\">step</a> forwards trigger.</p>",
      "extends": [
        "Core/widget/PickerField"
      ],
      "examples": [
        "let field = new TimeField({\n  format: 'HH'\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeField.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "timefield",
      "externalExamples": [
        "Core/widget/TimeField.js"
      ],
      "properties": [
        {
          "name": "format",
          "description": "<p>Get/Set format for time displayed in field (see <a href=\"#Core/helper/DateHelper#function-format-static\">format</a>\nfor formatting options).</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "min",
          "description": "<p>Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\nthe specified <a href=\"#Core/widget/TimeField#config-format\">format</a>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "max",
          "description": "<p>Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\nthe specified <a href=\"#Core/widget/TimeField#config-format\">format</a>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "step",
          "description": "<p>The <code>step</code> property may be set in Object form specifying two properties, <code>magnitude</code>, a Number, and\n<code>unit</code>, a String.</p>\n<p>If a Number is passed, the steps's current unit is used and just the magnitude is changed.</p>\n<p>If a String is passed, it is parsed by <a href=\"#Core/helper/DateHelper#function-parseDuration-static\">parseDuration</a>, for\nexample <code>'5m'</code>, <code>'5 m'</code>, <code>'5 min'</code>, <code>'5 minutes'</code>.</p>\n<p>Upon read, the value is always returned in object form containing <code>magnitude</code> and <code>unit</code>.</p>",
          "type": "Object",
          "accepts": [
            "String",
            "Number",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the\nspecified <a href=\"#Core/widget/TimeField#config-format\">format</a>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "format",
          "description": "<p>Format for date displayed in field (see Core.helper.DateHelper#function-format-static for formatting\noptions).</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "LT"
        },
        {
          "name": "min",
          "description": "<p>Min time value</p>",
          "type": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "max",
          "description": "<p>Max time value</p>",
          "type": [
            "String",
            "Date"
          ],
          "scope": "inner"
        },
        {
          "name": "step",
          "description": "<p>Time increment duration value. Defaults to 5 minutes.\nThe value is taken to be a string consisting of the numeric magnitude and the units.\nThe units may be a recognised unit abbreviation of this locale or the full local unit name.\nFor example <code>&quot;10m&quot;</code> or <code>&quot;5min&quot;</code> or <code>&quot;2 hours&quot;</code></p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "value",
          "description": "<p>Value, which can be a Date or a string. If a string is specified, it will be converted using the\nspecified <a href=\"#Core/widget/TimeField#config-format\">format</a></p>",
          "type": [
            "String",
            "Date"
          ],
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "showPicker",
          "description": "<p>Show picker</p>",
          "scope": "instance"
        },
        {
          "name": "focusPicker",
          "description": "<p>Focus time picker</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimePicker",
      "modulePath": "Core/widget/TimePicker",
      "classDescription": "<p>A Popup which displays hour and minute number fields and AM/PM switcher buttons for 12 hour time format.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new TimeField({\n    label     : 'Time field',\n    appendTo  : document.body,\n    // Configure the time picker\n    picker    : {\n        items : {\n            minute : {\n                step : 5\n            }\n        }\n    }\n});\n</code></pre>\n<h2>Contained widgets</h2>\n<p>The default widgets contained in this picker are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>hour</code></td>\n<td><a href=\"#Core/widget/NumberField\">NumberField</a></td>\n<td>The hour field</td>\n</tr>\n<tr>\n<td><code>minute</code></td>\n<td><a href=\"#Core/widget/NumberField\">NumberField</a></td>\n<td>The minute field</td>\n</tr>\n<tr>\n<td><code>amButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>The am button</td>\n</tr>\n<tr>\n<td><code>pmButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>The pm button</td>\n</tr>\n</tbody>\n</table>\n<p>This class is not intended for use in applications. It is used internally by the <a href=\"#Core/widget/TimeField\">TimeField</a> class.</p>",
      "extends": [
        "Core/widget/Popup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimePicker.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "timepicker",
      "configs": [
        {
          "name": "value",
          "description": "<p>Default time value</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "format",
          "description": "<p>Time format. Used to set appropriate 12/24 hour format to display.\nSee Core.helper.DateHelper#format for formatting options.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "timeChange",
          "description": "<p>Fires when a time is changed.</p>",
          "parameters": [
            {
              "name": "time",
              "type": "Date",
              "description": "<p>The selected time.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "value",
          "description": "<p>Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the\nspecified <a href=\"#Core/widget/TimePicker#config-format\">format</a></p>",
          "type": "Date",
          "accepts": [
            "Date",
            "String"
          ],
          "scope": "instance"
        },
        {
          "name": "format",
          "description": "<p>Get/Set format for time displayed in field (see Core.helper.DateHelper#format for formatting options)</p>",
          "type": "String",
          "scope": "instance"
        },
        {
          "name": "min",
          "description": "<p>Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using the\nspecified <a href=\"#Core/widget/TimePicker#config-format\">format</a></p>",
          "type": "Date",
          "accepts": [
            "Date",
            "String"
          ],
          "scope": "instance"
        },
        {
          "name": "max",
          "description": "<p>Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using the\nspecified <a href=\"#Core/widget/TimePicker#config-format\">format</a></p>",
          "type": "Date",
          "accepts": [
            "Date",
            "String"
          ],
          "scope": "instance"
        },
        {
          "name": "initialValue",
          "description": "<p>Get/set initial value and value, which can be a Date or a string. If a string is specified,\nit will be converted using the specified <a href=\"#Core/widget/TimePicker#config-format\">format</a>. Initial value is restored on Escape click</p>",
          "type": "Date",
          "accepts": [
            "Date",
            "String"
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Toast",
      "modulePath": "Core/widget/Toast",
      "classDescription": "<p>Basic toast. Toasts are stacked on top of each other</p>",
      "examples": [
        "// simplest possible\nToast.show('Just toasting');\n\n// with config\nToast.show({\n  html: 'Well toasted',\n  showProgress: false\n});\n\n// as instance (instance is also returned from Toast.show()\nlet toast = new Toast({\n  html: 'Not going away',\n  timeout: 0\n});\n\ntoast.show();"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Toast.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "toast",
      "externalExamples": [
        "Core/widget/Toast.js"
      ],
      "configs": [
        {
          "name": "timeout",
          "description": "<p>Timeout (in ms) until the toast is automatically dismissed. Set to 0 to never hide.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 2500
        },
        {
          "name": "showProgress",
          "description": "<p>Show a progress bar indicating the time remaining until the toast is dismissed.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "color",
          "description": "<p>Toast color (should have match in toast.scss or your custom styling).\nValid values in Bryntum themes are:</p>\n<ul>\n<li>b-amber</li>\n<li>b-blue</li>\n<li>b-dark-gray</li>\n<li>b-deep-orange</li>\n<li>b-gray</li>\n<li>b-green</li>\n<li>b-indigo</li>\n<li>b-lime</li>\n<li>b-light-gray</li>\n<li>b-light-green</li>\n<li>b-orange</li>\n<li>b-purple</li>\n<li>b-red</li>\n<li>b-teal</li>\n<li>b-white</li>\n<li>b-yellow</li>\n</ul>\n<pre class=\"prettyprint source\"><code>new Toast({\n   color : 'b-blue'\n});\n</code></pre>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "show",
          "description": "<p>Show the toast</p>",
          "scope": "instance"
        },
        {
          "name": "hide",
          "description": "<p>Hide the toast</p>",
          "scope": "instance"
        },
        {
          "name": "hideAll",
          "description": "<p>Hide all visible toasts</p>",
          "scope": "static"
        },
        {
          "name": "show",
          "description": "<p>Easiest way to show a toast</p>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Message or toast config object</p>"
            }
          ],
          "examples": [
            "Toast.show('Hi');",
            "Toast.show({\n  html   : 'Read quickly, please',\n  timeout: 1000\n});"
          ],
          "scope": "static",
          "returns": {
            "type": "Core.widget.Toast"
          }
        }
      ]
    },
    {
      "name": "Tool",
      "modulePath": "Core/widget/Tool",
      "classDescription": "<p>Base class for tools.</p>\n<p>May be configured with a <code>cls</code> and a <code>handler</code> which is a function (or name of a function)\nin the owning Panel.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Tool.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "tool",
      "configs": [
        {
          "name": "align",
          "description": "<p>Specify <code>'start'</code> to place the tool before the owner's central element (e.g., the <code>title</code> of the panel).</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'end'",
          "category": "Float & align"
        },
        {
          "name": "href",
          "description": "<p>If provided, turns the tool into a link</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "handler",
          "description": "<p>The function to call when this tool is clicked. May be a function or function name\nprepended by <code>&quot;up.&quot;</code> that is resolvable in an ancestor component (such as an owning\nGrid, Scheduler, Calendar, Gantt or TaskBoard)</p>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "parameters": [
            {
              "name": "handler.event",
              "type": "Event",
              "description": "<p>The DOM event which activated the tool.</p>",
              "isSubParam": true
            },
            {
              "name": "handler.panel",
              "type": "Core.widget.Panel",
              "description": "<p>The owning Panel of the tool.</p>",
              "isSubParam": true
            },
            {
              "name": "handler.tool",
              "type": "Core.widget.Tool",
              "description": "<p>The clicked Tool.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "repeat",
          "description": "<p>A <a href=\"#Core/util/ClickRepeater\">ClickRepeater</a> config object to specify how\nclick-and-hold gestures repeat the click action.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Toolbar",
      "modulePath": "Core/widget/Toolbar",
      "classDescription": "<p>A container widget that can contain Buttons or other widgets, and is docked to the bottom or top of\na <a href=\"#Core/widget/Panel\">Panel</a>.</p>",
      "extends": [
        "Core/widget/Container"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Toolbar.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "toolbar",
      "externalExamples": [
        "Core/widget/Toolbar.js"
      ],
      "configs": [
        {
          "name": "tools",
          "description": "<p>The <a href=\"#Core/widget/Tool\">tools</a> to add either before or after the content element (the element in\nwhich <a href=\"#Core/widget/Toolbar#config-overflow\">overflow</a> occurs). Each property name is the reference by which an instantiated\ntool may be retrieved from the live <code><a href=\"#Core/widget/mixin/Toolable#property-tools\">tools</a></code> property.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "overflow",
          "description": "<p>How this Toolbar should deal with items that overflow its main axis.</p>\n<p>Values may be:</p>\n<ul>\n<li><code>'menu'</code> A button with a menu is shown and the menu contains the overflowing items.</li>\n<li><code>'scroll'</code> The items overflow and mey be scrolled into view using the mouse or scroll buttons.</li>\n<li><code>null</code> Disable overflow handling</li>\n</ul>\n<p>When mode is <code>'menu'</code>, clones of overflowing toolbar item are created and added to a Menu. Any config\nchanges to the original toolbar item are propagated to the menu's clone, so disabling a toolbar\nitem will make the clone in the menu disabled.</p>\n<p>The clone of an input field will propagate its <code>value</code> changes back to the original. The\noverflow button, its menu, and the clones should not be accessed or manipulated by application code.</p>\n<p>Note that cloned items will be allocated a unique, generated ID because all IDs must be unique,\nso CSS targeting an element ID will not apply to a clone in the overflow menu.</p>\n<p>Values may also be specified in object form containing the following properties:</p>",
          "type": [
            "String",
            "Object",
            "null"
          ],
          "scope": "inner",
          "defaultValue": "'menu'",
          "properties": [
            {
              "name": "overflow.type",
              "type": "String",
              "description": "<p><code>'scroll'</code> or <code>'menu'</code></p>",
              "isSubParam": true
            },
            {
              "name": "overflow.repeat",
              "type": "Object",
              "description": "<p>A config object to reconfigure the <a href=\"#Core/util/ClickRepeater\">ClickRepeater</a>\nwhich controls auto repeat speed when holding down the scroll buttons when <code>type</code> is <code>'scroll'</code></p>",
              "isSubParam": true
            },
            {
              "name": "overflow.filter",
              "type": "function",
              "description": "<p>A filter function which may return a falsy value to prevent toolbar\nitems from being cloned into the overflow menu.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "widgetCls",
          "description": "<p>Custom CSS class to add to toolbar widgets</p>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        }
      ]
    },
    {
      "name": "Tooltip",
      "modulePath": "Core/widget/Tooltip",
      "classDescription": "<p>Tooltip. Easiest way of assigning a tooltip to a widget is by setting <a href=\"#Core/widget/Widget#config-tooltip\">tooltip</a>, see example below.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Button {\n    text    : 'Hover me',\n    tooltip : 'Click me and you wont believe what happens next'\n});\n</code></pre>\n<p>By default, tooltips of widgets use a singleton Tooltip instance which may be accessed from the\n<code><a href=\"#Core/widget/Widget\">Widget</a></code> class under the name <code>Widget.tooltip</code>.\nThis is configured according to the config object on pointer over.</p>\n<p>To request a separate instance be created just for this widget, add <code>newInstance : true</code>\nto the configuration:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Button {\n    text    : 'Hover me',\n    tooltip : {\n        html        : 'Click me and you wont believe what happens next',\n        newInstance : true\n    }\n});\n</code></pre>\n<p>You can ask for the singleton instance to display configured tips for your own DOM structure using\n<code>data-btip</code> element attributes:</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;button class=&quot;my-button&quot; data-btip=&quot;Contextual help for my button&quot; data-btip-scroll-action=&quot;realign&quot;>Hover me&lt;/button>\n</code></pre>\n<h2>Showing async content</h2>\n<p>To load remote content into a simple tooltip, just load your data in the <code>beforeShow</code> listener (but ensure that the <a href=\"#Core/widget/Tooltip#property-activeTarget\">activeTarget</a> is the same when the data arrives)</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Tooltip({\n    listeners : {\n        beforeShow : ({ source : tip }) => tip.html = AjaxHelper.get('someurl').then(response => response.text());\n    }\n});\n</code></pre>\n<p>If you have multiple targets that should show a tooltip when hovered over, look at <a href=\"#Core/widget/Tooltip#config-forSelector\">forSelector</a> and <a href=\"#Core/widget/Tooltip#config-getHtml\">getHtml</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Tooltip({\n    forSelector : '.myCssClass',\n    getHtml     : ({ source : tip }) => AjaxHelper.fetch('data').then(response => response.text())\n});\n</code></pre>",
      "extends": [
        "Core/widget/Popup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Tooltip.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "tooltip",
      "externalExamples": [
        "Core/widget/Tooltip.js"
      ],
      "events": [
        {
          "name": "beforeShow",
          "description": "<p>Triggered before tooltip widget is shown. Return <code>false</code> to prevent the action.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Tooltip",
              "description": "<p>The Tooltip</p>"
            },
            {
              "name": "source.triggeredByEvent",
              "type": "Event",
              "description": "<p>The event that triggered this Tooltip to show.</p>",
              "isSubParam": true
            }
          ],
          "preventable": true
        },
        {
          "name": "pointerOver",
          "description": "<p>Triggered when a mouseover event is detected on a potential target element.\nReturn false to prevent the action</p>",
          "parameters": [
            {
              "name": "sourceThe",
              "type": "Core.widget.Tooltip",
              "description": "<p>tooltip instance.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The mouseover event.</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "mouseOffsetX",
          "description": "<p>Horizontal offset from mouse when <a href=\"#Core/widget/Tooltip#config-anchorToTarget\">anchorToTarget</a> is <code>false</code>.</p>\n<p>Direction independent, the value is internally flipped (by multiplying it with -1) for RTL.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 15
        },
        {
          "name": "mouseOffsetY",
          "description": "<p>Vertical offset from mouse when <a href=\"#Core/widget/Tooltip#config-anchorToTarget\">anchorToTarget</a> is <code>false</code></p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 15
        },
        {
          "name": "getHtml",
          "description": "<p>A method, or the <em>name</em> of a method called to update the tooltip's content when the\ncursor is moved over a target. It receives one argument containing context about the\ntooltip and show operation. The function should return a string, or a Promise yielding\na string.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    title    : 'Client list',\n    appendTo : myElement,\n    store    : myStore,\n    columns  : myColumns,\n    tbar     : {\n        items : {\n            text : 'Reload,\n            tooltip : {\n                // Will look in ownership hierarchy for the method\n                // which will be found on the grid.\n                getHtml : 'up.getReloadButtonTip'\n            }\n        }\n    },\n    getReloadButtonTip() {\n        return `Reload ${this.title}`;\n    }\n});\n</code></pre>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "returns": {
            "type": [
              "String",
              "Promise"
            ]
          },
          "parameters": [
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.tip",
              "type": "Core.widget.Tooltip",
              "description": "<p>The tooltip instance</p>",
              "isSubParam": true
            },
            {
              "name": "context.element",
              "type": "HTMLElement",
              "description": "<p>The Element for which the Tooltip is monitoring mouse movement</p>",
              "isSubParam": true
            },
            {
              "name": "context.activeTarget",
              "type": "HTMLElement",
              "description": "<p>The target element that triggered the show</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The raw DOM event</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "forElement",
          "description": "<p>DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer\n(see <a href=\"#Core/widget/Tooltip#config-hoverDelay\">hoverDelay</a>) to show itself.</p>\n<p>If the <a href=\"#Core/widget/Tooltip#config-forSelector\">forSelector</a> is specified, then mouse entering matching elements within the <code>forElement</code>\nwill trigger the show timer to start.</p>\n<p>Note that when moving from matching element to matching element within the <code>forElement</code>, the tooltip\nwill remain visible for <a href=\"#Core/widget/Tooltip#config-hideDelay\">hideDelay</a> milliseconds after exiting one element, so that rapidly\nentering another matching element will not cause hide+show flicker. To prevent this behaviour configure\nwith <code>hideDelay: 0</code>.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "trackMouse",
          "description": "<p>By default, once a tooltip is shown aligned as requested, it stays put.</p>\n<p>Setting this to <code>true</code> causes the tooltip to be aligned by the mouse,\noffset by <code>[<a href=\"#Core/widget/Tooltip#config-mouseOffsetX\">mouseOffsetX</a>, <a href=\"#Core/widget/Tooltip#config-mouseOffsetY\">mouseOffsetY</a>]</code> and\nkeeps the tooltip aligned to the mouse maintaining the configured offsets\nas the mouse moves within its activating element.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "updateContentOnMouseMove",
          "access": "private",
          "description": "<p>By default, a tooltip displays static content. In the Scheduler however, there are\nplenty of uses cases when the tip content is based on the current mouse position (dragging events, resizing events, schedule hover tip, drag creation of events etc). Set\nto <code>true</code> to update contents on mouse movement.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "forSelector",
          "description": "<p>A CSS selector which targets child elements of the <a href=\"#Core/widget/Tooltip#config-forElement\">forElement</a> that should produce a tooltip when hovered over.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hideOnDelegateChange",
          "description": "<p>By default, when moving rapidly from target to target, if, when mouseovering\na new target, the tip is still visible, the tooltip does not hide, it remains\nvisible, but updates its content however it is configured to do so.</p>\n<p>Configure <code>hideOnDelegateChange : true</code> to have the tip hide, and then trigger\na new show delay upon entry of a new target while still visible.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "anchorToTarget",
          "description": "<p>Set to true to anchor tooltip to the triggering target. If set to <code>false</code>, the tooltip\nwill align to the mouse position. When set to <code>false</code>, it will also set <code>anchor: false</code>\nto hide anchor arrow.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showOnHover",
          "description": "<p>Show on hover</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "hoverDelay",
          "description": "<p>The amount of time to hover before showing</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 500
        },
        {
          "name": "autoShow",
          "description": "<p>Show immediately when created</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "dismissDelay",
          "description": "<p>The time (in milliseconds) that the Tooltip should stay visible for when it shows over its\ntarget. If the tooltip is anchored to its target, then moving the mouse during this time\nresets the timer so that the tooltip will remain visible.</p>\n<p>Defaults to <code>0</code> which means the Tooltip will persist until the mouse leaves the target.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "hideDelay",
          "description": "<p>The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.</p>\n<p>May be configured as <code>false</code> to persist visible after the mouse exits the target element. Configure it\nas 0 to always retrigger <code>hoverDelay</code> even when moving mouse inside <code>fromElement</code></p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 500
        },
        {
          "name": "loadingMsg",
          "description": "<p>The message to show while an async tooltip is fetching its content.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "Loading..."
        },
        {
          "name": "allowOver",
          "description": "<p>Keep the tooltip open if user moves the mouse it.</p>\n<p>If this is <em>not</em> explicitly configured as <code>false</code>, then this is automatically set\nwhen there are any visible, interactive child items added such as <a href=\"#Core/widget/Tooltip#config-tools\">tools</a>, or\n<a href=\"#Core/widget/Tooltip#config-items\">items</a> which are interactive such as buttons or input fields.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "properties": [
        {
          "name": "activeTarget",
          "description": "<p>The HTML element that triggered this Tooltip to show</p>",
          "type": "HTMLElement",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "html",
          "description": "<p>Get/set the HTML to display. When specifying HTML, this widget's element will also have <code>b-html</code> added to its\nclassList, to allow targeted styling. To create async tooltip and show the <a href=\"#Core/widget/Tooltip#config-loadingMsg\">loadingMsg</a>, see code below:\nFor example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Tooltip({\n    listeners : {\n        beforeShow : ({ source : tip }) => {\n            tip.showAsyncMessage();\n            AjaxHelper.get('someurl').then(response => tip.html = 'Done!');\n        }\n    }\n});\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "triggeredByEvent",
          "description": "<p>The DOM event that triggered this tooltip to show</p>",
          "type": "Event",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "currentOverElement",
          "description": "<p>Updated dynamically with the current element that the mouse is over. For use when showing a Tooltip\nfrom code which is not triggered by a pointer event so that a tooltip can be positioned.</p>",
          "type": "HTMLElement",
          "scope": "static",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "showAsyncMessage",
          "description": "<p>Shows a spinner and a message to indicate an async flow is ongoing</p>",
          "parameters": [
            {
              "name": "message",
              "type": "String",
              "description": "<p>The message, defaults to <a href=\"#Core/widget/Tooltip#config-loadingMsg\">loadingMsg</a></p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "abortDelayedHide",
          "access": "private",
          "description": "<p>Stops both timers which may hide this tooltip, the one which counts down from mouseout\nand the one which counts down from mouseover show for dismissDelay ms</p>",
          "scope": "instance"
        },
        {
          "name": "onMouseMove",
          "access": "private",
          "description": "<p>Mouse move event listener which updates tooltip</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Widget",
      "modulePath": "Core/widget/Widget",
      "classDescription": "<p>Base class for other widgets. The Widget base class simply encapsulates an element, and may optionally contain some\nspecified <a href=\"#Core/widget/Widget#config-html\">html</a>.</p>\n<h2>Rendering</h2>\n<p>Subclasses should override the <a href=\"#Core/widget/Widget#function-compose\">compose</a> method to return their encapsulating element and internal\nDOM structure. The <code>compose()</code> method returns a <a href=\"#Core/helper/DomHelper#function-createElement-static\">createElement</a> config\nobject that is* used to create the DOM structure, based on its <a href=\"#Core/Base#property-configurable-static\">configurable</a>\nproperties:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     static get configurable() {\n         return {\n             cls  : null,\n             text : null\n         };\n     }\n\n     compose() {\n         const { cls, text } = this;  // collect all relevant configs properties (for auto-detection)\n\n         return {\n             tag   : 'button',\n             class : cls,\n             text\n         };\n     }\n }\n</code></pre>\n<p>The config properties used by the <code>compose()</code> method are auto-detected when the method is first called for a class.\nAll relevant properties must be read, even if they end up not being used so that future changes to these properties\nwill mark the rendering as dirty.</p>\n<p>When a config property used by <code>compose()</code> is modified, the <a href=\"#Core/widget/Widget#function-recompose\">recompose</a> method is called. Since\n<code>recompose()</code> is a <a href=\"#Core/mixin/Delayable#property-delayable-static\">delayable</a> method, calling it schedules a\ndelayed call to <code>compose()</code> and a DOM update. Accessing the Widget's primary <code>element</code> or any reference element\nproperty will force the DOM update to occur immediately.</p>\n<h3>Child Elements</h3>\n<p>Unlike typical <a href=\"#Core/helper/DomHelper#function-createElement-static\">DOM config</a> objects, the object returned\nby <code>compose()</code> can use an object to simplify naming:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     ...\n\n     compose() {\n         const { cls, iconCls, text } = this;  // collect all relevant configs properties (for auto-detection)\n\n         return {\n             tag   : 'button',\n             class : cls,\n\n             children : {\n                 iconElement : iconCls && {\n                     class : {\n                         'button-icon' : 1,\n                         [iconCls]     : 1\n                     }\n                 },\n\n                 textElement : {\n                     text\n                 }\n             }\n         };\n     }\n }\n</code></pre>\n<p>The keys of the <code>children</code> are <a href=\"https://2ality.com/2015/10/property-traversal-order-es6.html\">iterated</a> to convert\nthe values into the array required by <a href=\"#Core/helper/DomHelper#function-createElement-static\">createElement</a>. The names of the\nproperties becomes the <code>reference</code> of the element.</p>\n<p>For example, the above is equivalent to the following:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     ...\n\n     compose() {\n         const { cls, iconCls, text } = this;  // collect all relevant configs properties (for auto-detection)\n\n         return {\n             tag   : 'button',\n             class : cls,\n\n             children : [iconCls && {\n                 reference : 'iconElement',\n                 class : {\n                     'button-icon' : 1,\n                     [iconCls]     : 1\n                 }\n             }, {\n                 reference : 'textElement',\n                 text\n             }]\n         };\n     }\n }\n</code></pre>\n<p>The object form of <code>children</code> is preferred for clarity but also because it facilitates inheritance.</p>\n<h3>Inheritance</h3>\n<p>When a derived class implements <code>compose()</code>, the object it returns is automatically merged with the object returned\nby the base class.</p>\n<p>For example, the following class adds a new child element:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MenuButton extends Button {\n     ...\n\n     compose() {\n         const { menuCls } = this;  // collect all relevant configs properties (for auto-detection)\n\n         return {\n             children : {\n                 menuElement : {\n                     class : {\n                         'button-menu' : 1,\n                         [menuCls]     : 1\n                     }\n                 }\n             }\n         };\n     }\n }\n</code></pre>\n<h3>Listeners</h3>\n<p>Reference elements may also define event <code>listeners</code> in the <code>compose()</code> method:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     compose() {\n         const { cls, text } = this;\n\n         return {\n             tag   : 'button',\n             class : cls,\n             text,\n\n             listeners : {\n                 click : 'onClick'\n             }\n         };\n     }\n\n     onClick(event) {\n         // handle click event\n     }\n }\n</code></pre>\n<h2>Resolving properties</h2>\n<p>Values for a Widgets properties can be resolved from the ownership hierarchy. For example a text field in a toolbar\ncan get its initial value from a property on the container owning the toolbar. This is achieved by prefixing the\ndesired property name with 'up.':</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const grid = new Grid((\n     tbar : [{\n         type  : 'numberfield',\n         // Fields value will be retrieved from the grids rowHeight property\n         value : 'up.rowHeight'\n     }]\n });\n</code></pre>\n<p>NOTE: this is for now a one way one time binding, the value will only be read initially and not kept up to date on\nlater changes.</p>",
      "extends": [
        "Core/Base"
      ],
      "mixes": [
        "Core/mixin/Events",
        "Core/localization/Localizable"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Widget.js",
      "path": "/Calendar/lib/Core/widget",
      "classType": "widget",
      "properties": [
        {
          "name": "$name",
          "description": "<p>Class name getter.\nUsed when original ES6 class name is minified or mangled during production build.\nShould be overriden in each class which extends Widget or it descendants.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyNewClass extends Widget {\n    static get $name() {\n       return 'MyNewClass';\n    }\n}\n</code></pre>",
          "type": "String",
          "scope": "static"
        },
        {
          "name": "type",
          "description": "<p>Widget name alias which you can use in the <code>items</code> of a Container widget.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyWidget extends Widget {\n    static get type() {\n       return 'mywidget';\n    }\n}\n</code></pre>\n<pre class=\"prettyprint source lang-javascript\"><code>const panel = new Panel({\n   title : 'Cool widgets',\n   items : [\n      { type : 'mywidget', html : 'Lorem ipsum dolor sit amet...' }\n   ]\n});\n</code></pre>",
          "type": "String",
          "scope": "static"
        },
        {
          "name": "element",
          "description": "<p>Get this widget's encapsulating HTMLElement, which is created along with the widget but added to DOM at\nrender time.</p>",
          "type": "HTMLElement",
          "scope": "inner",
          "readonly": true,
          "category": "DOM"
        },
        {
          "name": "id",
          "description": "<p>Get/set widgets id</p>",
          "type": "String",
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "content",
          "description": "<p>Set HTML content safely, without disturbing sibling elements which may have been\nadded to the <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a> by plugins and features.\nWhen specifying html, this widget's element will also have the <a href=\"#Core/widget/Widget#config-htmlCls\">htmlCls</a>\nadded to its classList, to allow targeted styling.</p>",
          "type": "String",
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "tab",
          "description": "<p>The <a href=\"#Core/widget/Tab\">tab</a> created for this widget when it is placed in a\n<a href=\"#Core/widget/TabPanel\">TabPanel</a>.</p>",
          "type": "Core.widget.Tab",
          "scope": "inner",
          "readonly": true,
          "category": "Misc"
        },
        {
          "name": "disabled",
          "description": "<p>Get/set element's disabled state</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "readOnly",
          "description": "<p>Get/set element's readOnly state. This is only valid if the widget is an input\nfield, <strong>or contains input fields at any depth</strong>. Updating this property will trigger\na <a href=\"#Core/widget/Widget#event-readOnly\">readOnly</a> event.</p>\n<p>All descendant input fields follow the widget's setting. If a descendant\nwidget has a readOnly config, that is set.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "scrollable",
          "description": "<p>Accessor to the <a href=\"#Core/helper/util/Scroller\">Scroller</a> which can be used\nto both set and read scroll information.</p>",
          "type": "Core.helper.util.Scroller",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "margin",
          "description": "<p>Get element's margin property. This may be configured as a single number or a <code>TRBL</code> format string.\nnumeric-only values are interpreted as pixels.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "flex",
          "description": "<p>Get element's flex property. This may be configured as a single number or a format string:</p>\n<pre><code> &lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;\n</code></pre>\n<p>Numeric-only values are interpreted as the <code>flex-grow</code> value.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "alignSelf",
          "description": "<p>Get/set this widget's <code>align-self</code> flexbox setting. This may be set to modify how this widget is aligned\nwithin the cross axis of a flexbox layout container.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "hidden",
          "description": "<p>Get/set the widget hidden state.</p>\n<p>Note: <code>hidden : false</code> does <em>not</em> mean that this widget is definitely visible.\nTo ascertain visibility, use the <a href=\"#Core/widget/Widget#property-isVisible\">isVisible</a> property.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Visibility"
        },
        {
          "name": "hasGeneratedId",
          "access": "private",
          "description": "<p>true if no id was set, will use generated id instead (widget1, ...). Toggle automatically on creation</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "innerItem",
          "access": "internal",
          "description": "<p>This readonly property is <code>true</code> for normal widgets in the <a href=\"#Core/widget/Container#config-items\">items</a> of\na container. It is <code>false</code> for special widgets such as a <a href=\"#Core/widget/Panel#config-tbar\">tbar</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "renderConfigs",
          "access": "internal",
          "description": "<p>This property declares the set of config properties that affect a Widget's rendering, i.e., the configs\nused by the <a href=\"#Core/widget/Widget#function-compose\">compose</a> method.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     static get renderConfigs() {\n         return [ 'cls', 'iconCls', 'text' ];\n     }\n }\n</code></pre>\n<p>Alternatively this can be an object:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class Button extends Widget {\n     static get renderConfigs() {\n         return {\n             cls     : true,\n             iconCls : true,\n             text    : true\n         };\n     }\n }\n</code></pre>",
          "type": [
            "Object",
            "Array.<String>"
          ],
          "scope": "static",
          "category": "Configuration"
        },
        {
          "name": "cellInfo",
          "description": "<p>An object providing the <code>record</code> and <code>column</code> for a widget embedded inside a <a href=\"#Grid/column/WidgetColumn\">WidgetColumn</a></p>\n<pre class=\"prettyprint source lang-javascript\"><code>columns : [\n   {\n       type   : 'widget',\n       widgets: [{\n           type     : 'button',\n           icon     : 'b-fa b-fa-trash',\n           onAction : ({ source : btn }) => btn.cellInfo.record.remove()\n       }]\n   }\n]\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "readonly": true,
          "category": "Misc",
          "properties": [
            {
              "name": "cellInfo.record",
              "type": "Core.data.Model",
              "isSubParam": true
            },
            {
              "name": "cellInfo.column",
              "type": "Grid.column.Column",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "all",
          "access": "internal",
          "description": "<p>Returns an array containing all existing Widgets. The returned array is generated by this call and is not an\ninternal structure.</p>",
          "type": "Array.<Core.widget.Widget>",
          "scope": "static",
          "readonly": true
        },
        {
          "name": "recomposeAsync",
          "access": "internal",
          "description": "<p>Get/set the <a href=\"#Core/widget/Widget#config-recomposeAsync\">recomposeAsync</a> config for all widgets. Setting this value will set the config for\nall existing widgets and will be the default value for newly created widgets. Set this value to <code>null</code> to disable\nthe default setting for new widgets while leaving existing widgets unaffected.</p>",
          "type": "Boolean",
          "scope": "static"
        },
        {
          "name": "isComposable",
          "access": "internal",
          "description": "<p>Returns <code>true</code> if this class uses <code>compose()</code> to render itself.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ]
        },
        {
          "name": "dataset",
          "description": "<p>Get widgets elements dataset or assign to it</p>",
          "type": "Object",
          "scope": "instance",
          "category": "DOM"
        },
        {
          "name": "contentElement",
          "description": "<p>The child element into which content should be placed. This means where <a href=\"#Core/widget/Widget#config-html\">html</a> should be put,\nor, for <a href=\"#Core/widget/Container\">Container</a>s, where child items should be rendered.</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true,
          "category": "DOM"
        },
        {
          "name": "style",
          "description": "<p>Get/set widgets elements style. The setter accepts a cssText string or a style config object, the getter always\nreturns a CSSStyleDeclaration</p>",
          "type": "CSSStyleDeclaration",
          "accepts": [
            "String",
            "Object",
            "CSSStyleDeclaration"
          ],
          "scope": "instance",
          "category": "DOM"
        },
        {
          "name": "overflowElement",
          "description": "<p>The child element which scrolls if any. This means the element used by the <a href=\"#Core/widget/Widget#config-scrollable\">scrollable</a>.</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true,
          "category": "DOM"
        },
        {
          "name": "html",
          "description": "<p>Get/set HTML to display. When specifying HTML, this widget's element will also have the\n<a href=\"#Core/widget/Widget#config-htmlCls\">htmlCls</a> added to its classList, to allow targeted styling.</p>",
          "type": "String",
          "scope": "instance",
          "category": "DOM"
        },
        {
          "name": "anchorSize",
          "description": "<p>Returns an <code>[x, y]</code> array containing the width and height of the anchor arrow used when\naligning this Widget to another Widget or element.</p>\n<p>The height is the height of the arrow when pointing upwards, the width is the width\nof the baseline.</p>",
          "type": "Array.<Number>",
          "scope": "instance",
          "category": "Float & align"
        },
        {
          "name": "x",
          "description": "<p>Moves this Widget to the desired x position.</p>\n<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a> and not aligned or anchored to an element.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Float & align"
        },
        {
          "name": "y",
          "description": "<p>Moves this Widget to the desired y position.</p>\n<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a> and not aligned or anchored to an element.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Float & align"
        },
        {
          "name": "width",
          "description": "<p>Get elements offsetWidth or sets its style.width, or specified width if element not created yet.</p>",
          "type": "Number",
          "accepts": [
            "Number",
            "String"
          ],
          "scope": "instance",
          "category": "Layout"
        },
        {
          "name": "maxWidth",
          "description": "<p>Get/set elements maxWidth. Getter returns max-width from elements style, which is always a string. Setter accepts\neither a String or a Number (which will have 'px' appended). Note that like <a href=\"#Core/widget/Widget#config-width\">width</a>,\n<em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": "String",
          "accepts": [
            "String",
            "Number"
          ],
          "scope": "instance",
          "category": "Layout"
        },
        {
          "name": "minWidth",
          "description": "<p>Get/set elements minWidth. Getter returns min-width from elements style, which is always a string. Setter accepts\neither a String or a Number (which will have 'px' appended). Note that like <a href=\"#Core/widget/Widget#config-width\">width</a>,\n<em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": "String",
          "accepts": [
            "String",
            "Number"
          ],
          "scope": "instance",
          "category": "Layout"
        },
        {
          "name": "height",
          "description": "<p>Get element's offsetHeight or sets its style.height, or specified height if element no created yet.</p>",
          "type": "Number",
          "accepts": [
            "Number",
            "String"
          ],
          "scope": "instance",
          "category": "Layout"
        },
        {
          "name": "maxHeight",
          "description": "<p>Get/set element's maxHeight. Getter returns max-height from elements style, which is always a string. Setter\naccepts either a String or a Number (which will have 'px' appended). Note that like <a href=\"#Core/widget/Widget#config-height\">height</a>,\n<em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": "String",
          "accepts": [
            "String",
            "Number"
          ],
          "scope": "instance",
          "category": "Layout"
        },
        {
          "name": "minHeight",
          "description": "<p>Get/set element's minHeight. Getter returns min-height from elements style, which is always a string. Setter\naccepts either a String or a Number (which will have 'px' appended). Note that like <a href=\"#Core/widget/Widget#config-height\">height</a>,\n<em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": "String",
          "accepts": [
            "String",
            "Number"
          ],
          "scope": "instance",
          "category": "Layout"
        },
        {
          "name": "tooltip",
          "description": "<p>Get/set a tooltip on the widget. Accepts a string or tooltip config (specify true (or 'true') to use placeholder\nas tooltip). When using a string it will configure the tooltip with <code>textContent: true</code> which enforces a default\nmax width.</p>\n<p>By default, this uses a singleton Tooltip instance which may be accessed from the\n<code><a href=\"#Core/widget/Widget\">Widget</a></code> class under the name <code>Widget.tooltip</code>.\nThis is configured according to the config object on pointer over.</p>\n<p>To request a separate instance be created just for this widget, add <code>newInstance : true</code>\nto the configuration.</p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "instance",
          "category": "Misc"
        },
        {
          "name": "isVisible",
          "description": "<p>Determines visibility by checking if the Widget is hidden, or any ancestor is hidden and that it has an\nelement which is visible in the DOM</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Visibility"
        },
        {
          "name": "focusElement",
          "description": "<p>Get this widget's primary focus holding element if this widget is itself focusable, or contains focusable widgets.</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true,
          "category": "DOM"
        },
        {
          "name": "assignedId",
          "access": "private",
          "description": "<p>Get id assigned by user (not generated id)</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "String"
                ]
              }
            }
          ],
          "readonly": true,
          "category": "Misc"
        },
        {
          "name": "owner",
          "description": "<p>Get the owning Widget of this Widget. If this Widget is directly contained, then the containing\nWidget is returned. If this Widget is floating, the configured <code>owner</code> property is returned.\nIf there is a <code>forElement</code>, that element's encapsulating Widget is returned.</p>",
          "type": "Core.widget.Widget",
          "scope": "instance",
          "readonly": true,
          "category": "Widget hierarchy"
        },
        {
          "name": "previousSibling",
          "description": "<p>Get this Widget's previous sibling in the parent <a href=\"#Core/widget/Container\">Container</a>, or, if not\nin a Container, the previous sibling widget in the same <em>parentElement</em>.</p>",
          "type": "Core.widget.Widget",
          "scope": "instance",
          "readonly": true,
          "category": "Widget hierarchy"
        },
        {
          "name": "nextSibling",
          "description": "<p>Get this Widget's next sibling in the parent <a href=\"#Core/widget/Container\">Container</a>, or, if not\nin a Container, the next sibling widget in the same <em>parentElement</em>.</p>",
          "type": "Core.widget.Widget",
          "scope": "instance",
          "readonly": true,
          "category": "Widget hierarchy"
        },
        {
          "name": "staticClassList",
          "access": "internal",
          "description": "<p>Returns the <code>DomClassList</code> for this widget's class. This object should not be mutated.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Core.helper.util.DomClassList"
                ]
              }
            }
          ],
          "category": "DOM"
        },
        {
          "name": "uiClasses",
          "access": "internal",
          "description": "<p>Returns the cross-product of the classes <code>staticClassList</code> with each <code>ui</code> as an array of strings.</p>\n<p>For example, a Combo with a <code>ui: 'foo bar'</code> would produce:</p>\n<pre><code> [\n     'b-widget-foo', 'b-field-foo', 'b-textfield-foo', 'b-pickerfield-foo', 'b-combo-foo',\n     'b-widget-bar', 'b-field-bar', 'b-textfield-bar', 'b-pickerfield-bar', 'b-combo-bar'\n ]\n</code></pre>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Array.<String>"
                ]
              }
            }
          ],
          "category": "DOM"
        },
        {
          "name": "uiClassList",
          "access": "internal",
          "description": "<p>Returns the cross-product of the classes <code>staticClassList</code> with each <code>ui</code> as a <code>DomClassList</code> instance.</p>\n<p>For example, a Combo with a <code>ui: 'foo bar'</code> would produce:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>     new DomClassList({\n         'b-field-ui-foo'       : 1,\n         'b-textfield-ui-foo'   : 1,\n         'b-pickerfield-ui-foo' : 1,\n         'b-combo-ui-foo'       : 1,\n\n         'b-field-ui-bar'       : 1,\n         'b-textfield-ui-bar'   : 1,\n         'b-pickerfield-ui-bar' : 1,\n         'b-combo-ui-bar'       : 1\n     });\n</code></pre>\n<p>A Panel with a <code>ui: 'foo bar'</code> would produce:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>     new DomClassList({\n         'b-panel-ui-foo' : 1,\n         'b-panel-ui-bar' : 1\n     });\n</code></pre>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Core.helper.util.DomClassList"
                ]
              }
            }
          ],
          "category": "DOM"
        },
        {
          "name": "widgetClassList",
          "access": "internal",
          "description": "<p>Used by the Widget class internally to create CSS classes based on this Widget's\ninheritance chain to allow styling from each level to apply.</p>\n<p>For example Combo would yield <code>&quot;[&quot;b-widget&quot;, &quot;b-field&quot;, &quot;b-textfield&quot;, &quot;b-pickerfield&quot;, &quot;b-combo&quot;]&quot;</code></p>\n<p>May be implemented in subclasses to add or remove classes from the super.widgetClassList</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Array.<String>"
                ]
              },
              "description": "<p>The css class list named using the class name.</p>"
            }
          ],
          "category": "DOM"
        }
      ],
      "configs": [
        {
          "name": "element",
          "access": "private",
          "description": "<p>A <a href=\"#Core/helper/DomHelper#function-createElement-static\">createElement</a> config object or HTML string from which to\ncreate the Widget's element.</p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "callOnFunctions",
          "description": "<p>Set to false to not call onXXX method names (e.g. <code>onShow</code>, <code>onClick</code>), as an easy way to listen for events.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const container = new Container({\n    callOnFunctions : true\n\n    onHide() {\n         // Do something when the 'hide' event is fired\n    }\n});\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "id",
          "description": "<p>Widget id, if not specified one will be generated. Also used for lookups through Widget.getById</p>",
          "type": "String",
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "html",
          "description": "<p>The HTML to display initially or a function returning the markup (called at widget construction time)</p>",
          "type": [
            "String",
            "function"
          ],
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "content",
          "description": "<p>The HTML content that coexists with sibling elements which may have been added to the\n<a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a> by plugins and features.\nWhen specifying html, this widget's element will also have the <a href=\"#Core/widget/Widget#config-htmlCls\">htmlCls</a>\nclass added to its classList, to allow targeted styling.</p>",
          "type": "String",
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "cls",
          "description": "<p>Custom CSS classes to add to element.\nMay be specified as a space separated string, or as an object in which property names\nwith truthy values are used as the class names:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> cls : {\n     'b-my-class'     : 1,\n     [this.extraCls]  : 1,\n     [this.activeCls] : this.isActive\n }\n</code></pre>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "ui",
          "description": "<p>Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified\nas a space separated string, an array of strings, or as an object in which property names with truthy\nvalues are used as the class names.</p>\n<p>For example, consider a <code>Panel</code> with a <code>ui</code> config like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> new Panel({\n     text : 'OK',\n     ui   : 'light'\n });\n</code></pre>\n<p>This will apply the CSS class <code>'b-panel-ui-light'</code> to the main element of the panel as well as its many\nchild elements. This allows simpler CSS selectors to match the child elements of this particular panel\nUI:</p>\n<pre class=\"prettyprint source\"><code> .b-panel-content.b-panel-ui-light {\n     background-color : #eee;\n }\n</code></pre>\n<p>Using the <a href=\"#Core/widget/Widget#config-cls\">cls config</a> would make matching the content element more complex, and in\nthe presence of <a href=\"#Core/widget/Panel#config-strips\">docked items</a> and nested panels, impossible to\ntarget accurately.</p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "collapsify",
          "access": "private",
          "description": "<p>Determines how a <a href=\"#Core/widget/Panel#config-collapsed\">collapsed</a> panel will treat this widget if it resides\nwithin the panel's header (for example, as one of its <a href=\"#Core/widget/Panel#config-strips\">strips</a> or\n<a href=\"#Core/widget/Panel#config-tools\">tools</a>).</p>\n<p>Valid options are:</p>\n<ul>\n<li><code>null</code> : The widget will be moved to the overlay when collapsed (the default).</li>\n<li><code>false</code> : The widget will be unaffected when the panel is collapsed.</li>\n<li><code>'hide'</code> : The widget will be hidden when the panel is collapsed.</li>\n<li><code>'overlay'</code> : The widget will only appear in the collapsed panel's overlay header.</li>\n</ul>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "contentElementCls",
          "description": "<p>Custom CSS classes to add to the <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.\nMay be specified as a space separated string, or as an object in which property names\nwith truthy values are used as the class names:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> cls : {\n     'b-my-class'     : 1,\n     [this.extraCls]  : 1,\n     [this.activeCls] : this.isActive\n }\n</code></pre>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "defaultCls",
          "access": "internal",
          "description": "<p>Custom CSS classes to add to this widget's <code>element</code>. This property is typically used internally to\nassign default CSS classes while allowing <code>cls</code> to alter these defaults. It is not recommended that\nclient code set this config but instead should set <code>cls</code>.</p>\n<p>For example, to remove a class defined by <code>defaultCls</code> using <code>cls</code>, declare the class name as a key with\na falsy value:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> cls : {\n     'default-class' : false\n }\n</code></pre>",
          "type": [
            "String",
            "Object",
            "Array.<String>"
          ],
          "scope": "inner"
        },
        {
          "name": "dock",
          "description": "<p>Controls the placement of this widget when it is added to a <a href=\"#Core/widget/Panel\">panel's</a>\n<a href=\"#Core/widget/Panel#config-strips\">strips collection</a>. Typical values for this config are <code>'top'</code>,\n<code>'bottom'</code>, <code>'left'</code>, or <code>'right'</code>, which cause the widget to be placed on that side of the panel's\nbody. Such widgets are called &quot;edge strips&quot;.</p>\n<p>Also accepts direction neutral horizontal values <code>'start'</code> and `'end'``.</p>\n<p>If this config is set to <code>'header'</code>, the widget is placed in the panel's header, following the title. If\nthis config is set to <code>'pre-header'</code>, the widget is placed before the title. Such widgets are called\n&quot;header strips&quot;.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "tab",
          "description": "<p>A configuration for the <a href=\"#Core/widget/Tab\">tab</a> created for this widget when it is placed in a\n<a href=\"#Core/widget/TabPanel\">TabPanel</a>. For example, this config can be used to control the icon of the <code>tab</code> for\nthis widget:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> items : [{\n     type : 'panel',\n     // other configs...\n\n     tab : {\n         icon : 'b-fa-wrench'\n     }\n }, ... ]\n</code></pre>\n<p>Another use for this config is to set the tab's <a href=\"#Core/widget/mixin/Rotatable#config-rotate\">rotate</a> value\ndifferently than the default managed by the <code>TabPanel</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> items : [{\n     type : 'panel',\n     // other configs...\n\n     tab : {\n         rotate : false   // don't rotate even if tabBar is docked left or right\n     }\n }, ... ]\n</code></pre>\n<p>Set this to <code>false</code> to prevent the creation of a <code>tab</code> for this widget. In this case, this widget must\nbe <a href=\"#Core/widget/Widget#function-show\">shown</a> explicitly. The <a href=\"#Core/widget/TabPanel#config-activeTab\">activeTab</a> for the\ntab panel will be -1 in this situation.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> items : [{\n     type : 'panel',\n     tab  : false,    // no tab for this item\n\n     // other configs...\n }, ... ]\n</code></pre>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "elementAttributes",
          "access": "internal",
          "description": "<p>An object specifying attributes to assign to the root element of this widget</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "htmlCls",
          "description": "<p>The CSS class(es) to add when HTML content is being applied to this widget.</p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "style",
          "description": "<p>Custom style spec to add to element</p>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "disabled",
          "description": "<p>Disable or enable the widget. It is similar to <a href=\"#Core/widget/Widget#config-readOnly\">readOnly</a> except a disabled widget\ncannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "readOnly",
          "description": "<p>Whether this widget is read-only.  This is only valid if the widget is an input\nfield, <strong>or contains input fields at any depth</strong>.</p>\n<p>All descendant input fields follow the widget's setting. If a descendant\nwidget has a readOnly config, that is set.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "adopt",
          "description": "<p>Element (or element id) to adopt as this Widget's encapsulating element. The widget's\ncontent will be placed inside this element.</p>\n<p>If this widget has not been configured with an id, it will adopt the id of the element\nin order to preserve CSS rules which may apply to the id.</p>",
          "type": [
            "HTMLElement",
            "String"
          ],
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "appendTo",
          "description": "<p>Element (or element id) to append this widgets element to</p>",
          "type": [
            "HTMLElement",
            "String"
          ],
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "insertBefore",
          "description": "<p>Element (or element id) to insert this widget before. If provided, <a href=\"#Core/widget/Widget#config-appendTo\">appendTo</a> config is ignored.</p>",
          "type": [
            "HTMLElement",
            "String"
          ],
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "insertFirst",
          "description": "<p>Element (or element id) to append this widget element to, as a first child. If provided, <a href=\"#Core/widget/Widget#config-appendTo\">appendTo</a> config is ignored.</p>",
          "type": [
            "HTMLElement",
            "String"
          ],
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "dataset",
          "description": "<p>Object to apply to elements dataset (each key will be used as a data-attribute on the element)</p>",
          "type": "Object",
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "tooltip",
          "description": "<p>Tooltip for the widget, either as a string or as a Tooltip config object.</p>\n<p>By default, the Widget will use a single, shared instance to display its tooltip as configured,\nreconfiguring it to the specification before showing it. Therefore, it may not be permanently\nmutated by doing things such as adding fixed event listeners.</p>\n<p>To have this Widget <em>own</em> its own <code>Tooltip</code> instance, add the property <code>newInstance : true</code>\nto the configuration. In this case, the tooltip's <a href=\"#Core/widget/Widget#property-owner\">owner</a> will be this Widget.</p>\n<p><strong>Note that in the absence of a configured <a href=\"#Core/widget/Widget#config-ariaDescription\">ariaDescription</a>, the tooltip's value\nwill be used to populate an <code>aria-describedBy</code> element within this Widget.</strong></p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "showTooltipWhenDisabled",
          "description": "<p>Set to false to not show the tooltip when this widget is <a href=\"#Core/widget/Widget#property-disabled\">disabled</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "preventTooltipOnTouch",
          "description": "<p>Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a\nmenu on click etc, since the tooltip would be displayed at the same time.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "monitorResize",
          "description": "<p>Specify true to have widget monitoring its own resize.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "masked",
          "description": "<p>Set to <code>true</code> to apply the default mask to the widget. Alternatively, this can be the mask message or a\n<a href=\"#Core/widget/Mask\">Mask</a> config object.</p>",
          "type": [
            "Boolean",
            "String",
            "Object",
            "Core.widget.Mask"
          ],
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "maskDefaults",
          "description": "<p>This config object contains the defaults for the <a href=\"#Core/widget/Mask\">Mask</a> created for the\n<a href=\"#Core/widget/Widget#config-masked\">masked</a> config. Any properties specified in the <code>masked</code> config will override these\nvalues.</p>",
          "type": [
            "Object",
            "Core.widget.Mask"
          ],
          "scope": "inner",
          "defaultValue": "{\"target\":\"element\"}",
          "category": "Misc"
        },
        {
          "name": "floating",
          "description": "<p>Set to <code>true</code> to move the widget out of the document flow and position it\nabsolutely in browser viewport space.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "positioned",
          "description": "<p>Set to <code>true</code> when a widget is rendered into another widget's  <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>, but must not\nparticipate in the standard layout of that widget, and must be positioned relatively to that\nwidget's <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>\n<p><a href=\"#Core/widget/Editor\">Editor</a>s are positioned widgets.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "draggable",
          "description": "<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a>\nSet to <code>true</code> to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´\nproperty which controls when a drag should start.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>\ndraggable : {\n    handleSelector : ':not(button)'\n}\n\n</code></pre>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": false,
          "category": "Float & align"
        },
        {
          "name": "align",
          "description": "<p><em>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a>.</em></p>\n<p>How to align this element with its target when <a href=\"#Core/widget/Widget#function-showBy\">showBy</a> is called\npassing a simple element as an align target.</p>\n<p>Either a full alignment config object as passed to <a href=\"#Core/widget/Widget#function-showBy\">showBy</a>, or for simple\ncases, the edge alignment string to use.</p>\n<p>When using a simple string, the format is <code>'[trblc]n-[trblc]n'</code> and it specifies our edge and\nthe target edge plus optional offsets from 0 to 100 along the edges to align to. Also supports direction\nindependent edges horizontally, <code>s</code> for start and <code>e</code> for end (maps to <code>l</code> and <code>r</code> for LTR, <code>r</code> and <code>l</code>\nfor RTL).</p>\n<p>See the <a href=\"#Core/widget/Widget#function-showBy\">showBy</a> function for more details about using the object form.</p>\n<p>Once set, this is stored internally in object form.</p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "centered",
          "description": "<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a>\nSet to <code>true</code> to centre the Widget in browser viewport space.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "constrainTo",
          "description": "<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a> and being shown through <a href=\"#Core/widget/Widget#function-showBy\">showBy</a>.\nElement, Widget or Rectangle to which this Widget is constrained.</p>",
          "type": [
            "HTMLElement",
            "Core.widget.Widget",
            "Core.helper.util.Rectangle"
          ],
          "scope": "inner",
          "defaultValue": "document.body",
          "category": "Float & align"
        },
        {
          "name": "anchor",
          "description": "<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a> and being shown through <a href=\"#Core/widget/Widget#function-showBy\">showBy</a>.\n<code>true</code> to show a connector arrow pointing to the align target.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Float & align"
        },
        {
          "name": "owner",
          "description": "<p>The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.\nIf there is a <code>forElement</code>, this config will be that element's encapsulating Widget.</p>\n<p>If this Widget is floating, this config must be specified by the developer.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "scrollAction",
          "description": "<p>Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).\nValid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "hideAnimation",
          "description": "<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a>. An object which defined which CSS style\nproperty should be animated upon hide, and how it should be animated eg:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n   opacity: {\n       to : 0,\n       duration: '10s',\n       delay: '0s'\n   }\n}\n</code></pre>\n<p>Set to <code>'false'</code> to disable animation.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "showAnimation",
          "description": "<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a>. An object which defined which CSS style\nproperty should be animated upon show, and how it should be animated eg:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n   opacity: {\n       to : 1,\n       duration: '10s',\n       delay: '0s'\n   }\n}\n</code></pre>\n<p>Set to <code>'false'</code> to disable animation.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "x",
          "description": "<p>The x position for the widget.</p>\n<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a> and not aligned or anchored to an element.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "y",
          "description": "<p>The y position for the widget.</p>\n<p>Only valid if this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a> and not aligned or anchored to an element.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Float & align"
        },
        {
          "name": "scrollable",
          "description": "<p>Specifies whether (and optionally in which axes) a Widget may scroll. <code>true</code> means this widget\nmay scroll in both axes. May be an object containing boolean <code>overflowX</code> and <code>overflowY</code> properties which are applied\nto CSS style properties <code>overflowX</code> and <code>overflowY</code>. If they are boolean, they are translated\nto CSS overflow properties thus:</p>\n<p>*<code>true</code> -&gt; <code>'auto'</code>\n*<code>false</code> -&gt; <code>'hidden'</code></p>\n<p>After initialization, this property yields a <a href=\"#Core/helper/util/Scroller\">Scroller</a> which may be used\nto both set and read scroll information.</p>\n<p>A Widget uses its <code>get overflowElement</code> property to select which element is to be scrollable.\nBy default, in the base <code>Widget</code> class, this is the Widget's encapsulating element. Subclasses\nmay implement <code>get overflowElement</code> to scroll inner elements.</p>",
          "type": [
            "Boolean",
            "Object",
            "Core.helper.util.Scroller"
          ],
          "scope": "inner",
          "defaultValue": false,
          "category": "Scrolling"
        },
        {
          "name": "scrollerClass",
          "access": "internal",
          "description": "<p>The class to instantiate to use as the <a href=\"#Core/widget/Widget#config-scrollable\">scrollable</a>. Defaults to <a href=\"#Core/helper/util/Scroller\">Scroller</a>.</p>",
          "type": "Core.helper.util.Scroller",
          "scope": "inner",
          "category": "Scrolling",
          "typings": {
            "returns": "typeof Scroller"
          }
        },
        {
          "name": "defaultBindProperty",
          "description": "<p>The name of the property to set when a single value is to be applied to this Widget. Such as when used\nin a grid WidgetColumn, this is the property to which the column's <code>field</code> is applied.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'html'",
          "category": "Misc"
        },
        {
          "name": "defaultAction",
          "access": "private",
          "description": "<p>Event that should be considered the default action of the widget. When that event is triggered the\nwidget is also expected to trigger an <code>action</code> event. Purpose is to allow reacting to most widgets in\na coherent way.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "overflowable",
          "access": "internal",
          "description": "<p>When set to <code>true</code>, this widget is considered as a whole when processing <a href=\"#Core/widget/Toolbar\">Toolbar</a>\noverflow. When <code>false</code>, this widget's child items are considered instead.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Layout"
        },
        {
          "name": "width",
          "description": "<p>Widget's width, used to set element style.width. Either specify a valid width string or a number, which\nwill get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases\nthis config is convenient.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "height",
          "description": "<p>Widget's height, used to set element style.height. Either specify a valid height string or a number, which\nwill get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases\nthis config is convenient.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "maxHeight",
          "description": "<p>The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that\nlike <a href=\"#Core/widget/Widget#config-height\">height</a>, <em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "maxWidth",
          "description": "<p>The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that\nlike <a href=\"#Core/widget/Widget#config-width\">width</a>, <em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "minWidth",
          "description": "<p>The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that\nlike <a href=\"#Core/widget/Widget#config-width\">width</a>, <em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "minHeight",
          "description": "<p>The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that\nlike <a href=\"#Core/widget/Widget#config-height\">height</a>, <em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "margin",
          "description": "<p>Widget's margin. This may be configured as a single number or a <code>TRBL</code> format string.\nnumeric-only values are interpreted as pixels.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "flex",
          "description": "<p>When this widget is a child of a <a href=\"#Core/widget/Container\">Container</a>, it will by default be participating in a\nflexbox layout. This config allows you to set this widget's\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex\">flex</a> style.\nThis may be configured as a single number or a <code>&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;</code> format string.\nnumeric-only values are interpreted as the <code>flex-grow</code> value.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "weight",
          "description": "<p>A widgets weight determines its position among siblings when added to a <a href=\"#Core/widget/Container\">Container</a>.\nHigher weights go further down.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "alignSelf",
          "description": "<p>When this widget is a child of a <a href=\"#Core/widget/Container\">Container</a>, it will by default be participating in a\nflexbox layout. This config allows you to set this widget's\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-self\">align-self</a> style.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "ripple",
          "description": "<p>Configure as <code>true</code> to have the component display a translucent ripple when its\n<a href=\"#Core/widget/Widget#property-focusElement\">focusElement</a>, or <a href=\"#Core/widget/Widget#property-element\">element</a> is tapped <em>if the\ncurrent theme supports ripples</em>. Out of the box, only the Material theme supports ripples.</p>\n<p>This may also be a config object containing the following properties:</p>\n<ul>\n<li><code>delegate  </code> Optional. A CSS selector to filter which child elements trigger ripples. By default\nthe ripple is clipped to the triggering element.</li>\n<li><code>color     </code> Optional, default = <code>#000</code>. A CSS color name or specification.</li>\n<li><code>radius    </code> Optional, default is 100. The ending radius of the ripple.\nNote that it will be clipped by the target element by default.</li>\n<li><code>clip      </code> A string which describes how to clip the ripple if it is not to be clipped to the default\nelement. Either the property of the widget to use as the clipping element, or a selector to\nallow clipping to the closest matching ancestor to the target element.</li>\n</ul>\n<p>eg:</p>\n<pre class=\"prettyprint source\"><code>   columns  : [{}...],\n   ripple   : {\n       color : 'red',\n       clip  : '.b-grid-row'\n   },\n   ...\n</code></pre>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "title",
          "description": "<p>A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)</p>",
          "type": "String",
          "scope": "inner",
          "category": "DOM"
        },
        {
          "name": "ref",
          "description": "<p>An identifier by which this widget will be registered in the <a href=\"#Core/widget/Container#property-widgetMap\">widgetMap</a>\nof all ancestor containers.</p>\n<p>If omitted, this widget will be registered using its <a href=\"#Core/widget/Widget#config-id\">id</a>. In most cases <code>ref</code> is\npreferable over <code>id</code> since <code>id</code> is required to be globally unique while <code>ref</code> is not.</p>\n<p>The <code>ref</code> value is also added to the elements dataset, to allow targeting it using CSS etc.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "hidden",
          "description": "<p>Configure with true to make widget initially hidden.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Layout"
        },
        {
          "name": "textAlign",
          "description": "<p>Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.</p>\n<p>Applied by adding a <code>b-text-align-xx</code> class to the widgets element. Blank by default, which does not add\nany alignment class.</p>\n<p>To be compliant with RTL, 'left' yields same result as 'start' and 'right' as 'end'.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "tag",
          "description": "<p>The tag name of this Widget's root element</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "div",
          "category": "DOM"
        },
        {
          "name": "recomposeAsync",
          "access": "internal",
          "description": "<p>Set this config to <code>false</code> to disable batching DOM updates on animation frames for this widget. This\nhas the effect of synchronously updating the DOM when configs affecting the rendered DOM are modified.\nDepending on the situation, this could simplify code while increasing time spent updating the DOM.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "rootElement",
          "description": "<p>If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot</p>",
          "type": "ShadowRoot",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "ariaLabel",
          "description": "<p>A localizable string (May contain <code>'L{}'</code> tokens which resolve in the locale file) to inject as\nthe <code>aria-label</code> attribute.</p>\n<p>This widget is passed as the <code>templateData</code> so that functions in the locale file can\ninterrogate the widget's state.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Accessibility"
        },
        {
          "name": "ariaDescription",
          "description": "<p>A localizable string (May contain <code>'L{}'</code> tokens which resolve in the locale file) to inject\ninto an element which will be linked using the <code>aria-describedby</code> attribute.</p>\n<p>This widget is passed as the <code>templateData</code> so that functions in the locale file can\ninterrogate the widget's state.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Accessibility"
        }
      ],
      "functions": [
        {
          "name": "initClass",
          "description": "<p>Call once per class for custom widgets to have them register with the <code>Widget</code> class, allowing them to be created\nby type.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyWidget extends Widget {\n  static get type() {\n    return 'mywidget';\n  }\n}\nMyWidget.initClass();\n</code></pre>",
          "scope": "static",
          "category": "Lifecycle"
        },
        {
          "name": "finalizeInit",
          "access": "internal",
          "description": "<p>Called by the Base constructor after all configs have been applied.</p>",
          "scope": "instance",
          "category": "Lifecycle"
        },
        {
          "name": "addRefAccessor",
          "access": "private",
          "description": "<p>Defines an element reference accessor on the class prototype. This accessor is used to flush any pending DOM\nchanges prior to accessing such elements.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "key",
              "type": "String"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachRef",
          "access": "internal",
          "description": "<p>This method is called by <code>DomHelper.createElement</code> and <code>DomSync.sync</code> as new reference elements are created.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the element, i.e., the value of its <code>reference</code> attribute.</p>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "<p>The element instance</p>"
            },
            {
              "name": "domConfig",
              "type": "Object",
              "description": "<p>The DOM config object.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "detachRef",
          "access": "internal",
          "description": "<p>This method is called by <code>DomSync.sync</code> as reference elements are removed from the DOM.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The name of the element, i.e., the value of its <code>reference</code> attribute.</p>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "<p>The element instance</p>"
            },
            {
              "name": "domConfig",
              "type": "Object",
              "description": "<p>The DOM config object.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "afterRecompose",
          "access": "internal",
          "description": "<p>This method is called following an update to the widget's rendered DOM.</p>",
          "scope": "instance"
        },
        {
          "name": "compose",
          "description": "<p>Returns a <a href=\"#Core/helper/DomHelper#function-createElement-static\">createElement</a> config object that defines this widget's\nDOM structure. This object should be determined using <a href=\"#Core/Base#property-configurable-static\">configurable</a> properties\nto ensure this method is called again if these properties are modified.</p>\n<p>For more information see <a href=\"#Core/widget/Widget\">class documentation</a>.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "doCompose",
          "access": "private",
          "description": "<p>This method iterates the class hierarchy from Widget down to the class of this instance and calls any <code>compose</code>\nmethods implemented by derived classes.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "domSyncCallback",
          "access": "internal",
          "description": "<p>Template method called during DOM updates. See <a href=\"#Core/helper/DomSync#function-sync-static\">DomSync.sync()</a>.</p>",
          "parameters": [
            {
              "name": "info",
              "type": "Object",
              "description": "<p>Properties describing the sync action taken.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "recompose",
          "description": "<p>Calling this <a href=\"#Core/mixin/Delayable#property-delayable-static\">delayable</a> method marks this widget as dirty. The DOM\nwill be updated on the next animation frame:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> widget.recompose();\n\n console.log(widget.recompose.isPending);\n > true\n</code></pre>\n<p>A pending update can be flushed by calling <code>flush()</code> (this does nothing if no update is pending):</p>\n<pre class=\"prettyprint source lang-javascript\"><code> widget.recompose.flush();\n</code></pre>\n<p>This can be combined in one call to force a DOM update without first scheduling one:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> widget.recompose.now();\n</code></pre>",
          "scope": "instance",
          "async": true
        },
        {
          "name": "template",
          "access": "internal",
          "description": "<p>A function which, when passed an instance of this Widget, produces a valid HTML string which is compiled\nto create the encapsulating element for this Widget, and its own internal DOM structure.</p>\n<p>Note that this just creates the DOM structure that <em>this</em> Widget owns. If it contains child widgets\n(Such as for example a grid), this is not included. The template creates own structure.</p>\n<p>Certain elements within the generated element can be identified as special elements with a <code>reference=&quot;name&quot;</code>\nproperty. These will be extracted from the element upon creation and injected as the named property into\nthe Widget. For example, a <a href=\"#Core/widget/TextField\">TextField</a> will have an <code>input</code> property which is its\n<code>&lt;input&gt;</code> element.</p>",
          "parameters": [
            {
              "name": "me",
              "type": "Core.widget.Widget",
              "description": "<p>The widget for which to produce the initial HTML structure.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "fixRefOwnerId",
          "access": "private",
          "description": "<p>This method fixes the element's <code>$refOwnerId</code> when this instance's <code>id</code> is changing.</p>",
          "parameters": [
            {
              "name": "el",
              "type": "Node",
              "description": "<p>The element or DOM node to fix.</p>"
            },
            {
              "name": "id",
              "type": "String",
              "description": "<p>The new id being assigned.</p>"
            },
            {
              "name": "oldId",
              "type": "String",
              "description": "<p>The old id (previously assigned).</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "alignTo",
          "description": "<p>If this Widget is <a href=\"#Core/widget/Widget#config-floating\">floating</a> or <a href=\"#Core/widget/Widget#config-positioned\">positioned</a>, and visible,\naligns the widget according to the passed specification. To stop aligning, call this method without arguments.\nFor details, see the <a href=\"#Core/widget/Widget#function-showBy\">showBy</a> method.</p>",
          "parameters": [
            {
              "name": "spec",
              "type": "Object",
              "description": "<p>Alignment options. May be an object as processed by the <a href=\"#Core/widget/Widget#function-showBy\">showBy</a> method,\nor an <code>HTMLElement</code> to align to using this Widget's <a href=\"#Core/widget/Widget#config-align\">align</a> configuration.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Float & align"
        },
        {
          "name": "onAlignTargetOutOfView",
          "access": "internal",
          "description": "<p>This method is called when the <a href=\"#Core/widget/Widget#function-alignTo\">alignTo</a> target element loses intersection with the\nvisible viewport. That means it has been scrolled out of view, or becomes zero size, or hidden or\nis removed from the DOM.</p>\n<p>The base class implementation hides by default.</p>",
          "parameters": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The alignTo target that is no longer in view.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "realign",
          "access": "internal",
          "description": "<p>Called when an element which affects the position of this Widget's\n<a href=\"#Core/widget/Widget#function-alignTo\">align target</a> scrolls so that this can realign.</p>\n<p>If the target has scrolled out of view, then this Widget is hidden.</p>",
          "scope": "instance"
        },
        {
          "name": "rectangle",
          "access": "internal",
          "description": "<p>Returns the specified bounding rectangle of this widget.</p>",
          "parameters": [
            {
              "name": "which",
              "type": "String",
              "description": "<p>By default, the rectangle returned is the bounding rectangle that contains the <code>element</code>\nborder. Pass any of these values to retrieve various rectangle:</p>\n<ul>\n<li><code>'border'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-from-static\">border rectangle</a> (the default).</li>\n<li><code>'client'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-client-static\">client rectangle</a>.</li>\n<li><code>'content'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-content-static\">content rectangle</a>.</li>\n<li><code>'inner'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-inner-static\">inner rectangle</a>.</li>\n<li><code>'outer'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-outer-static\">outer rectangle</a>.</li>\n</ul>",
              "optional": true
            },
            {
              "name": "relativeTo",
              "type": [
                "HTMLElement",
                "Core.widget.Widget"
              ],
              "description": "<p>Optionally, a parent element or widget in whose space to\ncalculate the Rectangle.</p>",
              "optional": true
            },
            {
              "name": "ignorePageScroll",
              "type": "Boolean",
              "description": "<p>Use browser viewport based coordinates.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle"
          }
        },
        {
          "name": "rectangleOf",
          "access": "internal",
          "description": "<p>Returns the specified bounding rectangle of the specified child <code>element</code> of this widget.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "String",
              "description": "<p>The child element name.</p>",
              "optional": true
            },
            {
              "name": "which",
              "type": "String",
              "description": "<p>By default, the rectangle returned is the bounding rectangle that contains the <code>element</code>\nborder. Pass any of these values to retrieve various rectangle:</p>\n<ul>\n<li><code>'border'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-from-static\">border rectangle</a> (the default).</li>\n<li><code>'client'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-client-static\">client rectangle</a>.</li>\n<li><code>'content'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-content-static\">content rectangle</a>.</li>\n<li><code>'inner'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-inner-static\">inner rectangle</a>.</li>\n<li><code>'outer'</code> to get the <a href=\"#Core/helper/util/Rectangle#function-outer-static\">outer rectangle</a>.</li>\n</ul>",
              "optional": true
            },
            {
              "name": "relativeTo",
              "type": [
                "HTMLElement",
                "Core.widget.Widget"
              ],
              "description": "<p>Optionally, a parent element or widget in whose space to\ncalculate the Rectangle. If <code>element</code> is not <code>'element'</code>, then this defaults to the widget's primary element.</p>",
              "optional": true
            },
            {
              "name": "ignorePageScroll",
              "type": "Boolean",
              "description": "<p>Use browser viewport based coordinates.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle"
          }
        },
        {
          "name": "toFront",
          "description": "<p>Only valid for <a href=\"#Core/widget/Widget#config-floating\">floating</a> Widgets. Moves to the front of the visual stacking order.</p>",
          "scope": "instance",
          "category": "Float & align"
        },
        {
          "name": "validateDragStartEvent",
          "access": "internal",
          "description": "<p>Validates a <code>dragstart</code> event with respect to the target element. Dragging is not normally\ninitiated when the target is interactive such as an input field or its label, or a button.\nThis may be overridden to provide custom drag start validation.</p>",
          "parameters": [
            {
              "name": "e",
              "type": "DragEvent",
              "description": "<p>The <code>dragstart</code> event to validate.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Return <code>true</code> if the drag is to be allowed.</p>"
          }
        },
        {
          "name": "setXY",
          "description": "<p>Moves this Widget to the x,y position. Both arguments can be omitted to just set one value.</p>\n<p><em>For <a href=\"#Core/widget/Widget#config-floating\">floating</a> Widgets, this is a position in the browser viewport.</em>\n<em>For <a href=\"#Core/widget/Widget#config-positioned\">positioned</a> Widgets, this is a position in the element it was rendered into.</em></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "optional": true
            },
            {
              "name": "y",
              "type": "Number",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Float & align"
        },
        {
          "name": "onDisabled",
          "access": "private",
          "description": "<p>Called when disabled state is changed.\nOverride in subclass that needs special handling when being disabled.</p>",
          "parameters": [
            {
              "name": "disabled",
              "type": "Boolean",
              "description": "<p>current state</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "disable",
          "description": "<p>Disable the widget</p>",
          "scope": "instance"
        },
        {
          "name": "enable",
          "description": "<p>Enable the widget</p>",
          "scope": "instance"
        },
        {
          "name": "requestFullscreen",
          "description": "<p>Requests fullscreen display for this widget</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which is resolved with a value of undefined when the transition to full screen is complete.</p>"
          }
        },
        {
          "name": "exitFullscreen",
          "description": "<p>Exits fullscreen mode</p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which is resolved once the user agent has finished exiting full-screen mode</p>"
          }
        },
        {
          "name": "focus",
          "description": "<p>Focuses this widget if it has a focusable element.</p>",
          "scope": "instance"
        },
        {
          "name": "show",
          "description": "<p>Shows this widget</p>",
          "scope": "instance",
          "category": "Visibility",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the widget is shown</p>"
          }
        },
        {
          "name": "showBy",
          "description": "<p>Show aligned to another target element or <a href=\"#Core/widget/Widget\">Widget</a> or <a href=\"#Core/helper/util/Rectangle\">Rectangle</a></p>",
          "parameters": [
            {
              "name": "spec",
              "type": [
                "Object",
                "HTMLElement",
                "Array.<Number>"
              ],
              "description": "<p>Alignment specification, or the element to align to using the configured\n<a href=\"#Core/widget/Widget#config-align\">align</a>.</p>"
            },
            {
              "name": "spec.target",
              "type": [
                "HTMLElement",
                "Core.widget.Widget",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The Widget or Element or Rectangle\nto align to.</p>",
              "isSubParam": true
            },
            {
              "name": "spec.anchor",
              "type": "Boolean",
              "description": "<p>True to show a pointer arrow connecting to the target. Defaults to false.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.overlap",
              "type": "Boolean",
              "description": "<p>True to allow this to overlap the target.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.align",
              "type": "String",
              "description": "<p>The alignment specification string, <code>[trblc]n-[trblc]n</code>. Defaults to this instance's\n<a href=\"#Core/widget/Widget#config-align\">align</a> setting. Also supports direction independent edges horizontally, <code>s</code> for start and <code>e</code> for\nend (maps to <code>l</code> and <code>r</code> for LTR, <code>r</code> and <code>l</code> for RTL).</p>",
              "isSubParam": true
            },
            {
              "name": "spec.constrainTo",
              "type": [
                "HTMLElement",
                "Core.widget.Widget",
                "Core.helper.util.Rectangle"
              ],
              "description": "<p>The Widget or Element or\nRectangle to constrain to. If the requested alignment cannot be constrained (it will first shrink the resulting\nRectangle according to the <code>minWidth</code> and <code>minHeight</code> properties of this spec, or the Widget), then it will try\naligning at other edges (honouring the <code>axisLock</code> option), and pick the fallback alignment which results in the\nshortest translation.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.constrainPadding",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>The amount of pixels to pad from the <code>constrainTo</code> target,\neither a single value, or an array of values in CSS edge order.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.minHeight",
              "type": "Number",
              "description": "<p>The minimum height this widget may be compressed to when constraining within the\n<code>constrainTo</code> option.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.minWidth",
              "type": "Number",
              "description": "<p>The minimum width this widget may be compressed to when constraining within the\n<code>constrainTo</code> option.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.axisLock",
              "type": "Boolean",
              "description": "<p>Specify as <code>true</code> to fall back to aligning against the opposite\nedge if the requested alignment cannot be constrained into the <code>constrainTo</code> option. Specify as\n<code>'flexible'</code> to allow continuation to try the other edges if a solution cannot be found on the originally\nrequested axis.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.matchSize",
              "type": "Boolean",
              "description": "<p>When aligning edge-to-edge, match the length of the aligned-to\nedge of the target. This is only honored when <code>axisLock</code> is enabled and alignment succeeds on the\nrequested axis.\nIf <strong>not</strong> aligning edge-to-edge, <code>matchSize</code> matches both dimensions of the target.\nSpecify as <code>true</code> to have this widget's size along the aligned edge match the size of the target's edge.\nFor example, a combobox's dropdown should match the width of the combobox.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.offset",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>The offset to create an extra margin round the target\nto offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\ntowards the target - for example producing the effect of the anchor pointer piercing the target.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "spec.monitorResize",
              "type": "Boolean",
              "description": "<p>Configure as <code>true</code> to monitor the element being aligned to for\nresizing while visible to correct alignment.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Float & align",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the widget is shown</p>"
          }
        },
        {
          "name": "showByPoint",
          "description": "<p>Show this widget anchored to a coordinate</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>The x position (or an array with [x,y] values) to show by</p>"
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position to show by</p>",
              "optional": true
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>See <a href=\"#Core/widget/Widget#function-showBy\">showBy</a> for reference</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Float & align",
          "deprecated": true,
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the widget is shown</p>"
          }
        },
        {
          "name": "suspendVisibility",
          "access": "internal",
          "description": "<p>Temporarily changes the <a href=\"#Core/widget/Widget#property-isVisible\">isVisible</a> to yield <code>false</code> regardless of this\nWidget's true visibility state. This can be useful for suspending operations which rely on\nthe <a href=\"#Core/widget/Widget#property-isVisible\">isVisible</a> property.</p>\n<p>This increments a counter which <a href=\"#Core/widget/Widget#function-resumeVisibility\">resumeVisibility</a> decrements.</p>",
          "scope": "instance"
        },
        {
          "name": "resumeVisibility",
          "access": "internal",
          "description": "<p>Resumes visibility. If the suspension counter is returned to zero by this, then the\n<a href=\"#Core/widget/Widget#event-paint\">paint</a> event is triggered, causing a cascade of <code>paint</code> events on all\ndescendants. This can be prevented by passing <code>false</code> as the only parameter.</p>",
          "parameters": [
            {
              "name": "triggerPaint",
              "type": "Boolean",
              "description": "<p>Trigger the <a href=\"#Core/widget/Widget#event-paint\">paint</a> event.</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hide",
          "description": "<p>Hide widget</p>",
          "parameters": [
            {
              "name": "animate",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> (default) to animate the hide action</p>",
              "default": true
            }
          ],
          "scope": "instance",
          "category": "Visibility",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the widget has been hidden</p>"
          }
        },
        {
          "name": "up",
          "description": "<p>Looks up the <a href=\"#Core/widget/Widget#property-owner\">owner</a> axis to find an ancestor which matches the passed selector.\nThe selector may be a widget type identifier, such as <code>'grid'</code>, or a function which will return\n<code>true</code> when passed the desired ancestor.</p>",
          "parameters": [
            {
              "name": "selector",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>A Type identifier or selection function. If not provided, this method returns\nthe <a href=\"#Core/widget/Widget#property-owner\">owner</a> of this widget</p>",
              "optional": true
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>When using a string identifier, pass <code>true</code> if all superclasses should be included, i.e.,\nif a <code>Grid</code> should match <code>'widget'</code>.</p>",
              "optional": true
            },
            {
              "name": "limit",
              "type": [
                "Number",
                "String",
                "Core.widget.Widget"
              ],
              "description": "<p>how many steps to step up before aborting the search, or a\nselector to stop at or the topmost ancestor to consider.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy"
        },
        {
          "name": "closest",
          "description": "<p>Starts with this Widget, then Looks up the <a href=\"#Core/widget/Widget#property-owner\">owner</a> axis to find an ancestor which matches the\npassed selector. The selector may be a widget type identifier, such as <code>'grid'</code>, or a function which will return\n<code>true</code> when passed the desired ancestor.</p>",
          "parameters": [
            {
              "name": "selector",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>A Type identifier or selection function.</p>"
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>When using a string identifier, pass <code>true</code> if all superclasses should be included, i.e.,\nif a <code>Grid</code> should match <code>'widget'</code>.</p>",
              "optional": true
            },
            {
              "name": "limit",
              "type": [
                "Number",
                "String",
                "Core.widget.Widget"
              ],
              "description": "<p>how many steps to step up before aborting the search, or a\nselector to stop at or the topmost ancestor to consider.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy"
        },
        {
          "name": "owns",
          "description": "<p>Returns <code>true</code> if this Widget owns the passed Element, Event or Widget. This is based on the widget hierarchy,\nnot DOM containment. So an element in a <code>Combo</code>'s dropdown list will be owned by the <code>Combo</code>.</p>",
          "parameters": [
            {
              "name": "target",
              "type": [
                "HTMLElement",
                "Event",
                "Core.widget.Widget"
              ],
              "description": "<p>The element event or Widget to test for being\nwithin the ownership tree of this Widget.</p>"
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy"
        },
        {
          "name": "eachAncestor",
          "description": "<p>Iterate over all ancestors of this widget.</p>\n<p><em>Note</em>: Due to this method aborting when the function returns <code>false</code>, beware of using short form arrow\nfunctions. If the expression executed evaluates to <code>false</code>, iteration will terminate.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function to execute for all ancestors. Terminate iteration by returning <code>false</code>.</p>"
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if iteration was not aborted by a step returning <code>false</code></p>"
          }
        },
        {
          "name": "eachWidget",
          "description": "<p>Iterate over all widgets owned by this widget and any descendants.</p>\n<p><em>Note</em>: Due to this method aborting when the function returns <code>false</code>, beware of using short form arrow\nfunctions. If the expression executed evaluates to <code>false</code>, iteration will terminate.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>A function to execute upon each descendant widget.\nIteration terminates if this function returns <code>false</code>.</p>"
            },
            {
              "name": "fn.widget",
              "type": "Core.widget.Widget",
              "description": "<p>The current descendant widget.</p>",
              "isSubParam": true
            },
            {
              "name": "fn.control",
              "type": "Object",
              "description": "<p>An object containing recursion control options.</p>",
              "isSubParam": true
            },
            {
              "name": "fn.control.down",
              "type": "Boolean",
              "description": "<p>A copy of the <code>deep</code> parameter. This can be adjusted by <code>fn</code> to decide which\nwidgets should be recursed. This value will always be the value of <code>deep</code> on entry and the value of <code>control.down</code>\nupon return determines the recursion into the current widget.</p>",
              "isSubParam": true
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>Pass as <code>false</code> to only consider immediate child widgets.</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if iteration was not aborted by a step returning <code>false</code></p>"
          }
        },
        {
          "name": "queryAll",
          "description": "<p>Returns an array of all descendant widgets which the passed\nfilter function returns <code>true</code> for.</p>",
          "parameters": [
            {
              "name": "filter",
              "type": "function",
              "description": "<p>A function which, when passed a widget,\nreturns <code>true</code> to include the widget in the results.</p>"
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy",
          "returns": {
            "type": "Array.<Core.widget.Widget>",
            "description": "<p>All matching descendant widgets.</p>"
          }
        },
        {
          "name": "query",
          "description": "<p>Returns the first descendant widgets which the passed\nfilter function returns <code>true</code> for.</p>",
          "parameters": [
            {
              "name": "filter",
              "type": "function",
              "description": "<p>A function which, when passed a widget,\nreturns <code>true</code> to return the widget as the sole result.</p>"
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy",
          "returns": {
            "type": "Core.widget.Widget",
            "description": "<p>The first matching descendant widget.</p>"
          }
        },
        {
          "name": "getWidgetByRef",
          "access": "internal",
          "description": "<p>Get a widget by ref, starts on self and traverses up the owner hierarchy checking <code>widgetMap</code> at each level.\nNot checking the top level widgetMap right away to have some acceptance for duplicate refs.</p>",
          "parameters": [
            {
              "name": "ref",
              "type": "String",
              "description": "<p>ref to find</p>"
            }
          ],
          "scope": "instance",
          "category": "Widget hierarchy",
          "returns": {
            "type": "Core.widget.Widget"
          }
        },
        {
          "name": "captureFocus",
          "access": "internal",
          "description": "<p>Returns a function that will set the focus (<code>document.activeElement</code>) to the most consistent element possible\nbased on the focus state at the time this method was called. Derived classes can implement <code>captureFocusItem()</code>\nto refine this process to include logical items (e.g., a grid cell) that would be more stable than DOM element\nreferences.</p>\n<p>If this widget does not contain the focus, the returned function will do nothing.</p>",
          "scope": "instance",
          "returns": {
            "type": "function"
          }
        },
        {
          "name": "captureFocusItem",
          "access": "internal",
          "description": "<p>This method is called by <code>captureFocus()</code> when this widget contains the focus and it returns a function that\nrestores the focus to the correct internal element. The returned function is only called if the current\n<code>document.activeElement</code> is different from the passed <code>activeElement</code>.</p>\n<p>This method can be replaced by derived classes to capture stable identifiers for the currently focused, logical\nitem (for example, a cell of a grid).</p>",
          "parameters": [
            {
              "name": "activeElement",
              "type": "HTMLElement",
              "description": "<p>The current <code>document.activeElement</code>.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "function",
            "description": "<p>Returns a function that accepts a boolean argument. Defaults to <code>true</code>, <code>false</code> attempts to\nfocus without scrolling.</p>"
          }
        },
        {
          "name": "contains",
          "description": "<p>Returns <code>true</code> if this widget is or contains the specified element or widget.</p>",
          "parameters": [
            {
              "name": "elementOrWidget",
              "type": [
                "HTMLElement",
                "Core.widget.Widget"
              ],
              "description": "<p>The element or widget</p>"
            },
            {
              "name": "strict",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to test for strict containment (if <code>elementOrWidget</code> is this widget, the\nreturn value will be <code>false</code>).</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "revertFocus",
          "description": "<p>If this Widget contains focus, focus is reverted to the source from which it entered if possible,\nor to a close relative if not.</p>",
          "parameters": [
            {
              "name": "force",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to move focus to the previously focused item, or the\nclosest possible relative even if this widget does not contain focus.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getFocusRevertTarget",
          "access": "internal",
          "description": "<p>This method finds a close sibling (or parent, or parent's sibling etc recursively) to which focus\ncan be directed in the case of revertFocus not having a focusable element from our focusInEvent.</p>\n<p>This can happen when the &quot;from&quot; component is destroyed or hidden. We should endeavour to prevent\nfocus escaping to <code>document.body</code> for accessibility and ease of use, and keep focus close.</p>",
          "scope": "instance"
        },
        {
          "name": "getStaticWidgetClasses",
          "access": "internal",
          "description": "<p>Returns a <code>DomClassList</code> computed from the <code>topMostBase</code> (e.g., <code>Widget</code> or <code>Panel</code>) with the given <code>suffix</code>\nappended to each <code>widgetClass</code>.</p>",
          "parameters": [
            {
              "name": "topMostBase",
              "type": "function",
              "description": "<p>The top-most base class constructor at which to start gathering classes.</p>"
            },
            {
              "name": "suffix",
              "type": "String",
              "description": "<p>An optional suffix to apply to all widget classes.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "DOM",
          "returns": {
            "type": "Core.helper.util.DomClassList"
          }
        },
        {
          "name": "fromCache",
          "access": "internal",
          "description": "<p>Gets dom elements in the view. Caches the results for faster future calls.</p>",
          "parameters": [
            {
              "name": "query",
              "type": "String",
              "description": "<p>CSS selector</p>"
            },
            {
              "name": "children",
              "type": "Boolean",
              "description": "<p>true to fetch multiple elements</p>",
              "default": false
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to use as root for the query, defaults to the views outermost element</p>"
            }
          ],
          "scope": "instance",
          "category": "DOM",
          "returns": {
            "type": [
              "HTMLElement",
              "Array.<HTMLElement>",
              "null"
            ],
            "description": "<p>A single element or an array of elements (if parameter children is set to true)</p>"
          }
        },
        {
          "name": "emptyCache",
          "access": "internal",
          "description": "<p>Clear caches, forces all calls to fromCache to requery dom. Called on render/rerender.</p>",
          "scope": "instance",
          "category": "DOM"
        },
        {
          "name": "mask",
          "description": "<p>Mask the widget, showing the specified message</p>",
          "parameters": [
            {
              "name": "msg",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Mask message (or a <a href=\"#Core/widget/Mask\">Mask</a> config object</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.widget.Mask"
          }
        },
        {
          "name": "unmask",
          "description": "<p>Unmask the widget</p>",
          "scope": "instance"
        },
        {
          "name": "parseTRBL",
          "access": "internal",
          "description": "<p>Returns a <code>TRBL</code> array of values parse from the passed specification. This can be used to parse<code>a value list for</code>margin<code>or</code>padding<code>or</code>border-width<code>etc - any CSS value which takes a</code>TRBL` value.</p>",
          "parameters": [
            {
              "name": "values",
              "type": [
                "Number",
                "String",
                "Array.<String>"
              ],
              "description": "<p>The <code>TRBL</code> value</p>"
            },
            {
              "name": "units",
              "type": "String",
              "description": "<p>The units to add to values which are specified as numeric.</p>",
              "default": "px",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "query",
          "description": "<p>Analogous to document.querySelector, finds the first Bryntum widget matching the passed\nselector. Right now, only class name (lowercased) selector strings, or\na filter function which returns <code>true</code> for required object are allowed:</p>\n<pre class=\"prettyprint source\"><code>bryntum.query('grid').destroy();\n</code></pre>",
          "parameters": [
            {
              "name": "selector",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>A lowercased class name, or a filter function.</p>"
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to search the prototype chain (requires supplying a string <code>selector</code>). For\nexample 'widget' would then find a Grid</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Widget hierarchy",
          "returns": {
            "type": "Core.widget.Widget",
            "description": "<p>The first matched widget if any.</p>"
          }
        },
        {
          "name": "queryAll",
          "description": "<p>Analogous to document.querySelectorAll, finds all Bryntum widgets matching the passed\nselector. Right now, only registered widget <code>type</code> strings, or a filter function which\nreturns <code>true</code> for required object are allowed:</p>\n<pre class=\"prettyprint source\"><code>let allFields = bryntum.queryAll('field', true);\n</code></pre>",
          "parameters": [
            {
              "name": "selector",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>A lowercased class name, or a filter function.</p>"
            },
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to search the prototype chain (requires supplying a string <code>selector</code>). For\nexample 'widget' would then find a Grid</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Widget hierarchy",
          "returns": {
            "type": "Array.<Core.widget.Widget>",
            "description": "<p>The first matched widgets if any - an empty array will be returned\nif no matches are found.</p>"
          }
        },
        {
          "name": "fromElement",
          "description": "<p>Returns the Widget which owns the passed element (or event).</p>",
          "parameters": [
            {
              "name": "element",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The element or event to start from</p>"
            },
            {
              "name": "type",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>The type of Widget to scan upwards for. The lowercase\nclass name. Or a filter function which returns <code>true</code> for the required Widget.</p>",
              "optional": true
            },
            {
              "name": "limit",
              "type": [
                "HTMLElement",
                "Number"
              ],
              "description": "<p>The number of components to traverse upwards to find a\nmatch of the type parameter, or the element to stop at.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "category": "Misc",
          "returns": {
            "type": "Core.widget.Widget",
            "description": "<p>The found Widget or null.</p>"
          }
        },
        {
          "name": "triggerFieldChange",
          "access": "internal",
          "description": "<p>Triggers a 'change' event with the supplied params. After triggering it also calls <code>onFieldChange()</code> on each\nancestor the implements that function, supplying the same set of params.</p>",
          "parameters": [
            {
              "name": "params",
              "type": "Object",
              "description": "<p>Event params, used both for triggering and notifying ancestors</p>"
            },
            {
              "name": "trigger",
              "type": "Boolean",
              "description": "<p><code>false</code> to not trigger, only notifying ancestors</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "isolateFieldChange",
          "access": "internal",
          "description": "<p>Returns <code>true</code> if the given <code>field</code>'s value change should be isolated (kept hidden by this widget). By default,\nthis method returns the value of <a href=\"#Core/widget/Container#config-isolateFields\">isolateFields</a> for all fields.</p>",
          "parameters": [
            {
              "name": "field",
              "type": "Core.widget.Field",
              "description": "<p>The field in question.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachTooltip",
          "description": "<p>Attached a tooltip to the specified element.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to attach tooltip for</p>"
            },
            {
              "name": "configOrText",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>Tooltip config or tooltip string, see example and source</p>"
            }
          ],
          "examples": [
            "Widget.attachTooltip(element, {\n  text: 'Useful information goes here'\n});"
          ],
          "scope": "static",
          "category": "Misc",
          "returns": {
            "type": "HTMLElement"
          }
        }
      ],
      "events": [
        {
          "name": "beforeShow",
          "description": "<p>Triggered before a widget is shown. Return <code>false</code> to prevent the action.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget being shown.</p>"
            }
          ],
          "preventable": true,
          "async": true
        },
        {
          "name": "show",
          "description": "<p>Triggered after a widget is shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget</p>"
            }
          ]
        },
        {
          "name": "paint",
          "description": "<p>Triggered when a widget which had been in a non-visible state for any reason\nachieves visibility.</p>\n<p>A non-visible state <em>might</em> mean the widget is hidden and has just been shown.</p>\n<p>But this event will also fire on widgets when a non-visible (unrendered, or hidden)\nancestor achieves visibility, for example a <a href=\"#Core/widget/Popup\">Popup</a> being shown.</p>\n<p>TLDR: <strong>This event can fire multiple times</strong></p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget being painted.</p>"
            },
            {
              "name": "firstPaint",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is the first paint.</p>"
            }
          ]
        },
        {
          "name": "beforeHide",
          "description": "<p>Triggered before a widget is hidden. Return <code>false</code> to prevent the action.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget being hidden.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "hide",
          "description": "<p>Triggered after a widget was hidden</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget</p>"
            }
          ]
        },
        {
          "name": "readOnly",
          "description": "<p>Fired when a Widget's read only state is toggled</p>",
          "parameters": [
            {
              "name": "readOnly",
              "type": "Boolean",
              "description": "<p>Read only or not</p>"
            }
          ]
        },
        {
          "name": "focusIn",
          "description": "<p>Fired when focus enters this Widget.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>This Widget</p>"
            },
            {
              "name": "fromElement",
              "type": "HTMLElement",
              "description": "<p>The element which lost focus.</p>"
            },
            {
              "name": "toElement",
              "type": "HTMLElement",
              "description": "<p>The element which gained focus.</p>"
            },
            {
              "name": "fromWidget",
              "type": "Core.widget.Widget",
              "description": "<p>The widget which lost focus.</p>"
            },
            {
              "name": "toWidget",
              "type": "Core.widget.Widget",
              "description": "<p>The widget which gained focus.</p>"
            },
            {
              "name": "backwards",
              "type": "Boolean",
              "description": "<p><code>true</code> if the <code>toElement</code> is before the <code>fromElement</code> in document order.</p>"
            }
          ]
        },
        {
          "name": "focusOut",
          "description": "<p>Fired when focus exits this Widget's ownership tree. This is different from a <code>blur</code> event.\nfocus moving from within this Widget's ownership tree, even if there are floating widgets\nwill not trigger this event. This is when focus exits this widget completely.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>This Widget</p>"
            },
            {
              "name": "fromElement",
              "type": "HTMLElement",
              "description": "<p>The element which lost focus.</p>"
            },
            {
              "name": "toElement",
              "type": "HTMLElement",
              "description": "<p>The element which gained focus.</p>"
            },
            {
              "name": "fromWidget",
              "type": "Core.widget.Widget",
              "description": "<p>The widget which lost focus.</p>"
            },
            {
              "name": "toWidget",
              "type": "Core.widget.Widget",
              "description": "<p>The widget which gained focus.</p>"
            },
            {
              "name": "backwards",
              "type": "Boolean",
              "description": "<p><code>true</code> if the <code>toElement</code> is before the <code>fromElement</code> in document order.</p>"
            }
          ]
        },
        {
          "name": "resize",
          "description": "<p>Fired when the encapsulating element of a Widget resizes <em>only when <a href=\"#Core/widget/Widget#config-monitorResize\">monitorResize</a> is <code>true</code></em>.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>This Widget</p>"
            },
            {
              "name": "width",
              "type": "Number",
              "description": "<p>The new width</p>"
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>The new height</p>"
            },
            {
              "name": "oldWidth",
              "type": "Number",
              "description": "<p>The old width</p>"
            },
            {
              "name": "oldHeight",
              "type": "Number",
              "description": "<p>The old height</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "UndoRedoBase",
      "modulePath": "Core/widget/base/UndoRedoBase",
      "classDescription": "<p>Abstract base class used by UndoRedo widgets in Scheduler and TaskBoard.</p>",
      "extends": [
        "Core/widget/Container"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "UndoRedoBase.js",
      "path": "/Calendar/lib/Core/widget/base",
      "configs": [
        {
          "name": "text",
          "description": "<p>Configure as <code>true</code> to show &quot;Undo&quot; and &quot;Redo&quot; as button texts. The buttons always have a tooltip\nas a hint to the user as to their purpose.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "color",
          "description": "<p>Button color for the undo and redo buttons. See <a href=\"#Core/widget/Button#config-color\">color</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "showZeroActionBadge",
          "description": "<p>Configure as <code>true</code> to show &quot;0&quot; badge on the undo and redo buttons when they have no actions\nleft to perform. By default when there are no actions, no badge is displayed.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Histogram",
      "modulePath": "Core/widget/graph/Histogram",
      "classDescription": "<p>Displays a simple bar histogram based upon an array of data objects passed in the <a href=\"#Core/widget/graph/Histogram#config-data\">data</a> config.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Histogram.js",
      "path": "/Calendar/lib/Core/widget/graph",
      "classType": "histogram",
      "configs": [
        {
          "name": "data",
          "description": "<p>An array of data objects used to drive the histogram. The property/properties used\nare defined in the <a href=\"#Core/widget/graph/Histogram#config-series\">series</a> option.</p>",
          "type": "Array.<Object>",
          "scope": "inner"
        },
        {
          "name": "values",
          "description": "<p>The values to represent in bar form.</p>",
          "type": "Array.<Number>",
          "scope": "inner"
        },
        {
          "name": "series",
          "description": "<p>Each item in the array must contain two properties:</p>\n<ul>\n<li><code>type</code> A String, either <code>'bar'</code> or <code>'outline'</code></li>\n<li><code>field</code> A String, the name of the property to use from the data objects in the <a href=\"#Core/widget/graph/Histogram#config-data\">data</a> option.</li>\n</ul>",
          "type": "Array.<Object>",
          "scope": "inner"
        },
        {
          "name": "topValue",
          "description": "<p>By default, the bars are scaled based upon the detected max value across all the series.\nA specific top value to represent the 100% height may be configured.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "omitZeroHeightBars",
          "description": "<p>By default, all bars are rendered, even those with zero height. Configure this as <code>true</code>\nto omit zero height bars.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "getRectClass",
          "description": "<p>A Function which returns a CSS class name to add to a rectangle element.\nThe following parameters are passed:</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "series",
              "type": "Object",
              "description": "<p>The series being rendered</p>"
            },
            {
              "name": "rectConfig",
              "type": "Object",
              "description": "<p>The rectangle configuration object</p>"
            },
            {
              "name": "datum",
              "type": "Object",
              "description": "<p>The datum being rendered</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>The index of the datum being rendered</p>"
            }
          ]
        },
        {
          "name": "getBarTip",
          "description": "<p>A Function which returns the tooltip text to display when hovering a bar.\nThe following parameters are passed:</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "series",
              "type": "Object",
              "description": "<p>The series being rendered</p>"
            },
            {
              "name": "rectConfig",
              "type": "Object",
              "description": "<p>The rectangle configuration object</p>"
            },
            {
              "name": "datum",
              "type": "Object",
              "description": "<p>The datum being rendered</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>The index of the datum being rendered</p>"
            }
          ]
        },
        {
          "name": "getBarText",
          "description": "<p>A Function which returns the text to render inside a bar.\nThe following parameters are passed:</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "datum",
              "type": "Object",
              "description": "<p>The datum being rendered</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>The index of the datum being rendered</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Scale",
      "modulePath": "Core/widget/graph/Scale",
      "classDescription": "<p>Displays a scale with ticks and labels.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Scale.js",
      "path": "/Calendar/lib/Core/widget/graph",
      "classType": "scale",
      "configs": [
        {
          "name": "horizontal",
          "description": "<p>Configure as <code>true</code> to create a horizontal scale. Scales are vertical by default.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "align",
          "description": "<p>Side to align the scale to. Defaults to <code>bottom</code> for <a href=\"#Core/widget/graph/Scale#config-horizontal\">horizontal</a> Scales\nand <code>right</code> for vertical Scales.</p>",
          "type": "String",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Box",
      "modulePath": "Core/widget/layout/Box",
      "classDescription": "<p>A layout that applies <code>display: flex</code> to the <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a> of\nits container to layout child items. This defaults to a horizontal layout of items, also known as an <code>'hbox'</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> layout : {\n     type : 'box'   // or equivalently, 'hbox'\n }\n</code></pre>",
      "extends": [
        "Core/widget/layout/Layout"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Box.js",
      "path": "/Calendar/lib/Core/widget/layout",
      "configs": [
        {
          "name": "align",
          "description": "<p>Sets the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\">align-items</a> style of the\n<a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'stretch'"
        },
        {
          "name": "contentAlign",
          "description": "<p>Sets the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\">align-content</a> style of the\n<a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'normal'"
        },
        {
          "name": "direction",
          "access": "private",
          "description": "<p>Sets the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\">direction</a> style of the\n<a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.\nThis config is not set directly. Set <a href=\"#Core/widget/layout/Box#config-horizontal\">horizontal</a>, <a href=\"#Core/widget/layout/Box#config-vertical\">vertical</a>, and/or\n<a href=\"#Core/widget/layout/Box#config-reverse\">reverse</a> instead.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "horizontal",
          "description": "<p>Set this value to <code>false</code> to set the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\">flex-direction</a>\nstyle of the <a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>\nto <code>column</code>. Or alternatively, set <a href=\"#Core/widget/layout/Box#config-vertical\">vertical</a> to <code>true</code>.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "justify",
          "description": "<p>Sets the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\">justify-content</a> style of the\n<a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'flex-start'"
        },
        {
          "name": "reverse",
          "description": "<p>Set this value to <code>true</code> to add <code>'-reverse'</code> to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\">flex-direction</a>\nstyle of the <a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.\nThis config combines with <a href=\"#Core/widget/layout/Box#config-horizontal\">horizontal</a> or <a href=\"#Core/widget/layout/Box#config-vertical\">vertical</a> to set the <code>flex-direction</code>\nstyle.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "wrap",
          "description": "<p>Sets the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\">flex-wrap</a> style of the\n<a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>\n<p>The value of <code>true</code> is equivalent to <code>'wrap'</code>, <code>false</code> is equivalent to <code>'nowrap'</code>, and <code>'reverse'</code> is\nequivalent to <code>'wrap-reverse'</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> layout : {\n     type : 'box',\n     wrap : false        // equivalent to 'nowrap'\n     wrap : true         // equivalent to 'wrap'\n     wrap : 'reverse'    // equivalent to 'wrap-reverse'\n }\n</code></pre>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "vertical",
          "description": "<p>Set this value to <code>true</code> to set the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\">flex-direction</a>\nstyle of the <a href=\"#Core/widget/layout/Box#property-owner\">owner's</a> <a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>\nto <code>column</code>. Or alternatively, set <a href=\"#Core/widget/layout/Box#config-horizontal\">horizontal</a> to <code>false</code>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "Card",
      "modulePath": "Core/widget/layout/Card",
      "classDescription": "<p>A helper class for containers which must manage multiple child widgets, of which only one may be visible at once such\nas a <a href=\"#Core/widget/TabPanel\">TabPanel</a>. This class offers an active widget switching API, and optional slide-in,\nslide-out animations from child to child.</p>",
      "extends": [
        "Core/widget/layout/Layout"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Card.js",
      "path": "/Calendar/lib/Core/widget/layout",
      "configs": [
        {
          "name": "animateCardChange",
          "description": "<p>Specifies whether to slide tabs in and out of visibility.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "activeItem",
          "description": "<p>The active child item.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner"
        },
        {
          "name": "activeIndex",
          "description": "<p>The active child index.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "onBeforeChildShow",
          "access": "internal",
          "description": "<p>Detect external code showing a child. We veto that show and activate it through the API.</p>",
          "scope": "instance"
        },
        {
          "name": "onBeforeChildHide",
          "access": "internal",
          "description": "<p>Detect external code hiding a child. We veto that show and activate an immediate sibling through the API.</p>",
          "scope": "instance"
        },
        {
          "name": "setActiveItem",
          "access": "internal",
          "description": "<p>Get/set active item, using index or the Widget to activate</p>",
          "parameters": [
            {
              "name": "activeIndex",
              "type": [
                "Core.widget.Widget",
                "Number"
              ]
            },
            {
              "name": "prevActiveIndex",
              "type": "Number",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>An object describing the card change containing the following properties:</p>\n<ul>\n<li><code>prevActiveIndex</code> The previously active index.</li>\n<li><code>prevActiveItem </code> The previously active child item.</li>\n<li><code>activeIndex    </code> The newly active index.</li>\n<li><code>activeItem     </code> The newly active child item.</li>\n<li><code>promise        </code> A promise which completes when the slide-in animation finishes and the child item contains\nfocus if it is focusable.</li>\n</ul>"
          }
        }
      ],
      "events": [
        {
          "name": "beforeActiveItemChange",
          "description": "<p>The active item is about to be changed. Return <code>false</code> to prevent this.</p>",
          "parameters": [
            {
              "name": "activeIndex",
              "type": "Number",
              "description": "<p>The new active index.</p>"
            },
            {
              "name": "activeItem",
              "type": "Core.widget.Widget",
              "description": "<p>The new active child widget.</p>"
            },
            {
              "name": "prevActiveIndex",
              "type": "Number",
              "description": "<p>The previous active index.</p>"
            },
            {
              "name": "prevActiveItem",
              "type": "Core.widget.Widget",
              "description": "<p>The previous active child widget.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "activeItemChange",
          "description": "<p>The active item has changed.</p>",
          "parameters": [
            {
              "name": "activeIndex",
              "type": "Number",
              "description": "<p>The new active index.</p>"
            },
            {
              "name": "activeItem",
              "type": "Core.widget.Widget",
              "description": "<p>The new active child widget.</p>"
            },
            {
              "name": "prevActiveIndex",
              "type": "Number",
              "description": "<p>The previous active index.</p>"
            },
            {
              "name": "prevActiveItem",
              "type": "Core.widget.Widget",
              "description": "<p>The previous active child widget.</p>"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "Fit",
      "modulePath": "Core/widget/layout/Fit",
      "classDescription": "<p>A helper class for containers which must manage a single child widget which must fit the container's\n<a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Fit.js",
      "path": "/Calendar/lib/Core/widget/layout"
    },
    {
      "name": "Layout",
      "modulePath": "Core/widget/layout/Layout",
      "classDescription": "<p>A helper class used by <a href=\"#Core/widget/Container\">Container</a>s which renders child widgets to their\n<a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>. It also adds the Container's\n<a href=\"#Core/widget/Container#config-itemCls\">itemCls</a> class to child items.</p>\n<p>Subclasses may modify the way child widgets are rendered, or may offer APIs for manipulating the child widgets.</p>\n<p>The <a href=\"#Core/widget/layout/Card\">Card</a> layout class offers slide-in, slide-out animation of multiple\nchild widgets. <a href=\"#Core/widget/TabPanel\">TabPanel</a> uses Card layout.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Layout.js",
      "path": "/Calendar/lib/Core/widget/layout",
      "properties": [
        {
          "name": "owner",
          "description": "<p>The owning Widget.</p>",
          "type": "Core.widget.Widget",
          "scope": "inner",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "owner",
          "access": "private",
          "type": "Core.widget.Widget",
          "scope": "inner"
        },
        {
          "name": "containerCls",
          "description": "<p>The CSS class which should be added to the owning <a href=\"#Core/widget/Container\">Container</a>'s.\n<a href=\"#Core/widget/Widget#property-contentElement\">contentElement</a>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "itemCls",
          "description": "<p>The CSS class which should be added to the encapsulating element of child items.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "syncConfigLater",
          "access": "internal",
          "description": "<p>Registers a layout <code>config</code> property that cannot be acted upon at this time but must wait for the <code>owner</code> to\nfully render its elements (in particular the <code>contentElement</code>).</p>",
          "parameters": [
            {
              "name": "config",
              "type": "String",
              "description": "<p>The name of the config to sync later.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "syncConfigStyle",
          "access": "internal",
          "description": "<p>Sets the specified <code>style</code> to the value of the config given its <code>name</code>.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>The name of the config with the value to apply to the given <code>style</code>.</p>"
            },
            {
              "name": "options.name",
              "type": "String",
              "description": "<p>The name of the config with the value to apply to the given <code>style</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "options.style",
              "type": "String",
              "description": "<p>The style property to set on the <code>contentElement</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "options.classes",
              "type": "Array.<String>",
              "description": "<p>A list of config values that should be added as CSS classes.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.map",
              "type": "Object",
              "description": "<p>An mapping object to convert the config's value to the <code>style</code> value.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "VBox",
      "modulePath": "Core/widget/layout/VBox",
      "classDescription": "<p>A <a href=\"#Core/widget/layout/Box\">Box</a> layout that defaults to <code>horizontal : false</code>.</p>\n<p>The following:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> layout : {\n     type : 'vbox'\n }\n</code></pre>\n<p>Is equivalent to:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> layout : {\n     type       : 'box',\n     horizontal : false\n }\n</code></pre>",
      "extends": [
        "Core/widget/layout/Box"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "VBox.js",
      "path": "/Calendar/lib/Core/widget/layout"
    },
    {
      "name": "Badge",
      "modulePath": "Core/widget/mixin/Badge",
      "description": "<p>Mixin that allows a widget to display a badge (mostly done as css)</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// show badge\nbutton.badge = 5;\n\n// hide badge\nbutton.badge = null;\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Badge.js",
      "path": "/Calendar/lib/Core/widget/mixin",
      "externalExamples": [
        "Core/widget/Badge.js"
      ],
      "properties": [
        {
          "name": "badge",
          "description": "<p>Get/sets and display badge, set to null or empty string to hide.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        }
      ],
      "configs": [
        {
          "name": "badge",
          "description": "<p>Initial text to show in badge.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        }
      ]
    },
    {
      "name": "Labelable",
      "modulePath": "Core/widget/mixin/Labelable",
      "description": "<p>This mixin provides label functionality to <a href=\"#Core/widget/Field\">Field</a> and <a href=\"#Core/widget/FieldSet\">FieldSet</a>.</p>\n<p>Not to be used directly.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Labelable.js",
      "path": "/Calendar/lib/Core/widget/mixin",
      "properties": [
        {
          "name": "label",
          "description": "<p>Get/set fields label. Please note that the Field needs to have a label specified from start for this to\nwork, otherwise no element is created.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "label",
          "description": "<p>Label, prepended to field</p>",
          "type": "String",
          "scope": "inner",
          "category": "Label"
        },
        {
          "name": "labelPosition",
          "description": "<p>Label position, either 'before' the field or 'above' the field</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "before",
          "category": "Label"
        },
        {
          "name": "labelCls",
          "description": "<p>CSS class name or class names to add to any configured <a href=\"#Core/widget/mixin/Labelable#config-label\">label</a></p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "Label"
        },
        {
          "name": "labelWidth",
          "description": "<p>The width to apply to the <code>&lt;label&gt;</code> element. If a number is specified, <code>px</code> will be used.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Label"
        }
      ]
    },
    {
      "name": "LocalizableComboItems",
      "modulePath": "Core/widget/mixin/LocalizableComboItems",
      "description": "<p>A mixin that regenerates a combobox items on locale change.</p>",
      "mixin": true,
      "mixinbase": "Combo",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "LocalizableComboItems.js",
      "path": "/Calendar/lib/Core/widget/mixin"
    },
    {
      "name": "Responsive",
      "modulePath": "Core/widget/mixin/Responsive",
      "description": "<p>Mixin that simplifies adding responsive behaviour to widgets, by allowing them to define responsive\n<a href=\"#Core/widget/mixin/Responsive#config-breakpoints\">breakpoints</a> based on max-width/max-height.</p>\n<p>Each <a href=\"#Core/widget/mixin/Responsive#typedef-Breakpoint\">breakpoint</a> can contain configs that are applied to the widget and a callback called\nwhen the breakpoint is activated.</p>\n<p>The mixin triggers an event when switching breakpoints, allowing the application to define its own behaviour. It also\nuses the name of a breakpoint to apply a CSS class to Widget, for example <code>small</code> -&gt; <code>b-breakpoint-small</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class ResponsiveButton extends Button.mixin(Responsive) {}\n\nconst button = new ResponsiveButton({\n    breakpoints : {\n        width : {\n            // When width drops to 50 or below, hide text and show icon\n            50 : {\n                name    : 'small',\n                configs : { text : null, icon : 'b-fa b-fa-plus' },\n                callback() {\n                    console.log('Applied small');\n                }\n            },\n            // When width is above 50, hide icon and show text\n            '*' : {\n                 name    : 'large',\n                 configs : { text : 'Add', icon : null }\n            }\n        }\n    }\n});\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Responsive.js",
      "path": "/Calendar/lib/Core/widget/mixin",
      "typedefs": [
        {
          "name": "Breakpoint",
          "description": "<p>A breakpoint definition. Used when defining breakpoints, see <a href=\"#Core/widget/mixin/Responsive#config-breakpoints\">breakpoints</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    name    : 'Small',\n    configs : {\n        text  : null,\n        color : 'b-blue'\n    },\n    callback() {\n        console.log('Applied small');\n    }\n}\n</code></pre>",
          "properties": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>Name of the breakpoint</p>"
            },
            {
              "name": "configs",
              "type": "Object",
              "description": "<p>An optional configuration object to apply to the widget when the breakpoint is activated</p>",
              "optional": true
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>An optional callback, called when the breakpoint is activated</p>",
              "optional": true
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "breakpoints",
          "description": "<p>Defines responsive breakpoints, based on max-width or max-height.</p>\n<p>When the widget is resized, the defined breakpoints are queried to find the closest larger or equal\nbreakpoint for both width and height. If the found breakpoint differs from the currently applied, it is\napplied.</p>\n<p>Applying a breakpoint triggers an event that applications can catch to react to the change. It also\noptionally applies a set of configs and calls a configured callback.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>breakpoints : {\n    width : {\n        50 : { name : 'small', configs : { text : 'Small', ... } }\n        100 : { name : 'medium', configs : { text : 'Medium', ... } },\n        '*' : { name : 'largem', configs : { text : 'Large', ... } }\n    }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "parameters": [
            {
              "name": "width",
              "type": "Object",
              "description": "<p>Max-width breakpoints, with keys as numerical widths (or '*' for larger widths than the\nlargest defined one) and the value as a <a href=\"#Core/widget/mixin/Responsive#typedef-Breakpoint\">breakpoint definition</a></p>"
            },
            {
              "name": "height",
              "type": "Object",
              "description": "<p>Max-height breakpoints, with keys as numerical heights (or '*' for larger widths than\nthe largest defined one) and the value as a <a href=\"#Core/widget/mixin/Responsive#typedef-Breakpoint\">breakpoint definition</a></p>"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "responsiveWidthChange",
          "description": "<p>Triggered when a new max-width based breakpoint is applied.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget</p>"
            },
            {
              "name": "breakpoint",
              "type": "Core.widget.mixin.Responsive#Breakpoint",
              "description": "<p>The applied breakpoint</p>"
            },
            {
              "name": "prevBreakpoint",
              "type": "Core.widget.mixin.Responsive#Breakpoint",
              "description": "<p>The previously applied breakpoint</p>"
            }
          ]
        },
        {
          "name": "responsiveHeightChange",
          "description": "<p>Triggered when a new max-height based breakpoint is applied.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>The widget</p>"
            },
            {
              "name": "breakpoint",
              "type": "Core.widget.mixin.Responsive#Breakpoint",
              "description": "<p>The applied breakpoint</p>"
            },
            {
              "name": "prevBreakpoint",
              "type": "Core.widget.mixin.Responsive#Breakpoint",
              "description": "<p>The previously applied breakpoint</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Rotatable",
      "modulePath": "Core/widget/mixin/Rotatable",
      "description": "<p>A mixin that provides support for rotating a widget's primary element.</p>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Rotatable.js",
      "path": "/Calendar/lib/Core/widget/mixin",
      "properties": [
        {
          "name": "rotate",
          "description": "<p>Set to <code>'left'</code> to rotate the button content 90 degrees counter-clockwise or <code>'right'</code> for clockwise.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "rotate",
          "description": "<p>Specify <code>'left'</code> to rotate the button content 90 degrees counter-clockwise or <code>'right'</code> for clockwise.</p>",
          "type": "String",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Styleable",
      "modulePath": "Core/widget/mixin/Styleable",
      "description": "<p>Mixin for widgets that allows manipulating CSS variables. Works by setting style properties of the target widgets\nelement.</p>\n<p>As part of configuration:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const taskBoard = new TaskBoard({\n   css : {\n       cardBorderTop    : '5px solid currentColor',\n       columnBackground : '#ddd'\n   }\n});\n</code></pre>\n<p>And/or at runtime:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>taskBoard.css.cardBackground = '#333';\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Styleable.js",
      "path": "/Calendar/lib/Core/widget/mixin",
      "configs": [
        {
          "name": "cssVarPrefix",
          "description": "<p>CSS variable prefix, appended to the keys used in <a href=\"#Core/widget/mixin/Styleable#config-css\">css</a>.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n   cssVarPrefix : 'taskboard',\n\n   css : {\n       cardBackground : '#333'\n   }\n}\n</code></pre>\n<p>Results in the css var <code>--taskboard-card-background</code> being set to <code>#333</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "css",
          "description": "<p>Initial CSS variables to set.</p>\n<p>Each key will be applied as a CSS variable to the target elements style. Key names are hyphenated and\nprefixed with <a href=\"#Core/widget/mixin/Styleable#config-cssVarPrefix\">cssVarPrefix</a> in the process. For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n   cssVarPrefix : 'taskboard',\n\n   css : {\n       cardBackground : '#333'\n   }\n}\n</code></pre>\n<p>Results in the css var <code>--taskboard-card-background</code> being set to <code>#333</code>.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "CSS"
        }
      ],
      "properties": [
        {
          "name": "css",
          "description": "<p>Allows runtime manipulating of CSS variables.</p>\n<p>See <a href=\"#Core/widget/mixin/Styleable#config-css\">css</a> for more information.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>taskBoard.css.columnBackground = '#ccc';\n\n// Will set &quot;--taskboard-column-background : #ccc&quot;\n</code></pre>",
          "type": "Proxy",
          "scope": "inner",
          "category": "DOM"
        }
      ]
    },
    {
      "name": "Toolable",
      "modulePath": "Core/widget/mixin/Toolable",
      "description": "<p>A mixin that manages <a href=\"#Core/widget/mixin/Toolable#config-tools\">tools</a>.</p>",
      "mixin": true,
      "mixinbase": "Widget",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Toolable.js",
      "path": "/Calendar/lib/Core/widget/mixin",
      "properties": [
        {
          "name": "tools",
          "description": "<p>The <a href=\"#Core/widget/Tool\">tools</a> as specified by the <a href=\"#Core/widget/mixin/Toolable#config-tools\">tools</a> configuration. Each is a\n<a href=\"#Core/widget/Tool\">Tool</a> instance which may be hidden, shown and observed and styled just like any other\nwidget.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "tools",
          "description": "<p>The <a href=\"#Core/widget/Tool\">tools</a> to add either before or after the <code>title</code> in the Panel header. Each\nproperty name is the reference by which an instantiated tool may be retrieved from the live\n<code><a href=\"#Core/widget/mixin/Toolable#property-tools\">tools</a></code> property.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "toolDefaults",
          "access": "private",
          "description": "<p>An object containing config defaults for corresponding <a href=\"#Core/widget/mixin/Toolable#config-tools\">tools</a> objects with a matching name.</p>\n<p>This object contains a key named <code>'*'</code> with default config properties to apply to all tools. This\nobject provides the default <code>type</code> (`'tool').</p>",
          "type": "Object",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "CollapseTool",
      "modulePath": "Core/widget/panel/CollapseTool",
      "classDescription": "<p>This ensures the correct icon is used to represent the <a href=\"#Core/widget/Panel\">panel's</a>\n<a href=\"#Core/widget/Panel#config-collapsed\">collapsed</a> state.</p>",
      "extends": [
        "Core/widget/Tool"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "CollapseTool.js",
      "path": "/Calendar/lib/Core/widget/panel",
      "classType": "collapsetool",
      "configs": [
        {
          "name": "autoAlign",
          "description": "<p>Set to <code>false</code> to disable automatic adjustment of the <a href=\"#Core/widget/panel/CollapseTool#config-align\">align</a> config based on the state\nof the panel's <a href=\"#Core/widget/Panel#config-collapsed\">collapsed</a> config and the\n<a href=\"#Core/widget/panel/PanelCollapser#config-direction\">direction</a>.</p>\n<p>If this is set to a function, that function is called passing the owning <code>Panel</code> instance and its\nreturn value is assigned to the <a href=\"#Core/widget/panel/CollapseTool#config-align\">align</a> config.</p>",
          "type": [
            "Boolean",
            "function"
          ],
          "scope": "inner",
          "defaultValue": true
        }
      ]
    },
    {
      "name": "PanelCollapser",
      "modulePath": "Core/widget/panel/PanelCollapser",
      "classDescription": "<p>Instances of this class are used to implement the <a href=\"#Core/widget/Panel#config-collapsible\">collapsible</a> config.</p>\n<p>For example, the following creates an instance of this class:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>     {\n         type        : 'panel',\n         collapsible : true\n     }\n</code></pre>\n<p>In this mode, a panel will collapse inline, within its container.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "PanelCollapser.js",
      "path": "/Calendar/lib/Core/widget/panel",
      "classType": "inline",
      "configs": [
        {
          "name": "animation",
          "description": "<p>An animation config object.</p>",
          "type": "Object",
          "scope": "inner",
          "properties": [
            {
              "name": "animation.duration",
              "type": "Number",
              "description": "<p>The duration of the animation (in milliseconds).</p>",
              "default": 200,
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "collapsed",
          "access": "private",
          "description": "<p>Tracks whether or not the panel is collapsed.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "direction",
          "description": "<p>Specifies the direction of panel collapse. The default value for this config is determined dynamically\nbased on the <a href=\"#Core/widget/Panel#config-header\">header's</a> <code>dock</code> property and the containing layout's\nflex direction and, therefore, often does not need to be explicitly specified.</p>\n<p>This config can be any of the following:</p>\n<ul>\n<li><code>'up'</code></li>\n<li><code>'down'</code></li>\n<li><code>'left'</code></li>\n<li><code>'right'</code></li>\n</ul>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "collapseTooltip",
          "description": "<p>The tooltip to use for the collapse tool when the panel is expanded.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "expandTooltip",
          "description": "<p>The tooltip to use for the expand tool when the panel is collapsed.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "supportAxis",
          "access": "internal",
          "description": "<p>To support the panel's collapsed size, a minimum width and height may be assigned to the panel's header,\nbased on this config and the panel's positioning style.</p>\n<p>When a panel is collapsed it may need to retain the pre-collapse dimension perpendicular to the collapse\n<a href=\"#Core/widget/panel/PanelCollapser#config-direction\">direction</a>. For example, the height of a panel that collapses to the left. The dimension\nparallel to the collapse (the width in this example) may also need to be supported using the pre-collapse\nsize of the panel's header.</p>\n<p>When this config is set to <code>true</code>, or by default when the owning panel is <code>position: absolute</code>, both\naxes are given a minimum size based on the panel's pre-collapse size. When this config is <code>false</code>, no\nminimum sizes will be assigned.</p>\n<p>This config can also be a string containing the single letters 'w' and/or 'h' indicating which axis/axes\nof the panel header should be assigned a minimum size. That is, 'w' to assign only a minimum width, 'h'\nfor only a minimum height, or 'wh' to assign both.</p>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner"
        },
        {
          "name": "tool",
          "description": "<p>The collapse/expand tool. The <code>type</code> of this instance should not be changed but the tool instance can be\nconfigured in other ways via this config property.</p>",
          "type": [
            "Object",
            "Core.widget.Tool"
          ],
          "scope": "inner"
        }
      ]
    },
    {
      "name": "PanelCollapserOverlay",
      "modulePath": "Core/widget/panel/PanelCollapserOverlay",
      "classDescription": "<p>A panel collapse implementation that adds the ability to reveal the collapsed panel as a floating overlay.</p>",
      "extends": [
        "Core/widget/panel/PanelCollapser"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "PanelCollapserOverlay.js",
      "path": "/Calendar/lib/Core/widget/panel",
      "classType": "overlay",
      "configs": [
        {
          "name": "autoCloseDelay",
          "description": "<p>The number of milliseconds to wait once the mouse leaves a <a href=\"#Core/widget/Panel#config-revealed\">revealed</a>\npanel before returning to an unrevealed state. Clicking outside the revealed panel will immediately\nreturn the panel to its collapsed state.</p>\n<p>This may be disabled by configuring <a href=\"#Core/widget/panel/PanelCollapserOverlay#config-autoClose\">autoClose</a> as <code>null</code>.</p>\n<p>If this value is negative, the panel will not automatically recollapse due to the mouse leaving, however,\nclicks outside the panel will still recollapse it.</p>\n<p>If this value is <code>null</code>, the panel will not automatically recollapse for either outside clicks or if\nthe mouse leaves the panel.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1000
        },
        {
          "name": "autoClose",
          "description": "<p>By default, clicking outside the revealed overlay hides the revealed overlay.</p>\n<p>If the revealed overlay was shown using the <a href=\"#Core/widget/panel/PanelCollapserOverlay#property-recollapseTool\">recollapseTool</a>\nthen moving the mouse outside of the revealed overlay hides the revealed overlay.</p>\n<p>Configure this as <code>false</code> to disable auto hiding, making overlayed\nstate permanent, and changeable using the <a href=\"#Core/widget/panel/PanelCollapserOverlay#function-toggleReveal\">toggleReveal</a> method.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "recollapseTool",
          "description": "<p>The reveal/hide tool which slides the collapsed panel over the top of the UI.</p>\n<p>The <code>type</code> of this instance should not be changed but the tool instance can be\nconfigured in other ways via this config property.</p>",
          "type": [
            "Object",
            "Core.widget.Tool"
          ],
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "recollapseTool",
          "description": "<p>The reveal/hide tool which slides the collapsed panel over the top of the UI.</p>",
          "type": "Core.widget.Tool",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "toggleReveal",
          "description": "<p>Toggles the revealed state of the Panel to match the passed boolean flag.</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Boolean",
              "description": "<p>If not specified, this method toggles current state. Otherwise, pass <code>true</code> to reveal\nthe overlay, or <code>false</code> to hide it.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TrialButton",
      "modulePath": "Core/widget/trial/TrialButton",
      "classDescription": "<p>Download trial button.</p>",
      "extends": [
        "Core/widget/Button"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "TrialButton.js",
      "path": "/Calendar/lib/Core/widget/trial",
      "classType": "trialbutton",
      "configs": [
        {
          "name": "productId",
          "description": "<p>Product identifier.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "storeEmail",
          "description": "<p>Store emails using aweber mail list posting.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "AvatarRendering",
      "modulePath": "Core/widget/util/AvatarRendering",
      "classDescription": "<p>Internal utility class providing rendering of avatars / resource initials.</p>",
      "extends": [
        "Core/Base"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "AvatarRendering.js",
      "path": "/Calendar/lib/Core/widget/util",
      "configs": [
        {
          "name": "element",
          "description": "<p>Element used to listen for load errors on. Normally the owning widgets own element.</p>",
          "type": "HTMLElement",
          "scope": "inner"
        },
        {
          "name": "colorPrefix",
          "description": "<p>Prefix prepended to a supplied color to create a CSS class applied when showing initials.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-"
        },
        {
          "name": "tooltip",
          "description": "<p>A tooltip config object to enable using a custom tooltip for the avatars. Listen for <code>beforeShow</code> and set\nyour html there.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "getResourceAvatar",
          "access": "internal",
          "description": "<p>Returns a DOM config object containing a resource avatar, icon or resource initials. Display priority in that\norder.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Avatar options</p>"
            },
            {
              "name": "options.initials",
              "type": "String",
              "description": "<p>Resource initials</p>",
              "isSubParam": true
            },
            {
              "name": "options.color",
              "type": "String",
              "description": "<p>Background color for initials</p>",
              "isSubParam": true
            },
            {
              "name": "options.iconCls",
              "type": "String",
              "description": "<p>Icon cls</p>",
              "isSubParam": true
            },
            {
              "name": "options.imageUrl",
              "type": "String",
              "description": "<p>Image url</p>",
              "isSubParam": true
            },
            {
              "name": "options.defaultImageUrl",
              "type": "String",
              "description": "<p>Default image url, fallback if image fails to load or there is none\nspecified. Leave out to show initials instead.</p>",
              "isSubParam": true
            },
            {
              "name": "options.dataset",
              "type": "Object",
              "description": "<p>Dataset to apply to the resulting element</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.alt",
              "type": "String",
              "description": "<p>Image description</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        }
      ]
    },
    {
      "name": "ActionColumn",
      "modulePath": "Grid/column/ActionColumn",
      "classDescription": "<p>A column that displays actions as clickable icons in the cell.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new TreeGrid({\n    appendTo : document.body,\n    columns  : [{\n        type    : 'action',\n        text    : 'Increase amount',\n        actions : [{\n            cls      : 'b-fa b-fa-plus',\n            renderer : ({ action, record }) => `&lt;i class=&quot;b-action-item ${action.cls} b-${record.enabled ? &quot;green&quot; : &quot;red&quot;}-class&quot;>&lt;/i>`,\n            visible  : ({ record }) => record.canAdd,\n            tooltip  : ({ record }) => `&lt;p class=&quot;b-nicer-than-default&quot;>Add to ${record.name}&lt;/p>`,\n            onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n        }, {\n            cls     : 'b-fa b-fa-pencil',\n            tooltip : 'Edit note',\n            onClick : ({ record }) => console.log(`Editing ${record.name}`)\n        }]\n    }]\n});\n</code></pre>\n<p>Actions may be placed in <a href=\"#Grid/feature/Group\">Group</a> headers, by setting <code>actions.showForGroup</code> to <code>true</code>. Those actions will not be shown on normal rows.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ActionColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "action",
      "externalExamples": [
        "Grid/column/ActionColumn.js"
      ],
      "configs": [
        {
          "name": "actions",
          "description": "<p>An array of action config objects</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Common",
          "properties": [
            {
              "name": "actions.cls",
              "type": "String",
              "description": "<p>CSS Class for action icon</p>",
              "isSubParam": true
            },
            {
              "name": "actions.tooltip",
              "type": [
                "function",
                "String"
              ],
              "description": "<p>Tooltip text</p>",
              "isSubParam": true
            },
            {
              "name": "actions.tooltip.record",
              "type": "Core.data.Model",
              "description": "<p>The model instance</p>",
              "isSubParam": true
            },
            {
              "name": "actions.visible",
              "type": [
                "function",
                "Boolean"
              ],
              "description": "<p>Boolean to define the action icon visibility or a callback function to change it dynamically</p>",
              "isSubParam": true
            },
            {
              "name": "actions.visible.record",
              "type": "Core.data.Model",
              "description": "<p>The model instance</p>",
              "isSubParam": true
            },
            {
              "name": "actions.onClick",
              "type": "function",
              "description": "<p>Callback to handle click action item event</p>",
              "isSubParam": true
            },
            {
              "name": "actions.onClick.record",
              "type": "Core.data.Model",
              "description": "<p>The model instance</p>",
              "isSubParam": true
            },
            {
              "name": "actions.showForGroup",
              "type": "Boolean",
              "description": "<p>Set to true to have action icon visible in group headers only when using the <code>group</code> feature</p>",
              "isSubParam": true
            },
            {
              "name": "actions.renderer",
              "type": "function",
              "description": "<p>A render function used to define the action element. Expected to return a HTML string or a DOM config object.\n<strong>Note</strong>: when specified, the <code>cls</code> action config is ignored. Make sure you add an action icon manually, for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n     type    : 'action',\n     text    : 'Increase amount',\n     actions : [{\n         cls      : 'b-fa b-fa-plus', // this line will be ignored\n         renderer : ({ record }) => '&lt;i class=&quot;b-action-item b-fa b-fa-plus&quot;>&lt;/i> ' + record.name,\n         onClick  : ({ record }) => {}\n     }]\n}\n</code></pre>",
              "isSubParam": true
            },
            {
              "name": "actions.renderer.record",
              "type": "Core.data.Model",
              "description": "<p>The model instance</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "disableIfGridReadOnly",
          "description": "<p>Set true to hide disable actions in this column if the grid is <a href=\"#Core/widget/Widget#config-readOnly\">readOnly</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "filterable",
          "description": "<p>Filtering by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "groupable",
          "description": "<p>Grouping by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "sortable",
          "description": "<p>Sorting by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "editor",
          "description": "<p>Editor for action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "searchable",
          "description": "<p>Searching by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "htmlEncode",
          "description": "<p>By default, for action column this flag is switched to <code>true</code>, because the content of this column is always HTML.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc",
          "hide": true
        },
        {
          "name": "resizable",
          "description": "<p>Set to <code>true</code> to allow the column to being drag-resized when the ColumnResize plugin is enabled.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "minWidth",
          "description": "<p>Column minimal width. If value is Number then minimal width is in pixels.</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "30",
          "category": "Layout"
        }
      ],
      "functions": [
        {
          "name": "internalRenderer",
          "access": "private",
          "description": "<p>Renderer that displays action icon(s) in the cell.</p>",
          "scope": "instance"
        },
        {
          "name": "onCellClick",
          "access": "private",
          "description": "<p>Handle icon click and call action handler.</p>",
          "scope": "instance"
        },
        {
          "name": "updateAutoWidth",
          "access": "private",
          "description": "<p>Update width for actions column to fit content.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "AggregateColumn",
      "modulePath": "Grid/column/AggregateColumn",
      "classDescription": "<p>A column, which, when used as part of a <a href=\"#Grid/view/TreeGrid\">TreeGrid</a>, aggregates the values of this column's descendants using\na configured function which defaults to <code>sum</code>. The aggregate value is re-calculated after any change to the data,\nand if you want aggregate values to be change-tracked, please set <a href=\"#Grid/column/AggregateColumn#config-includeParentInChangeSet\">includeParentInChangeSet</a> to true.</p>\n<p>Default editor depends on the data field type. If it is a number, default editor is a <a href=\"#Core/widget/NumberField\">NumberField</a>.\nOtherwise Default editor is a <a href=\"#Core/widget/TextField\">TextField</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new TreeGrid({\n    // Custom aggregation handler.\n    // For test purposes, this just does &quot;sum&quot;\n    myAggregator(...values) {\n        let result = 0;\n\n        for (let i = 0, { length } = args; i &lt; length; i++) {\n            result += parseInt(args[i], 10);\n        }\n        return result;\n    },\n    columns : [\n        { field : 'name', text : 'Name' },\n\n        // Will sum the ages of leaf nodes. This is the default.\n        { type : 'aggregate', field : 'age', text : 'Age', renderer : ({ value }) => `&lt;b>${value}&lt;b>` },\n\n        // Will use AggregateColumn's built-in avg of scores of leaf nodes\n        { type : 'aggregate', field : 'score', text : 'Score', function : 'avg' },\n\n        // Will use the grid's myAggregator function\n        { type : 'aggregate', field : 'revenue', text : 'Revenue', function : 'up.myAggregator' },\n    ]\n});\n</code></pre>",
      "extends": [
        "Grid/column/NumberColumn"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AggregateColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "aggregate",
      "configs": [
        {
          "name": "function",
          "description": "<p>Math Function name, or function name prepended by <code>&quot;up.&quot;</code> that is resolvable in an\nancestor component (such as the owning Grid, or a hight Container), or a function to\nuse to aggregate child record values for this column, or a function.</p>\n<p>This Column is provided with a <code>sum</code> and <code>avg</code> function. The default function is <code>sum</code>\nwhich is used for the aggregation.</p>\n<p>The function is passed a set of child node values, each value in a separate argument\nand should return a single value based upon the value set passed.</p>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "includeParentInChangeSet",
          "description": "<p>Set to <code>true</code> to include changes to parent (aggregate) rows in the store's modification tracking.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        }
      ]
    },
    {
      "name": "CheckColumn",
      "modulePath": "Grid/column/CheckColumn",
      "classDescription": "<p>A column that displays a checkbox in the cell. The value of the backing field is toggled by the checkbox.</p>\n<p>This column uses a <a href=\"#Core/widget/Checkbox\">checkbox</a> as its editor, and it is not intended to be changed.\nIf you want to hide certain checkboxes, you can use the <a href=\"#Grid/column/CheckColumn#config-renderer\">renderer</a> method to access the checkbox widget\nas it is being rendered.</p>",
      "extends": [
        "Grid/column/WidgetColumn"
      ],
      "examples": [
        "new Grid({\n    appendTo : document.body,\n\n    columns : [\n        {\n             type: 'check',\n             field: 'allow',\n             // In the column renderer, we get access to the record and CheckBox widget\n             renderer({ record, widgets }) {\n                 // Hide checkboxes in certain rows\n                 widgets[0].hidden = record.readOnly;\n             }\n        }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "CheckColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "check",
      "externalExamples": [
        "Grid/column/CheckColumn.js"
      ],
      "configs": [
        {
          "name": "checkCls",
          "description": "<p>CSS class name to add to checkbox</p>",
          "type": "String",
          "scope": "inner",
          "category": "Rendering"
        },
        {
          "name": "showCheckAll",
          "description": "<p>True to show a checkbox in the column header to be able to select/deselect all rows</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "toggleAll",
          "description": "<p>Fired when the header checkbox is clicked to toggle its checked status.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.column.CheckColumn",
              "description": "<p>This Column</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>The checked status of the header checkbox.</p>"
            }
          ]
        },
        {
          "name": "beforeToggle",
          "description": "<p>Fired when a cell is clicked to toggle its checked status. Returning <code>false</code> will prevent status change.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.column.Column",
              "description": "<p>This Column</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record for the row containing the cell.</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>The new checked status of the cell.</p>"
            }
          ]
        },
        {
          "name": "toggle",
          "description": "<p>Fired when a cell is clicked to toggle its checked status.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.column.Column",
              "description": "<p>This Column</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record for the row containing the cell.</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>The new checked status of the cell.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Column",
      "modulePath": "Grid/column/Column",
      "classDescription": "<p>Base class for other column types, used if no type is specified on a column.</p>\n<p>Default editor is a <a href=\"#Core/widget/TextField\">TextField</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  columns : [{\n    field : 'name',\n    text  : 'Name'\n  }, {\n    text  : 'Hobby',\n    field : 'others.hobby', // reading nested field data\n  }, {\n    type  : 'number', // Will use NumberColumn\n    field : 'age',\n    text  : 'Age'\n  }]\n});\n</code></pre>\n<h2>Column types</h2>\n<p>Grid ships with multiple different column types. Which type to use for a column is specified by the <code>type</code> config.\nThe built in types are:</p>\n<ul>\n<li><a href=\"#Grid/column/ActionColumn\">action</a> - displays actions (clickable icons) in the cell.</li>\n<li><a href=\"#Grid/column/AggregateColumn\">aggregate</a> - a column, which, when used as part of a Tree, aggregates the values\nof this column's descendants using a configured function which defaults to <code>sum</code>.</li>\n<li><a href=\"#Grid/column/CheckColumn\">check</a> - displays a checkbox in the cell.</li>\n<li><a href=\"#Grid/column/DateColumn\">date</a> - displays a date in the specified format.</li>\n<li><a href=\"#Grid/column/NumberColumn\">number</a> - a column for showing/editing numbers.</li>\n<li><a href=\"#Grid/column/PercentColumn\">percent</a> - displays a basic progress bar.</li>\n<li><a href=\"#Grid/column/RatingColumn\">rating</a> - displays a star rating.</li>\n<li><a href=\"#Grid/column/RowNumberColumn\">rownumber</a> - displays the row number in each cell.</li>\n<li><a href=\"#Grid/column/TemplateColumn\">template</a> - uses a template for cell content.</li>\n<li><a href=\"#Grid/column/TimeColumn\">time</a> - displays a time in the specified format.</li>\n<li><a href=\"#Grid/column/TreeColumn\">tree</a> - displays a tree structure when using the <a href=\"#Grid/feature/Tree\">tree</a>\nfeature.</li>\n<li><a href=\"#Grid/column/WidgetColumn\">widget</a> - displays widgets in the cells.</li>\n</ul>\n<h2>Cell renderers</h2>\n<p>You can affect the contents and styling of cells in a column using a\n<a href=\"#Grid/column/Column#config-renderer\">renderer</a> function.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  columns : [\n  ...\n    {\n      field      : 'approved',\n      text       : 'Approved',\n      htmlEncode : false, // allow to use HTML code\n      renderer({ value }) {\n        return value === true ? '&lt;b>Yes&lt;/b>' : '&lt;i>No&lt;/i>';\n      }\n    }\n    ...\n    ]\n});\n</code></pre>\n<h2>Menus</h2>\n<p>You can add custom items to the context menu for a columns header and for its cells, using\n<a href=\"#Grid/column/Column#config-headerMenuItems\">headerMenuItems</a> and <a href=\"#Grid/column/Column#config-cellMenuItems\">cellMenuItems</a>. Here is an\nexample:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  columns : [\n    ...\n    {\n      type  : 'number',\n      field : 'age',\n      text  : 'Age',\n      headerMenuItems: [{\n          text : 'My unique header item',\n          icon : 'b-fa b-fa-paw',\n          onItem() { console.log('item clicked'); }\n      }],\n      cellMenuItems: [{\n          text : 'My unique cell item',\n          icon : 'b-fa b-fa-plus',\n          onItem() { console.log('item clicked'); }\n      }]\n    }\n  ...\n  ]\n});\n</code></pre>",
      "extends": [
        "Core/data/Model"
      ],
      "mixes": [
        "Core/mixin/Events",
        "Core/localization/Localizable"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Column.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "column",
      "properties": [
        {
          "name": "type",
          "description": "<p>Column name alias which you can use in the <code>columns</code> array of a Grid.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyColumn extends Column {\n    static get type() {\n       return 'mycolumn';\n    }\n}\n</code></pre>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   columns : [\n      { type : 'mycolumn', text : 'The column', field : 'someField', flex : 1 }\n   ]\n});\n</code></pre>",
          "type": "String",
          "scope": "static"
        },
        {
          "name": "defaults",
          "description": "<p>Default settings for the column, applied in constructor. None by default, override in subclass.</p>",
          "type": "Object",
          "scope": "inner",
          "returns": [
            {
              "type": {
                "names": [
                  "Object"
                ]
              }
            }
          ],
          "readonly": true
        },
        {
          "name": "text",
          "description": "<p>Get/set header text</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "flex",
          "description": "<p>Gets or sets the column flex weight</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "icon",
          "description": "<p>Get/set header icon class</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "hidden",
          "description": "<p>Get/set columns hidden state. Specify <code>true</code> to hide the column, <code>false</code> to show it.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "editor",
          "access": "private",
          "description": "<p>The Field to use as editor for this column</p>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "defaultEditor",
          "access": "private",
          "description": "<p>A config object specifying the editor to use to edit this column.</p>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "subGrid",
          "description": "<p>Get the SubGrid to which this column belongs</p>",
          "type": "Grid.view.SubGrid",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "subGridElement",
          "access": "private",
          "description": "<p>Get the element for the SubGrid to which this column belongs</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "element",
          "description": "<p>The header element for this Column. <em>Only available after the grid has been rendered</em>.</p>\n<p><strong>Note that column headers are rerendered upon mutation of Column values, so this\nvalue is volatile and should not be cached, but should be read whenever needed.</strong></p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "textWrapper",
          "description": "<p>The text wrapping element for this Column. <em>Only available after the grid has been rendered</em>.</p>\n<p>This is the full-width element which <em>contains</em> the text-bearing element and any icons.</p>\n<p><strong>Note that column headers are rerendered upon mutation of Column values, so this\nvalue is volatile and should not be cached, but should be read whenever needed.</strong></p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "textElement",
          "description": "<p>The text containing element for this Column. <em>Only available after the grid has been rendered</em>.</p>\n<p><strong>Note that column headers are rerendered upon mutation of Column values, so this\nvalue is volatile and should not be cached, but should be read whenever needed.</strong></p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "contentElement",
          "description": "<p>The child element into which content should be placed. This means where any\ncontained widgets such as filter input fields should be rendered. <em>Only available after the grid has been\nrendered</em>.</p>\n<p><strong>Note that column headers are rerendered upon mutation of Column values, so this\nvalue is volatile and should not be cached, but should be read whenever needed.</strong></p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "headerText",
          "access": "internal",
          "description": "<p>Returns header text based on <a href=\"#Grid/column/Column#config-htmlEncodeHeaderText\">htmlEncodeHeaderText</a> config value.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "String"
                ]
              }
            }
          ]
        },
        {
          "name": "allIndex",
          "access": "internal",
          "description": "<p>Index among all flattened columns</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "calcMinWidth",
          "access": "internal",
          "description": "<p>Returns minimal width in pixels for applying to style according to the current <code>width</code> and <code>minWidth</code>.</p>",
          "scope": "instance"
        },
        {
          "name": "width",
          "description": "<p>Get/set columns width in px. If column uses flex, width will be undefined.\nSetting a width on a flex column cancels out flex.</p>\n<p><strong>NOTE:</strong> Grid might be configured to always stretch the last column, in which case the columns actual width\nmight deviate from the configured width.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let grid = new Grid({\n    appendTo : 'container',\n    height   : 200,\n    width    : 400,\n    columns  : [{\n        text  : 'First column',\n        width : 100\n    }, {\n        text  : 'Last column',\n        width : 100 // last column in the grid is always stretched to fill the free space\n    }]\n});\n\ngrid.columns.last.element.offsetWidth; // 300 -> this points to the real element width\n</code></pre>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "instance"
        }
      ],
      "configs": [
        {
          "name": "text",
          "description": "<p>Text to display in the header</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "field",
          "description": "<p>The <a href=\"#Core/data/field/DataField#config-name\">name</a> of the <a href=\"#Core/data/Model\">data model</a> field to read\ndata from.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "renderer",
          "description": "<p>Renderer function, used to format and style the content displayed in the cell. Return the cell text you\nwant to display. Can also affect other aspects of the cell, such as styling.</p>\n<p><strong>NOTE:</strong> If you mutate cellElement and you want to prevent cell content to be reset during the\nrendering, please return <code>undefined</code> from the renderer or just omit the <code>return</code> statement. If you return\na value and the value can be undefined, please make sure you return an empty string to update the cell\ncontent. For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    columns : [\n        // Returns an empty string if status field value is undefined\n        { text : 'Status', renderer : ({ record }) => record.status ?? '' },\n    ]\n});\n</code></pre>\n<p>You can also return a <a href=\"#Core/helper/DomHelper#typedef-DomConfig\">DomConfig</a> object describing the markup</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    columns : [\n        {\n             text : 'Status',\n             renderer : ({ record }) => {\n                 return {\n                     class : 'myClass',\n                     children : [\n                         {\n                             tag : 'i',\n                             class : 'fa fa-pen'\n                         },\n                         {\n                             tag : 'span',\n                             html : record.name\n                         }\n                     ]\n                 };\n             }\n        }\n    ]\n});\n</code></pre>\n<p>You can modify the row element too from inside a renderer to add custom CSS classes:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    columns : [\n        {\n            text     : 'Name',\n            renderer : ({ record, row }) => {\n               // Add special CSS class to new rows that have not yet been saved\n              row.cls.newRow = record.isPhantom;\n\n              return record.name;\n        }\n    ]\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "category": "Common",
          "parameters": [
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Object containing renderer parameters</p>"
            },
            {
              "name": "renderData.cellElement",
              "type": "HTMLElement",
              "description": "<p>Cell element, for adding CSS classes, styling etc.\nCan be <code>null</code> in case of export</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.value",
              "type": "*",
              "description": "<p>Value to be displayed in the cell</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.record",
              "type": "Core.data.Model",
              "description": "<p>Record for the row</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.column",
              "type": "Grid.column.Column",
              "description": "<p>This column</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.grid",
              "type": "Grid.view.Grid",
              "description": "<p>This grid</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.row",
              "type": "Grid.row.Row",
              "description": "<p>Row object. Can be null in case of export. Use the\n<a href=\"#Grid/row/Row#function-assignCls\">row's API</a> to manipulate CSS class names.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.size",
              "type": "Object",
              "description": "<p>Set <code>size.height</code> to specify the desired row height for the current\nrow. Largest specified height is used, falling back to configured <a href=\"#Grid/view/Grid#config-rowHeight\">rowHeight</a>\nin case none is specified. Can be null in case of export</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.size.height",
              "type": "Number",
              "description": "<p>Set this to request a certain row height</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.size.configuredHeight",
              "type": "Number",
              "description": "<p>Row height that will be used if none is requested</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.isExport",
              "type": "Boolean",
              "description": "<p>True if record is being exported to allow special handling during\nexport.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.isMeasuring",
              "type": "Boolean",
              "description": "<p>True if the column is being measured for a <code>resizeToFitContent</code>\ncall. In which case an advanced renderer might need to take different actions.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "width",
          "description": "<p>Column width. If value is Number then width is in pixels</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "flex",
          "description": "<p>Column width as a flex weight. All columns with flex specified divide the available space (after\nsubtracting fixed widths) between them according to the flex value. Columns that have flex 2 will be\ntwice as wide as those with flex 1 (and so on)</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "autoWidth",
          "description": "<p>This config sizes a column to fits its content. It is used instead of <code>width</code> or <code>flex</code>.</p>\n<p>This config requires the <a href=\"#Grid/feature/ColumnAutoWidth\">ColumnAutoWidth</a> feature which responds to changes in the\ngrid's store and synchronizes the widths' of all <code>autoWidth</code> columns.</p>\n<p>If this config is not a Boolean value, it is passed as the only argument to the <code>resizeToFitContent</code>\nmethod to constrain the column's width.</p>",
          "type": [
            "Boolean",
            "Number",
            "Array.<Number>"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "autoHeight",
          "description": "<p>This config enables automatic height for all cells in this column. It is achieved by measuring the height\na cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other\nheights used for the row).</p>\n<p>Heads up if you render your Grid on page load, if measurement happens before the font you are using is\nloaded you might get slightly incorrect heights. For browsers that support it we detect that\nand remeasure when fonts are available.</p>\n<p><strong>NOTE:</strong> Enabling this config comes with a pretty big performance hit. To maintain good performance,\nwe recommend not using it. You can still set the height of individual rows manually, either through\n<a href=\"#Grid/data/GridRowModel#field-rowHeight\">data</a> or via <a href=\"#Grid/column/Column#config-renderer\">renderers</a>.</p>\n<p>Also note that this setting only works fully as intended with non-flex columns.</p>\n<p>Manually setting a height from a <a href=\"#Grid/column/Column#config-renderer\">renderer</a> in this column will take precedence over this\nconfig.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "fitMode",
          "description": "<p>Mode to use when measuring the contents of this column in calls to <a href=\"#Grid/column/Column#function-resizeToFitContent\">resizeToFitContent</a>.\nAvailable modes are:</p>\n<ul>\n<li>'exact'       - Most precise, renders and measures all cells (Default, slowest)</li>\n<li>'textContent' - Renders all cells but only measures the one with the longest <code>textContent</code></li>\n<li>'value'       - Renders and measures only the cell with the longest data (Fastest)</li>\n<li>'none'/falsy  - Resize to fit content not allowed, a call does nothing</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'exact'",
          "category": "Common"
        },
        {
          "name": "editor",
          "description": "<p>Specify if this column should be editable, and define which editor to use for editing cells in the\ncolumn. Used when <a href=\"#Grid/feature/CellEdit\">CellEdit</a> feature is enabled. The Editor refers to\n<a href=\"#Grid/column/Column#config-field\">field</a> for a data source.</p>\n<p>All subclasses of <a href=\"#Core/widget/Field\">Field</a> can be used as editors. The most popular are:</p>\n<ul>\n<li><a href=\"#Core/widget/TextField\">TextField</a></li>\n<li><a href=\"#Core/widget/NumberField\">NumberField</a></li>\n<li><a href=\"#Core/widget/DateField\">DateField</a></li>\n<li><a href=\"#Core/widget/TimeField\">TimeField</a></li>\n<li><a href=\"#Core/widget/Combo\">Combo</a></li>\n</ul>\n<p>If record has method set + capitalized field, method will be called, e.g. if record has method named\n<code>setFoobar</code> and this config is <code>foobar</code>, then instead of <code>record.foobar = value</code>,\n<code>record.setFoobar(value)</code> will be called.</p>",
          "type": [
            "Boolean",
            "String",
            "Object",
            "Core.widget.Field"
          ],
          "scope": "inner",
          "category": "Interaction"
        },
        {
          "name": "finalizeCellEdit",
          "description": "<p>A function which is called when a cell edit is requested to finish.</p>\n<p>This may be an <code>async</code> function which performs complex validation. The edit will not\ncomplete until it returns <code>false</code> to mean the edit cannot be finished, or <code>true</code> to go\nahead and complete.</p>",
          "type": "function",
          "scope": "inner",
          "category": "Interaction",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>An object describing the state of the edit at completion request time.</p>"
            },
            {
              "name": "context.inputField",
              "type": "Core.widget.Field",
              "description": "<p>The field configured as the column's <code>editor</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "context.record",
              "type": "Core.data.Model",
              "description": "<p>The record being edited.</p>",
              "isSubParam": true
            },
            {
              "name": "context.oldValue",
              "type": "*",
              "description": "<p>The old value of the cell.</p>",
              "isSubParam": true
            },
            {
              "name": "context.value",
              "type": "*",
              "description": "<p>The new value of the cell.</p>",
              "isSubParam": true
            },
            {
              "name": "context.grid",
              "type": "Grid.view.Grid",
              "description": "<p>The host grid.</p>",
              "isSubParam": true
            },
            {
              "name": "context.editorContext",
              "type": "Object",
              "description": "<p>The <a href=\"#Grid/feature/CellEdit\">CellEdit</a> context object.</p>",
              "isSubParam": true
            },
            {
              "name": "context.editorContext.column",
              "type": "Grid.column.Column",
              "description": "<p>The column being edited.</p>",
              "isSubParam": true
            },
            {
              "name": "context.editorContext.record",
              "type": "Core.data.Model",
              "description": "<p>The record being edited.</p>",
              "isSubParam": true
            },
            {
              "name": "context.editorContext.cell",
              "type": "HTMLElement",
              "description": "<p>The cell element hosting the editor.</p>",
              "isSubParam": true
            },
            {
              "name": "context.editorContext.editor",
              "type": "Core.widget.Editor",
              "description": "<p>The floating Editor widget which is hosting the\ninput field.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "revertOnEscape",
          "description": "<p>Setting this option means that pressing the <code>ESCAPE</code> key after editing the field will\nrevert the field to the value it had when the edit began. If the value is <em>not</em> changed\nfrom when the edit started, the input field's <a href=\"#Core/widget/Field#config-clearable\">clearable</a>\nbehaviour will be activated. Finally, the edit will be canceled.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "invalidAction",
          "description": "<p>How to handle a request to complete a cell edit in this column if the field is invalid.\nThere are three choices:</p>\n<ul>\n<li><code>block</code> The default. The edit is not exited, the field remains focused.</li>\n<li><code>allow</code> Allow the edit to be completed.</li>\n<li><code>revert</code> The field value is reverted and the edit is completed.</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'block'",
          "category": "Interaction"
        },
        {
          "name": "sortable",
          "description": "<p>Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a\ncustom sorting function, or a config object for a <a href=\"#Core/util/CollectionSorter\">CollectionSorter</a></p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : [\n         {\n             // Disable sorting for this column\n             sortable : false\n         },\n         {\n             field : 'name',\n             // Custom sorting for this column\n             sortable(user1, user2) {\n                 return user1.name &lt; user2.name ? -1 : 1;\n             }\n         },\n         {\n             // A config object for a Core.util.CollectionSorter\n             sortable : {\n                 property         : 'someField',\n                 direction        : 'DESC',\n                 useLocaleCompare : 'sv-SE'\n             }\n         }\n    ]\n});\n</code></pre>\n<p>When providing a custom sorting function, if the sort feature is configured with\n<code>prioritizeColumns : true</code> that function will also be used for programmatic sorting of the store:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n      sort : {\n          prioritizeColumns : true\n      }\n    },\n\n    columns : [\n         {\n             field : 'name',\n             // Custom sorting for this column\n             sortable(user1, user2) {\n                 return user1.name &lt; user2.name ? -1 : 1;\n             }\n         }\n    ]\n});\n\n// Will use sortable() from the column definition above\ngrid.store.sort('name');\n</code></pre>",
          "type": [
            "Boolean",
            "function",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "searchable",
          "description": "<p>Allow searching in the column (respected by QuickFind and Search features)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "filterable",
          "description": "<p>Allow filtering data in the column (if <a href=\"#Grid/feature/Filter\">Filter</a> or <a href=\"#Grid/feature/FilterBar\">FilterBar</a>\nfeature is enabled).</p>\n<p>Also allows passing a custom filtering function that will be called for each record with a single\nargument of format <code>{ value, record, [operator] }</code>. Returning <code>true</code> from the function includes the\nrecord in the filtered set.</p>\n<p>Configuration object may be used for <a href=\"#Grid/feature/FilterBar\">FilterBar</a> feature to specify <code>filterField</code>. See\nan example in the code snippet below or check <a href=\"#Grid/feature/FilterBar\">FilterBar</a> page for more details.</p>\n<pre class=\"prettyprint source\"><code>const grid = new Grid({\n    columns : [\n         {\n             field : 'name',\n             // Disable filtering for this column\n             filterable : false\n         },\n         {\n             field : 'age',\n             // Custom filtering for this column\n             filterable: ({ value, record }) => Math.abs(record.age - value) &lt; 10\n         },\n         {\n             field : 'start',\n             // Changing default field type\n             filterable: {\n                 filterField : {\n                     type : 'datetime'\n                 }\n             }\n         },\n         {\n             field : 'city',\n             // Filtering for a value out of a list of values\n             filterable: {\n                 filterField : {\n                     type  : 'combo',\n                     value : '',\n                     items : [\n                         'Paris',\n                         'Dubai',\n                         'Moscow',\n                         'London',\n                         'New York'\n                     ]\n                 }\n             }\n         },\n         {\n             field : 'score',\n             filterable : {\n                 // This filter fn doesn't return 0 values as matching filter 'less than'\n                 filterFn : ({ record, value, operator, property }) => {\n                     switch (operator) {\n                         case '&lt;':\n                             return record[property] === 0 ? false : record[property] &lt; value;\n                         case '=':\n                             return record[property] == value;\n                         case '>':\n                             return record[property] > value;\n                     }\n                 }\n             }\n         }\n    ]\n});\n</code></pre>\n<p>When providing a custom filtering function, if the filter feature is configured with\n<code>prioritizeColumns : true</code> that function will also be used for programmatic filtering of the store:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        filter : {\n            prioritizeColumns : true\n        }\n    },\n\n    columns : [\n         {\n             field : 'age',\n             // Custom filtering for this column\n             filterable: ({ value, record }) => Math.abs(record.age - value) &lt; 10\n         }\n    ]\n});\n\n// Will use filterable() from the column definition above\ngrid.store.filter({\n    property : 'age',\n    value    : 50\n});\n</code></pre>",
          "type": [
            "Boolean",
            "function",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "sealed",
          "description": "<p>Setting this flag to <code>true</code> will prevent dropping child columns into a group column</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "hideable",
          "description": "<p>Allow column visibility to be toggled through UI</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "draggable",
          "description": "<p>Set to false to prevent this column header from being dragged</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Interaction"
        },
        {
          "name": "groupable",
          "description": "<p>Set to false to prevent grouping by this column</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Interaction"
        },
        {
          "name": "resizable",
          "description": "<p>Set to <code>false</code> to prevent the column from being drag-resized when the ColumnResize plugin is enabled.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "groupRenderer",
          "description": "<p>Renderer function for group headers (when using Group feature).</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "String",
            "description": "<p>The header grouping text</p>"
          },
          "category": "Rendering",
          "parameters": [
            {
              "name": "renderData",
              "type": "Object"
            },
            {
              "name": "renderData.cellElement",
              "type": "HTMLElement",
              "description": "<p>Cell element, for adding CSS classes, styling etc.</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.groupRowFor",
              "type": "*",
              "description": "<p>Current group value</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.record",
              "type": "Core.data.Model",
              "description": "<p>Record for the row</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.groupRecords",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records in the group</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.column",
              "type": "Grid.column.Column",
              "description": "<p>Current rendering column</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.groupColumn",
              "type": "Grid.column.Column",
              "description": "<p>Column that the grid is grouped by</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.count",
              "type": "Number",
              "description": "<p>Number of records in the group</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.grid",
              "type": "Grid.view.Grid",
              "description": "<p>This grid</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "headerRenderer",
          "description": "<p>Renderer function for the column header.</p>",
          "type": "function",
          "scope": "inner",
          "category": "Rendering",
          "parameters": [
            {
              "name": "renderData",
              "type": "Object"
            },
            {
              "name": "renderData.column",
              "type": "Grid.column.Column",
              "description": "<p>This column</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.headerElement",
              "type": "HTMLElement",
              "description": "<p>The header element</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "tooltip",
          "description": "<p>A tooltip string to show when hovering the column header</p>",
          "type": "String",
          "scope": "inner",
          "category": "Rendering"
        },
        {
          "name": "tooltipRenderer",
          "description": "<p>Renderer function for the cell tooltip (used with <a href=\"#Grid/feature/CellTooltip\">CellTooltip</a> feature). Specify\n<code>false</code> to preventc tooltip for this column.</p>",
          "type": "function",
          "scope": "inner",
          "category": "Rendering",
          "parameters": [
            {
              "name": "cellElement",
              "type": "HTMLElement",
              "description": "<p>Cell element</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record for cell row</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Cell column</p>"
            },
            {
              "name": "cellTooltip",
              "type": "Grid.feature.CellTooltip",
              "description": "<p>Feature instance, used to set tooltip content async</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The event that triggered the tooltip</p>"
            }
          ]
        },
        {
          "name": "cellCls",
          "description": "<p>CSS class added to each cell in this column</p>",
          "type": "String",
          "scope": "inner",
          "category": "Rendering"
        },
        {
          "name": "cls",
          "description": "<p>CSS class added to the header of this column</p>",
          "type": "String",
          "scope": "inner",
          "category": "Rendering"
        },
        {
          "name": "icon",
          "description": "<p>Icon to display in header. Specifying an icon will render a <code>&lt;i&gt;</code> element with the icon as value for the\nclass attribute</p>",
          "type": "String",
          "scope": "inner",
          "category": "Rendering"
        },
        {
          "name": "align",
          "description": "<p>Text align. Accepts left/center/right or direction neutral start/end</p>",
          "type": "String",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "minWidth",
          "description": "<p>Column minimal width. If value is Number then minimal width is in pixels</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "60",
          "category": "Layout"
        },
        {
          "name": "maxWidth",
          "description": "<p>Column maximal width. If value is Number then maximal width is in pixels</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "hidden",
          "description": "<p>Hide the column from start</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "locked",
          "description": "<p>Convenient way of putting a column in the &quot;locked&quot; region. Same effect as specifying region: 'locked'.\nIf you have defined your own regions (using <a href=\"#Grid/view/Grid#config-subGridConfigs\">subGridConfigs</a>) you should use\n<a href=\"#Grid/column/Column#config-region\">region</a> instead of this one.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Layout"
        },
        {
          "name": "region",
          "description": "<p>Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to\n<a href=\"#Grid/view/Grid#config-defaultRegion\">defaultRegion</a>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "mergeCells",
          "description": "<p>Specify <code>true</code> to merge cells within the column whose value match between rows, making the first\noccurrence of the value span multiple rows.</p>\n<p>Only applies when using the <a href=\"#Grid/feature/MergeCells\">MergeCells feature</a>.</p>\n<p>This setting can also be toggled using the column header menu.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Merge cells"
        },
        {
          "name": "mergeable",
          "description": "<p>Set to <code>false</code> to prevent merging cells in this column using the column header menu.</p>\n<p>Only applies when using the <a href=\"#Grid/feature/MergeCells\">MergeCells feature</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Merge cells"
        },
        {
          "name": "showColumnPicker",
          "description": "<p>Show column picker for the column</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Menu"
        },
        {
          "name": "enableHeaderContextMenu",
          "description": "<p>false to prevent showing a context menu on the column header element</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Menu"
        },
        {
          "name": "enableCellContextMenu",
          "description": "<p>Set to <code>false</code> to prevent showing a context menu on the cell elements in this column</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Menu"
        },
        {
          "name": "headerMenuItems",
          "description": "<p>Extra items to show in the header context menu for this column.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>headerMenuItems : {\n    customItem : { text : 'Custom item' }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Menu"
        },
        {
          "name": "cellMenuItems",
          "description": "<p>Extra items to show in the cell context menu for this column</p>\n<pre class=\"prettyprint source lang-javascript\"><code>cellMenuItems : {\n    customItem : { text : 'Custom item' }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Menu"
        },
        {
          "name": "sum",
          "description": "<p>Summary type (when using Summary feature). Valid types are:</p>\n<dl class=\"wide\">\n<dt>sum <dd>Sum of all values in the column\n<dt>add <dd>Alias for sum\n<dt>count <dd>Number of rows\n<dt>countNotEmpty <dd>Number of rows containing a value\n<dt>average <dd>Average of all values in the column\n<dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n</dl>",
          "type": "String",
          "scope": "inner",
          "category": "Summary"
        },
        {
          "name": "summaries",
          "description": "<p>Summary configs, use if you need multiple summaries per column. Replaces <a href=\"#Grid/column/Column#config-sum\">sum</a> and\n<a href=\"#Grid/column/Column#config-summaryRenderer\">summaryRenderer</a> configs. Accepts an array of objects with the following fields:</p>\n<ul>\n<li>sum - Matching <a href=\"#Grid/column/Column#config-sum\">sum</a></li>\n<li>renderer - Matching <a href=\"#Grid/column/Column#config-summaryRenderer\">summaryRenderer</a></li>\n<li>seed - Initial value when using a function as <code>sum</code></li>\n</ul>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Summary"
        },
        {
          "name": "summaryRenderer",
          "description": "<p>Renderer function for summary (when using Summary feature). The renderer is called with an object having\nthe calculated summary <code>sum</code> as only member.</p>",
          "type": "function",
          "scope": "inner",
          "category": "Summary",
          "parameters": [
            {
              "name": "summaryRenderer.sum",
              "type": "Number",
              "description": "<p>The sum</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "responsiveLevels",
          "description": "<p>Column settings at different responsive levels, see responsive demo under examples/</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "tags",
          "description": "<p>Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu</p>",
          "type": "Array.<String>",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "touchConfig",
          "description": "<p>Column config to apply to normal config if viewed on a touch device</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "tree",
          "description": "<p>When using the tree feature, exactly one column should specify { tree: true }</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "filterType",
          "description": "<p>Determines which type of filtering to use for the column. Usually determined by the column type used,\nbut may be overridden by setting this field.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "htmlEncode",
          "description": "<p>By default, any rendered column cell content is HTML-encoded. Set this flag to <code>false</code> disable this and\nallow rendering html elements</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "htmlEncodeHeaderText",
          "description": "<p>By default, the header text is HTML-encoded. Set this flag to <code>false</code> disable this and allow html\nelements in the column header</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "autoSyncHtml",
          "description": "<p>Set to <code>true</code>to automatically call DomHelper.sync for html returned from a renderer. Should in most cases\nbe more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has\nno effect unless <a href=\"#Grid/column/Column#config-htmlEncode\">htmlEncode</a> is disabled. Returned html must contain a single root element\n(that can have multiple children). See PercentColumn for example usage.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "instantUpdate",
          "description": "<p>Set to <code>true</code> to have the <a href=\"#Grid/feature/CellEdit\">CellEdit</a> feature update the record being edited live upon\nfield edit instead of when editing is finished by using <code>TAB</code> or <code>ENTER</code></p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "editTargetSelector",
          "description": "<p>An optional query selector to select a sub element within the cell being\nedited to align a cell editor's <code>X</code> position and <code>width</code> to.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "exportable",
          "description": "<p>Used by the Export feature. Set to <code>false</code> to omit a column from an exported dataset</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Export"
        },
        {
          "name": "exportedType",
          "description": "<p>Column type which will be used by <a href=\"#Grid/util/TableExporter\">TableExporter</a>. See list of available types in\nTableExporter docs. Returns undefined by default, which means column type should be read from the record\nfield.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Export"
        }
      ],
      "functions": [
        {
          "name": "getFilterableValue",
          "description": "<p>Extracts the value from the record specified by this Column's <a href=\"#Grid/column/Column#config-field\">field</a> specification\nin a format that can be used as a value to match by a <a href=\"#Grid/feature/Filter\">filtering</a> operation.</p>\n<p>The default implementation returns the <a href=\"#Grid/column/Column#function-getRawValue\">getRawValue</a> value, but this may be\noverridden in subclasses.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record from which to extract the field value.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*",
            "description": "<p>The value of the referenced field if any.</p>"
          }
        },
        {
          "name": "hide",
          "description": "<p>Hides this column.</p>",
          "scope": "instance"
        },
        {
          "name": "show",
          "description": "<p>Shows this column.</p>",
          "scope": "instance"
        },
        {
          "name": "toggle",
          "description": "<p>Toggles the column visibility.</p>",
          "parameters": [
            {
              "name": "force",
              "type": "Boolean",
              "description": "<p>Set to true (visible) or false (hidden) to force a certain state</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "generateId",
          "access": "private",
          "description": "<p>Generates an id for the column when none is set. Generated ids are 'col1', 'col2' and so on. If a field is\nspecified (as it should be in most cases) the field name is used instead: 'name1', 'age2' ...</p>",
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "resizeToFitContent",
          "description": "<p>Resizes the column to match the widest string in it. By default it also measures the column header, this\nbehaviour can be configured by setting <a href=\"#Grid/view/Grid#config-resizeToFitIncludesHeader\">resizeToFitIncludesHeader</a>.</p>\n<p>Called internally when you double click the edge between\ncolumn headers, but can also be called programmatically. For performance reasons it is limited to checking 1000\nrows surrounding the current viewport.</p>",
          "parameters": [
            {
              "name": "widthMin",
              "type": [
                "Number",
                "Array.<Number>"
              ],
              "description": "<p>Minimum allowed width. If content width is less than this, this width is used\ninstead. If this parameter is an array, the first element is <code>widthMin</code> and the seconds is <code>widthMax</code>.</p>"
            },
            {
              "name": "widthMax",
              "type": "Number",
              "description": "<p>Maximum allowed width. If the content width is greater than this number, this width\nis used instead.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getState",
          "access": "private",
          "description": "<p>Get column state, used by State mixin</p>",
          "scope": "instance"
        },
        {
          "name": "applyState",
          "access": "private",
          "description": "<p>Apply state to column, used by State mixin</p>",
          "scope": "instance"
        },
        {
          "name": "getRawValue",
          "description": "<p>Extracts the value from the record specified by this Column's <a href=\"#Grid/column/Column#config-field\">field</a> specification.</p>\n<p>This will work if the field is a dot-separated path to access fields in associated records, eg</p>\n<pre class=\"prettyprint source lang-javascript\"><code> field : 'resource.calendar.name'\n</code></pre>\n<p><strong>Note:</strong> This is the raw field value, not the value returned by the <a href=\"#Grid/column/Column#config-renderer\">renderer</a>.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record from which to extract the field value.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*",
            "description": "<p>The value of the referenced field if any.</p>"
          }
        },
        {
          "name": "refreshCell",
          "description": "<p>Refresh the cell for supplied record in this column, if that cell is rendered.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record used to get row to update the cell in</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clearCell",
          "access": "internal",
          "description": "<p>Clear cell contents. Base implementation which just sets innerHTML to blank string.\nShould be overridden in subclasses to clean up for examples widgets.</p>",
          "parameters": [
            {
              "name": "cellElement",
              "type": "HTMLElement"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "canEdit",
          "access": "internal",
          "description": "<p>Override in subclasses to allow/prevent editing of certain rows.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "insertChild",
          "description": "<p>Insert a child column(s) before an existing child column. Returns <code>null</code> if the parent column is\n<a href=\"#Grid/column/Column#config-sealed\">sealed</a></p>",
          "parameters": [
            {
              "name": "childColumn",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>"
              ],
              "description": "<p>Column or array of columns to insert</p>"
            },
            {
              "name": "before",
              "type": "Core.data.Model",
              "description": "<p>Optional column to insert before, leave out to append to the end</p>",
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to not trigger events during insert</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Parent & children",
          "returns": {
            "type": [
              "Core.data.Model",
              "Array.<Core.data.Model>",
              "null"
            ]
          }
        }
      ]
    },
    {
      "name": "DateColumn",
      "modulePath": "Grid/column/DateColumn",
      "classDescription": "<p>A column that displays a date in the specified <a href=\"#Grid/column/DateColumn#config-format\">format</a>. By default <code>L</code> format is used, which\ncontains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\nthe formatted date might look different. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\">Intl.DateTimeFormat API</a>\nis used to format the date. Here is an example of possible outputs depending on the browser locale:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// These options represent `L` format\nconst options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n\nnew Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // &quot;07/01/2021&quot;\nnew Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // &quot;01.07.2021&quot;\n\n// Formatting using Bryntum API\nLocaleManager.applyLocale('En');\nDateHelper.format(new Date(2021, 6, 1), 'L'); // &quot;07/01/2021&quot;\nLocaleManager.applyLocale('Ru');\nDateHelper.format(new Date(2021, 6, 1), 'L'); // &quot;01.07.2021&quot;\n</code></pre>\n<p>To learn more about available formats check out <a href=\"#Core/helper/DateHelper\">DateHelper</a> docs.</p>\n<p>The <a href=\"#Core/data/field/DateDataField\">field</a> this column reads data from should be a type of date.</p>\n<p>Default editor is a <a href=\"#Core/widget/DateField\">DateField</a>.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "examples": [
        "new Grid({\n    columns : [\n         { type: 'date', text: 'Start date', format: 'YYYY-MM-DD', field: 'start' }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DateColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "date",
      "externalExamples": [
        "Grid/column/DateColumn.js"
      ],
      "configs": [
        {
          "name": "field",
          "description": "<p>The <a href=\"#Core/data/field/DateDataField#config-name\">name</a> of the data model date field to read data from.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "format",
          "description": "<p>Date format to convert a given date object into a string to display. By default <code>L</code> format is used, which\ncontains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\nthe formatted date might look different. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\">Intl.DateTimeFormat API</a>\nis used to format the date. Here is an example of possible outputs depending on the browser locale:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// These options represent `L` format\nconst options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n\nnew Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // &quot;07/01/2021&quot;\nnew Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // &quot;01.07.2021&quot;\n\n// Formatting using Bryntum API\nLocaleManager.applyLocale('En');\nDateHelper.format(new Date(2021, 6, 1), 'L'); // &quot;07/01/2021&quot;\nLocaleManager.applyLocale('Ru');\nDateHelper.format(new Date(2021, 6, 1), 'L'); // &quot;01.07.2021&quot;\n</code></pre>\n<p>To learn more about available formats check out <a href=\"#Core/helper/DateHelper\">DateHelper</a> docs.</p>\n<p>Note, the <a href=\"#Core/data/field/DateDataField\">field</a> this column reads data from should be a type of date.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "L",
          "category": "Common"
        },
        {
          "name": "step",
          "description": "<p>Time increment duration value to apply when clicking the left / right trigger icons. See <a href=\"#Core/widget/DateField#config-step\">step</a> for more information\nSet to <code>null</code> to hide the step triggers.</p>",
          "type": [
            "String",
            "Number",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": 1,
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "defaultRenderer",
          "access": "private",
          "description": "<p>Renderer that displays the date with the specified format. Also adds cls 'date-cell' to the cell.</p>",
          "scope": "instance"
        },
        {
          "name": "groupRenderer",
          "access": "private",
          "description": "<p>Group renderer that displays the date with the specified format.</p>",
          "scope": "instance"
        },
        {
          "name": "formatValue",
          "access": "private",
          "description": "<p>Used by both renderer and groupRenderer to do the actual formatting of the date</p>",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        }
      ],
      "properties": [
        {
          "name": "format",
          "description": "<p>Get/Set format for date displayed in cell and editor (see <a href=\"#Core/helper/DateHelper#function-format-static\">format</a> for formatting options)</p>",
          "type": "String",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "NumberColumn",
      "modulePath": "Grid/column/NumberColumn",
      "classDescription": "<p>A column for showing/editing numbers.</p>\n<p>Default editor is a <a href=\"#Core/widget/NumberField\">NumberField</a>.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "examples": [
        "new Grid({\n    appendTo : document.body,\n\n    columns : [\n        { type: 'number', min: 0, max : 100, field: 'score' }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "NumberColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "number",
      "externalExamples": [
        "Grid/column/NumberColumn.js"
      ],
      "configs": [
        {
          "name": "min",
          "description": "<p>The minimum value for the field used during editing.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "max",
          "description": "<p>The maximum value for the field used during editing.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "step",
          "description": "<p>Step size for the field used during editing.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "largeStep",
          "description": "<p>Large step size for the field used during editing. In effect for <code>SHIFT + click/arrows</code></p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "unit",
          "description": "<p>Unit to append to displayed value.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "format",
          "description": "<p>The format to use for rendering numbers.</p>\n<p>By default, the locale's default number formatter is used. For <code>en-US</code>, the\nlocale default is a maximum of 3 decimal digits, using thousands-based grouping.\nThis would render the number <code>1234567.98765</code> as <code>'1,234,567.988'</code>.</p>",
          "type": [
            "String",
            "Object",
            "Core.helper.util.NumberFormat"
          ],
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "defaultRenderer",
          "access": "private",
          "description": "<p>Renderer that displays value + optional unit in the cell</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "PercentColumn",
      "modulePath": "Grid/column/PercentColumn",
      "classDescription": "<p>A column that display a basic progress bar.</p>\n<p>Default editor is a <a href=\"#Core/widget/NumberField\">NumberField</a>.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "examples": [
        "new Grid({\n    appendTo : document.body,\n\n    columns : [\n        { type: 'percent', text: 'Progress', data: 'progress' }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "PercentColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "percent",
      "externalExamples": [
        "Grid/column/PercentColumn.js"
      ],
      "configs": [
        {
          "name": "editor",
          "description": "<p>PercentColumn uses a <a href=\"#Core/widget/NumberField\">NumberField</a> configured with an allowed interval 0 - 100 as\nits default editor.</p>",
          "type": [
            "Object",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "Core.widget.NumberField",
          "category": "Misc"
        },
        {
          "name": "showValue",
          "description": "<p>Set to <code>true</code> to render the number value inside the bar, for example &quot;15%&quot;</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Rendering"
        },
        {
          "name": "lowThreshold",
          "description": "<p>When below this percentage the bar will have <code>b-low</code> CSS class added. By default it turns the bar red.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 20,
          "category": "Rendering"
        }
      ],
      "functions": [
        {
          "name": "defaultRenderer",
          "access": "private",
          "description": "<p>Renderer that displays a progress bar in the cell.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RatingColumn",
      "modulePath": "Grid/column/RatingColumn",
      "classDescription": "<p>A column that displays a star rating. Click a start to set a value, shift+click to unset a single start from the end.\nClicking the first and only star toggles it.</p>\n<p>This column uses a custom widget as its editor, and it is not intended to be changed.</p>",
      "extends": [
        "Grid/column/NumberColumn"
      ],
      "examples": [
        "new Grid({\n    appendTo : document.body,\n\n    columns : [\n        { type: 'rating', max : 10, field: 'rating' }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RatingColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "percent",
      "externalExamples": [
        "Grid/column/RatingColumn.js"
      ],
      "configs": [
        {
          "name": "emptyIcon",
          "description": "<p>The empty rating icon to show</p>",
          "type": "String",
          "scope": "inner",
          "category": "Rendering"
        },
        {
          "name": "filledIcon",
          "description": "<p>The filled rating icon to show</p>",
          "type": "String",
          "scope": "inner",
          "category": "Rendering"
        },
        {
          "name": "editable",
          "description": "<p>Allow user to click an icon to change the value</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Interaction"
        }
      ],
      "functions": [
        {
          "name": "renderer",
          "access": "private",
          "description": "<p>Renderer that displays a number of stars in the cell. Also adds CSS class 'b-rating-cell' to the cell.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RowNumberColumn",
      "modulePath": "Grid/column/RowNumberColumn",
      "classDescription": "<p>A column that displays the row number in each cell.</p>\n<p>There is no <code>editor</code>, since value is read-only.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  appendTo : targetElement,\n  width    : 300,\n  columns  : [\n    { type : 'rownumber' }\n  ]\n});</code></pre>",
      "extends": [
        "Grid/column/Column"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RowNumberColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "rownumber",
      "externalExamples": [
        "Grid/column/RowNumberColumn.js"
      ],
      "configs": [
        {
          "name": "groupable",
          "type": "Boolean",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "sortable",
          "type": "Boolean",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "filterable",
          "type": "Boolean",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "searchable",
          "type": "Boolean",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "resizable",
          "type": "Boolean",
          "scope": "inner",
          "hide": true
        }
      ],
      "functions": [
        {
          "name": "renderer",
          "access": "private",
          "description": "<p>Renderer that displays the row number in the cell.</p>",
          "scope": "instance"
        },
        {
          "name": "resizeToFitContent",
          "description": "<p>Resizes the column to match the widest string in it. Called when you double click the edge between column\nheaders</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TemplateColumn",
      "modulePath": "Grid/column/TemplateColumn",
      "classDescription": "<p>A column that uses a template for cell content. Any function can be used as template, and the function is passed { value, record, field } properties.\nIt should return a string which will be rendered in the cell.</p>\n<p>Default editor is a <a href=\"#Core/widget/TextField\">TextField</a>.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "examples": [
        "new Grid({\n    appendTo : document.body,\n\n    columns : [\n        { type: 'template', field: 'age', template: value => `${value} years old` }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TemplateColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "template",
      "externalExamples": [
        "Grid/column/TemplateColumn.js"
      ],
      "configs": [
        {
          "name": "template",
          "description": "<p>Template function used to generate a value displayed in the cell. Called with arguments { value, record, field }</p>",
          "type": "function",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "renderer",
          "access": "private",
          "description": "<p>Renderer that uses a template for cell content.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimeColumn",
      "modulePath": "Grid/column/TimeColumn",
      "classDescription": "<p>A column that displays a time in the specified format (see <a href=\"#Core/helper/DateHelper#function-format-static\">format</a> for formatting options).</p>\n<p>Default editor is a <a href=\"#Core/widget/TimeField\">TimeField</a>.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "examples": [
        "new Grid({\n    appendTo : document.body,\n\n    columns : [\n         { type: 'time', text: 'Start time', format: 'HH:mm:ss', data: 'start' }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "time",
      "externalExamples": [
        "Grid/column/TimeColumn.js"
      ],
      "configs": [
        {
          "name": "format",
          "description": "<p>Time format</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "defaultRenderer",
          "access": "private",
          "description": "<p>Renderer that displays the time with the specified format. Also adds cls 'b-time-cell' to the cell.</p>",
          "scope": "instance"
        },
        {
          "name": "groupRenderer",
          "access": "private",
          "description": "<p>Group renderer that displays the time with the specified format.</p>",
          "scope": "instance"
        },
        {
          "name": "formatValue",
          "access": "private",
          "description": "<p>Used by both renderer and groupRenderer to do the actual formatting of the time</p>",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        }
      ],
      "properties": [
        {
          "name": "format",
          "description": "<p>Get/Set format for time displayed in cell and editor (see <a href=\"#Core/helper/DateHelper#function-format-static\">format</a> for formatting options)</p>",
          "type": "String",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TreeColumn",
      "modulePath": "Grid/column/TreeColumn",
      "classDescription": "<p>A column that displays a tree structure when using the <a href=\"#Grid/feature/Tree\">tree</a> feature.</p>\n<p>Default editor is a <a href=\"#Core/widget/TextField\">TextField</a>.</p>\n<p>TreeColumn provides configs to define icons for <a href=\"#Grid/column/TreeColumn#config-expandIconCls\">expanded</a> / <a href=\"#Grid/column/TreeColumn#config-collapseIconCls\">collapsed</a> nodes,\n<a href=\"#Grid/column/TreeColumn#config-expandedFolderIconCls\">expanded folder</a> / <a href=\"#Grid/column/TreeColumn#config-collapsedFolderIconCls\">collapsed folder</a> nodes and\n<a href=\"#Grid/column/TreeColumn#config-leafIconCls\">leaf</a> nodes.</p>\n<p>When the TreeColumn renders its cells, it will look for two special fields <a href=\"#Grid/data/GridRowModel#field-href\">href</a>\nand <a href=\"#Grid/data/GridRowModel#field-target\">target</a>. Specifying <code>href</code> will produce a link for the TreeNode,\nand <code>target</code> will have the same meaning as in an A tag:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n   id        : 1,\n   name      : 'Some external link'\n   href      : '//www.website.com&quot;,\n   target    : '_blank&quot;\n}\n</code></pre>",
      "extends": [
        "Grid/column/Column"
      ],
      "examples": [
        "new TreeGrid({\n    appendTo : document.body,\n\n    columns : [\n         { type: 'tree', field: 'name' }\n    ]\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TreeColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "tree",
      "externalExamples": [
        "Grid/column/TreeColumn.js"
      ],
      "configs": [
        {
          "name": "expandIconCls",
          "description": "<p>The icon to use for the collapse icon in collapsed state</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "collapseIconCls",
          "description": "<p>The icon to use for the collapse icon in expanded state</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "collapsedFolderIconCls",
          "description": "<p>The icon to use for the collapse icon in expanded state</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "expandedFolderIconCls",
          "description": "<p>The icon to use for the collapse icon in expanded state</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "indentSize",
          "description": "<p>Size of the child indent in em. Resulting indent is indentSize multiplied by child level.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": "1.7"
        },
        {
          "name": "leafIconCls",
          "description": "<p>The icon to use for the leaf nodes in the tree</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "treeRenderer",
          "access": "private",
          "description": "<p>A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons\nto the cell to make the grid appear to be a tree. The original renderer is called in the process.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "WidgetColumn",
      "modulePath": "Grid/column/WidgetColumn",
      "classDescription": "<p>A column that displays widgets in the grid cells.</p>\n<p><div class=\"external-example \" data-file=\"Grid/column/WidgetColumn.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    appendTo : document.body,\n\n    columns : [\n        {\n             type: 'widget',\n             text: 'Name',\n             widgets: [\n                 { type: 'textfield', name : 'firstName' },\n                 { type: 'textfield', name : 'lastName' }\n              ]\n        }\n    ]\n});\n</code></pre>\n<p>If you use <a href=\"#Core/widget/Field\">Fields</a> inside this column, the field widget can optionally bind its value to a\nfield in the data model using the <a href=\"#Core/widget/Field#config-name\">name</a> (as shown in the snippet above). This will\nprovide two-way data binding and update the underlying row record as you make changes in the field.</p>\n<p>If you use a <a href=\"#Core/widget/Button\">Button</a> and want it to display the value from the cell as its text, set its\n<a href=\"#Core/widget/Widget#config-defaultBindProperty\">defaultBindProperty</a> to <code>'text'</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    columns : [\n        {\n             type: 'widget',\n             widgets: [\n                 { type: 'button', name : 'age', defaultBindProperty : 'text' },\n              ]\n        }\n    ]\n});\n</code></pre>\n<p>There is no <code>editor</code> provided. It is the configured widget's responsibility to provide editing if needed.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "WidgetColumn.js",
      "path": "/Calendar/lib/Grid/column",
      "classType": "widget",
      "configs": [
        {
          "name": "widgets",
          "description": "<p>An array of <a href=\"#Core/widget/Widget\">Widget</a> config objects</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "renderer",
          "description": "<p>A renderer function, which gives you access to render data like the current <code>record</code>, <code>cellElement</code> and the\n<a href=\"#Grid/column/WidgetColumn#config-widgets\">widgets</a> of the column. See <a href=\"#Grid/column/WidgetColumn#config-renderer\">renderer</a>\nfor more information.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    columns : [\n        {\n             type: 'check',\n             field: 'allow',\n             // In the column renderer, we get access to the record and column widgets\n             renderer({ record, widgets }) {\n                 // Hide checkboxes in certain rows\n                 widgets[0].hidden = record.readOnly;\n             }\n        }\n    ]\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "category": "Rendering",
          "parameters": [
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Object containing renderer parameters</p>"
            },
            {
              "name": "renderData.cellElement",
              "type": [
                "HTMLElement",
                "null"
              ],
              "description": "<p>Cell element, for adding CSS classes, styling etc.\nCan be <code>null</code> in case of export</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.value",
              "type": "*",
              "description": "<p>Value to be displayed in the cell</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.record",
              "type": "Core.data.Model",
              "description": "<p>Record for the row</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.column",
              "type": "Grid.column.Column",
              "description": "<p>This column</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.widgets",
              "type": "Array.<Core.widget.Widget>",
              "description": "<p>An array of the widgets rendered into this cell</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.grid",
              "type": "Grid.view.Grid",
              "description": "<p>This grid</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.row",
              "type": "Grid.row.Row",
              "description": "<p>Row object. Can be null in case of export. Use the\n<a href=\"#Grid/row/Row#function-assignCls\">row's API</a> to manipulate CSS class names.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.size",
              "type": "Object",
              "description": "<p>Set <code>size.height</code> to specify the desired row height for the current row.\nLargest specified height is used, falling back to configured <a href=\"#Grid/view/Grid#config-rowHeight\">rowHeight</a>\nin case none is specified. Can be null in case of export</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.size.height",
              "type": "Number",
              "description": "<p>Set this to request a certain row height</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.size.configuredHeight",
              "type": "Number",
              "description": "<p>Row height that will be used if none is requested</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.isExport",
              "type": "Boolean",
              "description": "<p>True if record is being exported to allow special handling during export</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "renderData.isMeasuring",
              "type": "Boolean",
              "description": "<p>True if the column is being measured for a <code>resizeToFitContent</code>\ncall. In which case an advanced renderer might need to take different actions.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "internalRenderer",
          "access": "private",
          "description": "<p>Renderer that displays a widget in the cell.</p>",
          "parameters": [
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Render data</p>"
            },
            {
              "name": "renderData.column",
              "type": "Grid.column.Column",
              "description": "<p>Rendered column</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.record",
              "type": "Core.data.Model",
              "description": "<p>Rendered record</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onBeforeWidgetCreate",
          "access": "private",
          "description": "<p>Called before widget is created on rendering</p>",
          "parameters": [
            {
              "name": "widgetCfg",
              "type": "Object",
              "description": "<p>Widget config</p>"
            },
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Render data</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onAfterWidgetCreate",
          "access": "private",
          "description": "<p>Called after widget is created on rendering</p>",
          "parameters": [
            {
              "name": "widget",
              "type": "Core.widget.Widget",
              "description": "<p>Created widget</p>"
            },
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Render data</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onBeforeWidgetSetValue",
          "description": "<p>Called before the widget gets its value on rendering. Pass <code>false</code> to skip value setting while rendering</p>",
          "parameters": [
            {
              "name": "widget",
              "type": "Core.widget.Widget",
              "description": "<p>Created widget</p>"
            },
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Render data</p>"
            },
            {
              "name": "renderData.column",
              "type": "Grid.column.Column",
              "description": "<p>Rendered column</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.record",
              "type": "Core.data.Model",
              "description": "<p>Rendered record</p>",
              "isSubParam": true
            }
          ],
          "scope": "inner",
          "preventable": true
        },
        {
          "name": "onAfterWidgetSetValue",
          "description": "<p>Called after the widget gets its value on rendering.</p>",
          "parameters": [
            {
              "name": "widget",
              "type": "Core.widget.Widget",
              "description": "<p>Created widget</p>"
            },
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>Render data</p>"
            },
            {
              "name": "renderData.column",
              "type": "Grid.column.Column",
              "description": "<p>Rendered column</p>",
              "isSubParam": true
            },
            {
              "name": "renderData.record",
              "type": "Core.data.Model",
              "description": "<p>Rendered record</p>",
              "isSubParam": true
            }
          ],
          "scope": "inner"
        }
      ]
    },
    {
      "name": "GridTag",
      "modulePath": "Grid/customElements/GridTag",
      "classDescription": "<p>Import this file to be able to use the tag &lt;bryntum-grid&gt; to create a grid.</p>\n<p>This is more of a proof of concept than a ready to use class. Example:</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-grid>\n  &lt;column data-field=&quot;name&quot;>Name&lt;/column>\n  &lt;column data-field=&quot;city&quot;>City&lt;/column>\n  &lt;column data-field=&quot;food&quot;>Food&lt;/column>\n  &lt;data data-id=&quot;1&quot; data-name=&quot;Daniel&quot; data-city=&quot;Stockholm&quot; data-food=&quot;Hamburgers&quot;>&lt;/data>\n  &lt;data data-id=&quot;2&quot; data-name=&quot;Steve&quot; data-city=&quot;Lund&quot; data-food=&quot;Pasta&quot;>&lt;/data>\n  &lt;data data-id=&quot;3&quot; data-name=&quot;Sergei&quot; data-city=&quot;St Petersburg&quot; data-food=&quot;Pizza&quot;>&lt;/data>\n&lt;/bryntum-grid>\n</code></pre>\n<p>To get styling correct, supply the path to the theme you want to use and to the folder that holds Font Awesome:</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-grid stylesheet=&quot;resources/grid.stockholm.css&quot; fa-path=&quot;resources/fonts&quot;>\n&lt;/bryntum-grid>\n</code></pre>\n<p>Any entries in the tags dataset (attributes starting with <code>data-</code>) will be applied as configs of the Grid:</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-grid data-row-height=&quot;100&quot;>\n&lt;/bryntum-grid>\n</code></pre>\n<p>NOTE: Remember to call <a href=\"#Grid/customElements/GridTag#function-destroy\">destroy</a> before removing this web component from the DOM to avoid memory\nleaks.</p>",
      "extends": [
        "Core/customElements/WidgetTag"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridTag.js",
      "path": "/Calendar/lib/Grid/customElements",
      "demo": {
        "product": "grid",
        "demo": "webcomponents"
      }
    },
    {
      "name": "ColumnStore",
      "modulePath": "Grid/data/ColumnStore",
      "classDescription": "<p>A store specialized in handling columns. Used by the Grid to hold its columns and used as a chained store by each SubGrid\nto hold theirs. Should not be instanced directly, instead access it through <code>grid.columns</code> or <code>subGrid.columns</code></p>\n<pre class=\"prettyprint source\"><code>// resize first column\ngrid.columns.first.width = 200;\n\n// remove city column\ngrid.columns.get('city').remove();\n\n// add new column\ngrid.columns.add({text : 'New column'});\n\n// add new column to specific region (SubGrid)\ngrid.columns.add({text : 'New column', region : 'locked'});\n\n// add new column to 'locked' region (SubGrid)\ngrid.columns.add({text : 'New column', locked : true});\n</code></pre>",
      "extends": [
        "Core/data/Store"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ColumnStore.js",
      "path": "/Calendar/lib/Grid/data",
      "events": [
        {
          "name": "columnShow",
          "description": "<p>Fires when a column is shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.data.ColumnStore",
              "description": "<p>The store which triggered the event.</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column which status has been changed.</p>"
            }
          ]
        },
        {
          "name": "columnHide",
          "description": "<p>Fires when a column has been hidden.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.data.ColumnStore",
              "description": "<p>The store which triggered the event.</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column which status has been changed.</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "autoAddField",
          "description": "<p>Automatically adds a field definition to the store used by the Grid when adding a new Column displaying a\nnon-existing field.</p>\n<p>To enable this behaviour:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : {\n        autoAddField : true,\n        data         : [\n            // Column definitions here\n        ]\n    }\n}</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "functions": [
        {
          "name": "getById",
          "description": "<p>Get column by id.</p>",
          "parameters": [
            {
              "name": "id",
              "type": [
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Grid.column.Column"
          }
        },
        {
          "name": "get",
          "description": "<p>Get column by field. To be sure that you are getting exactly the intended column, use <a href=\"#Core/data/Store#function-getById\">Store#getById()</a> with the\ncolumns id instead.</p>",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>Field name</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Grid.column.Column"
          }
        },
        {
          "name": "createRecord",
          "access": "private",
          "description": "<p>Used internally to create a new record in the store. Creates a column of the correct type by looking up the\nspecified type among registered columns.</p>",
          "scope": "instance"
        },
        {
          "name": "indexOf",
          "description": "<p>indexOf extended to also accept a columns field, for backward compatibility.</p>\n<pre class=\"prettyprint source\"><code>grid.columns.indexOf('name');\n</code></pre>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String"
              ]
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "registerColumnType",
          "description": "<p>Call from custom column to register it with ColumnStore. Required to be able to specify type in column config.</p>",
          "parameters": [
            {
              "name": "columnClass",
              "type": "function",
              "description": "<p>The <a href=\"#Grid/column/Column\">Column</a> subclass to register.</p>"
            },
            {
              "name": "simpleRenderer",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> if its default renderer does <em>not</em> use other fields from the passed\nrecord than its configured <a href=\"#Grid/column/Column#config-field\">field</a>. This enables more granular cell updating\nupon record mutation.</p>",
              "default": false
            }
          ],
          "examples": [
            "// create and register custom column\nclass CustomColumn {\n static get type() {\n     return 'custom';\n }\n}\nColumnStore.registerColumnType(CustomColumn, true);\n// now possible to specify in column config\nlet grid = new Grid({\n  columns: [\n    { type: 'custom', field: 'id' }\n  ]\n});"
          ],
          "scope": "static"
        },
        {
          "name": "getColumnClass",
          "access": "internal",
          "description": "<p>Returns registered column class for specified type.</p>",
          "parameters": [
            {
              "name": "type",
              "description": "<p>Type name</p>"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Grid.column.Column"
          }
        },
        {
          "name": "generateColumnForField",
          "access": "internal",
          "description": "<p>Generates a <strong>new </strong> <a href=\"#Grid/column/Column\">Column</a> instance which may be subsequently added to this\nstore to represent the passed <a href=\"#Core/data/field/DataField\">DataField</a> of the owning Grid's store.</p>",
          "parameters": [
            {
              "name": "dataField",
              "type": [
                "Core.data.field.DataField",
                "String"
              ],
              "description": "<p>The <a href=\"#Core/data/field/DataField\">field</a>\ninstance or field name to generate a new <a href=\"#Grid/column/Column\">Column</a> for.</p>"
            },
            {
              "name": "defaults",
              "type": "Object",
              "description": "<p>Defaults to apply to the new column.</p>",
              "optional": true
            }
          ],
          "examples": [
            "// Add column for the \"team\" field.\ngrid.columns.add(grid.columns.generateColumnForField('team', {\n    width : 200\n}));"
          ],
          "scope": "instance",
          "returns": {
            "type": "Grid.column.Column",
            "description": "<p>A new Column which will render and edit the field correctly.</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "topColumns",
          "description": "<p>Returns the top level columns. If using grouped columns, this is the top level columns. If no grouped\ncolumns are being used, this is the leaf columns.</p>",
          "type": "Array.<Grid.column.Column>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "visibleColumns",
          "description": "<p>Returns the visible leaf headers which drive the rows' cell content.</p>",
          "type": "Array.<Grid.column.Column>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "bottomColumns",
          "description": "<p>Bottom columns are the ones displayed in the bottom row of a grouped header, or all columns if not using a grouped\nheader. They are the columns that actually display any data.</p>",
          "type": "Array.<Grid.column.Column>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "usesAutoHeight",
          "access": "internal",
          "description": "<p>Checks if any column uses autoHeight</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "usesFlexAutoHeight",
          "access": "internal",
          "description": "<p>Checks if any flex column uses autoHeight</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "GridRowModel",
      "modulePath": "Grid/data/GridRowModel",
      "classDescription": "<p>Model extended with some fields related to grid rendering. Used as default model type in the grids store if nothing\nelse is specified.</p>\n<p>Using this model is optional. If you use a custom model instead and need the functionality of any of the fields\nbelow, you just have to remember to add fields with the same name to your model.</p>",
      "extends": [
        "Core/data/Model"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridRowModel.js",
      "path": "/Calendar/lib/Grid/data",
      "fields": [
        {
          "name": "iconCls",
          "description": "<p>Icon for row (used automatically in tree, feel free to use it in renderer in other cases)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "expanded",
          "description": "<p>Start expanded or not (only valid for tree data)</p>",
          "type": "Boolean",
          "scope": "inner",
          "readonly": true,
          "category": "Tree"
        },
        {
          "name": "cls",
          "description": "<p>CSS class (or several classes divided by space) to append to row elements</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "rowHeight",
          "description": "<p>Used by the default implementation of <a href=\"#Grid/view/GridBase#config-getRowHeight\">getRowHeight</a> to determine row\nheight. Set it to use another height than the default for a the records row.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "href",
          "description": "<p>A link to use for this record when rendered into a <a href=\"#Grid/column/TreeColumn\">TreeColumn</a>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Tree"
        },
        {
          "name": "target",
          "description": "<p>The target to use if this tree node provides a value for the <a href=\"#Grid/data/GridRowModel#field-href\">href</a> field.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Tree"
        }
      ]
    },
    {
      "name": "CellEdit",
      "modulePath": "Grid/feature/CellEdit",
      "classDescription": "<p>Adding this feature to the grid and other Bryntum products which are based on the Grid (i.e. Scheduler, SchedulerPro, and Gantt)\nenables cell editing. Any subclass of <a href=\"#Core/widget/Field\">Field</a> can be used\nas editor for the <a href=\"#Grid/column/Column\">Column</a>. The most popular are:</p>\n<ul>\n<li><a href=\"#Core/widget/TextField\">TextField</a></li>\n<li><a href=\"#Core/widget/NumberField\">NumberField</a></li>\n<li><a href=\"#Core/widget/DateField\">DateField</a></li>\n<li><a href=\"#Core/widget/TimeField\">TimeField</a></li>\n<li><a href=\"#Core/widget/Combo\">Combo</a></li>\n</ul>\n<p>Usage instructions:</p>\n<h2>Start editing</h2>\n<ul>\n<li>Double click on a cell</li>\n<li>Press [ENTER] or [F2] with a cell selected</li>\n<li>It is also possible to change double click to single click to start editing, using the <a href=\"#Grid/feature/CellEdit#config-triggerEvent\">triggerEvent</a> config</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n   features : {\n       cellEdit : {\n           triggerEvent : 'cellclick'\n       }\n   }\n});\n</code></pre>\n<h2>Instant update</h2>\n<p>If <a href=\"#Grid/column/Column#config-instantUpdate\">instantUpdate</a> on the column is set to true, record will be\nupdated instantly as value in the editor is changed. In combination with <a href=\"#Core/data/Store#config-autoCommit\">autoCommit</a> it\ncould result in excessive requests to the backend.\nBy default instantUpdate is false, but it is enabled for some special columns, such as Duration column in Scheduler\nPro and all date columns in Gantt.</p>\n<h2>While editing</h2>\n<ul>\n<li>[ENTER] Finish editing and start editing the same cell in next row</li>\n<li>[SHIFT] + [ENTER] Same as above put with previous row</li>\n<li>[F2] Finish editing</li>\n<li>[CMD/CTRL] + [ENTER] Finish editing</li>\n<li>[ESC] By default, first reverts the value back to its original value, next press cancels editing</li>\n<li>[TAB] Finish editing and start editing the next cell</li>\n<li>[SHIFT] + [TAB] Finish editing and start editing the previous cell</li>\n</ul>\n<p>Columns specify editor in their configuration. Editor can also by set by using a column type. Columns\nmay also contain these three configurations which affect how their cells are edited:</p>\n<ul>\n<li><a href=\"#Grid/column/Column#config-invalidAction\">invalidAction</a></li>\n<li><a href=\"#Grid/column/Column#config-revertOnEscape\">revertOnEscape</a></li>\n<li><a href=\"#Grid/column/Column#config-finalizeCellEdit\">finalizeCellEdit</a></li>\n</ul>\n<h2>Preventing editing of certain cells</h2>\n<p>You can prevent editing on a column by setting <code>editor</code> to false:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n   columns : [\n      {\n         type   : 'number',\n         text   : 'Age',\n         field  : 'age',\n         editor : false\n      }\n   ]\n});\n</code></pre>\n<p>To prevent editing in a specific cell, listen to the <a href=\"#Grid/feature/CellEdit#event-beforeCellEditStart\">beforeCellEditStart</a> and return false:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.on('beforeCellEditStart', ({ editorContext }) => {\n    return editorContext.column.field !== 'id';\n});\n</code></pre>\n<h2>Choosing field on the fly</h2>\n<p>To use an alternative input field to edit a cell, listen to the <a href=\"#Grid/feature/CellEdit#event-beforeCellEditStart\">beforeCellEditStart</a> and\nset the <code>editor</code> property of the context to the input field you want to use:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.on('beforeCellEditStart', ({ editorContext }) => {\n    return editorContext.editor = myDateField;\n});\n</code></pre>\n<h2>Loading remote data into a combo box cell editor</h2>\n<p>If you need to prepare or modify the data shown by the cell editor, e.g. load remote data into the store used by a combo,\nlisten to the <a href=\"#Grid/feature/CellEdit#event-startCellEdit\">startCellEdit</a> event:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const employeeStore = new AjaxStore({ readUrl : '/cities' }); // A server endpoint returning data like:\n                                                              // [{ id : 123, name : 'Bob Mc Bob' }, { id : 345, name : 'Lind Mc Foo' }]\n\nnew Grid({\n    // Example data including a city field which is an id used to look up entries in the cityStore above\n    data : [\n        { id : 1, name : 'Task 1', employeeId : 123 },\n        { id : 2, name : 'Task 2', employeeId : 345 }\n    ],\n    columns : [\n      {\n         text   : 'Task',\n         field  : 'name'\n      },\n      {\n         text   : 'Assigned to',\n         field  : 'employeeId',\n         editor : {\n              type : 'combo',\n              store : employeeStore,\n              // specify valueField'/'displayField' to match the data format in the employeeStore store\n              valueField : 'id',\n              displayField : 'name'\n          },\n          renderer : ({ value }) {\n               // Use a renderer to show the employee name, which we find by querying employeeStore by the id of the grid record\n               return employeeStore.getById(value)?.name;\n          }\n      }\n   ],\n   listeners : {\n       // When editing, you might want to fetch data for the combo store from a remote resource\n       startCellEdit({ editorContext }) {\n           const { record, editor, column } = editorContext;\n           if (column.field === 'employeeId') {\n               // Load possible employees to assign to this particular task\n               editor.inputField.store.load({ task : record.id });\n           }\n      }\n   }\n});\n</code></pre>\n<h2>Editing on touch devices</h2>\n<p>On touch devices, a single tap navigates and tapping an already selected cell after a short delay starts the editing.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "CellEdit.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "celledit"
      },
      "classType": "cellEdit",
      "externalExamples": [
        "Grid/feature/CellEdit.js"
      ],
      "configs": [
        {
          "name": "autoSelect",
          "description": "<p>Set to true to select the field text when editing starts</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "blurAction",
          "description": "<p>What action should be taken when focus moves leaves the cell editor, for example when clicking outside.\nMay be <code>'complete'</code> or <code>'cancel</code>'.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "complete"
        },
        {
          "name": "continueEditingOnCellClick",
          "description": "<p>Set to <code>false</code> to stop editing when clicking another cell after a cell edit.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "addNewAtEnd",
          "description": "<p>Set to true to have TAB key on the last cell (and ENTER anywhere in the last row) in the data set create a new record\nand begin editing it at its first editable cell.</p>\n<p>If this is configured as an object, it is used as the default data value set for each new record.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "autoEdit",
          "description": "<p>Set to <code>true</code> to start editing when user starts typing text on a focused cell (as in Excel)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "editNextOnEnterPress",
          "description": "<p>Set to <code>false</code> to not start editing next record when user presses enter inside a cell editor (or previous\nrecord if SHIFT key is pressed). This is set to <code>false</code> when <a href=\"#Grid/feature/CellEdit#config-autoEdit\">autoEdit</a> is <code>true</code>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "editorClass",
          "access": "internal",
          "description": "<p>Class to use as an editor. Default value: <a href=\"#Core/widget/Editor\">Editor</a></p>",
          "type": "Core.widget.Widget",
          "scope": "inner",
          "typings": {
            "returns": "typeof Widget"
          }
        },
        {
          "name": "triggerEvent",
          "description": "<p>The name of the grid event that will trigger cell editing. Defaults to\n<a href=\"#Grid/view/mixin/GridElementEvents#event-cellDblClick\">celldblclick</a> but can be changed to any other event,\nsuch as <a href=\"#Grid/view/mixin/GridElementEvents#event-cellClick\">cellclick</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    cellEdit : {\n        triggerEvent : 'cellclick'\n    }\n}\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "celldblclick"
        }
      ],
      "functions": [
        {
          "name": "confirm",
          "description": "<p>Displays a OK / Cancel confirmation dialog box owned by the current Editor. This is intended to be\nused by <a href=\"#Grid/column/Column#config-finalizeCellEdit\">finalizeCellEdit</a> implementations. The returned promise resolves passing <code>true</code>\nif the &quot;OK&quot; button is pressed, and <code>false</code> if the &quot;Cancel&quot; button is pressed. Typing <code>ESC</code> rejects.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An options object for what to show.</p>"
            },
            {
              "name": "options.title",
              "type": "String",
              "description": "<p>The title to show in the dialog header.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.message",
              "type": "String",
              "description": "<p>The message to show in the dialog body.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.cancelButton",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A text or a config object to apply to the Cancel button.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.okButton",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>A text or config object to apply to the OK button.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true
        },
        {
          "name": "getEditorForCell",
          "access": "private",
          "description": "<p>Internal function to create or get existing editor for specified cell.</p>",
          "parameters": [
            {
              "name": "cellContext",
              "description": "<p>Cell to get or create editor for</p>"
            }
          ],
          "scope": "instance",
          "category": "Internal",
          "returns": {
            "type": "Core.widget.Editor",
            "description": "<p>An Editor container which displays the input field.</p>"
          }
        },
        {
          "name": "getAdjacentEditableCell",
          "access": "private",
          "description": "<p>Find the next succeeding or preceding cell which is editable (column.editor != false)</p>",
          "parameters": [
            {
              "name": "cellInfo",
              "type": "Object"
            },
            {
              "name": "isForward",
              "type": "Boolean"
            }
          ],
          "scope": "instance",
          "category": "Internal",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "doAddNewAtEnd",
          "access": "private",
          "description": "<p>Adds a new, empty record at the end of the TaskStore with the initial\ndata specified by the <a href=\"#Grid/feature/CellEdit#config-addNewAtEnd\">addNewAtEnd</a> setting.</p>",
          "scope": "instance",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Newly added record</p>"
          }
        },
        {
          "name": "getEditingContext",
          "access": "private",
          "description": "<p>Creates an editing context object for the passed cell context (target cell must be in the DOM).</p>\n<p>If the referenced cell is editable, a <a href=\"#Grid/util/Location\">Location</a> will\nbe returned containing the following extra properties:</p>\n<pre><code>- editor\n- value\n</code></pre>\n<p>If the referenced cell is <em>not</em> editable, <code>false</code> will be returned.</p>",
          "parameters": [
            {
              "name": "cellContext",
              "type": "Object",
              "description": "<p>an object which encapsulates a cell.</p>"
            },
            {
              "name": "cellContext.id",
              "type": "String",
              "description": "<p>The record id of the row to edit</p>",
              "isSubParam": true
            },
            {
              "name": "cellContext.columnId",
              "type": "String",
              "description": "<p>The column id of the column to edit</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Grid.util.Location"
          }
        },
        {
          "name": "startEditing",
          "description": "<p>Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.\nThis function is exposed on Grid and can thus be called as <code>grid.startEditing(...)</code></p>",
          "parameters": [
            {
              "name": "cellContext",
              "type": "Object",
              "description": "<p>Cell specified in format { id: 'x', columnId/column/field: 'xxx' }. See <a href=\"#Grid/view/Grid#function-getCell\">getCell</a> for details.</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:startCellEdit"
          ],
          "category": "Editing",
          "onOwner": true,
          "returns": {
            "type": "Boolean",
            "description": "<p>editingStarted</p>"
          }
        },
        {
          "name": "cancelEditing",
          "description": "<p>Cancel editing, destroys the editor</p>",
          "parameters": [
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass true to prevent method from firing event</p>",
              "default": false
            }
          ],
          "scope": "instance",
          "fires": [
            "event:cancelCellEdit"
          ],
          "category": "Editing"
        },
        {
          "name": "finishEditing",
          "description": "<p>Finish editing, update the underlying record and destroy the editor</p>",
          "scope": "instance",
          "fires": [
            "event:finishCellEdit"
          ],
          "category": "Editing",
          "async": true,
          "returns": {
            "description": "<p><code>false</code> if the edit could not be finished due to the value being invalid or the\nEditor's <code>complete</code> event was vetoed.</p>"
          }
        },
        {
          "name": "onCellClickWhileEditing",
          "access": "private",
          "description": "<p>Event handler added when editing is active called when user clicks a cell in the grid during editing.\nIt finishes editing and moves editor to the selected cell instead.</p>",
          "scope": "instance",
          "category": "Internal event handling",
          "async": true
        },
        {
          "name": "onCellClick",
          "access": "private",
          "description": "<p>Starts editing if user taps selected cell again on touch device. Chained function called when user clicks a cell.</p>",
          "scope": "instance",
          "category": "Internal event handling"
        },
        {
          "name": "onTriggerEditEvent",
          "access": "private",
          "description": "<p>Called when the user triggers the edit action in <a href=\"#Grid/feature/CellEdit#config-triggerEvent\">triggerEvent</a> config. Starts editing.</p>",
          "scope": "instance",
          "category": "Internal event handling",
          "async": true
        },
        {
          "name": "onStoreUpdate",
          "access": "private",
          "description": "<p>Update the input field if underlying data changes during edit.</p>",
          "scope": "instance",
          "category": "Internal event handling"
        },
        {
          "name": "onGridRefreshed",
          "access": "private",
          "description": "<p>Realign editor if grid renders rows while editing is ongoing (as a result to autoCommit or WebSocket data received).</p>",
          "scope": "instance",
          "category": "Internal event handling"
        },
        {
          "name": "onElementKeyDown",
          "access": "private",
          "description": "<p>Chained function called on grid element key down. [enter] or [f2] starts editing. [enter] also finishes editing and starts\nediting next row, [f2] also finishes editing without moving to the next row. [esc] cancels editing. [tab]\nedits next column, [shift] + [tab] edits previous.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Internal event handling",
          "async": true
        },
        {
          "name": "onEditorKeydown",
          "access": "private",
          "description": "<p>Handler of key events from the Editor. These events control operation of the edit.</p>\n<p>The event must not bubble to the grid.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Internal event handling"
        },
        {
          "name": "onEditorFocusOut",
          "access": "private",
          "description": "<p>Cancel editing on widget focusout</p>",
          "scope": "instance"
        },
        {
          "name": "onTapOut",
          "access": "private",
          "description": "<p>Cancel edit on touch outside of grid for mobile Safari (focusout not triggering unless you touch something focusable)</p>",
          "scope": "instance"
        },
        {
          "name": "onElementClick",
          "access": "private",
          "description": "<p>Finish editing if clicking below rows (only applies when grid is higher than rows).</p>",
          "scope": "instance",
          "category": "Internal event handling"
        }
      ],
      "properties": [
        {
          "name": "isEditing",
          "description": "<p>Is any cell currently being edited?</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "activeRecord",
          "description": "<p>Returns the record currently being edited, or <code>null</code></p>",
          "type": "Core.data.Model",
          "scope": "instance",
          "readonly": true
        }
      ],
      "events": [
        {
          "name": "startCellEdit",
          "description": "<p>Fires on the owning Grid when editing starts</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owner grid</p>"
            },
            {
              "name": "editorContext",
              "type": "Grid.util.Location",
              "description": "<p>Editing context</p>"
            },
            {
              "name": "editorContext.editor",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor being used.\nWill contain an <code>inputField</code> property which is the field being used to perform the editing.</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.column",
              "type": "Grid.column.Column",
              "description": "<p>Target column</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.record",
              "type": "Core.data.Model",
              "description": "<p>Target record</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.cell",
              "type": "HTMLElement",
              "description": "<p>Target cell</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.value",
              "type": "*",
              "description": "<p>Cell value</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeFinishCellEdit",
          "description": "<p>Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>Target grid</p>"
            },
            {
              "name": "editorContext",
              "type": "Grid.util.Location",
              "description": "<p>Editing context</p>"
            },
            {
              "name": "editorContext.editor",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor being used.\nWill contain an <code>inputField</code> property which is the field being used to perform the editing.</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.column",
              "type": "Grid.column.Column",
              "description": "<p>Target column</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.record",
              "type": "Core.data.Model",
              "description": "<p>Target record</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.cell",
              "type": "HTMLElement",
              "description": "<p>Target cell</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.value",
              "type": "*",
              "description": "<p>Cell value</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "finishCellEdit",
          "description": "<p>Fires on the owning Grid when cell editing is finished</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>Target grid</p>"
            },
            {
              "name": "editorContext",
              "type": "Grid.util.Location",
              "description": "<p>Editing context</p>"
            },
            {
              "name": "editorContext.editor",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor being used.\nWill contain an <code>inputField</code> property which is the field being used to perform the editing.</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.column",
              "type": "Grid.column.Column",
              "description": "<p>Target column</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.record",
              "type": "Core.data.Model",
              "description": "<p>Target record</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.cell",
              "type": "HTMLElement",
              "description": "<p>Target cell</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.value",
              "type": "*",
              "description": "<p>Cell value</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "cancelCellEdit",
          "description": "<p>Fires on the owning Grid when editing is cancelled</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owner grid</p>"
            },
            {
              "name": "editorContext",
              "type": "Grid.util.Location",
              "description": "<p>Editing context</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Included if the cancellation was triggered by a DOM event</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeCellEditStart",
          "description": "<p>Fires on the owning Grid before editing starts, return <code>false</code> to prevent editing</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owner grid</p>"
            },
            {
              "name": "editorContext",
              "type": "Grid.util.Location",
              "description": "<p>Editing context</p>"
            },
            {
              "name": "editorContext.column",
              "type": "Grid.column.Column",
              "description": "<p>Target column</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.record",
              "type": "Core.data.Model",
              "description": "<p>Target record</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.cell",
              "type": "HTMLElement",
              "description": "<p>Target cell</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.editor",
              "type": "Core.widget.Field",
              "description": "<p>The input field that the column is configured\nwith (see <a href=\"#Grid/column/Column#config-field\">field</a>). This property mey be replaced\nto be a different <a href=\"#Core/widget/Field\">field</a> in the handler, to take effect\njust for the impending edit.</p>",
              "isSubParam": true
            },
            {
              "name": "editorContext.finalize",
              "type": "function",
              "description": "<p>An async function may be injected into this property\nwhich performs asynchronous finalization tasks such as complex validation of confirmation. The\nvalue <code>true</code> or <code>false</code> must be returned.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editorContext.finalize.context",
              "type": "Object",
              "description": "<p>An object describing the editing context upon requested completion of the edit.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "editorContext.value",
              "type": "*",
              "description": "<p>Cell value</p>",
              "isSubParam": true
            }
          ],
          "preventable": true,
          "onOwner": true
        }
      ]
    },
    {
      "name": "CellMenu",
      "modulePath": "Grid/feature/CellMenu",
      "classDescription": "<p>Right click to display context menu for cells.</p>\n<p>To invoke the cell menu in a keyboard-accessible manner, use the <code>SPACE</code> key when the cell is focused.</p>\n<h3>Default cell menu items</h3>\n<p>The Cell menu feature provides only one item by default:</p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Text</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>removeRow</code></td>\n<td>Delete</td>\n<td>100</td>\n<td>Delete row record</td>\n</tr>\n</tbody>\n</table>\n<p>And all the other items are populated by the other features:</p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Text</th>\n<th>Weight</th>\n<th>Feature</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>cut</code></td>\n<td>Cut record</td>\n<td>110</td>\n<td><a href=\"#Grid/feature/RowCopyPaste\">RowCopyPaste</a></td>\n<td>Cut row record</td>\n</tr>\n<tr>\n<td><code>copy</code></td>\n<td>Copy record</td>\n<td>120</td>\n<td><a href=\"#Grid/feature/RowCopyPaste\">RowCopyPaste</a></td>\n<td>Copy row record</td>\n</tr>\n<tr>\n<td><code>paste</code></td>\n<td>Paste record</td>\n<td>130</td>\n<td><a href=\"#Grid/feature/RowCopyPaste\">RowCopyPaste</a></td>\n<td>Paste copied row records</td>\n</tr>\n<tr>\n<td><code>search</code></td>\n<td>Search for value</td>\n<td>200</td>\n<td><a href=\"#Grid/feature/Search\">Search</a></td>\n<td>Search for the selected cell text</td>\n</tr>\n<tr>\n<td><code>filterDateEquals</code></td>\n<td>On</td>\n<td>300</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, equal to the cell value</td>\n</tr>\n<tr>\n<td><code>filterDateBefore</code></td>\n<td>Before</td>\n<td>310</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, less than the cell value</td>\n</tr>\n<tr>\n<td><code>filterDateAfter</code></td>\n<td>After</td>\n<td>320</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, more than the cell value</td>\n</tr>\n<tr>\n<td><code>filterNumberEquals</code></td>\n<td>Equals</td>\n<td>300</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, equal to the cell value</td>\n</tr>\n<tr>\n<td><code>filterNumberLess</code></td>\n<td>Less than</td>\n<td>310</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, less than the cell value</td>\n</tr>\n<tr>\n<td><code>filterNumberMore</code></td>\n<td>More than</td>\n<td>320</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, more than the cell value</td>\n</tr>\n<tr>\n<td><code>filterDurationEquals</code></td>\n<td>Equals</td>\n<td>300</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, equal to the cell value</td>\n</tr>\n<tr>\n<td><code>filterDurationLess</code></td>\n<td>Less than</td>\n<td>310</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, less than the cell value</td>\n</tr>\n<tr>\n<td><code>filterDurationMore</code></td>\n<td>More than</td>\n<td>320</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, more than the cell value</td>\n</tr>\n<tr>\n<td><code>filterStringEquals</code></td>\n<td>Equals</td>\n<td>300</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Filters by the column field, equal to the cell value</td>\n</tr>\n<tr>\n<td><code>filterRemove</code></td>\n<td>Remove filter</td>\n<td>400</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Stops filtering by selected column field</td>\n</tr>\n</tbody>\n</table>\n<h3>Customizing the menu items</h3>\n<p>The menu items in the Cell menu can be customized, existing items can be changed or removed,\nand new items can be added. This is handled using the <code>items</code> config of the feature.</p>\n<p>Add extra items for all columns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        cellMenu : {\n            items : {\n                extraItem : {\n                    text   : 'My cell item',\n                    icon   : 'fa fa-bus',\n                    weight : 200,\n                    onItem : () => ...\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>It is also possible to add items using columns config. See examples below.</p>\n<p>Add extra items for a single column:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns: [\n        {\n            field         : 'city',\n            text          : 'City',\n            cellMenuItems : {\n                columnItem : {\n                    text   : 'My unique cell item',\n                    icon   : 'fa fa-beer',\n                    onItem : () => ...\n                }\n            }\n        }\n    ]\n});\n</code></pre>\n<p>Remove existing item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        cellMenu : {\n            items : {\n                removeRow : false\n            }\n        }\n    }\n});\n</code></pre>\n<p>Customize existing item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        cellMenu : {\n            items : {\n                removeRow : {\n                    text : 'Throw away',\n                    icon : 'b-fa b-fa-dumpster'\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>It is also possible to manipulate the default items and add new items in the processing function:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        cellMenu : {\n            processItems({items, record}) {\n                if (record.cost > 5000) {\n                    items.myItem = { text : 'Split cost' };\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Full information of the menu customization can be found in the <a href=\"#Grid/guides/customization/contextmenu.md\">&quot;Customizing the Cell menu and the Header menu&quot;</a>\nguide.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/feature/base/ContextMenuBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "CellMenu.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "contextmenu"
      },
      "classType": "cellMenu",
      "externalExamples": [
        "Grid/feature/CellMenu.js"
      ],
      "configs": [
        {
          "name": "processItems",
          "description": "<p>A function called before displaying the menu that allows manipulations of its items.\nReturning <code>false</code> from this function prevents the menu being shown.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    cellMenu : {\n        processItems({ items, record, column }) {\n            // Add or hide existing items here as needed\n            items.myAction = {\n                text   : 'Cool action',\n                icon   : 'b-fa b-fa-fw b-fa-ban',\n                onItem : () => console.log(`Clicked ${record.name}`),\n                weight : 1000 // Move to end\n            };\n\n            if (!record.allowDelete) {\n                items.removeRow.hidden = true;\n            }\n        }\n    }\n},\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>An object with information about the menu being shown</p>"
            },
            {
              "name": "context.record",
              "type": "Core.data.Model",
              "description": "<p>The record representing the current row</p>",
              "isSubParam": true
            },
            {
              "name": "context.column",
              "type": "Grid.column.Column",
              "description": "<p>The current column</p>",
              "isSubParam": true
            },
            {
              "name": "context.items",
              "type": "Object",
              "description": "<p>An object containing the <a href=\"#Core/widget/MenuItem\">menu item</a> configs keyed by their id</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The DOM event object that triggered the show</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "items",
          "description": "<p><a href=\"#Core/widget/Menu\">Menu</a> items object containing named child menu items to apply to the feature's\nprovided context menu.</p>\n<p>This may add extra items as below, but you can also configure, or remove any of the default items by\nconfiguring the name of the item as <code>false</code></p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    cellMenu : {\n        // This object is applied to the Feature's predefined default items\n        items : {\n            switchToDog : {\n                text : 'Dog',\n                icon : 'b-fa b-fa-fw b-fa-dog',\n                onItem({contextRecord}) {\n                    contextRecord.dog = true;\n                    contextRecord.cat = false;\n                },\n                weight : 500     // Make this second from end\n            },\n            switchToCat : {\n                text : 'Cat',\n                icon : 'b-fa b-fa-fw b-fa-cat',\n                onItem({contextRecord}) {\n                    contextRecord.dog = false;\n                    contextRecord.cat = true;\n                },\n                weight : 510     // Make this sink to end\n            },\n            removeRow : {\n                // Change icon for the delete item\n                icon : 'b-fa b-fa-times'\n            }\n        }\n    }\n},\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "cellMenuBeforeShow",
          "description": "<p>This event fires on the owning grid before the context menu is shown for a cell.\nAllows manipulation of the items to show in the same way as in the <a href=\"#Grid/feature/CellMenu#config-processItems\">processItems</a>.</p>\n<p>Returning <code>false</code> from a listener prevents the menu from being shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "cellMenuShow",
          "description": "<p>This event fires on the owning grid after the context menu is shown for a cell.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "cellMenuItem",
          "description": "<p>This event fires on the owning grid when an item is selected in the cell context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>Selected menu item</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "cellMenuToggleItem",
          "description": "<p>This event fires on the owning grid when a check item is toggled in the cell context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>Selected menu item</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>Checked or not</p>"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "CellTooltip",
      "modulePath": "Grid/feature/CellTooltip",
      "classDescription": "<p>Displays a tooltip when hovering cells. To show contents when hovering a cell, you can specify\na global <a href=\"#Grid/feature/CellTooltip#config-tooltipRenderer\">tooltipRenderer</a> function for the feature but you can also define <a href=\"#Grid/column/Column#config-tooltipRenderer\">tooltipRenderer</a>\nfor individual columns.</p>\n<p>Configuration properties passed into this feature are used to configure the <a href=\"#Core/widget/Tooltip\">Tooltip</a> instance\nused.</p>\n<p>This feature is <strong>disabled</strong> by default.</p>\n<h2>Showing async content</h2>\n<p>Showing remotely loaded content is super easy using the <a href=\"#Grid/feature/CellTooltip#config-tooltipRenderer\">tooltipRenderer</a>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Async tooltip with some custom settings\nlet grid = new Grid({\n  features: {\n    cellTooltip: {\n      // Time that mouse needs to be over cell before tooltip is shown\n      hoverDelay : 4000,\n      // Time after mouse out to hide the tooltip, 0 = instantly\n      hideDelay  : 0,\n      // Async tooltip renderer, return a Promise which yields the text content\n      tooltipRenderer({ record, tip }) => AjaxHelper.get(`tooltip.php?id=${record.id}`).then(response => response.text())\n    }\n  }\n});\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "// Column with its own tooltip renderer\n{\n  text            : 'Name',\n  field           : 'name',\n  tooltipRenderer : ({ record }) => `My name is\\xa0<b>${record.name}</b>`\n}"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "CellTooltip.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "celltooltip"
      },
      "classType": "cellTooltip",
      "externalExamples": [
        "Grid/feature/CellTooltip.js"
      ],
      "configs": [
        {
          "name": "tooltipRenderer",
          "description": "<p>Function called to generate the HTML content for the cell tooltip.\nThe function should return a string (your HTML), or a Promise yielding a string (for remotely loaded content)</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": [
              "String",
              "Promise"
            ]
          },
          "parameters": [
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.cellElement",
              "type": "HTMLElement",
              "description": "<p>The cell element</p>",
              "isSubParam": true
            },
            {
              "name": "context.record",
              "type": "Core.data.Model",
              "description": "<p>The row record</p>",
              "isSubParam": true
            },
            {
              "name": "context.column",
              "type": "Grid.column.Column",
              "description": "<p>The column</p>",
              "isSubParam": true
            },
            {
              "name": "context.tip",
              "type": "Core.widget.Tooltip",
              "description": "<p>The Tooltip instance</p>",
              "isSubParam": true
            },
            {
              "name": "context.cellTooltip",
              "type": "Grid.feature.CellTooltip",
              "description": "<p>The feature</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The raw DOM event</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getTooltipContent",
          "access": "private",
          "description": "<p>Called from Tooltip to populate it with html.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ColumnAutoWidth",
      "modulePath": "Grid/feature/ColumnAutoWidth",
      "classDescription": "<p>Enables the <a href=\"#Grid/column/Column#config-autoWidth\">autoWidth</a> config for a grid's columns.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "mixes": [
        "Core/mixin/Delayable"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ColumnAutoWidth.js",
      "path": "/Calendar/lib/Grid/feature",
      "classType": "columnAutoWidth",
      "configs": [
        {
          "name": "default",
          "description": "<p>The default <code>autoWidth</code> option for columns with <code>autoWidth: true</code>. This can\nbe a single number for the minimum column width, or an array of two numbers\nfor the <code>[minWidth, maxWidth]</code>.</p>",
          "type": [
            "Number",
            "Array.<Number>"
          ],
          "scope": "inner"
        },
        {
          "name": "delay",
          "description": "<p>The amount of time (in milliseconds) to delay after a store modification\nbefore synchronizing <code>autoWidth</code> columns.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        }
      ]
    },
    {
      "name": "ColumnDragToolbar",
      "modulePath": "Grid/feature/ColumnDragToolbar",
      "classDescription": "<p>Displays a toolbar while dragging column headers. Drop on a button in the toolbar to activate a certain function,\nfor example to group by that column. This feature simplifies certain operations on touch devices.</p>\n<p>This feature is <strong>disabled</strong> by default, but turned on automatically on touch devices.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ColumnDragToolbar.js",
      "path": "/Calendar/lib/Grid/feature",
      "classType": "columnDragToolbar",
      "externalExamples": [
        "Grid/feature/ColumnDragToolbar.js"
      ],
      "demo": {
        "product": "grid",
        "demo": "columndragtoolbar"
      },
      "functions": [
        {
          "name": "render",
          "access": "private",
          "description": "<p>Initializes this feature on grid render.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ColumnPicker",
      "modulePath": "Grid/feature/ColumnPicker",
      "classDescription": "<p>Displays a column picker (to show/hide columns) in the header context menu. Columns can be displayed in sub menus\nby region or tag. Grouped headers are displayed as menu hierarchies.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ColumnPicker.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "columns"
      },
      "classType": "columnPicker",
      "externalExamples": [
        "Grid/feature/ColumnPicker.js"
      ],
      "configs": [
        {
          "name": "groupByRegion",
          "description": "<p>Groups columns in the picker by region (each region gets its own sub menu)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "groupByTag",
          "description": "<p>Groups columns in the picker by tag, each column may be shown under multiple tags. See\n<a href=\"#Grid/column/Column#config-tags\">tags</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "createColumnsFromModel",
          "description": "<p>Configure this as <code>true</code> to have the fields from the Grid's <a href=\"#Core/data/Store\">Store</a>'s\n<a href=\"#Core/data/Store#config-modelClass\">modelClass</a> added to the menu to create <strong>new</strong> columns\nto display the fields.</p>\n<p>This may be combined with the <a href=\"#Grid/view/mixin/GridState\">stateful</a> ability of the grid\nto create a self-configuring grid.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "functions": [
        {
          "name": "getColumnPickerItems",
          "access": "private",
          "description": "<p>Get menu items, either a straight list of columns or sub menus per subgrid</p>",
          "parameters": [
            {
              "name": "columnStore",
              "description": "<p>Column store to traverse</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>",
            "description": "<p>Menu item configs</p>"
          }
        },
        {
          "name": "getColumnsForTag",
          "access": "private",
          "description": "<p>Get all columns that has the specified tag\nTODO: if tags are useful from somewhere else, move to ColumnStore</p>",
          "parameters": [
            {
              "name": "tag"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Grid.column.Column>"
          }
        },
        {
          "name": "refreshTagMenu",
          "access": "private",
          "description": "<p>Refreshes checked status for a tag menu. Needed since columns can appear under multiple tags.</p>",
          "scope": "instance"
        },
        {
          "name": "buildColumnMenu",
          "access": "private",
          "description": "<p>Traverses columns to build menu items for the column picker.</p>",
          "scope": "instance"
        },
        {
          "name": "populateHeaderMenu",
          "access": "internal",
          "description": "<p>Populates the header context menu items.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onColumnToggle",
          "access": "private",
          "description": "<p>Handler for column hide/show menu checkitems.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Object",
              "description": "<p>The <a href=\"#Core/widget/MenuItem#event-toggle\">toggle</a> event.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getColumnDragToolbarItems",
          "access": "private",
          "description": "<p>Supply items to ColumnDragToolbar</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ColumnReorder",
      "modulePath": "Grid/feature/ColumnReorder",
      "classDescription": "<p>Allows user to reorder columns by dragging headers. To get notified about column reorder listen to <code>change</code> event\non <a href=\"#Grid/data/ColumnStore\">columns</a> store.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ColumnReorder.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "columns"
      },
      "classType": "columnReorder",
      "externalExamples": [
        "Grid/feature/ColumnReorder.js"
      ],
      "functions": [
        {
          "name": "init",
          "access": "private",
          "description": "<p>Initialize drag &amp; drop (called from render)</p>",
          "scope": "instance"
        },
        {
          "name": "onDrop",
          "access": "private",
          "description": "<p>Handle drop</p>",
          "scope": "instance"
        },
        {
          "name": "onInvalidDrop",
          "access": "private",
          "description": "<p>Handle invalid drop</p>",
          "scope": "instance"
        },
        {
          "name": "renderContents",
          "access": "private",
          "description": "<p>Updates DragHelper with updated headers when grid contents is rerendered</p>",
          "scope": "instance"
        },
        {
          "name": "onPaint",
          "access": "private",
          "description": "<p>Initializes this feature on grid paint.</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "beforeColumnDragStart",
          "description": "<p>This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns <code>false</code>.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance.</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The dragged column.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "columnDragStart",
          "description": "<p>This event is fired when a column drag gesture has started.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance.</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The dragged column.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeColumnDropFinalize",
          "description": "<p>This event is fired when a column is dropped, and you can return false from a listener to abort the operation.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance.</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The dragged column.</p>"
            },
            {
              "name": "insertBefore",
              "type": "Grid.column.Column",
              "description": "<p>The column before which the dragged column will be inserted.</p>"
            },
            {
              "name": "newParent",
              "type": "Grid.column.Column",
              "description": "<p>The new parent column.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "columnDrop",
          "description": "<p>This event is always fired after a column is dropped. The <code>valid</code> param is true if the operation was not\nvetoed and the column was moved in the column store.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance.</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The dragged column.</p>"
            },
            {
              "name": "insertBefore",
              "type": "Grid.column.Column",
              "description": "<p>The column before which the the dragged column will be inserted.</p>"
            },
            {
              "name": "newParent",
              "type": "Grid.column.Column",
              "description": "<p>The new parent column.</p>"
            },
            {
              "name": "valid",
              "type": "Boolean",
              "description": "<p>true if the operation was not vetoed.</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        }
      ]
    },
    {
      "name": "ColumnResize",
      "modulePath": "Grid/feature/ColumnResize",
      "classDescription": "<p>Enables user to resize columns by dragging a handle on the right hand side of the header. To get notified about column\nresize listen to <code>change</code> event on <a href=\"#Grid/data/ColumnStore\">columns</a> store.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ColumnResize.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "columns"
      },
      "classType": "columnResize",
      "externalExamples": [
        "Grid/feature/ColumnResize.js"
      ],
      "configs": [
        {
          "name": "liveResize",
          "description": "<p>Resize all cells below a resizing header during dragging.\n<code>'auto'</code> means <code>true</code> on non-mobile platforms.</p>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner",
          "defaultValue": "auto"
        }
      ],
      "functions": [
        {
          "name": "onResizing",
          "access": "private",
          "description": "<p>Handle drag event - resize the column live unless it's a touch gesture</p>",
          "scope": "instance"
        },
        {
          "name": "onResize",
          "access": "private",
          "description": "<p>Handle drop event (only used for touch)</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Filter",
      "modulePath": "Grid/feature/Filter",
      "classDescription": "<p>Feature that allows filtering of the grid by settings filters on columns. The actual filtering is done by the store.\nFor info on programmatically handling filters, see <a href=\"#Core/data/mixin/StoreFilter\">StoreFilter</a>.</p>\n<p><div class=\"external-example \" data-file=\"Grid/feature/Filter.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Filtering turned on but no default filter\nconst grid = new Grid({\n  features : {\n    filter : true\n  }\n});\n\n// Using default filter\nconst grid = new Grid({\n  features : {\n    filter : { property : 'city', value : 'Gavle' }\n  }\n});\n</code></pre>\n<p>A column can supply a custom filtering function as its <a href=\"#Grid/column/Column#config-filterable\">filterable</a> config. When\nfiltering by that column using the UI that function will be used to determine which records to include. See\n<a href=\"#Grid/column/Column#config-filterable\">Column#filterable</a> for more information.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Custom filtering function for a column\nconst grid = new Grid({\n   features : {\n       filter : true\n   },\n\n   columns: [\n       {\n         field      : 'age',\n         text       : 'Age',\n         type       : 'number',\n         // Custom filtering function that checks &quot;greater than&quot; no matter\n         // which field user filled in :)\n         filterable : ({ record, value, operator }) => record.age > value\n       }\n   ]\n});\n</code></pre>\n<p>If this feature is configured with <code>prioritizeColumns : true</code>, those functions will also be used when filtering\nprogrammatically:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   features : {\n       filter : {\n           prioritizeColumns : true\n       }\n   },\n\n   columns: [\n       {\n         field      : 'age',\n         text       : 'Age',\n         type       : 'number',\n         filterable : ({ record, value, operator }) => record.age > value\n       }\n   ]\n});\n\n// Because of the prioritizeColumns config above, any custom filterable function\n// on a column will be used when programmatically filtering by that columns field\ngrid.store.filter({\n    property : 'age',\n    value    : 41\n});\n</code></pre>\n<p>You can supply a field config to use for the filtering field displayed for string type columns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// For string-type columns you can also replace the filter UI with a custom field:\ncolumns: [\n    {\n        field : 'city',\n        // Filtering for a value out of a list of values\n        filterable: {\n            filterField : {\n                type  : 'combo',\n                items : [\n                    'Paris',\n                    'Dubai',\n                    'Moscow',\n                    'London',\n                    'New York'\n                ]\n            }\n        }\n    }\n]\n</code></pre>\n<p>You can also change default fields, for example this will use <a href=\"#Core/widget/DateTimeField\">DateTimeField</a> in filter popup:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>columns : [\n    {\n        type       : 'date',\n        field      : 'start',\n        filterable : {\n            filterField : {\n                type : 'datetime'\n            }\n        }\n    }\n]\n</code></pre>\n<p>This feature is <strong>disabled</strong> by default.</p>\n<p><strong>Note:</strong> This feature cannot be used together with <a href=\"#Grid/feature/FilterBar\">FilterBar</a> feature, they are\nmutually exclusive.</p>\n<p>The filter's UI can be invoked using the keyboard. When the column heder is focused, pressing the\n<code>F</code> key, shows the filter input field.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Filter.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "filtering"
      },
      "classType": "filter",
      "configs": [
        {
          "name": "prioritizeColumns",
          "description": "<p>Use custom filtering functions defined on columns also when programmatically filtering by the columns\nfield.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : [\n        {\n            field : 'age',\n            text : 'Age',\n            filterable({ record, value }) {\n              // Custom filtering, return true/false\n            }\n        }\n    ],\n\n    features : {\n        filter : {\n            prioritizeColumns : true // &lt;--\n        }\n    }\n});\n\n// Because of the prioritizeColumns config above, any custom\n// filterable function on a column will be used when\n// programmatically filtering by that columns field\ngrid.store.filter({\n    property : 'age',\n    value    : 30\n});\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "refreshHeaders",
          "access": "private",
          "description": "<p>Update headers to match stores filters. Called on store load and grid header render.</p>",
          "parameters": [
            {
              "name": "reRenderRows",
              "description": "<p>Also refresh rows?</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getPopupItems",
          "access": "private",
          "description": "<p>Get fields to display in filter popup.</p>",
          "parameters": [
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            },
            {
              "name": "fieldType",
              "description": "<p>Type of field, number, date etc.</p>"
            },
            {
              "name": "filter",
              "description": "<p>Current filter filter</p>"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "store",
              "description": "<p>Grid store</p>"
            },
            {
              "name": "changeCallback",
              "description": "<p>Callback for when filter has changed</p>"
            },
            {
              "name": "closeCallback",
              "description": "<p>Callback for when editor should be closed</p>"
            },
            {
              "name": "filterField",
              "description": "<p>filter field</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*"
          }
        },
        {
          "name": "showFilterEditor",
          "description": "<p>Shows a popup where a filter can be edited.</p>",
          "parameters": [
            {
              "name": "column",
              "type": [
                "Grid.column.Column",
                "String"
              ],
              "description": "<p>Column to show filter editor for</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>The initial value of the filter field</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "closeFilterEditor",
          "description": "<p>Close the filter editor.</p>",
          "scope": "instance"
        },
        {
          "name": "populateCellMenu",
          "access": "internal",
          "description": "<p>Add menu items for filtering.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.record",
              "type": "Core.data.Model",
              "description": "<p>Record for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "populateHeaderMenu",
          "access": "internal",
          "description": "<p>Add menu item for removing filter if column is filtered.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>items Menu items config</p>"
          }
        },
        {
          "name": "onStoreFilter",
          "access": "private",
          "description": "<p>Store filtered; refresh headers.</p>",
          "scope": "instance"
        },
        {
          "name": "renderHeader",
          "access": "private",
          "description": "<p>Called after headers are rendered, make headers match stores initial sorters</p>",
          "scope": "instance"
        },
        {
          "name": "onElementClick",
          "access": "private",
          "description": "<p>Called when user clicks on the grid. Only care about clicks on the filter icon.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementKeyDown",
          "access": "private",
          "description": "<p>Called when user presses a key grid. Only care about &quot;F&quot; on headers.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "FilterBar",
      "modulePath": "Grid/feature/FilterBar",
      "classDescription": "<p>Feature that allows filtering of the grid by entering filters on column headers.\nThe actual filtering is done by the store.\nFor info on programmatically handling filters, see <a href=\"#Core/data/mixin/StoreFilter\">StoreFilter</a>.</p>\n<p><div class=\"external-example \" data-file=\"Grid/feature/FilterBar.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// filtering turned on but no initial filter\nconst grid = new Grid({\n  features: {\n    filterBar : true\n  }\n});\n\n// using initial filter\nconst grid = new Grid({\n  features : {\n    filterBar : { filter: { property : 'city', value : 'Gavle' } }\n  }\n});\n</code></pre>\n<h2>Enabling filtering for a column</h2>\n<p>The individual filterability of columns is defined by a <code>filterable</code> property on the column which defaults to <code>true</code>.\nIf <code>false</code>, that column is not filterable. Note: If you have multiple columns configured with the same <code>field</code> value,\nassign an <a href=\"#Core/data/Model#field-id\">id</a> to the columns to ensure filters work correctly.</p>\n<p>The property value may also be a custom filter function.</p>\n<p>The property value may also be an object which may contain the following two properties:</p>\n<ul>\n<li><strong>filterFn</strong> : <code>Function</code> A custom filtering function</li>\n<li><strong>filterField</strong> : <code>Object</code> A config object for the filter value input field. See <a href=\"#Core/widget/TextField\">TextField</a> or\nthe other field widgets for reference.</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code>// Custom filtering function for a column\nconst grid = new Grid({\n  features : {\n    filterBar : true\n  },\n\n  columns: [\n     {\n       field      : 'age',\n       text       : 'Age',\n       type       : 'number',\n       // Custom filtering function that checks &quot;greater than&quot;\n       filterable : ({ record, value }) => record.age > value\n     },\n     {\n       field : 'name',\n       // Filterable may specify a filterFn and a config for the filtering input field\n       filterable : {\n         filterFn : ({ record, value }) => record.name.toLowerCase().indexOf(value.toLowerCase()) !== -1,\n         filterField : {\n           emptyText : 'Filter name'\n         }\n       }\n     },\n     {\n       field : 'city',\n       text : 'Visited',\n       flex : 1,\n       // Filterable with multiselect combo to pick several items to filter\n       filterable : {\n         filterField : {\n           type        : 'combo',\n           multiSelect : true,\n           items       : ['Barcelona', 'Moscow', 'Stockholm']\n         }\n       }\n     }\n  ]\n});\n</code></pre>\n<p>If this feature is configured with <code>prioritizeColumns : true</code>, those functions will also be used when filtering\nprogrammatically:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   features : {\n       filterBar : {\n           prioritizeColumns : true\n       }\n   },\n\n   columns: [\n       {\n         field      : 'age',\n         text       : 'Age',\n         type       : 'number',\n         // Custom filtering function that checks &quot;greater than&quot; no matter\n         // which field user filled in :)\n         filterable : ({ record, value, operator }) => record.age > value\n       }\n   ]\n});\n\n// Will be used when filtering programmatically or using the UI\ngrid.store.filter({\n    property : 'age',\n    value    : 41\n});\n</code></pre>\n<h2>Filtering using a multiselect combo</h2>\n<p>To filter the grid by choosing values which should match with the store data, use a <a href=\"#Core/widget/Combo\">Combo</a>, and configure\nyour grid like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   features : {\n       filterBar : true\n   },\n\n   columns : [\n       {\n           id         : 'name',\n           field      : 'name',\n           text       : 'Name',\n           filterable : {\n               filterField : {\n                   type         : 'combo',\n                   multiSelect  : true,\n                   valueField   : 'name',\n                   displayField : 'name'\n               }\n           }\n       }\n   ]\n});\n</code></pre>\n<p>You can also filter the <a href=\"#Core/widget/Combo\">Combo</a> values, for example to filter out empty values. Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   features : {\n       filterBar : true\n   },\n\n   columns : [\n       {\n           text       : 'Airline',\n           field      : 'airline',\n           flex       : 1,\n           filterable : {\n               filterField : {\n                   type         : 'combo',\n                   multiSelect  : true,\n                   valueField   : 'airline',\n                   displayField : 'airline',\n                   store        : {\n                       filters : {\n                           // Filter out empty values\n                           filterBy : record => !!record.airline\n                       }\n                   }\n               }\n           }\n       }\n   ]\n});\n</code></pre>\n<p>This feature is <strong>disabled</strong> by default.</p>\n<p><strong>Note:</strong> This feature cannot be used together with <a href=\"#Grid/feature/Filter\">filter</a> feature, they are mutually\nexclusive.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "FilterBar.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "filterbar"
      },
      "classType": "filterBar",
      "configs": [
        {
          "name": "prioritizeColumns",
          "description": "<p>Use custom filtering functions defined on columns also when programmatically filtering by the columns\nfield.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : [\n        {\n            field : 'age',\n            text : 'Age',\n            filterable({ record, value }) {\n              // Custom filtering, return true/false\n            }\n        }\n    ],\n\n    features : {\n        filterBar : {\n            prioritizeColumns : true // &lt;--\n        }\n    }\n});\n\n// Because of the prioritizeColumns config above, any custom\n// filterable function on a column will be used when\n// programmatically filtering by that columns field\ngrid.store.filter({\n    property : 'age',\n    value    : 30\n});\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Common"
        },
        {
          "name": "keyStrokeFilterDelay",
          "description": "<p>The delay in milliseconds to wait after the last keystroke before applying filters.\nSet to 0 to not trigger filtering from keystrokes, requires pressing ENTER instead</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 300,
          "category": "Common"
        },
        {
          "name": "compactMode",
          "description": "<p>Specify <code>true</code> to enable compact mode for the filter bar. In this mode the filtering fields are styled\nto transparently overlay the headers, occupying no additional space.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Common"
        }
      ],
      "properties": [
        {
          "name": "compactMode",
          "description": "<p>Toggle compact mode. In this mode the filtering fields are styled to transparently overlay the headers,\noccupying no additional space.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "hideFilterBar",
          "description": "<p>Hides the filtering fields.</p>",
          "scope": "instance"
        },
        {
          "name": "showFilterBar",
          "description": "<p>Shows the filtering fields.</p>",
          "scope": "instance"
        },
        {
          "name": "toggleFilterBar",
          "description": "<p>Toggles the filtering fields visibility.</p>",
          "scope": "instance"
        },
        {
          "name": "renderFilterBar",
          "access": "private",
          "description": "<p>Renders the filtering fields for filterable columns.</p>",
          "scope": "instance"
        },
        {
          "name": "renderColumnFilterField",
          "access": "private",
          "description": "<p>Renders text field filter in the provided column header.</p>",
          "parameters": [
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column to render text field filter for.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateColumnFilterFields",
          "access": "private",
          "description": "<p>Fills in column filter fields with values from the grid store filters.</p>",
          "scope": "instance"
        },
        {
          "name": "getColumnFilterField",
          "description": "<p>Returns column filter field instance.</p>",
          "parameters": [
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column to get filter field for.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.widget.Widget"
          }
        },
        {
          "name": "onStoreFilter",
          "access": "private",
          "description": "<p>Fires when store gets filtered. Refreshes field values in column headers.</p>",
          "scope": "instance"
        },
        {
          "name": "renderHeader",
          "access": "private",
          "description": "<p>Called after headers are rendered, make headers match stores initial sorters</p>",
          "scope": "instance"
        },
        {
          "name": "onColumnFilterFieldChange",
          "access": "private",
          "description": "<p>Called when a column text filter field value is changed by user.</p>",
          "parameters": [
            {
              "name": "field",
              "type": "Core.widget.TextField",
              "description": "<p>Filter text field.</p>"
            },
            {
              "name": "value",
              "type": "String",
              "description": "<p>New filtering value.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "populateHeaderMenu",
          "access": "internal",
          "description": "<p>Adds a menu item to toggle filter bar visibility.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "GridFeatureManager",
      "modulePath": "Grid/feature/GridFeatureManager",
      "classDescription": "<p>Static class intended to register and query grid features</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridFeatureManager.js",
      "path": "/Calendar/lib/Grid/feature",
      "functions": [
        {
          "name": "registerFeature",
          "description": "<p>Register a feature class with the Grid. Enables it to be created and configured using config Grid#features.</p>",
          "parameters": [
            {
              "name": "featureClass",
              "type": "function",
              "description": "<p>The feature class constructor to register</p>"
            },
            {
              "name": "onByDefault",
              "type": "Boolean",
              "description": "<p>Specify true to have the feature enabled per default</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "forType",
              "type": [
                "String",
                "Array.<String>"
              ],
              "description": "<p>Specify a type to let the class applying the feature to determine if it should use it</p>",
              "optional": true
            }
          ],
          "scope": "static"
        },
        {
          "name": "getTypeNameFeatures",
          "description": "<p>Get all the features registered for the given type name in an object where keys are feature names and values are feature constructors.</p>",
          "parameters": [
            {
              "name": "forType",
              "type": "String",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "getTypeNameDefaultFeatures",
          "description": "<p>Get all the default features registered for the given type name in an object where keys are feature names and values are feature constructors.</p>",
          "parameters": [
            {
              "name": "forType",
              "type": "String",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "getInstanceFeatures",
          "description": "<p>Gets all the features registered for the given instance type name chain. First builds the type name chain then queries for features\nfor each type name and combines them into one object, see <a href=\"#Grid/feature/GridFeatureManager#function-getTypeNameFeatures-static\">getTypeNameFeatures</a>() for returned object description.\nIf feature is registered for both parent and child type name then feature for child overrides feature for parent.</p>",
          "parameters": [
            {
              "name": "instance",
              "type": "Object"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "getInstanceDefaultFeatures",
          "description": "<p>Gets all the <em>default</em> features registered for the given instance type name chain. First builds the type name chain then queries for features\nfor each type name and combines them into one object, see <a href=\"#Grid/feature/GridFeatureManager#function-getTypeNameFeatures-static\">getTypeNameFeatures</a>() for returned object description.\nIf feature is registered for both parent and child type name then feature for child overrides feature for parent.</p>",
          "parameters": [
            {
              "name": "instance",
              "type": "Object"
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "isDefaultFeatureForTypeName",
          "description": "<p>Checks if the given feature class is default for the type name</p>",
          "parameters": [
            {
              "name": "featureClass",
              "type": "Core.mixin.InstancePlugin",
              "description": "<p>Feature to check</p>"
            },
            {
              "name": "forType",
              "type": "String",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isDefaultFeatureForInstance",
          "description": "<p>Checks if the given feature class is default for the given instance type name chain. If the feature is not default for the\nparent type name but it is for the child type name, then the child setting overrides the parent one.</p>",
          "parameters": [
            {
              "name": "featureClass",
              "type": "Core.mixin.InstancePlugin",
              "description": "<p>Feature to check</p>"
            },
            {
              "name": "forType",
              "type": "String",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "reset",
          "access": "internal",
          "description": "<p>Resets feature registration date, used in tests to reset state after test</p>",
          "scope": "static"
        }
      ]
    },
    {
      "name": "Group",
      "modulePath": "Grid/feature/Group",
      "classDescription": "<p>Enables rendering and handling of row groups. The actual grouping is done in the store, but triggered by [shift] +\nclicking headers or by using two finger tap (one on header, one anywhere on grid). Groups can be expanded/collapsed\nby clicking on the group row or pressing [space] when group row is selected.\nThe actual grouping is done by the store, see <a href=\"#Core/data/mixin/StoreGroup#function-group\">group</a>.</p>\n<p>Grouping by a field performs sorting by the field automatically. It's not possible to prevent sorting.\nIf you group, the records have to be sorted so that records in a group stick together. You can either control sorting\ndirection, or provide a custom sorting function called <a href=\"#Grid/feature/Group#config-groupSortFn\">groupSortFn</a> to your feature config object.</p>\n<p>For info on programmatically handling grouping, see <a href=\"#Core/data/mixin/StoreGroup\">StoreGroup</a>.</p>\n<p>Currently grouping is not supported when using pagination, the underlying store cannot group data that is split into pages.</p>\n<p><strong>Note:</strong> Custom height for group header rows cannot be set with CSS, should instead be defined in a renderer function using the <code>size</code> param. See the <a href=\"#Grid/feature/Group#config-renderer\">renderer</a> config for details.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "// grouping feature is enabled, no default value though\nlet grid = new Grid({\n    features : {\n        group : true\n    }\n});\n\n// use initial grouping\nlet grid = new Grid({\n    features : {\n        group : 'city'\n    }\n});\n\n// default grouper and custom renderer, which will be applied to each cell except the \"group\" cell\nlet grid = new Grid({\n  features : {\n    group : {\n      field : 'city',\n      ascending : false,\n      renderer : ({ isFirstColumn, count, groupRowFor, record }) => isFirstColumn ? `${groupRowFor} (${count})` : ''\n    }\n  }\n});\n\n// group using custom sort function\nlet grid = new Grid({\n    features : {\n        group       : {\n            field       : 'city',\n            groupSortFn : (a, b) => a.city.length < b.city.length ? -1 : 1\n        }\n    }\n});\n\n// can also be specified on the store\nlet grid = new Grid({\n    store : {\n        groupers : [\n            { field : 'city', ascending : false }\n        ]\n    }\n});\n\n// custom sorting function can also be specified on the store\nlet grid = new Grid({\n    store : {\n        groupers : [{\n            field : 'city',\n            fn : (recordA, recordB) => {\n                // apply custom logic, for example:\n                return recordA.city.length < recordB.city.length ? -1 : 1;\n            }\n        }]\n    }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Group.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "grouping"
      },
      "classType": "group",
      "externalExamples": [
        "Grid/feature/Group.js"
      ],
      "configs": [
        {
          "name": "field",
          "description": "<p>The name of the record field to group by.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "groupSortFn",
          "description": "<p>A function used to sort the groups</p>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "renderer",
          "description": "<p>A function which produces the HTML for a group header.\nThe function is called in the context of this Group feature object.\nDefault group renderer displays the <code>groupRowFor</code> and <code>count</code>.</p>",
          "type": "function",
          "scope": "inner",
          "properties": [
            {
              "name": "groupRowFor",
              "type": "String",
              "description": "<p>The value of the <code>field</code> for the group.</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The group record representing the group.</p>"
            },
            {
              "name": "record.meta",
              "type": "Object",
              "description": "<p>Meta data with additional info about the grouping.</p>",
              "isSubParam": true
            },
            {
              "name": "record.groupChildren",
              "type": "Array",
              "description": "<p>The group child records.</p>",
              "isSubParam": true
            },
            {
              "name": "count",
              "type": "Number",
              "description": "<p>Number of records in the group.</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column the renderer runs for.</p>"
            },
            {
              "name": "isFirstColumn",
              "type": "Boolean",
              "description": "<p>True, if <code>column</code> is the first column.\nIf <code>RowNumberColumn</code> is the real first column, it's not taken into account.</p>"
            },
            {
              "name": "groupColumn",
              "type": "Grid.column.Column",
              "description": "<p>The column under which the <code>field</code> is shown.</p>",
              "optional": true
            },
            {
              "name": "size",
              "type": "Object",
              "description": "<p>Sizing information for the group header row, only <code>height</code> is relevant.</p>"
            },
            {
              "name": "size.height",
              "type": "Number",
              "description": "<p>The height of the row, set this if you want a custom height for the group header row\nThat is UI part, so do not rely on its existence.</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "toggleCollapse",
          "description": "<p>Collapses or expands a group depending on its current state</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String"
              ],
              "description": "<p>Record or records id for a group row to collapse or expand</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Force collapse (true) or expand (true)</p>"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:togglegroup"
          ]
        },
        {
          "name": "internalToggleCollapse",
          "access": "internal",
          "description": "<p>Collapses or expands a group depending on its current state</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String"
              ],
              "description": "<p>Record or records id for a group row to collapse or expand</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Force collapse (true) or expand (true)</p>"
            },
            {
              "name": "skipRender",
              "type": "Boolean",
              "description": "<p>True to not render rows</p>",
              "default": false
            }
          ],
          "scope": "instance",
          "fires": [
            "event:togglegroup"
          ]
        },
        {
          "name": "collapseAll",
          "description": "<p>Collapse all groups. This function is exposed on Grid and can thus be called as <code>grid.collapseAll()</code></p>",
          "scope": "instance",
          "onOwner": true
        },
        {
          "name": "expandAll",
          "description": "<p>Expand all groups. This function is exposed on Grid and can thus be called as <code>grid.expandAll()</code></p>",
          "scope": "instance",
          "onOwner": true
        },
        {
          "name": "onBeforeRenderRow",
          "access": "private",
          "description": "<p>Called before rendering row contents, used to reset rows no longer used as group rows</p>",
          "scope": "instance"
        },
        {
          "name": "renderCell",
          "access": "private",
          "description": "<p>Called when a cell is rendered, styles the group rows first cell.</p>",
          "scope": "instance"
        },
        {
          "name": "renderHeader",
          "access": "private",
          "description": "<p>Called when an header is rendered, adds grouping icon if grouped by that column.</p>",
          "parameters": [
            {
              "name": "headerContainerElement"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "populateHeaderMenu",
          "access": "internal",
          "description": "<p>Supply items for headers context menu.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getColumnDragToolbarItems",
          "access": "private",
          "description": "<p>Supply items to ColumnDragToolbar</p>",
          "scope": "instance"
        },
        {
          "name": "onStoreGroup",
          "access": "private",
          "description": "<p>Called when store grouping changes. Reflects on header and rerenders rows.</p>",
          "scope": "instance"
        },
        {
          "name": "onElementTouchStart",
          "access": "private",
          "description": "<p>Store touches when user touches header, used in onElementTouchEnd.</p>",
          "scope": "instance"
        },
        {
          "name": "onElementClick",
          "access": "private",
          "description": "<p>React to click on headers (to group by that column if [alt] is pressed) and on group rows (expand/collapse).</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "onElementKeyDown",
          "access": "private",
          "description": "<p>Toggle groups with [space].</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "toggleGroup",
          "description": "<p>Group expanded or collapsed</p>",
          "parameters": [
            {
              "name": "groupRecord",
              "description": "<p>Group record</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Collapsed (true) or expanded (false)</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GroupSummary",
      "modulePath": "Grid/feature/GroupSummary",
      "classDescription": "<p>Displays a summary row as a group footer in a grouped grid. Uses same configuration options on columns as\n<a href=\"#Grid/feature/Summary\">Summary</a>.</p>\n<p>This feature is <strong>disabled</strong> by default.</p>\n<pre class=\"prettyprint source\"><code>features : {\n    group        : 'city',\n    groupSummary : true\n}\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GroupSummary.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "groupsummary"
      },
      "classType": "groupSummary",
      "externalExamples": [
        "Grid/feature/GroupSummary.js"
      ],
      "properties": [
        {
          "name": "collapseToHeader",
          "description": "<p>Set to <code>true</code> to have group summaries rendered in the group header when a group is collapsed.</p>\n<p>Only applies when <a href=\"#Grid/feature/GroupSummary#config-target\">target</a> is <code>'footer'</code> (the default).</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "target",
          "description": "<p>Where to render the group summaries to, either <code>header</code> to display them in the group header or <code>footer</code>\nto display them in the group footer (the default).</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "collapseToHeader",
          "description": "<p>Configure as <code>true</code> to have group summaries rendered in the group header when a group is collapsed.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   features : {\n       groupSummary : {\n           collapseToHeader : true\n       }\n   }\n});\n</code></pre>\n<p>Only applies when <a href=\"#Grid/feature/GroupSummary#config-target\">target</a> is <code>'footer'</code> (the default).</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "target",
          "description": "<p>Where to render the group summaries to, either <code>header</code> to display them in the group header or <code>footer</code>\nto display them in the group footer (the default).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   features : {\n       groupSummary : {\n           target : 'header'\n       }\n   }\n});\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "footer"
        }
      ],
      "functions": [
        {
          "name": "onBeforeRenderRow",
          "access": "private",
          "description": "<p>Called before rendering row contents, used to reset rows no longer used as group summary rows</p>",
          "scope": "instance"
        },
        {
          "name": "renderCell",
          "access": "private",
          "description": "<p>Called when a cell is rendered, styles the group rows first cell.</p>",
          "scope": "instance"
        },
        {
          "name": "onStoreUpdate",
          "access": "private",
          "description": "<p>Updates summaries on store changes (except record update, handled below)</p>",
          "scope": "instance"
        },
        {
          "name": "refresh",
          "description": "<p>Refreshes the summaries</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "HeaderMenu",
      "modulePath": "Grid/feature/HeaderMenu",
      "classDescription": "<p>Right click column header or focus it and press SPACE key to show the context menu for headers.</p>\n<h3>Default header menu items</h3>\n<p>The Header menu has no default items provided by the <code>HeaderMenu</code> feature, but there are other features\nthat populate the header menu with the following items:</p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Text</th>\n<th>Weight</th>\n<th>Feature</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>filter</code></td>\n<td>Filter</td>\n<td>100</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Shows the filter popup to add a filter</td>\n</tr>\n<tr>\n<td><code>editFilter</code></td>\n<td>Edit filter</td>\n<td>100</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Shows the filter popup to change/remove a filter</td>\n</tr>\n<tr>\n<td><code>removeFilter</code></td>\n<td>Remove filter</td>\n<td>110</td>\n<td><a href=\"#Grid/feature/Filter\">Filter</a></td>\n<td>Stops filtering by selected column field</td>\n</tr>\n<tr>\n<td><code>toggleFilterBar</code></td>\n<td>Hide filter bar / Show filter bar</td>\n<td>120</td>\n<td><a href=\"#Grid/feature/FilterBar\">FilterBar</a></td>\n<td>Toggles filter bar visibility</td>\n</tr>\n<tr>\n<td><code>columnPicker</code></td>\n<td>Columns</td>\n<td>200</td>\n<td><a href=\"#Grid/feature/ColumnPicker\">ColumnPicker</a></td>\n<td>Shows a submenu to control columns visibility</td>\n</tr>\n<tr>\n<td>&gt;column.id*</td>\n<td>column.text*</td>\n<td></td>\n<td><a href=\"#Grid/feature/ColumnPicker\">ColumnPicker</a></td>\n<td>Check item to hide/show corresponding column</td>\n</tr>\n<tr>\n<td><code>hideColumn</code></td>\n<td>Hide column</td>\n<td>210</td>\n<td><a href=\"#Grid/feature/ColumnPicker\">ColumnPicker</a></td>\n<td>Hides selected column</td>\n</tr>\n<tr>\n<td><code>movePrev  </code></td>\n<td>Move previous</td>\n<td>220</td>\n<td><a href=\"#Grid/feature/HeaderMenu\">HeaderMenu</a></td>\n<td>Moves selected column before its previous sibling</td>\n</tr>\n<tr>\n<td><code>moveNext</code></td>\n<td>Move next</td>\n<td>230</td>\n<td><a href=\"#Grid/feature/HeaderMenu\">HeaderMenu</a></td>\n<td>Moves selected column after its next sibling</td>\n</tr>\n<tr>\n<td><code>sortAsc</code></td>\n<td>Sort ascending</td>\n<td>300</td>\n<td><a href=\"#Grid/feature/Sort\">Sort</a></td>\n<td>Sort by the column field in ascending order</td>\n</tr>\n<tr>\n<td><code>sortDesc</code></td>\n<td>Sort descending</td>\n<td>310</td>\n<td><a href=\"#Grid/feature/Sort\">Sort</a></td>\n<td>Sort by the column field in descending order</td>\n</tr>\n<tr>\n<td><code>multiSort</code></td>\n<td>Multi sort</td>\n<td>320</td>\n<td><a href=\"#Grid/feature/Sort\">Sort</a></td>\n<td>Shows a submenu to control multi-sorting</td>\n</tr>\n<tr>\n<td>&gt;<code>addSortAsc</code></td>\n<td>Add ascending sorting</td>\n<td>330</td>\n<td><a href=\"#Grid/feature/Sort\">Sort</a></td>\n<td>Adds ascending sorter using the column field</td>\n</tr>\n<tr>\n<td>&gt;<code>addSortDesc</code></td>\n<td>Add descending sorting</td>\n<td>340</td>\n<td><a href=\"#Grid/feature/Sort\">Sort</a></td>\n<td>Adds descending sorter using the column field</td>\n</tr>\n<tr>\n<td>&gt;<code>removeSorter</code></td>\n<td>Remove sorter</td>\n<td>350</td>\n<td><a href=\"#Grid/feature/Sort\">Sort</a></td>\n<td>Stops sorting by selected column field</td>\n</tr>\n<tr>\n<td><code>groupAsc</code></td>\n<td>Group ascending</td>\n<td>400</td>\n<td><a href=\"#Grid/feature/Group\">Group</a></td>\n<td>Group by the column field in ascending order</td>\n</tr>\n<tr>\n<td><code>groupDesc</code></td>\n<td>Group descending</td>\n<td>410</td>\n<td><a href=\"#Grid/feature/Group\">Group</a></td>\n<td>Group by the column field in descending order</td>\n</tr>\n<tr>\n<td><code>groupRemove</code></td>\n<td>Stop grouping</td>\n<td>420</td>\n<td><a href=\"#Grid/feature/Group\">Group</a></td>\n<td>Stops grouping</td>\n</tr>\n<tr>\n<td><code>mergeCells</code></td>\n<td>Merge cells</td>\n<td>500</td>\n<td><a href=\"#Grid/feature/MergeCells\">MergeCells</a></td>\n<td>Merge cells with same value in a sorted column</td>\n</tr>\n</tbody>\n</table>\n<p>* - items that are generated dynamically</p>\n<p>&gt; - first level of submenu</p>\n<h3>Customizing the menu items</h3>\n<p>The menu items in the Header menu can be customized, existing items can be changed or removed,\nand new items can be added. This is handled using the <code>items</code> config of the feature.</p>\n<p>Add extra items for all columns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  features : {\n    headerMenu : {\n      items : {\n        extraItem : { text: 'My header item', icon: 'fa fa-car', weight: 200, onItem : () => ... }\n      }\n    }\n  }\n});\n</code></pre>\n<p>It is also possible to add items using columns config. See examples below.</p>\n<p>Add extra items for a single column:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  columns: [\n    {\n      field: 'name',\n      text: 'Name',\n      headerMenuItems: {\n        columnItem : { text: 'My unique header item', icon: 'fa fa-flask', onItem : () => ... }\n      }\n    }\n  ]\n});\n</code></pre>\n<p>Remove built in item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  features : {\n    headerMenu : {\n      items : {\n         // Hide 'Stop grouping'\n         groupRemove : false\n      }\n    }\n  }\n});\n</code></pre>\n<p>Customize built in item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  features : {\n    headerMenu : {\n      items : {\n         hideColumn : {\n             text : 'Bye bye column'\n         }\n      }\n    }\n  }\n});\n</code></pre>\n<p>Remove nested menu item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        headerMenu : {\n            items : {\n                multiSort : {\n                    menu : { removeSorter : false }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>It is also possible to manipulate the default items and add new items in the processing function:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n  features : {\n    headerMenu : {\n      processItems({items, record}) {\n          if (record.cost > 5000) {\n             items.myItem = { text : 'Split cost' };\n          }\n      }\n    }\n  }\n});\n</code></pre>\n<p>Full information of the menu customization can be found in the &quot;Customizing the Cell menu and the Header menu&quot; guide.</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/feature/base/ContextMenuBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "HeaderMenu.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "contextmenu"
      },
      "classType": "headerMenu",
      "externalExamples": [
        "Grid/feature/HeaderMenu.js"
      ],
      "configs": [
        {
          "name": "items",
          "description": "<p>This is a preconfigured set of items used to create the default context menu.</p>\n<p>The <code>items</code> provided by this feature are listed in the intro section of this class. You can\nconfigure existing items by passing a configuration object to the keyed items.</p>\n<p>To remove existing\nitems, set corresponding keys to <code>false</code></p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        headerMenu : {\n            items : {\n                filter        : false,\n                columnPicker  : false\n            }\n        }\n    }\n});\n</code></pre>\n<p>See the feature config in the above example for details.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "moveColumns",
          "description": "<p>Configure as <code>true</code> to show two extra menu options to move the selected column to either\nbefore its previous sibling, or after its next sibling.</p>\n<p>This is a keyboard-accessible version of drag/drop column reordering.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Accessibility"
        },
        {
          "name": "processItems",
          "description": "<p>A function called before displaying the menu that allows manipulations of its items.\nReturning <code>false</code> from this function prevents the menu being shown.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>  features         : {\n      headerMenu : {\n          processItems({ column, items }) {\n              // Add or hide existing items here as needed\n              items.myAction = {\n                  text   : 'Cool action',\n                  icon   : 'b-fa b-fa-fw b-fa-ban',\n                  onItem : () => console.log('Some coolness'),\n                  weight : 300 // Move to end\n              };\n\n              // Hide column picker\n              items.columnPicker.hidden = true;\n          }\n      }\n  },\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>An object with information about the menu being shown</p>"
            },
            {
              "name": "context.column",
              "type": "Grid.column.Column",
              "description": "<p>The current column</p>",
              "isSubParam": true
            },
            {
              "name": "context.items",
              "type": "Object",
              "description": "<p>An object containing the <a href=\"#Core/widget/MenuItem\">menu item</a> configs keyed by their id</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The DOM event object that triggered the show</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "events": [
        {
          "name": "headerMenuBeforeShow",
          "description": "<p>This event fires on the owning Grid before the context menu is shown for a header.\nAllows manipulation of the items to show in the same way as in the <a href=\"#Grid/feature/HeaderMenu#config-processItems\">processItems</a>.</p>\n<p>Returning <code>false</code> from a listener prevents the menu from being shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "headerMenuShow",
          "description": "<p>This event fires on the owning Grid after the context menu is shown for a header</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "headerMenuItem",
          "description": "<p>This event fires on the owning Grid when an item is selected in the header context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>Selected menu item</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "headerMenuToggleItem",
          "description": "<p>This event fires on the owning Grid when a check item is toggled in the header context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The grid</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "item",
              "type": "Core.widget.MenuItem",
              "description": "<p>Selected menu item</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column</p>"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "<p>Checked or not</p>"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "MergeCells",
      "modulePath": "Grid/feature/MergeCells",
      "classDescription": "<p>This feature merges cells that have the same value in sorted columns configured to\n<a href=\"#Grid/column/Column#config-mergeCells\">mergeCells</a>. The content of merged cells is sticky, staying in view until the cell\nis scrolled fully out of view.</p>\n<p>Try scrolling in the demo below. Also try sorting by the other columns (&quot;City&quot; and &quot;Favorite food&quot; are configured\nto merge cells):</p>\n<p><div class=\"external-example \" data-file=\"Grid/feature/MergeCells.js\"></div></p>\n<p>This feature is <strong>disabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "MergeCells.js",
      "path": "/Calendar/lib/Grid/feature",
      "classType": "mergeCells",
      "configs": [
        {
          "name": "passthrough",
          "description": "<p>By default merged cells allow pointer events to pass through to the underlying row/cell, to allow selecting a\nrow and editing an individual cell even when they are merged. Configure as <code>false</code> to allow merged cells to\ncatch and react to the pointer events instead.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        mergeCells : {\n            // Let merged cells react to pointer events\n            passthrough : false\n        }\n    }\n});\n</code></pre>",
          "type": "Boolean",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "QuickFind",
      "modulePath": "Grid/feature/QuickFind",
      "classDescription": "<p>Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the\nkeyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.</p>\n<p>This feature is <strong>disabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "// enable QuickFind\nlet grid = new Grid({\n  features: {\n    quickFind: true\n  }\n});\n\n// navigate to next hit programmatically\ngrid.features.quickFind.gotoNextHit();"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "QuickFind.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "quickfind"
      },
      "classType": "quickFind",
      "externalExamples": [
        "Grid/feature/QuickFind.js"
      ],
      "functions": [
        {
          "name": "showQuickFind",
          "access": "private",
          "description": "<p>Shows a &quot;searchfield&quot; in the header. Triggered automatically when you have a cell focused and start typing.</p>",
          "scope": "instance"
        },
        {
          "name": "hideQuickFind",
          "access": "private",
          "description": "<p>Hide the &quot;searchfield&quot; and remove highlighted hits. Called automatically when pressing [esc] or backspacing away\nthe keywords.</p>",
          "scope": "instance"
        },
        {
          "name": "search",
          "description": "<p>Performs a search and highlights hits. If find is empty, QuickFind is closed.</p>",
          "parameters": [
            {
              "name": "find",
              "type": "String",
              "description": "<p>Text to search for</p>"
            },
            {
              "name": "columnFieldOrId",
              "type": "String",
              "description": "<p>Column to search</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clear",
          "description": "<p>Clears and closes QuickFind.</p>",
          "scope": "instance"
        },
        {
          "name": "gotoHit",
          "description": "<p>Go to specified hit.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "gotoFirstHit",
          "description": "<p>Go to the first hit.</p>",
          "scope": "instance"
        },
        {
          "name": "gotoLastHit",
          "description": "<p>Go to the last hit.</p>",
          "scope": "instance"
        },
        {
          "name": "gotoNextHit",
          "description": "<p>Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].</p>",
          "scope": "instance"
        },
        {
          "name": "gotoPrevHit",
          "description": "<p>Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].</p>",
          "scope": "instance"
        },
        {
          "name": "renderCell",
          "access": "private",
          "description": "<p>Called from SubGrid when a cell is rendered.</p>",
          "scope": "instance"
        },
        {
          "name": "onElementKeyDown",
          "access": "private",
          "description": "<p>Chained function called on grids keydown event. Handles backspace, escape, f3 and ctrl/cmd + g keys.</p>",
          "parameters": [
            {
              "name": "event",
              "description": "<p>KeyboardEvent</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementKeyPress",
          "access": "private",
          "description": "<p>Chained function called on grids keypress event. Handles input for &quot;searchfield&quot;.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        }
      ],
      "properties": [
        {
          "name": "foundCount",
          "description": "<p>Number of results found</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "found",
          "description": "<p>Found results (as returned by Store#findByField), an array in format { index: x, data: record }</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "readonly": true
        }
      ]
    },
    {
      "name": "RegionResize",
      "modulePath": "Grid/feature/RegionResize",
      "classDescription": "<p>Makes the splitter between grid section draggable so you can resize grid sections.</p>\n<p>This feature is <strong>disabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "// enable RegionResize\nlet grid = new Grid({\n  features: {\n    regionResize: true\n  }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RegionResize.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "features"
      },
      "classType": "regionResize",
      "externalExamples": [
        "Grid/feature/RegionResize.js"
      ],
      "functions": [
        {
          "name": "startMove",
          "access": "private",
          "description": "<p>Begin moving splitter.</p>",
          "parameters": [
            {
              "name": "splitterElement",
              "description": "<p>Splitter element</p>"
            },
            {
              "name": "clientX",
              "description": "<p>Initial x position from which new width will be calculated on move</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "endMove",
          "access": "private",
          "description": "<p>Stop moving splitter.</p>",
          "scope": "instance"
        },
        {
          "name": "updateMove",
          "access": "private",
          "description": "<p>Update splitter position.</p>",
          "parameters": [
            {
              "name": "newClientX"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementTouchStart",
          "access": "private",
          "description": "<p>Start moving splitter on touch start.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementTouchMove",
          "access": "private",
          "description": "<p>Move splitter on touch move.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementTouchEnd",
          "access": "private",
          "description": "<p>Stop moving splitter on touch end.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementMouseDown",
          "access": "private",
          "description": "<p>Start moving splitter on mouse down (on splitter).</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementMouseMove",
          "access": "private",
          "description": "<p>Move splitter on mouse move.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementMouseUp",
          "access": "private",
          "description": "<p>Stop moving splitter on mouse up.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "toggleTouchSplitter",
          "access": "private",
          "description": "<p>Adds b-touching CSS class to splitterElements when touched. Removes when touched outside.</p>",
          "parameters": [
            {
              "name": "splitterElement"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RowCopyPaste",
      "modulePath": "Grid/feature/RowCopyPaste",
      "classDescription": "<p>Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows. You can configure how a newly pasted record\nis named using <a href=\"#Grid/feature/RowCopyPaste#function-generateNewName\">generateNewName</a></p>\n<p>This feature is <strong>enabled</strong> by default</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        rowCopyPaste : true\n    }\n});\n</code></pre>\n<h2>Keyboard shortcuts</h2>\n<p>By default, this feature will react to Ctrl+C, Ctrl+X and Ctrl+V for standard clipboard actions.\nYou can reconfigure the keys used to trigger these actions, see <a href=\"#Grid/feature/RowCopyPaste#config-keyMap\">keyMap</a> for more details.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "RowCopyPaste.js",
      "path": "/Calendar/lib/Grid/feature",
      "externalExamples": [
        "Grid/feature/RowCopyPaste.js"
      ],
      "classType": "rowCopyPaste",
      "configs": [
        {
          "name": "nameField",
          "description": "<p>The field to use as the name field when updating the name of copied records</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "name"
        },
        {
          "name": "keyMap",
          "description": "<p>The feature has the following default key mappings during editing:</p>\n<table>\n<thead>\n<tr>\n<th>Keys</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+C</td>\n<td>copy</td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>cut</td>\n</tr>\n<tr>\n<td>Ctrl+V</td>\n<td>paste</td>\n</tr>\n</tbody>\n</table>\n<p>You can supply your own key map if you want to change any mapping, or set it to <code>null</code> to disable all keyboard\nshortcuts.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n   features : {\n       rowCopyPaste : {\n           keyMap : {\n               // disable cut via keyboard\n               'Ctrl-X' : null\n           }\n       }\n   }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "copyRows",
          "description": "<p>Copy or cut rows to clipboard to paste later</p>",
          "parameters": [
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p>Copies by default, pass <code>true</code> to cut</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeCopy"
          ],
          "category": "Common",
          "onOwner": true
        },
        {
          "name": "pasteRows",
          "description": "<p>Paste rows above selected or passed record</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Paste above this record, or currently selected record if left out</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforePaste"
          ],
          "category": "Common",
          "onOwner": true
        },
        {
          "name": "generateNewName",
          "description": "<p>A method used to generate the name for a copy-pasted record. By defaults appends &quot;- 2&quot;, &quot;- 3&quot; as a suffix. Override\nit to provide your own naming of pasted records.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The new record being pasted</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "sortByIndex",
          "access": "private",
          "description": "<p>Sort array of records ASC by its indexes stored in indexPath</p>",
          "parameters": [
            {
              "name": "array",
              "type": "Array.<Core.data.Model>",
              "description": "<p>array to sort</p>"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "beforeCopy",
          "description": "<p>Fires on the owning Grid before a copy action is performed, return <code>false</code> to prevent the action</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owner grid</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The records about to be copied</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "copy",
          "description": "<p>Fires on the owning Grid after a copy action is performed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owner grid</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The records that were copied</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforePaste",
          "description": "<p>Fires on the owning Grid before a paste action is performed, return <code>false</code> to prevent the action</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owner grid</p>"
            },
            {
              "name": "referenceRecord",
              "type": "Core.data.Model",
              "description": "<p>The reference record, the clipboard event records will\nbe pasted above this record</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The records about to be pasted</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "paste",
          "description": "<p>Fires on the owning Grid after a paste action is performed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owner grid</p>"
            },
            {
              "name": "referenceRecord",
              "type": "Core.data.Model",
              "description": "<p>The reference record, above which the records were pasted</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Pasted records</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "RowReorder",
      "modulePath": "Grid/feature/RowReorder",
      "classDescription": "<p>Allows user to reorder rows by dragging them. To get notified about row reorder listen to <code>change</code> event\non the grid <a href=\"#Core/data/Store\">store</a>.</p>\n<p>This feature is <strong>off</strong> by default. For info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.\nThis feature is <strong>enabled</strong> by default for Gantt.</p>\n<p><div class=\"external-example \" data-file=\"Grid/feature/RowReorder.js\"></div></p>\n<p>If the grid is set to <a href=\"#Grid/view/Grid#config-readOnly\">readOnly</a>, reordering is disabled. Inside all event listeners you\nhave access a <code>context</code> object which has a <code>record</code> property (the dragged record).</p>\n<h2>Validation</h2>\n<p>You can validate the drag drop flow by listening to the <code>gridrowdrag</code> event. Inside this listener you have access to\nthe <code>index</code> property which is the target drop position. For trees you get access to the <code>parent</code> record and <code>index</code>,\nwhere index means the child index inside the parent.</p>\n<p>You can also have an async finalization step using the <a href=\"#Grid/feature/RowReorder#event-gridRowBeforeDropFinalize\">gridRowBeforeDropFinalize</a>, for showing a\nconfirmation dialog or making a network request to decide if drag operation is valid (see code snippet below)</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    rowReorder : {\n        listeners : {\n            gridRowDrag : ({ context }) => {\n               // Here you have access to context.insertBefore, and additionally context.parent for trees\n            },\n\n            gridRowBeforeDropFinalize : async ({ context }) => {\n               const result = await MessageDialog.confirm({\n                   title   : 'Please confirm',\n                   message : 'Did you want the row here?'\n               });\n\n               // true to accept the drop or false to reject\n               return result === MessageDialog.yesButton;\n            }\n        }\n    }\n}\n</code></pre>\n<p>Note, that this feature uses the concept of &quot;insert before&quot; when choosing a drop point in the data. So the dropped\nrecord's position is <em>before the visual next record's position</em>.</p>\n<p>This may look like a pointless distinction, but consider the case when a Store is filtered. The record <em>above</em> the\ndrop point may have several filtered out records below it. When unfiltered, the dropped record will be <em>below</em> these\nbecause of the &quot;insert before&quot; behaviour.</p>\n<h2>Behavior with multiple subgrids</h2>\n<p>For grids with multiple subgrids, row reordering is only enabled for the first subgrid.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "RowReorder.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "rowreordering"
      },
      "classType": "rowReorder",
      "events": [
        {
          "name": "gridRowBeforeDragStart",
          "description": "<p>Fired before dragging starts, return false to prevent the drag operation.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The dragged row records</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ]
            }
          ],
          "preventable": true
        },
        {
          "name": "gridRowDragStart",
          "description": "<p>Fired when dragging starts.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The dragged row records</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": [
                "MouseEvent",
                "TouchEvent"
              ]
            }
          ]
        },
        {
          "name": "gridRowDrag",
          "description": "<p>Fired while the row is being dragged, in the listener function you have access to <code>context.insertBefore</code> a grid /\ntree record, and additionally <code>context.parent</code> (a TreeNode) for trees. You can signal that the drop position is\nvalid or invalid by setting <code>context.valid = false;</code></p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.valid",
              "type": "Boolean",
              "description": "<p>Set this to true or false to indicate whether the drop position is valid.</p>",
              "isSubParam": true
            },
            {
              "name": "context.insertBefore",
              "type": "Core.data.Model",
              "description": "<p>The record to insert before (<code>null</code> if inserting at last position of a parent node)</p>",
              "isSubParam": true
            },
            {
              "name": "context.parent",
              "type": "Core.data.Model",
              "description": "<p>The parent record of the current drop position (only applicable for trees)</p>",
              "isSubParam": true
            },
            {
              "name": "context.records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The dragged row records</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ]
        },
        {
          "name": "gridRowBeforeDropFinalize",
          "description": "<p>Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\nPromise yielding <code>true</code> / <code>false</code> which allows for asynchronous abort (e.g. first show user a confirmation dialog).</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.valid",
              "type": "Boolean",
              "description": "<p>Set this to true or false to indicate whether the drop position is valid</p>",
              "isSubParam": true
            },
            {
              "name": "context.insertBefore",
              "type": "Core.data.Model",
              "description": "<p>The record to insert before (<code>null</code> if inserting at last position of a parent node)</p>",
              "isSubParam": true
            },
            {
              "name": "context.parent",
              "type": "Core.data.Model",
              "description": "<p>The parent record of the current drop position (only applicable for trees)</p>",
              "isSubParam": true
            },
            {
              "name": "context.records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The dragged row records</p>",
              "isSubParam": true
            },
            {
              "name": "context.oldPositionContext",
              "type": "Array.<Object>",
              "description": "<p>An array of objects with information about the previous tree position.\nObjects contain the record, and its original <code>parentIndex</code> and <code>parentId</code> values</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "preventable": true,
          "async": true
        },
        {
          "name": "gridRowDrop",
          "description": "<p>Fired after the row drop operation has completed, regardless of validity</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.valid",
              "type": "Boolean",
              "description": "<p>true or false depending on whether the drop position was valid</p>",
              "isSubParam": true
            },
            {
              "name": "context.insertBefore",
              "type": "Core.data.Model",
              "description": "<p>The record to insert before (<code>null</code> if inserting at last position of a parent node)</p>",
              "isSubParam": true
            },
            {
              "name": "context.parent",
              "type": "Core.data.Model",
              "description": "<p>The parent record of the current drop position (only applicable for trees)</p>",
              "isSubParam": true
            },
            {
              "name": "context.record",
              "type": "Core.data.Model",
              "description": "<p>[DEPRECATED] The dragged row record</p>",
              "isSubParam": true
            },
            {
              "name": "context.records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>The dragged row records</p>",
              "isSubParam": true
            },
            {
              "name": "context.oldPositionContext",
              "type": "Array.<Object>",
              "description": "<p>An array of objects with information about the previous tree position.\nObjects contain the record, and its original <code>parentIndex</code> and <code>parentId</code> values</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ]
        },
        {
          "name": "gridRowAbort",
          "description": "<p>Fired when a row drag operation is aborted</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.helper.DragHelper"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "showGrip",
          "description": "<p>Set to <code>true</code> to show a grip icon in the left side of each row.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "hoverExpandTimeout",
          "description": "<p>If hovering over a parent node for this period of a time in a tree, the node will expand</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "touchStartDelay",
          "description": "<p>The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 300
        }
      ],
      "functions": [
        {
          "name": "init",
          "access": "private",
          "description": "<p>Initialize drag &amp; drop (called from render)</p>",
          "scope": "instance"
        },
        {
          "name": "onDrop",
          "access": "private",
          "description": "<p>Handle drop</p>",
          "scope": "instance",
          "async": true
        },
        {
          "name": "onReset",
          "access": "private",
          "description": "<p>Clean up on reset</p>",
          "scope": "instance"
        },
        {
          "name": "onPaint",
          "access": "private",
          "description": "<p>Updates DragHelper with updated headers when grid contents is rerendered</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Search",
      "modulePath": "Grid/feature/Search",
      "classDescription": "<p>Feature that allows the user to search the entire grid. Navigate between hits using the\nkeyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.</p>\n<p>Note that this feature does not include a UI, please build your own and call appropriate methods in the feature. For\na demo implementation, see\n<a href=\"../examples/search\" target=\"_blank\">Search example</a>.</p>\n<p>This feature is <strong>disabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "// enable Search\nlet grid = new Grid({\n  features: {\n    search: true\n  }\n});\n\n// perform search\ngrid.features.search.search('steve');"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Search.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "search"
      },
      "classType": "search",
      "externalExamples": [
        "Grid/feature/Search.js"
      ],
      "configs": [
        {
          "name": "limit",
          "description": "<p>The maximum amount of search hits</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1000
        }
      ],
      "functions": [
        {
          "name": "search",
          "description": "<p>Performs a search and highlights hits.</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>Text to search for</p>"
            },
            {
              "name": "gotoHit",
              "type": "Boolean",
              "description": "<p>Go to first hit after search</p>",
              "default": true
            },
            {
              "name": "reapply",
              "type": "Boolean",
              "description": "<p>Pass true to force search</p>",
              "default": false
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clear",
          "description": "<p>Clears search results.</p>",
          "scope": "instance"
        },
        {
          "name": "gotoNextHit",
          "description": "<p>Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].</p>",
          "scope": "instance"
        },
        {
          "name": "gotoPrevHit",
          "description": "<p>Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].</p>",
          "scope": "instance"
        },
        {
          "name": "gotoHit",
          "description": "<p>Go to specified hit.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "gotoFirstHit",
          "description": "<p>Go to the first hit.</p>",
          "scope": "instance"
        },
        {
          "name": "gotoLastHit",
          "description": "<p>Go to the last hit.</p>",
          "scope": "instance"
        },
        {
          "name": "renderCell",
          "access": "private",
          "description": "<p>Called from SubGrid when a cell is rendered. Highlights search hits.</p>",
          "scope": "instance"
        },
        {
          "name": "populateCellMenu",
          "access": "internal",
          "description": "<p>Add search menu item to cell context menu.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.record",
              "type": "Core.data.Model",
              "description": "<p>Record for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementKeyDown",
          "access": "private",
          "description": "<p>Chained function called on grids keydown event. Handles backspace, escape, f3 and ctrl/cmd + g keys.</p>",
          "parameters": [
            {
              "name": "event",
              "description": "<p>KeyboardEvent</p>"
            }
          ],
          "scope": "instance"
        }
      ],
      "properties": [
        {
          "name": "foundCount",
          "description": "<p>Number of results found</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isHitFocused",
          "description": "<p>Returns true if focused row is a hit</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "Sort",
      "modulePath": "Grid/feature/Sort",
      "classDescription": "<p>Allows sorting of grid by clicking (or tapping) headers, also displays which columns grid is sorted by (numbered if\nusing multisort). Use modifier keys for multisorting: ctrl + click to add sorter, ctrl + alt + click to remove sorter.\nThe actual sorting is done by the store, see <a href=\"#Core/data/mixin/StoreSort#function-sort\">Store#sort()</a>.</p>\n<p><div class=\"external-example \" data-file=\"Grid/feature/Sort.js\"></div></p>\n<pre class=\"prettyprint source lang-javascript\"><code>// sorting feature is enabled, no default value though\nconst grid = new Grid({\n    features : {\n        sort : true\n    }\n});\n\n// use initial sorting\nconst grid = new Grid({\n    features : {\n        sort : 'name'\n    }\n});\n\n// can also be specified on the store\nconst grid = new Grid({\n    store : {\n        sorters : [\n            { field : 'name', ascending : false }\n        ]\n    }\n});\n\n// custom sorting function can also be specified on the store\nconst grid = new Grid({\n    store : {\n        sorters : [{\n            fn : (recordA, recordB) => {\n                // apply custom logic, for example:\n                return recordA.name.length &lt; recordB.name.length ? -1 : 1;\n            }\n        }]\n    }\n});\n</code></pre>\n<p>For info on programmatically handling sorting, see <a href=\"#Core/data/mixin/StoreSort\">StoreSort</a>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({ });\n// Programmatic sorting of the store, Grids rows and UI will be updated\ngrid.store.sort('age');\n</code></pre>\n<p>Grid columns can define custom sorting functions (see <a href=\"#Grid/column/Column#config-sortable\">Column#sortable</a>).\nIf this feature is configured with <code>prioritizeColumns: true</code>, those functions will also be used when sorting\nprogrammatically:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : [\n        {\n            field : 'age',\n            text : 'Age',\n            sortable(lhs, rhs) {\n              // Custom sorting, see Array#sort\n            }\n        }\n    ],\n\n    features : {\n        sort : {\n            prioritizeColumns : true\n        }\n    }\n});\n\n// Sortable fn will also be used when sorting programmatically\ngrid.store.sort('age');\n</code></pre>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Sort.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "sorting"
      },
      "classType": "sort",
      "configs": [
        {
          "name": "multiSort",
          "description": "<p>Enable multi sort</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "prioritizeColumns",
          "description": "<p>Use custom sorting functions defined on columns also when programmatically sorting by the columns field.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : [\n        {\n            field : 'age',\n            text : 'Age',\n            sortable(lhs, rhs) {\n              // Custom sorting, see Array#sort\n            }\n        }\n    ],\n\n    features : {\n        sort : {\n            prioritizeColumns : true\n        }\n    }\n});\n\ngrid.store.sort('age');\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "functions": [
        {
          "name": "syncHeaderSortState",
          "access": "private",
          "description": "<p>Update headers to match stores sorters (displays sort icon in correct direction on them)</p>",
          "scope": "instance"
        },
        {
          "name": "populateHeaderMenu",
          "access": "internal",
          "description": "<p>Adds sort menu items to header context menu.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getColumnDragToolbarItems",
          "access": "private",
          "description": "<p>Supply items to ColumnDragToolbar</p>",
          "scope": "instance"
        },
        {
          "name": "onElementClick",
          "access": "private",
          "description": "<p>Clicked on header, sort Store.</p>",
          "scope": "instance"
        },
        {
          "name": "renderHeader",
          "access": "private",
          "description": "<p>Called when grid headers are rendered, make headers match current sorters.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "StickyCells",
      "modulePath": "Grid/feature/StickyCells",
      "classDescription": "<p>A feature which pins configurable content from a grid row to the top of the grid\nwhile the row scrolls off the top but is still visible.</p>\n<p>As soon as the row becomes too small to contain the content, it is unpinned, and\nscrolls out naturally, and the following row's configured content becomes pinned.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    new Grid({\n        features : {\n            stickyCells : {\n                // Identifies elements to clone and pin to the grid top.\n                contentSelector : '.myClassName'\n            }\n        }\n    });\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StickyCells.js",
      "path": "/Calendar/lib/Grid/feature",
      "classType": "stickyCells",
      "configs": [
        {
          "name": "contentSelector",
          "description": "<p>A CSS selector which must identify the content within your grid row which you\nrequire to be pinned to the grid while the row if the topmost row, and remains visible.</p>",
          "type": "String",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "Stripe",
      "modulePath": "Grid/feature/Stripe",
      "classDescription": "<p>Stripes rows by adding alternating CSS classes to all row elements (<code>b-even</code> and <code>b-odd</code>).</p>\n<p>This feature is <strong>disabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "let grid = new Grid({\n  features: {\n    stripe: true\n  }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Stripe.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "columns"
      },
      "classType": "stripe",
      "externalExamples": [
        "Grid/feature/Stripe.js"
      ],
      "functions": [
        {
          "name": "onRenderRow",
          "access": "private",
          "description": "<p>Applies even/odd CSS when row is rendered</p>",
          "parameters": [
            {
              "name": "rowModel",
              "type": "Grid.row.Row"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Summary",
      "modulePath": "Grid/feature/Summary",
      "classDescription": "<p>Displays a summary row in the grid footer. Specify type of summary on columns, available types are:</p>\n<dl class=\"wide\">\n<dt>sum <dd>Sum of all values in the column\n<dt>add <dd>Alias for sum\n<dt>count <dd>Number of rows\n<dt>countNotEmpty <dd>Number of rows containing a value\n<dt>average <dd>Average of all values in the column\n<dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n</dl>\nColumns can also specify a summaryRenderer to format the calculated sum.\n<p>This feature is <strong>disabled</strong> by default.</p>\n<pre class=\"prettyprint source\"><code>{ text : 'Score', data : 'score', width : 80, sum : true }\n{ text : 'Rank', data : 'rank', width : 80, sum : 'average', summaryRenderer: ({ sum }) => return 'Average rank ' + sum }\n</code></pre>\n<p>Also it is possible to set up multiple summaries as array of summary configs:</p>\n<pre class=\"prettyprint source\"><code>{ text : 'Rank', data : 'rank', summaries : [{ sum : 'average', label : 'Average' }, { sum : 'count', label : 'Count' }] }\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Summary.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "features"
      },
      "classType": "summary",
      "externalExamples": [
        "Grid/feature/Summary.js"
      ],
      "configs": [
        {
          "name": "selectedOnly",
          "description": "<p>Set to <code>true</code> to sum values of selected row records</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "updateSummaries",
          "access": "private",
          "description": "<p>Updates summaries. Summaries are displayed as tables in footer (styling left out to keep brief):</p>\n<pre class=\"prettyprint source\"><code>&lt;table>\n    &lt;tr>&lt;td colspan=&quot;2&quot;>0&lt;/td>&lt;/tr> // { sum : 'min' } Only a calculation, span entire table\n    &lt;tr>&lt;td>Max&lt;/td>&lt;td>10&lt;/td>&lt;/tr> // { sum : 'max', label: 'Max' } Label + calculation\n    &lt;tr>&lt;td>Max&lt;/td>&lt;td>10&lt;/td>&lt;/tr> // { sum : 'sum', label: 'Max' } Label + calculation\n&lt;/table>\n</code></pre>",
          "scope": "instance"
        },
        {
          "name": "onStoreChange",
          "access": "private",
          "description": "<p>Updates summaries on store changes (except record update, handled below)</p>",
          "scope": "instance"
        },
        {
          "name": "refresh",
          "description": "<p>Refreshes the summaries</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Tree",
      "modulePath": "Grid/feature/Tree",
      "classDescription": "<p>Feature that makes the grid work more like a tree. Included by default in <a href=\"#Grid/view/TreeGrid\">TreeGrid</a>. Requires\nexactly one <a href=\"#Grid/column/TreeColumn\">TreeColumn</a> among grids columns. That column will have its renderer replaced with a\ntree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\nalso called.</p>\n<p>This feature is <strong>disabled</strong> by default. When enabled, the feature cannot be disabled during runtime.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Tree.js",
      "path": "/Calendar/lib/Grid/feature",
      "demo": {
        "product": "grid",
        "demo": "tree"
      },
      "classType": "tree",
      "externalExamples": [
        "Grid/feature/Tree.js"
      ],
      "configs": [
        {
          "name": "expandOnCellClick",
          "description": "<p>Expand parent nodes when clicking on their cell</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "functions": [
        {
          "name": "toggleCollapse",
          "description": "<p>Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.</p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to toggle</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Force collapse (true) or expand (false)</p>",
              "optional": true
            },
            {
              "name": "skipRefresh",
              "type": "Boolean",
              "description": "<p>Set to true to not refresh rows (if calling in batch)</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "collapse",
          "description": "<p>Collapse a single node. This function is exposed on Grid and can thus be called as <code>grid.collapse()</code></p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to collapse</p>"
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expand",
          "description": "<p>Expand a single node. This function is exposed on Grid and can thus be called as <code>grid.expand()</code></p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to expand</p>"
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expandOrCollapseAll",
          "description": "<p>Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)</p>",
          "parameters": [
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Set to true to collapse, false to expand (defaults to true)</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "topNode",
              "type": "Core.data.Model",
              "description": "<p>The topmost node from which to cascade a collapse.\nDefaults to the <a href=\"#Core/data/Store#property-rootNode\">rootNode</a>. Not included in the cascade if\nthe root node is being used.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "collapseAll",
          "description": "<p>Collapse all nodes. This function is exposed on Grid and can thus be called as <code>grid.collapseAll()</code></p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expandAll",
          "description": "<p>Expand all nodes. This function is exposed on Grid and can thus be called as <code>grid.expandAll()</code></p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expandTo",
          "description": "<p>Expands parent nodes to make this node &quot;visible&quot;. This function is exposed on Grid and can thus be called as\n<code>grid.expandTo()</code></p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node</p>"
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "onElementClick",
          "access": "private",
          "description": "<p>Called when user clicks somewhere in the grid. Expand/collapse node on icon click.</p>",
          "scope": "instance"
        },
        {
          "name": "onElementKeyDown",
          "access": "private",
          "description": "<p>Called on key down in grid. Expand/collapse node on [space]</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TreeGroup",
      "modulePath": "Grid/feature/TreeGroup",
      "classDescription": "<p>A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\nrecord field per parent level. Parents are generated based on each leaf's value for those fields.</p>\n<p><div class=\"external-example \" data-file=\"Grid/feature/TreeGroup.js\"></div></p>\n<p>This feature can be used to mimic multi grouping or to generate another view for hierarchical data. The original data\nis kept in memory and can be easily restored.</p>\n<div class=\"note\">\nPlease note that this feature requires using a <a href=\"#Grid/view/TreeGrid\">TreeGrid</a> or having the <a href=\"#Grid/feature/Tree\">Tree</a>\nfeature enabled.\n</div>\n<p>This snippet shows how the sample dataset used in the demo above is transformed:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new TreeGrid({\n    // Original data\n    data : [\n        { id : 1, name : 'Project 1', children : [\n            { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n            { id : 12, name : 'Task 12', status : 'done', prio : 'low' },\n            { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n        ]},\n        { id : 2, name : 'Project 2', children : [\n            { id : 21, name : 'Task 21', status : 'wip', prio : 'high' },\n        ]}\n    ],\n\n    features : {\n        treeGroup : {\n            // Fields to build a new tree from\n            levels : [ 'prio', 'status' ]\n        }\n    }\n});\n\n// Resulting data\n[\n    { name : 'low', children : [\n        { name : 'done', children : [\n            { id : 12, name : 'Task 12', status : 'done', prio : 'low' }\n        ]}\n    ]},\n    { name : 'high', children : [\n        { name : 'done', children : [\n            { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n        ]},\n        { name : 'wip', children : [\n            { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n            { id : 21, name : 'Task 21', status : 'wip', prio : 'low' }\n        ]}\n    ]}\n]\n</code></pre>\n<h2>Important information</h2>\n<p>Using the TreeGroup feature comes with some caveats:</p>\n<ul>\n<li>Grouping completely replaces the dataset of the store with a new generated tree structure. Any uncommitted new or\nremoved records will be lost.</li>\n<li>Generated parents are read-only, they cannot be edited using the default UI.</li>\n<li>Leaves in the new tree are still editable as usual, and any changes to them survives the grouping operation.</li>\n<li>Moving nodes manually in the tree is not supported while it is grouped.</li>\n<li>Grouping sets <code>parentId</code> to be non-persistable, since the generated structure is considered temporary and not meant\nto be persisted. The setting is reset when grouping is <a href=\"#Grid/feature/TreeGroup#function-clearGroups\">cleared</a>.</li>\n</ul>\n<div class=\"note\">\nPlease note that this feature is currently only supported by Grid and Gantt.\n</div>\n<p>This feature is <strong>disabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TreeGroup.js",
      "path": "/Calendar/lib/Grid/feature",
      "classType": "treeGroup",
      "properties": [
        {
          "name": "levels",
          "description": "<p>An array of model field names or functions used to determine the levels in the resulting tree.</p>\n<p>Assigning <code>null</code> restores data to its original state.</p>\n<p>See the <a href=\"#Grid/feature/TreeGroup#config-levels\">levels config</a> for more information.</p>",
          "type": "Array.<(String|function(Core.data.Model): any)>",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "levels",
          "description": "<p>An array of model field names or functions used to determine the levels in the resulting tree.</p>\n<p>When supplying a function, it will be called for each leaf in the original data and it is expected to return\nan atomic value used to determine which parent the leaf will be added to at that level.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new TreeGrid({\n    features : {\n        treeGroup : {\n            levels : [\n                // First level is determined by the value of the status field\n                'status',\n                // Second level by the result of this function\n                // (which puts percentdone 0-9 in one group, 10-19 into another and so on)\n                record => (record.percentDone % 10) * 10\n            ]\n        }\n    }\n});\n</code></pre>\n<p>The function form can also be used as a formatter/renderer of sorts, simply by returning a string:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new TreeGrid({\n    features : {\n        treeGroup : {\n            levels : [\n                record => `Status: ${record.status}`\n            ]\n        }\n    }\n});\n</code></pre>",
          "type": "Array.<(String|function(Core.data.Model): any)>",
          "scope": "inner"
        },
        {
          "name": "parentCls",
          "description": "<p>CSS class to apply to the generated parents.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-generated-parent"
        }
      ],
      "functions": [
        {
          "name": "group",
          "description": "<p>Transforms the data according to the supplied levels.</p>\n<p>Yields the same result as assigning to <a href=\"#Grid/feature/TreeGroup#property-levels\">levels</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Transform into a tree with two parent levels\ngrid.group('status', record => (record.percentDone % 10) * 10);\n</code></pre>",
          "parameters": [
            {
              "name": "levels",
              "type": "Array.<(String|function(Core.data.Model): any)>",
              "description": "<p>Field names or functions use to generate parents in resulting tree.</p>"
            }
          ],
          "scope": "instance",
          "category": "Common",
          "async": true,
          "onOwner": true
        },
        {
          "name": "clearGroups",
          "description": "<p>Clears the previously applied transformation, restoring data to its initial state.</p>\n<p>Yields the same result as assigning <code>null</code> to <a href=\"#Grid/feature/TreeGroup#property-levels\">levels</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Restore original data\ngrid.clearGroupers();\n</code></pre>",
          "scope": "instance",
          "category": "Common",
          "async": true,
          "onOwner": true
        }
      ]
    },
    {
      "name": "ExcelExporter",
      "modulePath": "Grid/feature/experimental/ExcelExporter",
      "classDescription": "<p><strong>NOTE</strong>: This class requires a 3rd party library to operate.</p>\n<p>A feature that allows exporting Grid data to Excel without involving the server. It uses <a href=\"#Grid/util/TableExporter\">TableExporter</a>\nclass as data provider, <a href=\"https://www.npmjs.com/package/zipcelx\">zipcelx library</a>\nforked and adjusted to support <a href=\"https://github.com/bryntum/zipcelx/tree/column-width-build\">column width config</a>\nand <a href=\"https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx\">Microsoft XML specification</a>.\nZipcelx should be either in global scope (window) or can be provided with <a href=\"#Grid/feature/experimental/ExcelExporter#config-zipcelx\">zipcelx</a> config.</p>\n<pre class=\"prettyprint source\"><code>// Global scope\n&lt;script src=&quot;zipcelx.js&quot;>&lt;/script>\n\n// importing from package\nimport zipcelx from 'zipcelx';\n\nconst grid = new Grid({\n    features : {\n        excelExporter : {\n            zipcelx\n        }\n    }\n})\n</code></pre>\n<p>Here is an example of how to add the feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        excelExporter : {\n            // Choose the date format for date fields\n            dateFormat : 'YYYY-MM-DD HH:mm',\n\n            exporterConfig : {\n                // Choose the columns to include in the exported file\n                columns : ['name', 'role']\n            }\n        }\n    }\n});\n</code></pre>\n<p>And how to call it:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.features.excelExporter.export({\n    filename : 'Export',\n    exporterConfig : {\n        columns : [\n            { text : 'First Name', field : 'firstName', width : 90 },\n            { text : 'Age', field : 'age', width : 40 },\n            { text : 'Starts', field : 'start', width : 140 },\n            { text : 'Ends', field : 'finish', width : 140 }\n        ]\n    }\n})\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ExcelExporter.js",
      "path": "/Calendar/lib/Grid/feature/experimental",
      "demo": {
        "product": "grid",
        "demo": "exporttoexcel"
      },
      "classType": "excelExporter",
      "configs": [
        {
          "name": "filename",
          "description": "<p>Name of the exported file</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "dateFormat",
          "description": "<p>Defines how date in a cell will be formatted</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "exporterClass",
          "description": "<p>Exporter class to use as a data provider. <a href=\"#Grid/util/TableExporter\">TableExporter</a> by default.</p>",
          "type": "Grid.util.TableExporter",
          "scope": "inner",
          "typings": {
            "returns": "typeof TableExporter"
          }
        },
        {
          "name": "exporterConfig",
          "description": "<p>Configuration object for <a href=\"#Grid/feature/experimental/ExcelExporter#config-exporterClass\">exporter class</a>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "zipcelx",
          "description": "<p>Reference to zipcelx library. If not provided, exporter will look in the global scope.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "convertEmptyValueToEmptyString",
          "description": "<p>If this config is true, exporter will convert all empty values to ''. Empty values are:</p>\n<ul>\n<li>undefined, null, NaN</li>\n<li>Objects/class instances that do not have toString method defined and are stringified to [object Object]</li>\n<li>functions</li>\n</ul>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "export",
          "description": "<p>Generate and download a .xslx file.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Optional configuration object, which overrides initial settings of the feature/exporter.</p>"
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>Promise that resolves when the export is completed</p>"
          }
        }
      ]
    },
    {
      "name": "PdfExport",
      "modulePath": "Grid/feature/export/PdfExport",
      "classDescription": "<p>Generates PDF/PNG files from the Grid component.</p>\n<p><strong>NOTE:</strong> Server side is required to make export work!</p>\n<p>The export server is written in nodejs and it is shipped with our examples. You can find setup instructions in\n<code>examples/_shared/server/README.md</code> and <code>examples/export/README.md</code> files.</p>\n<p>When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\nwith the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\non <a href=\"#Grid/feature/export/PdfExport#config-sendAsBinary\">sendAsBinary</a> config). Then the Export feature opens the link in a new tab and the file is\nautomatically downloaded by your browser. This is configurable, see <a href=\"#Grid/feature/export/PdfExport#config-openAfterExport\">openAfterExport</a> config.</p>\n<p>The <a href=\"#Grid/feature/export/PdfExport#config-exportServer\">exportServer</a> URL must be configured. The URL can be localhost if you start the server locally,\nor your remote server address.</p>\n<h2>Usage</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        pdfExport : {\n            exportServer : 'http://localhost:8080' // Required\n        }\n    }\n})\n\n// Opens popup allowing to customize export settings\ngrid.features.pdfExport.showExportDialog();\n\n// Simple export\ngrid.features.pdfExport.export({\n    // Required, set list of column ids to export\n    columns : grid.columns.map(c => c.id)\n}).then(result => {\n    // Response instance and response content in JSON\n    let { response } = result;\n});\n</code></pre>\n<h2>Exporters</h2>\n<p>There are three exporters available by default: <code>singlepage</code>, <code>multipage</code> and <code>multipagevertical</code>:</p>\n<ul>\n<li><code>singlepage</code> -  generates single page with content scaled to fit the provided <a href=\"#Grid/feature/export/PdfExport#config-paperFormat\">paperFormat</a></li>\n<li><code>multipage</code> - generates as many pages as required to fit all requested content, unscaled</li>\n<li><code>multipagevertical</code> - a combination of two above: it scales content horizontally to fit into page width and then\nputs overflowing content on vertical pages. Like a scroll.</li>\n</ul>\n<h2>Loading resources</h2>\n<p>If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\nThis is due to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Cross-Origin Resource Sharing</a> (CORS). There are 2 options how to handle this:</p>\n<ul>\n<li>Allow cross origin requests from the server where your export is hosted to the server where your application is hosted;</li>\n<li>Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\nand setup paths using <a href=\"#Grid/feature/export/PdfExport#config-translateURLsToAbsolute\">translateURLsToAbsolute</a> config and configure the export server to give access to the path:</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        pdfExport : {\n            exportServer : 'http://localhost:8080',\n            // '/resources' is hardcoded in WebServer implementation\n            translateURLsToAbsolute : 'http://localhost:8080/resources'\n        }\n    }\n})\n</code></pre>\n<pre class=\"prettyprint source lang-javascript\"><code>// Following path would be served by this address: http://localhost:8080/resources/\nnode ./src/server.js -h 8080 -r web/application/styles\n</code></pre>\n<p>where <code>web/application/styles</code> is a physical root location of the copied resources, for example:</p>\n<img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "PdfExport.js",
      "path": "/Calendar/lib/Grid/feature/export",
      "demo": {
        "product": "grid",
        "demo": "export"
      },
      "classType": "pdfExport",
      "configs": [
        {
          "name": "exportServer",
          "description": "<p>URL of the print server.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "exportDialog",
          "description": "<p>A config object to apply to the <a href=\"#Grid/view/export/ExportDialog\">ExportDialog</a> widget.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "fileName",
          "description": "<p>Name of the exported file.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "fileFormat",
          "description": "<p>Format of the exported file, either <code>pdf</code> or <code>png</code>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "pdf",
          "category": "Export file config"
        },
        {
          "name": "clientURL",
          "description": "<p>Export server will navigate to this url first and then will change page content to whatever client sent.\nThis option is useful with react dev server, which uses a strict CORS policy.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "paperFormat",
          "description": "<p>Export paper format. Available options are A1...A5, Legal, Letter.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "A4",
          "category": "Export file config"
        },
        {
          "name": "orientation",
          "description": "<p>Orientation. Options are <code>portrait</code> and <code>landscape</code>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "portrait",
          "category": "Export file config"
        },
        {
          "name": "rowsRange",
          "description": "<p>Specifies which rows to export. <code>all</code> for complete set of rows, <code>visible</code> for only rows currently visible.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Export file config"
        },
        {
          "name": "alignRows",
          "description": "<p>Set to true to align row top to the page top on every exported page. Only applied to multipage export.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "repeatHeader",
          "description": "<p>Set to true to show column headers on every page. This will also set <a href=\"#Grid/feature/export/PdfExport#config-alignRows\">alignRows</a> to true.\nOnly applies to MultiPageVertical exporter.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "keepRegionSizes",
          "description": "<p>By default subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it\nin the following form:</p>\n<pre class=\"prettyprint source\"><code>keepRegionSizes : {\n    locked : true\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "pagesPerRequest",
          "access": "private",
          "description": "<p>When exporting large views (hundreds of pages) stringified HTML may exceed browser or server request\nlength limit. This config allows to specify how many pages to send to server in one request.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "exporterConfig",
          "access": "private",
          "description": "<p>Config for exporter.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "exporterType",
          "description": "<p>Type of the exporter to use. Should be one of the configured <a href=\"#Grid/feature/export/PdfExport#config-exporters\">exporters</a></p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "singlepage"
        },
        {
          "name": "exporters",
          "description": "<p>List of exporter classes to use in export feature</p>",
          "type": "Array.<Grid.feature.export.exporter.Exporter>",
          "scope": "inner",
          "defaultValue": "[\"SinglePageExporter\",\"MultiPageExporter\",\"MultiPageVerticalExporter\"]"
        },
        {
          "name": "translateURLsToAbsolute",
          "description": "<p><code>True</code> to replace all linked CSS files URLs to absolute before passing HTML to the server.\nWhen passing a string the current origin of the CSS files URLS will be replaced by the passed origin.</p>\n<p>For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "keepPathName",
          "description": "<p>When true links are converted to absolute by combining current window location (with replaced origin) with\nresource link.\nWhen false links are converted by combining new origin with resource link (for angular)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "openAfterExport",
          "description": "<p>When true, page will attempt to download generated file.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "sendAsBinary",
          "description": "<p>Set to true to receive binary file from the server instead of download link.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "openInNewTab",
          "description": "<p>False to open in the current tab, true - in a new tab</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "headerTpl",
          "description": "<p>A template function used to generate a page header. It is passed an object with ´currentPage´ and `totalPages´ properties.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let grid = new Grid({\n    appendTo   : 'container',\n    features : {\n        pdfExport : {\n            exportServer : 'http://localhost:8080/',\n            headerTpl : ({ currentPage, totalPages }) => `\n                &lt;div class=&quot;demo-export-header&quot;>\n                    &lt;img src=&quot;coolcorp-logo.png&quot;/>\n                    &lt;dl>\n                        &lt;dt>Date: ${DateHelper.format(new Date(), 'll LT')}&lt;/dt>\n                        &lt;dd>${totalPages ? `Page: ${currentPage + 1}/${totalPages}` : ''}&lt;/dd>\n                    &lt;/dl>\n                &lt;/div>`\n         }\n    }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "footerTpl",
          "description": "<p>A template function used to generate a page footer. It is passed an object with ´currentPage´ and `totalPages´ properties.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let grid = new Grid({\n     appendTo   : 'container',\n     features : {\n         pdfExport : {\n             exportServer : 'http://localhost:8080/',\n             footerTpl    : () => '&lt;div class=&quot;demo-export-footer&quot;>&lt;h3>© 2020 CoolCorp Inc&lt;/h3>&lt;/div>'\n         }\n     }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner"
        },
        {
          "name": "fetchOptions",
          "description": "<p>An object containing the Fetch options to pass to the export server request. Use this to control if credentials are sent\nand other options, read more at <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">MDN</a>.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "exportMask",
          "description": "<p>A message to be shown when Export feature is performing export.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "\"Generating pages...\""
        },
        {
          "name": "exportProgressMask",
          "description": "<p>A message to be shown when export is almost done.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "\"Waiting for response from server...\""
        },
        {
          "name": "showErrorToast",
          "description": "<p>Set to false to not show Toast message on export error.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "properties": [
        {
          "name": "exportDialog",
          "description": "<p>Returns the instantiated export dialog widget as configured by <a href=\"#Grid/feature/export/PdfExport#config-exportDialog\">exportDialog</a></p>",
          "type": "Grid.view.export.ExportDialog",
          "scope": "inner"
        },
        {
          "name": "currentExportPromise",
          "description": "<p>When export is started from GUI (<a href=\"#Grid/view/export/ExportDialog\">ExportDialog</a>), export promise can be accessed via\nthis property.</p>",
          "type": [
            "Promise",
            "null"
          ],
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "filterStyles",
          "description": "<p>This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use this\nhook method to filter or modify them.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    features: {\n        pdfExport: {\n            // filter out inline styles and bootstrap.css\n            filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n        }\n    }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "styles",
              "type": "Array.<String>"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "Array.<String>",
            "description": "<p>List of stylesheets to put on the exported page</p>"
          }
        },
        {
          "name": "export",
          "description": "<p>Starts the export process. Accepts a config object which overrides any default configs.\n<strong>NOTE</strong>. Component should not be interacted with when export is in progress</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object"
            },
            {
              "name": "config.columns",
              "type": "Array.<String>",
              "description": "<p>(required) List of column ids to export. E.g.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.features.pdfExport.export({ columns : grid.columns.map(c => c.id) })\n</code></pre>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>Object of the following structure</p>\n<pre class=\"prettyprint source\"><code>{\n    response // Response instance\n}\n</code></pre>"
          }
        },
        {
          "name": "receiveExportContent",
          "description": "<p>Sends request to the export server and returns Response instance.</p>",
          "parameters": [
            {
              "name": "pages",
              "type": "Array.<Object>",
              "description": "<p>Array of exported pages.</p>"
            },
            {
              "name": "pages[].html",
              "type": "String",
              "description": "<p>pages HTML of the exported page.</p>",
              "isSubParam": true
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Export config</p>"
            },
            {
              "name": "config.exportServer",
              "type": "String",
              "description": "<p>URL of the export server.</p>",
              "isSubParam": true
            },
            {
              "name": "config.orientation",
              "type": "String",
              "description": "<p>Page orientation. portrait/landscape.</p>",
              "isSubParam": true
            },
            {
              "name": "config.paperFormat",
              "type": "String",
              "description": "<p>Paper format as supported by puppeteer. A4/A3/...</p>",
              "isSubParam": true
            },
            {
              "name": "config.fileFormat",
              "type": "String",
              "description": "<p>File format. PDF/PNG.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fileName",
              "type": "String",
              "description": "<p>Name to use for the saved file.</p>",
              "isSubParam": true
            },
            {
              "name": "config.clientURL",
              "type": "String",
              "description": "<p>URL to navigate before export. See <a href=\"#Grid/feature/export/PdfExport#config-clientURL\">clientURL</a>.</p>",
              "isSubParam": true
            },
            {
              "name": "config.sendAsBinary",
              "type": "String",
              "description": "<p>Tells server whether to return binary file instead of download link.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>Returns Response instance</p>"
          }
        },
        {
          "name": "processExportContent",
          "description": "<p>Handles output of the <a href=\"#Grid/feature/export/PdfExport#function-receiveExportContent\">receiveExportContent</a>. Server response can be of two different types depending\non <a href=\"#Grid/feature/export/PdfExport#config-sendAsBinary\">sendAsBinary</a> config:</p>\n<ul>\n<li><code>application/json</code> In this case JSON response contains url of the file to download</li>\n<li><code>application/octet-stream</code> In this case response contains stream of file binary data</li>\n</ul>\n<p>If <a href=\"#Grid/feature/export/PdfExport#config-openAfterExport\">openAfterExport</a> is true, this method will try to download content.</p>",
          "parameters": [
            {
              "name": "response",
              "type": "Response"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Export config</p>"
            },
            {
              "name": "config.exportServer",
              "type": "String",
              "description": "<p>URL of the export server.</p>",
              "isSubParam": true
            },
            {
              "name": "config.orientation",
              "type": "String",
              "description": "<p>Page orientation. portrait/landscape.</p>",
              "isSubParam": true
            },
            {
              "name": "config.paperFormat",
              "type": "String",
              "description": "<p>Paper format as supported by puppeteer. A4/A3/...</p>",
              "isSubParam": true
            },
            {
              "name": "config.fileFormat",
              "type": "String",
              "description": "<p>File format. PDF/PNG.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fileName",
              "type": "String",
              "description": "<p>Name to use for the saved file.</p>",
              "isSubParam": true
            },
            {
              "name": "config.clientURL",
              "type": "String",
              "description": "<p>URL to navigate before export. See <a href=\"#Grid/feature/export/PdfExport#config-clientURL\">clientURL</a>.</p>",
              "isSubParam": true
            },
            {
              "name": "config.sendAsBinary",
              "type": "String",
              "description": "<p>Tells server whether to return binary file instead of download link. See <a href=\"#Grid/feature/export/PdfExport#config-sendAsBinary\">sendAsBinary</a></p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "responseBlobToObjectURL",
          "access": "private",
          "description": "<p>Creates object URL from response content with given mimeType</p>",
          "parameters": [
            {
              "name": "response",
              "type": "Response",
              "description": "<p>Response instance</p>"
            },
            {
              "name": "mimeType",
              "type": "String"
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>Returns string object URL</p>"
          }
        },
        {
          "name": "getDownloadLink",
          "access": "private",
          "description": "<p>Creates link to download the file.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>File name</p>"
            },
            {
              "name": "href",
              "type": "String",
              "description": "<p>URL of the resource</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "description": "<p>HTMLAnchorElement</p>"
          }
        },
        {
          "name": "showExportDialog",
          "description": "<p>Shows <a href=\"#Grid/view/export/ExportDialog\">export dialog</a></p>",
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        }
      ],
      "events": [
        {
          "name": "beforePdfExport",
          "description": "<p>Fires on the owning Grid before export started. Return <code>false</code> to cancel the export.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Export config</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "exportStep",
          "description": "<p>Fires when export progress changes</p>",
          "parameters": [
            {
              "name": "progress",
              "type": "Number",
              "description": "<p>Current progress, 0-100</p>"
            },
            {
              "name": "text",
              "type": "String",
              "description": "<p>Optional text to show</p>"
            }
          ]
        },
        {
          "name": "pdfExport",
          "description": "<p>Fires on the owning Grid when export has finished</p>",
          "parameters": [
            {
              "name": "response",
              "type": "Response",
              "description": "<p>Optional response, if received</p>",
              "optional": true
            },
            {
              "name": "error",
              "type": "Error",
              "description": "<p>Optional error, if exception occurred</p>",
              "optional": true
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "Exporter",
      "modulePath": "Grid/feature/export/exporter/Exporter",
      "classDescription": "<p>Base class for all exporters</p>",
      "mixes": [
        "Core/localization/Localizable",
        "Core/mixin/Events"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Exporter.js",
      "path": "/Calendar/lib/Grid/feature/export/exporter",
      "configs": [
        {
          "name": "translateURLsToAbsolute",
          "description": "<p><code>True</code> to replace all linked CSS files URLs to absolute before passing HTML to the server.\nWhen passing a string the current origin of the CSS files URLS will be replaced by the passed origin.</p>\n<p>For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "keepPathName",
          "description": "<p>When true links are converted to absolute by combining current window location (with replaced origin) with\nresource link.\nWhen false links are converted by combining new origin with resource link (for angular)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "functions": [
        {
          "name": "filterStyles",
          "description": "<p>This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use this\nhook method to filter or modify them.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    features: {\n        pdfExport: {\n            // filter out inline styles and bootstrap.css\n            filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n        }\n    }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "styles",
              "type": "Array.<String>"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "Array.<String>",
            "description": "<p>List of stylesheets to put on the exported page</p>"
          }
        },
        {
          "name": "pageTpl",
          "description": "<p>Template of an extracted page.</p>",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Data for the page template</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "measureElement",
          "access": "private",
          "description": "<p>Appends generated header/footer element to the document body to measure their height</p>",
          "parameters": [
            {
              "name": "html"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        }
      ],
      "properties": [
        {
          "name": "stylesheets",
          "description": "<p>Returns all style-related tags: <code>&lt;style&gt;</code> and <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code></p>",
          "type": "Array.<String>",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "MultiPageExporter",
      "modulePath": "Grid/feature/export/exporter/MultiPageExporter",
      "classDescription": "<p>A multiple page exporter. Used by the <a href=\"#Grid/feature/export/PdfExport\">PdfExport</a> feature to export to multiple pages. You\ndo not need to use this class directly.</p>\n<h3>Extending exporter</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyMultiPageExporter extends MultiPageExporter {\n    // type is required for exporter\n    static get type() {\n        return 'mymultipageexporter';\n    }\n\n    get stylesheets() {\n        const stylesheets = super.stylesheets;\n\n        stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n\n        return stylesheets;\n    }\n}\n\nconst grid = new Grid({\n    features : {\n        pdfExport : {\n            // this export feature is configured with only one exporter\n            exporters : [MyMultiPageExporter]\n        }\n    }\n});\n\n// run export with the new exporter\ngrid.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n</code></pre>",
      "extends": [
        "Grid/feature/export/exporter/Exporter"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "MultiPageExporter.js",
      "path": "/Calendar/lib/Grid/feature/export/exporter",
      "classType": "multipage"
    },
    {
      "name": "MultiPageVerticalExporter",
      "modulePath": "Grid/feature/export/exporter/MultiPageVerticalExporter",
      "classDescription": "<p>A vertical multiple page exporter. Used by the <a href=\"#Grid/feature/export/PdfExport\">PdfExport</a> feature to export to multiple\npages. Content will be scaled in a horizontal direction to fit the page.</p>\n<p>You do not need to use this class directly.</p>\n<h3>Extending exporter</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n    // type is required for exporter\n    static get type() {\n        return 'mymultipageverticalexporter';\n    }\n\n    get stylesheets() {\n        const stylesheets = super.stylesheets;\n\n        stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n\n        return stylesheets;\n    }\n}\n\nconst grid = new Grid({\n    features : {\n        pdfExport : {\n            // this export feature is configured with only one exporter\n            exporters : [MyMultiPageVerticalExporter]\n        }\n    }\n});\n\n// run export with the new exporter\ngrid.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n</code></pre>",
      "extends": [
        "Grid/feature/export/exporter/Exporter"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "MultiPageVerticalExporter.js",
      "path": "/Calendar/lib/Grid/feature/export/exporter",
      "classType": "multipagevertical"
    },
    {
      "name": "SinglePageExporter",
      "modulePath": "Grid/feature/export/exporter/SinglePageExporter",
      "classDescription": "<p>A single page exporter. Used by the <a href=\"#Grid/feature/export/PdfExport\">PdfExport</a> feature to export to single page. Content\nwill be scaled in both directions to fit the page.</p>\n<p>You do not need to use this class directly.</p>\n<h3>Extending exporter</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>class MySinglePageExporter extends SinglePageExporter {\n    // type is required for exporter\n    static get type() {\n        return 'mysinglepageexporter';\n    }\n\n    get stylesheets() {\n        const stylesheets = super.stylesheets;\n\n        stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n\n        return stylesheets;\n    }\n}\n\nconst grid = new Grid({\n    features : {\n        pdfExport : {\n            // this export feature is configured with only one exporter\n            exporters : [MySinglePageExporter]\n        }\n    }\n});\n\n// run export with the new exporter\ngrid.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n</code></pre>",
      "extends": [
        "Grid/feature/export/exporter/Exporter"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SinglePageExporter.js",
      "path": "/Calendar/lib/Grid/feature/export/exporter",
      "classType": "singlepage",
      "configs": [
        {
          "name": "centerContentHorizontally",
          "description": "<p>Set to true to center content horizontally on the page</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "SummaryFormatter",
      "modulePath": "Grid/feature/mixin/SummaryFormatter",
      "description": "<p>Mixin for Summary and GroupSummary that handles formatting sums.</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "SummaryFormatter.js",
      "path": "/Calendar/lib/Grid/feature/mixin",
      "functions": [
        {
          "name": "generateHtml",
          "description": "<p>Calculates sums and returns as a html table</p>",
          "parameters": [
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Column to calculate sum for</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Records to include in calculation</p>"
            },
            {
              "name": "cls",
              "type": "String",
              "description": "<p>CSS class to apply to summary table</p>"
            },
            {
              "name": "groupRecord",
              "type": "Core.data.Model",
              "description": "<p>current group row record</p>"
            },
            {
              "name": "groupField",
              "type": "String",
              "description": "<p>Current groups field name</p>"
            },
            {
              "name": "groupValue",
              "type": "String",
              "description": "<p>Current groups value</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>html content</p>"
          }
        }
      ]
    },
    {
      "name": "Row",
      "modulePath": "Grid/row/Row",
      "classDescription": "<p>Represents a single rendered row in the grid. Consists of one row element for each SubGrid in use. The grid only\ncreates as many rows as needed to fill the current viewport (and a buffer). As the grid scrolls\nthe rows are repositioned and reused, there is not a one to one relation between rows and records.</p>\n<p>For normal use cases you should not have to use this class directly. Rely on using renderers instead.</p>",
      "extends": [
        "Core/Base"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Row.js",
      "path": "/Calendar/lib/Grid/row",
      "properties": [
        {
          "name": "cls",
          "description": "<p>When <strong>read</strong>, this a <a href=\"#Core/helper/util/DomClassList\">DomClassList</a> of class names to be\napplied to this Row's elements.</p>\n<p>It can be <strong>set</strong> using Object notation where each property name with a truthy value is added as\na class, or as a regular space-separated string.</p>",
          "type": "Core.helper.util.DomClassList",
          "accepts": [
            "Core.helper.util.DomClassList",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "index",
          "description": "<p>Get index in RowManagers rows array</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "dataIndex",
          "description": "<p>Get/set this rows current index in grids store</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "id",
          "description": "<p>Get/set id for currently rendered record</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "instance"
        },
        {
          "name": "elements",
          "description": "<p>Row elements (one for each region)</p>",
          "type": "Array.<HTMLElement>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "element",
          "description": "<p>The row element, only applicable when not using multiple grid sections (see <a href=\"#Grid/row/Row#property-elements\">elements</a>)</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "cells",
          "description": "<p>Row cell elements</p>",
          "type": "Array.<HTMLElement>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "height",
          "description": "<p>Get/set row height</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "offsetHeight",
          "description": "<p>Get row height including border</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "isFirst",
          "description": "<p>Is this the very first row?</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "top",
          "description": "<p>Row top coordinate</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "bottom",
          "description": "<p>Row bottom coordinate</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "cls",
          "description": "<p>The class name to initially add to all row elements</p>",
          "type": [
            "String",
            "Core.helper.util.DomClassList",
            "Object"
          ],
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "constructor",
          "access": "internal",
          "description": "<p>Constructs a Row setting its index.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>A configuration object which must contain the following two properties:</p>"
            },
            {
              "name": "config.grid",
              "type": "Grid.view.Grid",
              "description": "<p>The owning Grid.</p>",
              "isSubParam": true
            },
            {
              "name": "config.rowManager",
              "type": "Grid.row.RowManager",
              "description": "<p>The owning RowManager.</p>",
              "isSubParam": true
            },
            {
              "name": "config.index",
              "type": "Number",
              "description": "<p>The index of the row within the RowManager's cache.</p>",
              "isSubParam": true
            }
          ],
          "scope": "inner"
        },
        {
          "name": "addElement",
          "access": "private",
          "description": "<p>Add a row element for specified region.</p>",
          "parameters": [
            {
              "name": "region",
              "type": "String",
              "description": "<p>Region to add element for</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getElement",
          "description": "<p>Get the element for the specified region.</p>",
          "parameters": [
            {
              "name": "region",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "getRectangle",
          "description": "<p>Get the <a href=\"#Core/helper/util/Rectangle\">element bounds</a> for the specified region of this Row.</p>",
          "parameters": [
            {
              "name": "region",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle"
          }
        },
        {
          "name": "eachElement",
          "description": "<p>Execute supplied function for each regions element.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "eachCell",
          "description": "<p>Execute supplied function for each cell.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getCells",
          "description": "<p>Get cell elements for specified region.</p>",
          "parameters": [
            {
              "name": "region",
              "type": "String",
              "description": "<p>Region to get elements for</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<HTMLElement>",
            "description": "<p>Array of cell elements</p>"
          }
        },
        {
          "name": "getCell",
          "description": "<p>Get the cell element for the specified column.</p>",
          "parameters": [
            {
              "name": "columnId",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>Column id</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Cell element</p>"
          }
        },
        {
          "name": "updateElementsHeight",
          "access": "private",
          "description": "<p>Sync elements height to rows height</p>",
          "scope": "instance"
        },
        {
          "name": "addCls",
          "description": "<p>Add CSS classes to each element.</p>",
          "parameters": [
            {
              "name": "classes",
              "type": [
                "String",
                "Object",
                "Core.helper.util.DomClassList"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeCls",
          "description": "<p>Remove CSS classes from each element.</p>",
          "parameters": [
            {
              "name": "classes",
              "type": [
                "String",
                "Object",
                "Core.helper.util.DomClassList"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "toggleCls",
          "access": "internal",
          "description": "<p>Toggle CSS classes for each element.</p>",
          "parameters": [
            {
              "name": "classes",
              "type": [
                "String",
                "Object",
                "Core.helper.util.DomClassList"
              ]
            },
            {
              "name": "add",
              "type": "Boolean"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "assignCls",
          "description": "<p>Adds/removes class names according to the passed object's properties.</p>\n<p>Properties with truthy values are added.\nProperties with false values are removed.</p>",
          "parameters": [
            {
              "name": "classes",
              "type": "Object",
              "description": "<p>Object containing properties to set/clear</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setTop",
          "access": "internal",
          "description": "<p>Sets top coordinate, translating elements position.</p>",
          "parameters": [
            {
              "name": "top",
              "type": "Number",
              "description": "<p>Top coordinate</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to not trigger translation event</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setBottom",
          "access": "private",
          "description": "<p>Sets bottom coordinate, translating elements position.</p>",
          "parameters": [
            {
              "name": "bottom",
              "type": "Number",
              "description": "<p>Bottom coordinate</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to not trigger translation event</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "translateElements",
          "access": "private",
          "description": "<p>Sets css transform to position elements at correct top position (translateY)</p>",
          "scope": "instance"
        },
        {
          "name": "offset",
          "access": "private",
          "description": "<p>Moves all row elements up or down and updates model.</p>",
          "parameters": [
            {
              "name": "offsetTop",
              "type": "Number",
              "description": "<p>Pixels to offset the elements</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "render",
          "access": "private",
          "description": "<p>Renders a record into this rows elements (trigger event that subgrids catch to do the actual rendering).</p>",
          "parameters": [
            {
              "name": "recordIndex",
              "type": "Number"
            },
            {
              "name": "record",
              "type": "Core.data.Model"
            },
            {
              "name": "updatingSingleRow",
              "type": "Boolean",
              "default": true,
              "optional": true
            },
            {
              "name": "batch",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "renderCell",
          "access": "private",
          "description": "<p>Renders a single cell, calling features to allow them to hook</p>",
          "parameters": [
            {
              "name": "cellContext",
              "type": [
                "Grid.util.Location",
                "HTMLElement"
              ],
              "description": "<p>A <a href=\"#Grid/util/Location\">Location</a> which contains rendering\noptions, or a cell element which can be used to initialize a <a href=\"#Grid/util/Location\">Location</a></p>"
            },
            {
              "name": "cellContext.height",
              "type": "Number",
              "description": "<p>Configured row height</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.maxRequestedHeight",
              "type": "Number",
              "description": "<p>Maximum proposed row height from renderers</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.updatingSingleRow",
              "type": "Boolean",
              "description": "<p>Rendered as part of updating a single row</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.isMeasuring",
              "type": "Boolean",
              "description": "<p>Rendered as part of a measuring operation</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RowManager",
      "modulePath": "Grid/row/RowManager",
      "classDescription": "<p>Virtual representation of the grid, using <a href=\"#Grid/row/Row\">Row</a> to represent rows. Plugs into <a href=\"#Grid/view/Grid\">Grid</a>\nand exposes the following functions on grid itself:</p>\n<ul>\n<li><a href=\"#Grid/row/RowManager#function-getRecordCoords\">getRecordCoords()</a></li>\n<li><a href=\"#Grid/row/RowManager#function-getRowById\">getRowById()</a></li>\n<li><a href=\"#Grid/row/RowManager#function-getRow\">getRow()</a></li>\n<li><a href=\"#Grid/row/RowManager#function-getRowFor\">getRowFor()</a></li>\n<li><a href=\"#Grid/row/RowManager#function-getRowFromElement\">getRowFromElement()</a></li>\n</ul>",
      "plugin": true,
      "access": "private",
      "examples": [
        "let row = grid.getRowById(1);"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RowManager.js",
      "path": "/Calendar/lib/Grid/row",
      "configs": [
        {
          "name": "prependRowBuffer",
          "description": "<p>Number of rows to render above current viewport</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "appendRowBuffer",
          "description": "<p>Number of rows to render below current viewport</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "rowHeight",
          "description": "<p>Default row height, assigned from Grid at construction (either from config\n<a href=\"#Grid/view/Grid#config-rowHeight\">rowHeight</a> or CSS). Can be set from renderers</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "fixedRowHeight",
          "description": "<p>Set to <code>true</code> to get a small performance boost in applications that uses fixed row height</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "initWithHeight",
          "access": "private",
          "description": "<p>Initializes the RowManager with Rows to fit specified height.</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number"
            },
            {
              "name": "isRendering",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Init"
        },
        {
          "name": "reinitialize",
          "description": "<p>Releases all elements (not from dom), calculates how many are needed, creates those and renders</p>",
          "scope": "instance"
        },
        {
          "name": "matchRowCount",
          "access": "private",
          "description": "<p>Add or remove rows to fit row count</p>",
          "scope": "instance",
          "category": "Rows"
        },
        {
          "name": "calculateRowCount",
          "access": "private",
          "description": "<p>Calculates how many rows fit in the available height (view height)</p>",
          "scope": "instance",
          "category": "Rows"
        },
        {
          "name": "getRow",
          "description": "<p>Get the Row at specified index. Returns <code>undefined</code> if the row index is not rendered.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number"
            }
          ],
          "scope": "instance",
          "category": "Rows",
          "returns": {
            "type": "Grid.row.Row"
          }
        },
        {
          "name": "getRowById",
          "description": "<p>Get Row for specified record id</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record id (or a record)</p>"
            }
          ],
          "scope": "instance",
          "category": "Rows",
          "returns": {
            "type": [
              "Grid.row.Row",
              "null"
            ],
            "description": "<p>Found Row or null if record not rendered</p>"
          }
        },
        {
          "name": "getRowFromElement",
          "description": "<p>Get a Row from an HTMLElement</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "instance",
          "category": "Rows",
          "returns": {
            "type": [
              "Grid.row.Row",
              "null"
            ],
            "description": "<p>Found Row or null if record not rendered</p>"
          }
        },
        {
          "name": "getRowAt",
          "description": "<p>Get the row at the specified Y coordinate, which is by default viewport-based.</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The <code>Y</code> coordinate to find the Row for.</p>"
            },
            {
              "name": "local",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> if the <code>Y</code> coordinate is local to the SubGrid's element.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Grid.row.Row",
            "description": "<p>Found Row or null if no row is rendered at that point.</p>"
          }
        },
        {
          "name": "getRowFor",
          "description": "<p>Get a Row for either a record, a record id or an HTMLElement</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "HTMLElement",
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record or record id or HTMLElement</p>"
            }
          ],
          "scope": "instance",
          "category": "Rows",
          "returns": {
            "type": "Grid.row.Row",
            "description": "<p>Found Row or null if record not rendered</p>"
          }
        },
        {
          "name": "getNextRow",
          "description": "<p>Gets the Row following the specified Row (by index or object). Wraps around the end.</p>",
          "parameters": [
            {
              "name": "indexOrRow",
              "type": [
                "Number",
                "Grid.row.Row"
              ],
              "description": "<p>index or Row</p>"
            }
          ],
          "scope": "instance",
          "category": "Rows",
          "returns": {
            "type": "Grid.row.Row"
          }
        },
        {
          "name": "offsetRows",
          "access": "private",
          "description": "<p>Calls offset() for each Row passing along offset parameter</p>",
          "parameters": [
            {
              "name": "offset",
              "type": "Number",
              "description": "<p>Pixels to translate Row elements.</p>"
            }
          ],
          "scope": "instance",
          "category": "Rows"
        },
        {
          "name": "storeKnownHeight",
          "access": "internal",
          "description": "<p>Store supplied <code>height</code> using <code>id</code> as key in the height map. Called by <code>Row</code> when it gets its height.\nKeeps <code>averageRowHeight</code> and <code>totalKnownHeight</code> up to date. Ignored when configured with <code>fixedRowHeight</code></p>",
          "parameters": [
            {
              "name": "id",
              "type": [
                "String",
                "Number"
              ]
            },
            {
              "name": "height",
              "type": "Number"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getOffsetHeight",
          "access": "private",
          "description": "<p>Get the known or estimated offset height for the specified record id</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "invalidateKnownHeight",
          "description": "<p>Invalidate cached height for a record. Removing it from <code>totalKnownHeight</code> and factoring it out of\n<code>averageRowHeight</code>.</p>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Core.data.Model",
                "Array.<Core.data.Model>"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clearKnownHeights",
          "description": "<p>Invalidates all cached height and resets <code>averageRowHeight</code> and <code>totalKnownHeight</code></p>",
          "scope": "instance"
        },
        {
          "name": "calculateTop",
          "access": "private",
          "description": "<p>Calculates a row top from its data index. Uses known values from the height map, unknown are substituted with\nthe average row height. When configured with <code>fixedRowHeight</code>, it will always calculate a correct value</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index in store</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getRecordCoords",
          "description": "<p>Returns top and bottom for rendered row or estimated coordinates for unrendered.</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record or record id</p>"
            },
            {
              "name": "local",
              "type": "Boolean",
              "description": "<p>Pass true to get relative record coordinates</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "roughly",
              "type": "Boolean",
              "description": "<p>Pass true to allow a less exact but cheaper estimate</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Calculations",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>Record bounds with format { x, y, width, height, bottom, right }</p>"
          }
        },
        {
          "name": "getRecordCoordsByIndex",
          "description": "<p>Returns estimated top and bottom coordinates for specified row.</p>",
          "parameters": [
            {
              "name": "recordIndex",
              "type": "Number",
              "description": "<p>Record index</p>"
            },
            {
              "name": "local",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Calculations",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>Estimated record bounds with format { x, y, width, height, bottom, right }</p>"
          }
        },
        {
          "name": "forEach",
          "description": "<p>Calls a function for each Row</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function that will be called with Row as first parameter</p>"
            }
          ],
          "scope": "instance",
          "category": "Iteration"
        },
        {
          "name": "refreshCell",
          "description": "<p>Refresh a single cell.</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record for row holding the cell that should be updated</p>"
            },
            {
              "name": "columnId",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>Column id to identify the cell within the row</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if cell was found and refreshed, <code>false</code> if not</p>"
          }
        },
        {
          "name": "returnToTop",
          "description": "<p>Renders from the top of the grid, also resetting scroll to top. Used for example when collapsing all groups.</p>",
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "renderFromRecord",
          "description": "<p>Renders from specified records row and down (used for example when collapsing a group, does not affect rows above).</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Record of first row to render</p>"
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "renderFromRow",
          "description": "<p>Renders from specified row and down (used for example when collapsing a group, does not affect rows above).</p>",
          "parameters": [
            {
              "name": "fromRow",
              "type": "Grid.row.Row",
              "description": "<p>First row to render</p>"
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "renderRows",
          "description": "<p>Renders the passed array (or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>) of <a href=\"#Grid/row/Row\">rows</a></p>",
          "parameters": [
            {
              "name": "rows",
              "type": [
                "Array.<Grid.row.Row>",
                "Set"
              ],
              "description": "<p>The rows to render</p>"
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "translateFromRow",
          "access": "private",
          "description": "<p>Translates all rows after the specified row. Used when a single rows height is changed and the others should\nrearrange. (Called from Row#render)</p>",
          "parameters": [
            {
              "name": "fromRow",
              "type": "Grid.row.Row"
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "refresh",
          "description": "<p>Rerender all rows</p>",
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "jumpToPosition",
          "access": "private",
          "description": "<p>Makes sure that specified record is displayed in view</p>",
          "parameters": [
            {
              "name": "newScrollTop",
              "description": "<p>Top of visible section</p>"
            },
            {
              "name": "forceRecordIndex",
              "description": "<p>Index of record to display at center</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "warpIfNeeded",
          "access": "private",
          "description": "<p>Jumps to a position if it is far enough from current position. Otherwise does nothing.</p>",
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "updateRenderedRows",
          "access": "private",
          "description": "<p>Handles virtual rendering (only visible rows + buffer are in dom) for rows</p>",
          "parameters": [
            {
              "name": "newScrollTop",
              "type": "Number",
              "description": "<p>The <code>Y</code> scroll position for which to render rows.</p>"
            },
            {
              "name": "force",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to update the rendered row block even if the scroll position has not changed.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering",
          "returns": {
            "type": "Number",
            "description": "<p>Adjusted height required to fit rows</p>"
          }
        },
        {
          "name": "fillAbove",
          "access": "private",
          "description": "<p>Moves as many rows from the bottom to the top that are needed to fill to current scroll pos.</p>",
          "parameters": [
            {
              "name": "newTop",
              "description": "<p>Scroll position</p>"
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "fillBelow",
          "access": "private",
          "description": "<p>Moves as many rows from the top to the bottom that are needed to fill to current scroll pos.</p>",
          "parameters": [
            {
              "name": "newTop",
              "description": "<p>Scroll position</p>"
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering"
        },
        {
          "name": "estimateTotalHeight",
          "access": "private",
          "description": "<p>Estimates height needed to fit all rows, based on average row height. Also offsets rows if needed to not be above\nthe reachable area of the view.</p>",
          "parameters": [
            {
              "name": "immediate",
              "type": "Boolean",
              "description": "<p>Specify true to pass the <code>immediate</code> flag on to any listeners (probably only Grid\ncares. Used to bypass buffered element resize)</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Scrolling & rendering",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "displayRecordAtTop",
          "access": "private",
          "description": "<p>Moves a row from bottom to top and renders the corresponding record to it.</p>",
          "scope": "instance",
          "category": "Scrolling & rendering",
          "returns": {
            "type": "Number",
            "description": "<p>New row height</p>"
          }
        },
        {
          "name": "displayRecordAtBottom",
          "access": "private",
          "description": "<p>Moves a row from top to bottom and renders the corresponding record to it.</p>",
          "scope": "instance",
          "category": "Scrolling & rendering",
          "returns": {
            "type": "Number",
            "description": "<p>New row height</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "rows",
          "description": "<p>Get all Rows</p>",
          "type": "Array.<Grid.row.Row>",
          "scope": "instance",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "topRow",
          "description": "<p>Get the Row that is currently displayed at top.</p>",
          "type": "Grid.row.Row",
          "scope": "instance",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "bottomRow",
          "description": "<p>Get the Row currently displayed furthest down.</p>",
          "type": "Grid.row.Row",
          "scope": "instance",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "firstVisibleRow",
          "description": "<p>Get the topmost visible Row</p>",
          "type": "Grid.row.Row",
          "scope": "instance",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "lastVisibleRow",
          "description": "<p>Get the last visible Row</p>",
          "type": "Grid.row.Row",
          "scope": "instance",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "rowHeight",
          "description": "<p>Set a fixed row height (can still be overridden by renderers) or get configured row height. Setting refreshes all rows</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Rows",
          "onOwner": true
        },
        {
          "name": "rowOffsetHeight",
          "description": "<p>Get actually used row height, which includes any border and might be an average if using variable row height.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "allHeightsKnown",
          "access": "private",
          "description": "<p>Returns <code>true</code> if all rows have a known height. They do if all rows are visited, or if RowManager is configured\nwith <code>fixedRowHeight</code>. If so, all tops can be calculated exactly, no guessing needed</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "totalHeight",
          "description": "<p>Total estimated grid height (used for scroller)</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Calculations"
        }
      ]
    },
    {
      "name": "GridScroller",
      "modulePath": "Grid/util/GridScroller",
      "classDescription": "<p>A Scroller subclass which handles scrolling in a grid.</p>\n<p>If the grid has no parallel scrolling grids (No locked columns), then this functions\ntransparently as a Scroller.</p>\n<p>If there are locked columns, then scrolling to an <em>element</em> will invoke the scroller\nof the subgrid which contains that element.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridScroller.js",
      "path": "/Calendar/lib/Grid/util"
    },
    {
      "name": "Location",
      "modulePath": "Grid/util/Location",
      "classDescription": "<p>This class encapsulates a reference to a specific navigable grid location.</p>\n<p>This encapsulates a grid cell based upon the record and column, but in addition, it could represent\nan actionable location <em>within a cell</em>* if the <a href=\"#Grid/util/Location#property-target\">target</a> is not the grid cell in\nquestion.</p>\n<p>A Location is immutable. That is, once instantiated, the record and column which it references\ncannot be changed. The <a href=\"#Grid/util/Location#function-move\">move</a> method returns a new instance.</p>\n<p>A <code>Location</code> that encapsulates a cell within the body of a grid will have the following\nread-only properties:</p>\n<ul>\n<li>grid        : <code>Grid</code> The Grid that owns the Location.</li>\n<li>record      : <code>Model</code> The record of the row that owns the Location. (<code>null</code> if the header).</li>\n<li>rowIndex    : <code>Number</code> The zero-based index of the row that owns the Location. (-1 means the header).</li>\n<li>column      : <code>Column</code> The Column that owns the Location.</li>\n<li>columnIndex : <code>Number</code> The zero-based index of the column that owns the Location.</li>\n<li>cell        : <code>HTMLElement</code> The referenced cell element.</li>\n<li>target      : <code>HTMLElement</code> The focusable element. This may be the cell, or a child of the cell.</li>\n</ul>\n<p>If the location is a column <em>header</em>, the <code>record</code> will be <code>null</code> and the <code>rowIndex</code> will be <code>-1</code>.</p>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Location.js",
      "path": "/Calendar/lib/Grid/util",
      "configs": [
        {
          "name": "grid",
          "description": "<p>The grid which this Location references.</p>",
          "type": "Grid.view.Grid",
          "scope": "inner"
        },
        {
          "name": "record",
          "description": "<p>The record which this Location references. (unless <a href=\"#Grid/util/Location#config-rowIndex\">rowIndex</a> is used to configure)</p>",
          "type": "Core.data.Model",
          "scope": "inner"
        },
        {
          "name": "rowIndex",
          "description": "<p>The row index which this Location references. (unless <a href=\"#Grid/util/Location#config-record\">record</a> is used to configure).</p>\n<p><code>-1</code> means the header row, in which case the <a href=\"#Grid/util/Location#config-record\">record</a> will be <code>null</code>.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "column",
          "description": "<p>The Column which this location references. (unless <a href=\"#Grid/util/Location#config-columnIndex\">columnIndex</a> or <a href=\"#Grid/util/Location#config-columnId\">columnId</a> is used to configure)</p>",
          "type": "Grid.column.Column",
          "scope": "inner"
        },
        {
          "name": "columnId",
          "description": "<p>The column id which this location references. (unless <a href=\"#Grid/util/Location#config-column\">column</a> or <a href=\"#Grid/util/Location#config-columnIndex\">columnIndex</a> is used to configure)</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner"
        },
        {
          "name": "columnIndex",
          "description": "<p>The column index which this location references. (unless <a href=\"#Grid/util/Location#config-column\">column</a> or <a href=\"#Grid/util/Location#config-columnId\">columnId</a> is used to configure)</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "field",
          "description": "<p>The field of the column index which this location references. (unless another column identifier is used to configure)</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "constructor",
          "description": "<p>Initializes a new Location.</p>",
          "parameters": [
            {
              "name": "location",
              "type": [
                "Object",
                "HTMLElement"
              ],
              "description": "<p>A grid location specifier. This may be:</p>\n<ul>\n<li>An element inside a grid cell or a grid cell.</li>\n<li>An object identifying a cell location using the following properties:\n<ul>\n<li>grid</li>\n<li>record</li>\n<li>rowIndex</li>\n<li>column</li>\n<li>columnIndex</li>\n</ul>\n</li>\n</ul>"
            }
          ],
          "scope": "inner"
        },
        {
          "name": "move",
          "description": "<p>Returns a <strong>*new *</strong> <code>Location</code> instance having moved from the current location in the\nmode specified.</p>",
          "parameters": [
            {
              "name": "where",
              "type": "Number",
              "description": "<p>Where to move from this Location. May be:</p>\n<ul>\n<li><code>Location.UP</code></li>\n<li><code>Location.NEXT_CELL</code></li>\n<li><code>Location.DOWN</code></li>\n<li><code>Location.PREV_CELL</code></li>\n<li><code>Location.FIRST_COLUMN</code></li>\n<li><code>Location.LAST_COLUMN</code></li>\n<li><code>Location.FIRST_CELL</code></li>\n<li><code>Location.LAST_CELL</code></li>\n<li><code>Location.PREV_PAGE</code></li>\n<li><code>Location.NEXT_PAGE</code></li>\n</ul>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Grid.util.Location",
            "description": "<p>A Location object encapsulating the target location.</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "rowIndex",
          "description": "<p>Yields the row index of this location.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "visibleRowIndex",
          "access": "private",
          "description": "<p>Used by GridNavigation.</p>",
          "scope": "instance"
        },
        {
          "name": "isSelectable",
          "description": "<p>Yields <code>true</code> if the cell and row are selectable.</p>\n<p>That is if the record is present in the grid's store and it's not a group summary or group header record.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "cell",
          "description": "<p>The cell DOM element which this Location references.</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "target",
          "description": "<p>The DOM element which encapsulates the focusable target of this Location.</p>\n<p>This is usually the <a href=\"#Grid/util/Location#property-cell\">cell</a>, but if this is an actionable location, this\nmay be another DOM element within the cell.</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isActionable",
          "description": "<p>This property is <code>true</code> if the focus target is not the cell itself.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isColumnHeader",
          "description": "<p>This property is <code>true</code> if this location represents a column header.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isCell",
          "description": "<p>This property is <code>true</code> if this location represents a cell in the grid body.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "SubGridScroller",
      "modulePath": "Grid/util/SubGridScroller",
      "classDescription": "<p>A Scroller subclass which handles scrolling in a SubGrid. Needs special treatment since the SubGrid itself only\nallows horizontal scrolling, while the vertical scrolling is done by an outer element containing all subgrids.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "SubGridScroller.js",
      "path": "/Calendar/lib/Grid/util"
    },
    {
      "name": "TableExporter",
      "modulePath": "Grid/util/TableExporter",
      "classDescription": "<p>This class transforms grid component into two arrays: rows and columns. Columns array contains objects with\nmeta information about column: field name, column name, width and type of the rendered value, rows array contains\narrays of cell values.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const exporter = new TableExporter({ target : grid });\nexporter.export()\n\n// Output\n{\n    columns : [\n        { field : 'name',     value : 'First name', type : 'string',  width : 100 },\n        { field : 'surname',  value : 'Last name',  type : 'string',  width : 100 },\n        { field : 'age',      value : 'Age',        type : 'number',  width : 50  },\n        { field : 'married',  value : 'Married',    type : 'boolean', width : 50  },\n        { field : 'children', value : 'Children',   type : 'object',  width : 100 }\n    ],\n    rows : [\n        ['Michael', 'Scott',   40, false, []],\n        ['Jim',     'Halpert', 30, true,  [...]]\n    ]\n}\n</code></pre>\n<h2>How data is exported</h2>\n<p>Exporter iterates over store records and processes each record for each column being exported. Exporter uses same\napproach to retrieve data as column: reading record field, configured on the column, or calling renderer function\nif one is provided. This means data can be of any type: primitives or objects. So children array in the above code\nsnippet may contain instances of child record class.</p>\n<h2>Column renderers</h2>\n<p>Column renderers are commonly used to style the cell, or even render more HTML into it, like <a href=\"#Grid/column/WidgetColumn\">WidgetColumn</a>\ndoes. This is not applicable in case of export. Also, given grid uses virtual rendering (only renders visible rows) and\nexporter iterates over all records, not just visible ones, we cannot provide all data necessary to the renderer. Some\narguments, like cellElement and row, wouldn't exist. Thus renderer is called with as much data we have: value,\nrecord, column, grid, other <a href=\"#Grid/column/Column#config-renderer\">documented arguments</a> would be undefined.</p>\n<p>Exporter adds one more flag for renderer function: isExport. When renderer receives this flag it knows\ndata is being exported and can skip DOM work to return simpler value. Below snippet shows simplified code of the\nwidget column handling export:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>renderer({ isExport }) {\n    if (isExport) {\n        return null;\n    }\n    else {\n        // widget rendering routine\n        ...\n    }\n}\n</code></pre>\n<h2>Column types</h2>\n<p>Column types are not actually a complete list of JavaScript types (you can get actual type of the cell using typeof) it\nis a simple and helpful meta information.</p>\n<p>Available column types are:</p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>date</li>\n<li>object</li>\n</ul>\n<p>Everything which is not primitive like string/number/bool (or a date) is considered an object. This includes null, undefined,\narrays, classes, functions etc.</p>\n<h2>Getting column type</h2>\n<p>If existing grid column is used, column type first would be checked with <a href=\"#Grid/column/Column#config-exportedType\">exportedType</a>\nconfig. If exportedType is undefined or column does not exist in grid, type is read from a record field definition.\nIf the field is not defined, object type is used.</p>\n<p>Configuring exported type:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n    columns : [\n        {\n            name         : 'Name',\n            field        : 'name',\n            exportedType : 'object',\n            renderer     : ({ value, isExport }) => {\n                if (isExport) {\n                    return { value }; // return value wrapped into object\n                }\n            }\n    ]\n})\n</code></pre>",
      "extends": [
        "Core/Base"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TableExporter.js",
      "path": "/Calendar/lib/Grid/util",
      "configs": [
        {
          "name": "target",
          "description": "<p>Target grid instance to export data from</p>",
          "type": "Grid.view.Grid",
          "scope": "inner"
        },
        {
          "name": "defaultColumnWidth",
          "description": "<p>Specifies a default column width if no width specified</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "exportDateAsInstance",
          "description": "<p>Set to false to export date as it is displayed by Date column formatter</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showGroupHeader",
          "description": "<p>If true and the grid is grouped, shows the grouped value in the first column. True by default.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "columns",
          "description": "<p>An array of columns configuration used to specify columns width, headers name, and column fields to get the data from.\n'field' config is required. If 'text' is missing, it will try to get it retrieved from the grid column or the 'field' config.\nIf 'width' is missing, it will try to get it retrieved from the grid column or <a href=\"#Grid/util/TableExporter#config-defaultColumnWidth\">defaultColumnWidth</a> config.\nIf no columns provided the config will be generated from the grid columns.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>columns : [\n    'firstName', // field\n    'age', // field\n    { text : 'Starts', field : 'start', width : 140 },\n    { text : 'Ends', field : 'finish', width : 140 }\n]\n</code></pre>",
          "type": [
            "Array.<String>",
            "Array.<Object>"
          ],
          "scope": "inner"
        },
        {
          "name": "indent",
          "description": "<p>When true and tree is being exported, node names are indented with <a href=\"#Grid/util/TableExporter#config-indentationSymbol\">indentationSymbol</a></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "indentationSymbol",
          "description": "<p>This symbol (four spaces by default) is used to indent node names when <a href=\"#Grid/util/TableExporter#config-indent\">indent</a> is true</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "    "
        }
      ],
      "functions": [
        {
          "name": "export",
          "description": "<p>Exports grid data according to provided config</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "processColumn",
          "access": "private",
          "description": "<p>Extracts export data from the column instance</p>",
          "parameters": [
            {
              "name": "column",
              "type": "Grid.column.Column"
            },
            {
              "name": "config",
              "type": "Object"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "processRecord",
          "access": "private",
          "description": "<p>Extracts export data from the record instance reading supplied column configs</p>",
          "parameters": [
            {
              "name": "record",
              "type": [
                "Core.data.Model",
                "null"
              ],
              "description": "<p>If null is passed, all columns will be filled with empty strings</p>"
            },
            {
              "name": "columns",
              "type": "Array.<Grid.column.Column>"
            },
            {
              "name": "config",
              "type": "Object"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>"
          }
        }
      ]
    },
    {
      "name": "Bar",
      "modulePath": "Grid/view/Bar",
      "classDescription": "<p>Base class used by Header and Footer. Holds an element for each column. Not intended to be used directly.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "access": "internal",
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Bar.js",
      "path": "/Calendar/lib/Grid/view",
      "functions": [
        {
          "name": "fixCellWidths",
          "access": "private",
          "description": "<p>Fix cell widths (flex or fixed width) after rendering.\nNot a part of template any longer because of CSP</p>",
          "scope": "instance"
        },
        {
          "name": "getBarCellElement",
          "access": "private",
          "description": "<p>Get the header or footer cell element for the specified column.</p>",
          "parameters": [
            {
              "name": "columnId",
              "type": "String",
              "description": "<p>Column id</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Header or footer element, depending on which subclass is in use.</p>"
          }
        }
      ]
    },
    {
      "name": "Footer",
      "modulePath": "Grid/view/Footer",
      "classDescription": "<p>Grid footer, used by Summary feature. You should not need to create instances manually.</p>",
      "extends": [
        "Grid/view/Bar"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Footer.js",
      "path": "/Calendar/lib/Grid/view",
      "functions": [
        {
          "name": "getFooter",
          "description": "<p>Get the footer cell element for the specified column.</p>",
          "parameters": [
            {
              "name": "columnId",
              "type": "String",
              "description": "<p>Column id</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Footer cell element</p>"
          }
        },
        {
          "name": "contentTemplate",
          "access": "private",
          "description": "<p>Footer template. Iterates leaf columns to create content.\nStyle not included because of CSP. Widths are fixed up in\n<a href=\"#Grid/view/Footer#function-fixFooterWidths\">fixFooterWidths</a></p>",
          "scope": "instance"
        },
        {
          "name": "fixFooterWidths",
          "access": "private",
          "description": "<p>Fix footer widths (flex or fixed width) after rendering. Not a part of template any longer because of CSP</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Grid",
      "modulePath": "Grid/view/Grid",
      "classDescription": "<p>The Grid component is a very powerful and performant UI component that shows tabular data (or tree data using the <a href=\"#Grid/view/TreeGrid\">TreeGrid</a>).</p>\n<h2>Intro</h2>\nThe Grid widget has a wide range of features and a large API to allow users to work with data efficiently in the browser. The two\nmost important configs are <a href=\"#Grid/view/Grid#config-store\">store</a> and <a href=\"#Grid/view/Grid#config-columns\">columns</a>. With the store config, you decide which data to load into the grid.\nYou can work with both in-memory arrays or load data using ajax. See the <a href=\"#Core/data/Store\">Store</a> class to learn more about loading data into stores.\n<p>The columns config accepts an array of <a href=\"#Grid/column/Column\">Column</a> descriptors defining which fields that will be displayed in the grid.\nThe <a href=\"#Grid/column/Column#config-field\">field</a> property in the column descriptor maps to a field in your dataset. The simplest grid configured with inline data and two columns would\nlook like this:</p>\n<pre><code> let grid = new Grid({\n     appendTo : document.body,\n\n     columns: [\n         { field: 'name', text: 'Name' },\n         { field: 'job', text: 'Job', renderer: ({value}) =&gt; value || 'Unemployed' }\n     ],\n\n     data: [\n         { name: 'Bill', job: 'Retired' },\n         { name: 'Elon', job: 'Visionary' },\n         { name: 'Me' }\n     ]\n });\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Grid/view/Grid.js\"></div></p>\n<h2>Features</h2>\nTo avoid the Grid core being bloated, its main features are implemented in separate ´feature´ classes. These can be turned on and off based\non your requirements. To configure (or disable) a feature, use the <a href=\"#Grid/view/Grid#config-features\">features</a> object to provide your desired configuration for the features\nyou want to use. Each feature has an ´id´ that you use as a key in the features object:\n<pre><code> let grid = new Grid({\n     appendTo : document.body,\n\n     features : {\n         cellEdit     : false,\n         regionResize : true,\n         cellTooltip  : {\n             tooltipRenderer : (data) =&gt; {\n             }\n         },\n         ...\n     }\n });\n</code></pre>\n<p><h2 class=\"collapsible-heading\">Column configuration options</h2><section class=\"collapsible\">\nA grid contains a number of columns that control how your data is rendered. The simplest option is to simply point a Column to a field in your dataset, or define a custom <a href=\"#Grid/column/Column#config-renderer\">renderer</a>.\nThe renderer function receives one object parameter containing rendering data for the current cell being rendered.</p>\n<pre><code> let grid = new Grid({\n     appendTo : document.body,\n\n     columns: [\n         {\n             field: 'task',\n             text: 'Task',\n             renderer: (renderData) =&gt; {\n                 const record = renderData.record;\n\n                 if (record.percentDone === 100) {\n                     renderData.cellElement.classList.add('taskDone');\n                     renderData.cellElement.style.background = 'green';\n                 }\n\n                 return renderData.value;\n             }\n         }\n     ]\n });\n</code></pre>\n<p></section>\n<h2 class=\"collapsible-heading\">Grid sections (aka \"locked\" or \"frozen\" columns)</h2><section class=\"collapsible\">\nThe grid can be divided horizontally into individually scrollable sections. This is great if you have lots of columns that\ndon't fit the available width of the screen. To enable this feature, simply mark the columns you want to <code>lock</code>.\nLocked columns are then displayed in their own section to the left of the other columns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let grid = new Grid({\n    appendTo : document.body,\n    width    : 500,\n    subGridConfigs : {\n        // set a fixed locked section width if desired\n        locked : { width: 300 }\n    },\n    columns : [\n        { field : 'name', text : 'Name', width : 200, locked : true },\n        { field : 'firstName', text : 'First name', width : 100, locked : true },\n        { field : 'surName', text : 'Last name', width : 100, locked : true },\n        { field : 'city', text : 'City', width : 100 },\n        { type : 'number', field : 'age', text : 'Age', width : 200 },\n        { field : 'food', text : 'Food', width : 200 }\n    ]\n});\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Grid/view/LockedGrid.js\"></div>\nYou can also move columns between sections by using drag and drop, or use the built-in header context menu. If you want to be able to resize the\nlocked grid section, enable the <a href=\"#Grid/feature/RegionResize\">regionResize</a> feature.\n</section>\n<h2 class=\"collapsible-heading\">Filtering</h2><section class=\"collapsible\">\nOne important requirement of a good Grid component is the ability to filter large datasets to quickly find what you're looking for. To\nenable filtering (through the context menu), add the <a href=\"#Grid/feature/Filter\">filter</a> feature:</p>\n<pre><code> let grid = new Grid({\n     features: {\n         filter: true\n     }\n });\n</code></pre>\n<p>Or activate a default filter at initial rendering:</p>\n<pre><code> let grid = new Grid({\n     features: {\n         filter: { property : 'city', value : 'New York' }\n     }\n });\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Grid/feature/Filter.js\"></div>\n</section>\n<h2 class=\"collapsible-heading\">Tooltips</h2><section class=\"collapsible\">\nIf you have a data models with many fields, and you want to show\nadditional data when hovering over a cell, use the <a href=\"#Grid/feature/CellTooltip\">cellTooltip</a> feature. To show a tooltip for all cells:</p>\n<pre><code> let grid = new Grid({\n     features: {\n         cellTooltip: ({value}) =&gt; value\n     }\n });\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Grid/feature/CellTooltip.js\"></div>\n</section>\n<h2 class=\"collapsible-heading\">Inline Editing (default <strong>on</strong>)</h2><section class=\"collapsible\">\nTo enable inline cell editing in the grid, simply add the <a href=\"#Grid/feature/CellEdit\">cellEdit</a> feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let grid = new Grid({\n    appendTo : document.body,\n\n    features : {\n        cellEdit : true\n    },\n    columns: [\n        {\n            field: 'task',\n            text: 'Task'\n        }\n    ]\n});\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Grid/feature/CellEdit.js\"></div>\n</section>\n<h2 class=\"collapsible-heading\">Context Menu</h2><section class=\"collapsible\">\nUse <a href=\"#Grid/feature/CellMenu\">CellMenu</a> and <a href=\"#Grid/feature/HeaderMenu\">HeaderMenu</a>\nfeatures if you want your users to be able to interact with the data through the context menu:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let grid = new Grid({\n    features : {\n        headerMenu : {\n            items : {\n                showInfo : {\n                    text   : 'Show info',\n                    icon   : 'fa fa-info-circle',\n                    weight : 200,\n                    onItem : ({ item }) => console.log(item.text)\n                }\n            }\n        },\n        cellMenu :  {\n            items : {\n                showOptions : {\n                    text   : 'Show options',\n                    icon   : 'fa fa-gear',\n                    weight : 200\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Grid/feature/CellMenu.js\"></div>\n</section>\n<h2 class=\"collapsible-heading\">Grouping</h2><section class=\"collapsible\">\nTo group rows by a field in your dataset, use the <a href=\"#Grid/feature/Group\">group</a> feature.\n<div class=\"external-example \" data-file=\"Grid/feature/Group.js\"></div>\n</section>\n<h2 class=\"collapsible-heading\">Searching</h2><section class=\"collapsible\">\nWhen working with lots of data, a quick alternative to filtering is the <a href=\"#Grid/feature/Search\">search</a> feature. It highlights\nmatching values in the grid as you type.\n<div class=\"external-example \" data-file=\"Grid/feature/Search.js\"></div>\n</section>\n<h2 class=\"collapsible-heading\">Loading and saving data</h2><section class=\"collapsible\">\nThe grid keeps all its data in a <a href=\"#Core/data/Store\">Store</a>, which is essentially an Array of <a href=\"#Core/data/Model\">Model</a> items.\nYou define your own Model representing your data entities and use the Model API to get and set values.</p>\n<pre><code> class Person extends Model {}\n\n let person = new Person({\n     name: 'Steve',\n     age: 38\n });\n\n person.name = 'Linda'; // person object is now `dirty`\n\n let store = new Store({\n     data : [\n         { name : 'Don', age : 40 }\n     ]\n });\n\n store.add(person);\n\n console.log(store.count()); // === 2\n\n store.remove(person); // Remove from store\n</code></pre>\n<p>When you update a record in a store, it's considered dirty, until you call <a href=\"#Core/data/mixin/StoreCRUD#function-commit\">commit</a> on the containing Store. You can also configure your Store to commit automatically (like Google docs).\nIf you use an AjaxStore, it will send changes to your server when commit is called.</p>\n<p>Any changes you make to the Store or its records are immediately reflected in the Grid, so there is no need to tell\nit to refresh manually.</p>\n<p>To create a custom load mask, subscribe to the grid's store events and <a href=\"#Core/widget/Widget#config-masked\">mask</a>\non <a href=\"#Core/data/AjaxStore#event-beforeRequest\">beforeRequest</a> and unmask on <a href=\"#Core/data/AjaxStore#event-afterRequest\">afterRequest</a>. The\nmask can also be used to display error messages if an <a href=\"#Core/data/AjaxStore#event-exception\">exception</a> occurs.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> const grid = new Grid({\n     loadMask : null\n });\n\n grid.store.on({\n     beforeRequest() {\n         grid.masked = {\n             text : 'Data is loading...'\n         };\n     },\n     afterRequest() {\n         grid.masked = null;\n     },\n     exception({ response }) {\n         grid.masked.error = response.message || 'Load failed';\n     }\n });\n\n store.load();\n</code></pre>\n<p>To learn more about loading and saving data, please refer to <a href=\"#Grid/guides/data/displayingdata.md\">this guide</a>.\n</section>\n<h2 class=\"collapsible-heading\">Default configs</h2><section class=\"collapsible\">\nThere is a myriad of configs and features available for Grid, some of them on by default and some of them requiring\nextra configuration. The code below tries to illustrate the major things that are used by default:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let grid = new Grid({\n   // The following features are enabled by default:\n   features : {\n       cellEdit      : true,\n       columnPicker  : true,\n       columnReorder : true,\n       columnResize  : true,\n       cellMenu      : true,\n       headerMenu    : true,\n       group         : true,\n       rowCopyPaste  : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows\n       sort          : true\n   },\n\n   animateRemovingRows       : true,  // Rows will slide out on removal\n   autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height`\n   columnLines               : true,  // Themes might override it to hide lines anyway\n   emptyText                 : 'No rows to display',\n   enableTextSelection       : false, // Not allowed to select text in cells by default,\n   fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n   fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n   loadMask                  : 'Loading...',\n   resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n   responsiveLevels : {\n     small : 400,\n     medium : 600,\n     large : '*'\n   },\n   rowHeight                  : null,  // Determined using CSS, it will measure rowHeight\n   showDirty                  : false, // No indicator for changed cells\n});\n</code></pre>\n<p></section>\n<h2 class=\"collapsible-heading\">Performance</h2><section class=\"collapsible\">\nIn general the Grid widget has very good performance and you can try loading any amount of data in the <a target=\"_blank\" href=\"../examples/bigdataset\">bigdataset</a> demo.\nThe overall rendering performance is naturally affected by many other things than\nthe data volume. Other important factors that can impact performance: number of columns, complex cell renderers, locked columns, the number of features enabled\nand of course the browser (Chrome fastest, IE slowest).\n</section></p>\n<h2>Accessibility</h2>\nAs far as possible, the grid is accessible to WAI-ARIA standards. Every cell, including column\nheader cells is visitable. The arrow keys navigate, and if a cell contains focusable content,\nnavigating to that cell focuses the content. `Escape` will exit from that and focus the encpsulating\ncell.\n<p>When tabbing back into a grid that has previously been entered, focus moves to the last focused\ncell.</p>\n<p>The column menu is invoked using the <code>Space</code> key when focused on a column header.</p>\n<p>The cell menu is invoked using the <code>Space</code> key when focused on a data cell.</p>",
      "extends": [
        "Grid/view/GridBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Grid.js",
      "path": "/Calendar/lib/Grid/view",
      "classType": "grid"
    },
    {
      "name": "GridBase",
      "modulePath": "Grid/view/GridBase",
      "classDescription": "<p>A thin base class for <a href=\"#Grid/view/Grid\">Grid</a>. Does not include any features by default, allowing smaller custom built\nbundles if used in place of <a href=\"#Grid/view/Grid\">Grid</a>.</p>\n<p><strong>NOTE:</strong> In most scenarios you probably want to use Grid instead of GridBase.</p>",
      "extends": [
        "Core/widget/Panel"
      ],
      "mixes": [
        "Core/mixin/Pluggable",
        "Core/mixin/State",
        "Grid/view/mixin/GridElementEvents",
        "Grid/view/mixin/GridFeatures",
        "Grid/view/mixin/GridResponsive",
        "Grid/view/mixin/GridSelection",
        "Grid/view/mixin/GridState",
        "Grid/view/mixin/GridSubGrids",
        "Core/mixin/LoadMaskable"
      ],
      "plugins": [
        "Grid/row/RowManager"
      ],
      "features": [
        "Grid/feature/CellEdit",
        "Grid/feature/CellMenu",
        "Grid/feature/CellTooltip",
        "Grid/feature/ColumnAutoWidth",
        "Grid/feature/ColumnDragToolbar",
        "Grid/feature/ColumnPicker",
        "Grid/feature/ColumnReorder",
        "Grid/feature/ColumnResize",
        "Grid/feature/Filter",
        "Grid/feature/FilterBar",
        "Grid/feature/Group",
        "Grid/feature/GroupSummary",
        "Grid/feature/HeaderMenu",
        "Grid/feature/MergeCells",
        "Grid/feature/QuickFind",
        "Grid/feature/RegionResize",
        "Grid/feature/RowCopyPaste",
        "Grid/feature/RowReorder",
        "Grid/feature/Search",
        "Grid/feature/Sort",
        "Grid/feature/StickyCells",
        "Grid/feature/Stripe",
        "Grid/feature/Summary",
        "Grid/feature/Tree",
        "Grid/feature/TreeGroup",
        "Grid/feature/experimental/ExcelExporter",
        "Grid/feature/export/PdfExport",
        "Grid/feature/export/exporter/MultiPageExporter",
        "Grid/feature/export/exporter/MultiPageVerticalExporter",
        "Grid/feature/export/exporter/SinglePageExporter"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridBase.js",
      "path": "/Calendar/lib/Grid/view",
      "hideConfigs": [
        "autoUpdateRecord",
        "defaults",
        "hideWhenEmpty",
        "itemCls",
        "items",
        "layout",
        "layoutStyle",
        "lazyItems",
        "namedItems",
        "record",
        "textContent",
        "defaultAction",
        "html",
        "htmlCls",
        "tag",
        "textAlign",
        "trapFocus",
        "content",
        "defaultBindProperty",
        "ripple"
      ],
      "hideProperties": [
        "html",
        "isSettingValues",
        "isValid",
        "items",
        "record",
        "values",
        "content",
        "layoutStyle"
      ],
      "hideFunctions": [
        "attachTooltip",
        "add",
        "getWidgetById",
        "insert",
        "processWidgetConfig",
        "remove",
        "removeAll"
      ],
      "properties": [
        {
          "name": "readOnly",
          "description": "<p>Get/set the grid's read-only state. When set to <code>true</code>, any UIs for modifying data are disabled.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "scrollManager",
          "description": "<p>Get the ScrollManager used by this Grid.</p>",
          "type": "Core.util.ScrollManager",
          "scope": "inner",
          "readonly": true,
          "category": "Scrolling"
        },
        {
          "name": "transitionDuration",
          "description": "<p>Animation transition duration in milliseconds.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "store",
          "description": "<p>Get/set the store used by this Grid. The setter accepts Store or a configuration object for a store.\nIf the configuration contains a <code>readUrl</code>, an AjaxStore will be created.</p>",
          "type": "Core.data.Store",
          "accepts": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "columns",
          "description": "<p>Get the <a href=\"#Grid/data/ColumnStore\">ColumnStore</a> used by this Grid.</p>",
          "type": "Grid.data.ColumnStore",
          "scope": "inner",
          "readonly": true,
          "category": "Common"
        },
        {
          "name": "firstVisibleRow",
          "description": "<p>Get the topmost visible grid row</p>",
          "type": "Grid.row.Row",
          "scope": "inner",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "lastVisibleRow",
          "description": "<p>Get the last visible grid row</p>",
          "type": "Grid.row.Row",
          "scope": "inner",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "topRow",
          "access": "private",
          "description": "<p>Get the Row that is currently displayed at top.</p>",
          "type": "Grid.row.Row",
          "scope": "inner",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "bottomRow",
          "access": "private",
          "description": "<p>Get the Row currently displayed furthest down.</p>",
          "type": "Grid.row.Row",
          "scope": "inner",
          "readonly": true,
          "category": "Rows"
        },
        {
          "name": "data",
          "description": "<p>Convenience functions for getting/setting data in related store</p>",
          "type": "Array.<Object>",
          "scope": "instance",
          "category": "Common"
        },
        {
          "name": "bodyHeight",
          "description": "<p>Body height</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Layout"
        },
        {
          "name": "headerHeight",
          "description": "<p>Header height</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true,
          "category": "Layout"
        },
        {
          "name": "columnLines",
          "description": "<p>Toggle column line visibility. End result might be overruled by/differ between themes.</p>",
          "type": "Boolean",
          "scope": "instance",
          "category": "Misc"
        },
        {
          "name": "contentHeight",
          "access": "private",
          "description": "<p>Returns content height calculated from row manager</p>",
          "scope": "instance"
        }
      ],
      "configs": [
        {
          "name": "readOnly",
          "description": "<p>Configure as <code>true</code> to make the grid read-only, by disabling any UIs for modifying data.</p>\n<p><strong>Note that checks MUST always also be applied at the server side.</strong></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "autoHeight",
          "description": "<p>Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid\nusing <code>autoHeight: true</code>, since it will bypass Grids virtual rendering and render all rows at once, which\nin a larger grid is really bad for performance.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Layout"
        },
        {
          "name": "enableSticky",
          "description": "<p>Configure this as <code>true</code> to allow elements within cells to be styled as <code>position: sticky</code>.</p>\n<p>Columns which contain sticky content will need to be configured with</p>\n<pre class=\"prettyprint source lang-javascript\"><code>   cellCls : 'b-sticky-cell',\n</code></pre>\n<p>Or a custom renderer can add the class to the passed cell element.</p>\n<p>It is up to the application author how to style the cell content. It is recommended that\na custom renderer create content with CSS class names which the application author\nwill use to apply the <code>position</code>, and matching <code>margin-top</code> and <code>top</code> styles to keep the\ncontent stuck at the grid's top.</p>\n<p>Note that not all browsers support this CSS feature. A cross browser alternative\nis to use the {link Grid.feature.StickyCells StickyCells} Feature.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "enableTextSelection",
          "description": "<p>Set to true to allow text selection in the grid cells</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Selection"
        },
        {
          "name": "fillLastColumn",
          "description": "<p>Set to <code>true</code> to stretch the last column in a grid with all fixed width columns\nto fill extra available space if the grid's width is wider than the sum of all\nconfigured column widths.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Layout"
        },
        {
          "name": "showDirty",
          "description": "<p>Configure as <code>true</code> to have the grid show a red &quot;changed&quot; tag in cells who's\nfield value has changed and not yet been committed.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "subGridConfigs",
          "description": "<p>An object containing sub grid configuration objects keyed by a <code>region</code> property.\nBy default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.\nThe 'normal' region defaults to use <code>flex: 1</code>.</p>\n<p>This config can be used to reconfigure the &quot;built in&quot; sub grids or to define your own.</p>\n<pre class=\"prettyprint source\"><code>// Redefining the &quot;built in&quot; regions\nnew Grid({\n  subGridConfigs : {\n    locked : { flex : 1 },\n    normal : { width : 100 }\n  }\n});\n\n// Defining your own multi region sub grids\nnew Grid({\n  subGridConfigs : {\n    left   : { width : 100 },\n    middle : { flex : 1 },\n    right  : { width  : 100 }\n  },\n\n  columns : {\n    { field : 'manufacturer', text: 'Manufacturer', region : 'left' },\n    { field : 'model', text: 'Model', region : 'middle' },\n    { field : 'year', text: 'Year', region : 'middle' },\n    { field : 'sales', text: 'Sales', region : 'right' }\n  }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "store",
          "description": "<p>Store that holds records to display in the grid, or a store config object. If the configuration contains\na <code>readUrl</code>, an <code>AjaxStore</code> will be created.</p>\n<p>A store will be created if none is specified.</p>",
          "type": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "scrollManager",
          "description": "<p>Configuration values for the <a href=\"#Core/util/ScrollManager\">ScrollManager</a> class.</p>",
          "type": [
            "Object",
            "Core.util.ScrollManager"
          ],
          "scope": "inner",
          "category": "Scrolling"
        },
        {
          "name": "columns",
          "description": "<p>Column definitions for the grid, will be used to create Column instances that are added to a ColumnStore:</p>\n<pre class=\"prettyprint source\"><code>new Grid({\n  columns : [\n    { text : 'Alias', field : 'alias' },\n    { text : 'Superpower', field : 'power' }\n  ]\n});\n</code></pre>\n<p>Also accepts a store config object:</p>\n<pre class=\"prettyprint source\"><code>new Grid({\n  columns : {\n    data : [\n      { text : 'Alias', field : 'alias' },\n      { text : 'Superpower', field : 'power' }\n    ],\n    listeners : {\n      update() {\n        // Some update happened\n      }\n    }\n  }\n});\n</code></pre>\n<p>This store can be accessed using <a href=\"#Grid/view/GridBase#property-columns\">columns</a>:</p>\n<pre class=\"prettyprint source\"><code>grid.columns.add({ field : 'column', text : 'New column' });\n</code></pre>",
          "type": [
            "Array.<Object>",
            "Object"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "minHeight",
          "description": "<p>Grid's <code>min-height</code>. Defaults to <code>10em</code> to be sure that the Grid always has a height wherever it is\ninserted.</p>\n<p>Can be either a String or a Number (which will have 'px' appended).</p>\n<p>Note that <em>reading</em> the value will return the numeric value in pixels.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "rowHeight",
          "description": "<p>Row height in pixels. When set to null, an empty row will be measured and its height will be used as\ndefault row height, enabling it to be controlled using CSS</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "fixedRowHeight",
          "description": "<p>Use fixed row height. Setting this to <code>true</code> will configure the underlying RowManager to use fixed row\nheight, which sacrifices the ability to use rows with variable height to gain a fraction better\nperformance.</p>\n<p>Using this setting also ignores the <a href=\"#Grid/view/GridBase#config-getRowHeight\">getRowHeight</a> function, and thus any\nrow height set in data. Only Grids configured <a href=\"#Grid/view/GridBase#config-rowHeight\">rowHeight</a> is used.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "getRowHeight",
          "description": "<p>A function called for each row to determine its height. It is passed a <a href=\"#Core/data/Model\">record</a> and\nexpected to return the desired height of that records row. If the function returns a falsy value, Grids\nconfigured <a href=\"#Grid/view/GridBase#config-rowHeight\">rowHeight</a> is used.</p>\n<p>The default implementation of this function returns the row height from the records\n<a href=\"#Grid/data/GridRowModel#field-rowHeight\">rowHeight field</a>.</p>\n<p>Override this function to take control over how row heights are determined:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n   getRowHeight(record) {\n       if (record.low) {\n           return 20;\n       }\n       else if (record.high) {\n           return 60;\n       }\n\n       // Will use grids configured rowHeight\n       return null;\n   }\n});\n</code></pre>\n<p>NOTE: Height set in a Column renderer takes precedence over the height returned by this function.</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Number",
            "description": "<p>Desired row height</p>"
          },
          "category": "Layout",
          "parameters": [
            {
              "name": "getRowHeight.record",
              "type": "Core.data.Model",
              "description": "<p>Record to determine row height for</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "emptyText",
          "description": "<p>Text to display when there is no data to display in the grid</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "L{noRows}",
          "category": "Common"
        },
        {
          "name": "fullRowRefresh",
          "description": "<p>Refresh entire row when a record changes (<code>true</code>) or, if possible, only the cells affected (<code>false</code>).</p>\n<p>When this is set to <code>false</code>, then if a column uses a renderer, cells in that column will still\nbe updated because it is impossible to know whether the cells value will be affected.</p>\n<p>If a standard, provided Column class is used with no custom renderer, its cells will only be updated\nif the column's <a href=\"#Grid/column/Column#config-field\">field</a> is changed.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "hideHeaders",
          "description": "<p>True to not create any grid column headers</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "preserveScrollOnDatasetChange",
          "description": "<p>Specify <code>true</code> to preserve vertical scroll position after store actions that trigger a <code>refresh</code> event,\nsuch as loading new data and filtering.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "preserveFocusOnDatasetChange",
          "description": "<p>True to preserve focused cell after loading new data</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "data",
          "description": "<p>Data to set in grids store (a Store will be created if none is specified)</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "defaultRegion",
          "description": "<p>Region to which columns are added when they have none specified</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "normal",
          "category": "Misc"
        },
        {
          "name": "destroyStore",
          "description": "<p>true to destroy the store when the grid is destroyed</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "maskDefaults",
          "description": "<p>Grids change the <code>maskDefaults</code> to cover only their <code>body</code> element.</p>",
          "type": [
            "Object",
            "Core.widget.Mask"
          ],
          "scope": "inner",
          "category": "Misc"
        },
        {
          "name": "columnLines",
          "description": "<p>Set to <code>false</code> to inhibit column lines</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "resizeToFitIncludesHeader",
          "description": "<p>Set to <code>false</code> to only measure cell contents when double clicking the edge between column headers.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Layout"
        },
        {
          "name": "animateRemovingRows",
          "description": "<p>Set to <code>false</code> to prevent remove row animation and remove the delay related to that.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "disableGridRowModelWarning",
          "description": "<p>Set to <code>true</code> to not get a warning when using another base class than GridRowModel for your grid data. If\nyou do, and would like to use the full feature set of the grid then include the fields from GridRowModel\nin your model definition.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "monitorResize",
          "description": "<p>Grid monitors window resize by default.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "features",
          "description": "<p>An object containing Feature configuration objects (or <code>true</code> if no configuration is required)\nkeyed by the Feature class name in all lowercase.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "scrollable",
          "description": "<p>Configures whether the grid is scrollable in the <code>Y</code> axis. This is used to configure a <a href=\"#Grid/util/GridScroller\">GridScroller</a>.\nSee the <a href=\"#Grid/view/GridBase#config-scrollerClass\">scrollerClass</a> config option.</p>",
          "type": [
            "Boolean",
            "Object",
            "Core.helper.util.Scroller"
          ],
          "scope": "inner",
          "category": "Scrolling"
        },
        {
          "name": "scrollerClass",
          "description": "<p>The class to instantiate to use as the <a href=\"#Grid/view/GridBase#config-scrollable\">scrollable</a>. Defaults to <a href=\"#Grid/util/GridScroller\">GridScroller</a>.</p>",
          "type": "Core.helper.util.Scroller",
          "scope": "inner",
          "category": "Scrolling",
          "typings": {
            "returns": "typeof Scroller"
          }
        },
        {
          "name": "transitionDuration",
          "description": "<p>Animation transition duration in milliseconds.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 500,
          "category": "Misc"
        },
        {
          "name": "contextMenuTriggerEvent",
          "description": "<p>Event which is used to show context menus.\nAvailable options are: 'contextmenu', 'click', 'dblclick'.\nDefault value is 'contextmenu'</p>",
          "type": "String",
          "scope": "inner",
          "category": "Misc"
        }
      ],
      "functions": [
        {
          "name": "doDestroy",
          "access": "private",
          "description": "<p>Cleanup</p>",
          "scope": "instance"
        },
        {
          "name": "setGridClassList",
          "access": "private",
          "description": "<p>Adds extra classes to the Grid element after it's been configured.\nAlso iterates through features, thus ensuring they have been initialized.</p>",
          "scope": "instance"
        },
        {
          "name": "collapseAll",
          "description": "<p>Collapse all groups/parent nodes.</p>\n<p><em>NOTE: Only available when the <a href=\"#Grid/feature/Group\">Group</a> or the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled.</em></p>",
          "scope": "inner",
          "category": "Feature shortcuts"
        },
        {
          "name": "expandAll",
          "description": "<p>Expand all groups/parent nodes.</p>\n<p><em>NOTE: Only available when the <a href=\"#Grid/feature/Group\">Group</a> or the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled.</em></p>",
          "scope": "inner",
          "category": "Feature shortcuts"
        },
        {
          "name": "startEditing",
          "description": "<p>Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.</p>\n<p><em>NOTE: Only available when the <a href=\"#Grid/feature/CellEdit\">CellEdit</a> feature is enabled.</em></p>",
          "parameters": [
            {
              "name": "cellContext",
              "type": "Object",
              "description": "<p>Cell specified in format <code>{ id: 'x', columnId/column/field: 'xxx' }</code>.\nSee <a href=\"#Grid/view/Grid#function-getCell\">getCell</a> for details.</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "toggleCollapse",
          "description": "<p>Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.</p>\n<p><em>NOTE: Only available when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled.</em></p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to toggle</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Force collapse (true) or expand (false)</p>",
              "optional": true
            },
            {
              "name": "skipRefresh",
              "type": "Boolean",
              "description": "<p>Set to true to not refresh rows (if calling in batch)</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "collapse",
          "description": "<p>Collapse a single node.</p>\n<p><em>NOTE: Only available when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled.</em></p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to collapse</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expand",
          "description": "<p>Expand a single node.</p>\n<p><em>NOTE: Only available when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled.</em></p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to expand</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expandTo",
          "description": "<p>Expands parent nodes to make this node &quot;visible&quot;.</p>\n<p><em>NOTE: Only available when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled.</em></p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "getRowById",
          "access": "private",
          "description": "<p>Get Row for specified record id.</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record id (or a record)</p>"
            }
          ],
          "scope": "inner",
          "category": "Rows",
          "returns": {
            "type": "Grid.row.Row",
            "description": "<p>Found Row or null if record not rendered</p>"
          }
        },
        {
          "name": "getRecordCoords",
          "access": "private",
          "description": "<p>Returns top and bottom for rendered row or estimated coordinates for unrendered.</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record or record id</p>"
            }
          ],
          "scope": "inner",
          "category": "Calculations",
          "returns": {
            "type": "Object",
            "description": "<p>Record bounds with format { top, height, bottom }</p>"
          }
        },
        {
          "name": "getRow",
          "access": "private",
          "description": "<p>Get the Row at specified index. &quot;Wraps&quot; index if larger than available rows.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number"
            }
          ],
          "scope": "inner",
          "category": "Rows",
          "returns": {
            "type": "Grid.row.Row"
          }
        },
        {
          "name": "getRowFor",
          "description": "<p>Get a Row for either a record, a record id or an HTMLElement</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "HTMLElement",
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record or record id or HTMLElement</p>"
            }
          ],
          "scope": "inner",
          "category": "Rows",
          "returns": {
            "type": "Grid.row.Row",
            "description": "<p>Found Row or <code>null</code> if record not rendered</p>"
          }
        },
        {
          "name": "getRowFromElement",
          "access": "private",
          "description": "<p>Get a Row from an HTMLElement</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "scope": "inner",
          "category": "Rows",
          "returns": {
            "type": "Grid.row.Row",
            "description": "<p>Found Row or <code>null</code> if record not rendered</p>"
          }
        },
        {
          "name": "bindStore",
          "access": "private",
          "description": "<p>Hooks up data store listeners</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreUpdateRecord",
          "access": "private",
          "description": "<p>Rerenders a cell if a record is updated in the store</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreAdd",
          "access": "private",
          "description": "<p>Refreshes rows when data is added to the store</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreException",
          "access": "private",
          "description": "<p>Responds to exceptions signalled by the store</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreDataChange",
          "access": "private",
          "description": "<p>Refreshes rows when data is changed in the store</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreRecordIdChange",
          "access": "private",
          "description": "<p>The hook is called when the id of a record has changed.</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreBeforeRequest",
          "access": "private",
          "description": "<p>Shows a load mask while the connected store is loading</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreAfterRequest",
          "access": "private",
          "description": "<p>Hides load mask after a load request ends either in success or failure</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreRemove",
          "access": "private",
          "description": "<p>Animates removal of record.</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "onStoreRemoveAll",
          "access": "private",
          "description": "<p>Rerenders grid when all records have been removed</p>",
          "scope": "instance",
          "category": "Store"
        },
        {
          "name": "populateHeaderMenu",
          "access": "internal",
          "description": "<p>Populates the header context menu. Chained in features to add menu items.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "populateCellMenu",
          "access": "internal",
          "description": "<p>Populates the cell context menu. Chained in features to add menu items.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.record",
              "type": "Core.data.Model",
              "description": "<p>Record for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getCell",
          "description": "<p>Returns a cell if rendered.</p>",
          "parameters": [
            {
              "name": "cellContext",
              "type": "Object",
              "description": "<p>{ id: rowId, columnId: columnId [,column: column number, field: column field] }</p>"
            },
            {
              "name": "cellContext.row",
              "type": "Number",
              "description": "<p>The row index of the row to access. Exclusive with <code>id</code> and 'record'.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.id",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>The record id of the row to access. Exclusive with <code>row</code> and 'record'.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.record",
              "type": "Core.data.Model",
              "description": "<p>The record of the row to access. Exclusive with <code>id</code> and 'row'.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.column",
              "type": [
                "Grid.column.Column",
                "Number"
              ],
              "description": "<p>The column instance or the index of the cell to access. Exclusive with <code>columnId</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.columnId",
              "type": [
                "String",
                "Number"
              ],
              "description": "<p>The column id of the column to access. Exclusive with <code>column</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "cellContext.field",
              "type": "String",
              "description": "<p>The field of the column to access. Exclusive with <code>column</code>.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Getters",
          "returns": {
            "type": "HTMLElement"
          }
        },
        {
          "name": "getHeaderElement",
          "description": "<p>Returns the header element for the column</p>",
          "parameters": [
            {
              "name": "columnId",
              "type": [
                "String",
                "Number",
                "Grid.column.Column"
              ],
              "description": "<p>or Column instance</p>"
            }
          ],
          "scope": "instance",
          "category": "Getters",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Header element</p>"
          }
        },
        {
          "name": "getRecordFromElement",
          "description": "<p>Searches up from the specified element for a grid row and returns the record associated with that row.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element somewhere within a row or the row container element</p>"
            }
          ],
          "scope": "instance",
          "category": "Getters",
          "returns": {
            "type": "Core.data.Model",
            "description": "<p>Record for the row</p>"
          }
        },
        {
          "name": "getColumnFromElement",
          "description": "<p>Searches up from specified element for a grid cell or an header and returns the column which the cell belongs to</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element somewhere in a cell</p>"
            }
          ],
          "scope": "instance",
          "category": "Getters",
          "returns": {
            "type": "Grid.column.Column",
            "description": "<p>Column to which the cell belongs</p>"
          }
        },
        {
          "name": "fixSizes",
          "access": "private",
          "description": "<p>Sets widths and heights for headers, rows and other parts of the grid as needed</p>",
          "scope": "instance",
          "category": "Width & height"
        },
        {
          "name": "refreshTotalHeight",
          "access": "private",
          "description": "<p>Makes height of vertical scroller match estimated total height of grid. Called when scrolling vertically and\nwhen showing/hiding rows.</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>Total height supplied by RowManager</p>",
              "optional": true
            },
            {
              "name": "immediate",
              "type": "Boolean",
              "description": "<p>Flag indicating if buffered element sizing should be bypassed</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Width & height"
        },
        {
          "name": "enableScrollingCloseToEdges",
          "description": "<p>Activates automatic scrolling of a subGrid when mouse is moved closed to the edges. Useful when dragging DOM nodes\nfrom outside this grid and dropping on the grid.</p>",
          "parameters": [
            {
              "name": "subGrid",
              "type": [
                "Grid.view.SubGrid",
                "String"
              ],
              "description": "<p>A subGrid instance or its region name</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "disableScrollingCloseToEdges",
          "description": "<p>Deactivates automatic scrolling of a subGrid when mouse is moved closed to the edges</p>",
          "parameters": [
            {
              "name": "subGrid",
              "type": [
                "Grid.view.SubGrid",
                "String"
              ],
              "description": "<p>A subGrid instance or its region name</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onRowManagerRequestScrollChange",
          "access": "private",
          "description": "<p>Responds to request from RowManager to adjust scroll position. Happens when jumping to a scroll position with\nvariable row height.</p>",
          "parameters": [
            {
              "name": "bottomMostRowY",
              "type": "Number"
            }
          ],
          "scope": "instance",
          "category": "Scrolling"
        },
        {
          "name": "initScroll",
          "access": "private",
          "description": "<p>Scroll syncing for normal headers &amp; grid + triggers virtual rendering for vertical scroll</p>",
          "scope": "instance",
          "fires": [
            "event:scroll"
          ],
          "category": "Scrolling"
        },
        {
          "name": "scrollRowIntoView",
          "description": "<p>Scrolls a row into view. If row isn't rendered it tries to calculate position</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record or record id</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.column",
              "type": "String",
              "description": "<p>Field name or ID of the column, or the Column instance to scroll to.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the element: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the element or rectangle to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Scrolling",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which resolves when the specified row has been scrolled into view.</p>"
          }
        },
        {
          "name": "scrollColumnIntoView",
          "description": "<p>Scrolls a column into view (if it is not already)</p>",
          "parameters": [
            {
              "name": "column",
              "type": [
                "Grid.column.Column",
                "String",
                "Number"
              ],
              "description": "<p>Column name (data) or column index or actual column object.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the element: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the element or rectangle to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Scrolling",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>If the column exists, a promise which is resolved when the column header element has been scrolled into view.</p>"
          }
        },
        {
          "name": "scrollCellIntoView",
          "description": "<p>Scrolls a cell into view (if it is not already)</p>",
          "parameters": [
            {
              "name": "cellContext",
              "type": "Object",
              "description": "<p>Cell selector { id: recordId, column: 'columnName' }</p>"
            }
          ],
          "scope": "instance",
          "category": "Scrolling"
        },
        {
          "name": "scrollToBottom",
          "description": "<p>Scroll all the way down</p>",
          "scope": "instance",
          "category": "Scrolling",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which resolves when the bottom is reached.</p>"
          }
        },
        {
          "name": "scrollToTop",
          "description": "<p>Scroll all the way up</p>",
          "scope": "instance",
          "category": "Scrolling",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which resolves when the top is reached.</p>"
          }
        },
        {
          "name": "storeScroll",
          "description": "<p>Stores the scroll state. Returns an objects with a <code>scrollTop</code> number value for the entire grid and a <code>scrollLeft</code>\nobject containing a left position scroll value per sub grid.</p>",
          "scope": "instance",
          "category": "Scrolling",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "restoreScroll",
          "description": "<p>Restore scroll state. If state is not specified, restores the last stored state.</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Object",
              "description": "<p>Scroll state, optional</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Scrolling"
        },
        {
          "name": "measureRowHeight",
          "access": "private",
          "description": "<p>Creates a fake subgrid with one row and measures its height. Result is used as rowHeight.</p>",
          "scope": "instance"
        },
        {
          "name": "onThemeChange",
          "access": "private",
          "description": "<p>Handler for global theme change event (triggered by shared.js). Remeasures row height.</p>",
          "scope": "instance"
        },
        {
          "name": "refreshRows",
          "description": "<p>Triggers a render of records to all row elements. Call after changing order, grouping etc to reflect changes\nvisually. Preserves scroll.</p>",
          "scope": "instance",
          "category": "Rendering"
        },
        {
          "name": "refreshColumn",
          "description": "<p>Triggers a render of all the cells in a column.</p>",
          "parameters": [
            {
              "name": "column",
              "type": "Grid.column.Column"
            }
          ],
          "scope": "instance",
          "category": "Rendering"
        },
        {
          "name": "refreshVirtualScrollbars",
          "access": "private",
          "description": "<p>Recalculates virtual scrollbars widths and scrollWidth</p>",
          "scope": "instance"
        },
        {
          "name": "renderRows",
          "description": "<p>Rerenders all grid rows, completely replacing all row elements with new ones</p>",
          "scope": "instance",
          "category": "Rendering"
        },
        {
          "name": "renderContents",
          "description": "<p>Rerenders the grids rows, headers and footers, completely replacing all row elements with new ones</p>",
          "scope": "instance",
          "category": "Rendering"
        },
        {
          "name": "renderHeader",
          "access": "private",
          "description": "<p>Called after headers have been rendered to the headerContainer.\nThis does not do anything, it's just for Features to hook in to.</p>",
          "parameters": [
            {
              "name": "headerContainer",
              "type": "HTMLElement",
              "description": "<p>DOM element which contains the headers.</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Grid element</p>"
            }
          ],
          "scope": "instance",
          "category": "Rendering"
        },
        {
          "name": "renderFooter",
          "access": "private",
          "description": "<p>Called after footers have been rendered to the footerContainer.\nThis does not do anything, it's just for Features to hook in to.</p>",
          "parameters": [
            {
              "name": "footerContainer",
              "type": "HTMLElement",
              "description": "<p>DOM element which contains the footers.</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Grid element</p>"
            }
          ],
          "scope": "instance",
          "category": "Rendering"
        },
        {
          "name": "maskBody",
          "description": "<p>Show a load mask with a spinner and the specified message. When using an AjaxStore masking and unmasking is\nhandled automatically, but if you are loading data in other ways you can call this function manually when your\nload starts.</p>\n<pre class=\"prettyprint source\"><code>myLoadFunction() {\n  // Show mask before initiating loading\n  grid.maskBody('Loading data');\n  // Your custom loading code\n  load.then(() => {\n     // Hide the mask when loading is finished\n     grid.unmaskBody();\n  });\n}\n</code></pre>",
          "parameters": [
            {
              "name": "loadMask",
              "type": "String",
              "description": "<p>Message to show next to the spinner</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.widget.Mask"
          }
        },
        {
          "name": "unmaskBody",
          "description": "<p>Hide the load mask.</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "beforeToggleNode",
          "description": "<p>Fired before a parent node record toggles its collapsed state. Only applicable when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance.</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record being toggled.</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p><code>true</code> if the node is being collapsed.</p>"
            }
          ]
        },
        {
          "name": "toggleNode",
          "description": "<p>Fired after a parent node record toggles its collapsed state. Only applicable when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record being toggled.</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p><code>true</code> if the node is being collapsed.</p>"
            }
          ]
        },
        {
          "name": "collapseNode",
          "description": "<p>Fired before a parent node record is collapsed. Only applicable when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance.</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record which has been collapsed.</p>"
            }
          ]
        },
        {
          "name": "expandNode",
          "description": "<p>Fired after a parent node record is expanded. Only applicable when the <a href=\"#Grid/feature/Tree\">Tree</a> feature is enabled</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance.</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record which has been expanded.</p>"
            }
          ]
        },
        {
          "name": "subGridCollapse",
          "description": "<p>Fires after a sub grid is collapsed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance</p>"
            },
            {
              "name": "subGrid",
              "type": "Grid.view.SubGrid",
              "description": "<p>The sub grid instance</p>"
            }
          ]
        },
        {
          "name": "subGridExpand",
          "description": "<p>Fires after a sub grid is expanded.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance</p>"
            },
            {
              "name": "subGrid",
              "type": "Grid.view.SubGrid",
              "description": "<p>The sub grid instance</p>"
            }
          ]
        },
        {
          "name": "beforeRenderRow",
          "description": "<p>Fires before a row is rendered.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance.</p>"
            },
            {
              "name": "row",
              "type": "Grid.row.Row",
              "description": "<p>The row about to be rendered.</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record for the row.</p>"
            },
            {
              "name": "recordIndex",
              "type": "Number",
              "description": "<p>The zero-based index of the record.</p>"
            }
          ]
        },
        {
          "name": "renderRow",
          "description": "<p>Fires after a row is rendered.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance.</p>"
            },
            {
              "name": "row",
              "type": "Grid.row.Row",
              "description": "<p>The row that has been rendered.</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record for the row.</p>"
            },
            {
              "name": "recordIndex",
              "type": "Number",
              "description": "<p>The zero-based index of the record.</p>"
            }
          ]
        },
        {
          "name": "dataChange",
          "description": "<p>Fired when data in the store changes.</p>\n<p>Basically a relayed version of the store's own change event, decorated with a <code>store</code> property.\nSee the <a href=\"#Core/data/Store#event-change\">store change event</a> documentation for more information.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>Owning grid</p>"
            },
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>The originating store</p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Name of action which triggered the change. May be one of:</p>\n<ul>\n<li><code>'remove'</code></li>\n<li><code>'removeAll'</code></li>\n<li><code>'add'</code></li>\n<li><code>'updatemultiple'</code></li>\n<li><code>'clearchanges'</code></li>\n<li><code>'filter'</code></li>\n<li><code>'update'</code></li>\n<li><code>'dataset'</code></li>\n<li><code>'replace'</code></li>\n</ul>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Changed record, for actions that affects exactly one record (<code>'update'</code>)</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Changed records, passed for all actions except <code>'removeAll'</code></p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Passed for the <code>'update'</code> action, info on which record fields changed</p>"
            }
          ]
        },
        {
          "name": "scroll",
          "description": "<p>Grid has scrolled vertically</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>The firing Grid instance.</p>"
            },
            {
              "name": "scrollTop",
              "type": "Number",
              "description": "<p>The vertical scroll position.</p>"
            }
          ]
        },
        {
          "name": "beforeRenderRows",
          "description": "<p>Grid rows are about to be rendered</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>This grid.</p>"
            }
          ]
        },
        {
          "name": "renderRows",
          "description": "<p>Grid rows have been rendered</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Grid.view.Grid",
              "description": "<p>This grid.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Header",
      "modulePath": "Grid/view/Header",
      "classDescription": "<p>The Grid header, which contains simple columns but also allows grouped columns. One instance is created and used per SubGrid\nautomatically, you should not need to instantiate this class manually. See <a href=\"#Grid/column/Column\">Column</a> for information about\ncolumn configuration.</p>",
      "extends": [
        "Grid/view/Bar"
      ],
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Header.js",
      "path": "/Calendar/lib/Grid/view",
      "externalExamples": [
        "Grid/view/Header.js"
      ],
      "functions": [
        {
          "name": "getColumnConfig",
          "access": "private",
          "description": "<p>Recursive column header config creator.\nStyle not included because of CSP. Widths are fixed up in\n<a href=\"#Grid/view/Header#function-fixHeaderWidths\">fixHeaderWidths</a></p>",
          "scope": "instance"
        },
        {
          "name": "fixHeaderWidths",
          "access": "private",
          "description": "<p>Fix header widths (flex or fixed width) after rendering. Not a part of template any longer because of CSP</p>",
          "scope": "instance"
        },
        {
          "name": "initDepths",
          "access": "private",
          "description": "<p>Depths are used for styling of grouped headers. Sets them on meta.</p>",
          "scope": "instance"
        },
        {
          "name": "getHeader",
          "description": "<p>Get the header cell element for the specified column.</p>",
          "parameters": [
            {
              "name": "columnId",
              "type": "String",
              "description": "<p>Column id</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>Header cell element</p>"
          }
        }
      ]
    },
    {
      "name": "SubGrid",
      "modulePath": "Grid/view/SubGrid",
      "classDescription": "<p>A SubGrid is a part of the grid (it has at least one and normally no more than two, called locked and normal). It\nhas its own header, which holds the columns to display rows for in the SubGrid. SubGrids are created by Grid, you\nshould not need to create instances directly.</p>\n<p>If not configured with a width or flex, the SubGrid will be sized to fit its columns. In this case, if all columns\nhave a fixed width (not using flex) then toggling columns will also affect the width of the SubGrid.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "SubGrid.js",
      "path": "/Calendar/lib/Grid/view",
      "configs": [
        {
          "name": "region",
          "description": "<p>Region (name) for this SubGrid</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "columns",
          "description": "<p>Column store, a store containing the columns for this SubGrid</p>",
          "type": "Grid.data.ColumnStore",
          "scope": "inner"
        },
        {
          "name": "collapsed",
          "description": "<p>Set <code>true</code> to start subgrid collapsed. To operate collapsed state on subgrid use\n<a href=\"#Grid/view/SubGrid#function-collapse\">collapse</a>/<a href=\"#Grid/view/SubGrid#function-expand\">expand</a> methods.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "sealedColumns",
          "access": "private",
          "description": "<p>Set <code>true</code> to disable moving columns into or out of this SubGrid.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "resizable",
          "access": "internal",
          "description": "<p>Set to <code>false</code> to prevent this subgrid being resized with the <a href=\"#Grid/feature/RegionResize\">RegionResize</a> feature</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "functions": [
        {
          "name": "construct",
          "access": "private",
          "description": "<p>SubGrid constructor</p>",
          "parameters": [
            {
              "name": "config"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "toggleSplitterCls",
          "access": "private",
          "description": "<p>Toggle (add/remove) class for splitters</p>",
          "parameters": [
            {
              "name": "cls",
              "type": "String",
              "description": "<p>class name</p>"
            },
            {
              "name": "add",
              "type": "Boolean",
              "description": "<p>actions. Set to <code>true</code> to add class, <code>false</code> to remove</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "fixCellWidths",
          "access": "private",
          "description": "<p>Sets cell widths. Cannot be done in template because of CSP</p>",
          "scope": "instance"
        },
        {
          "name": "fixWidths",
          "access": "private",
          "description": "<p>Sets header width and scroller width (if needed, depending on if using flex). Might also change the subgrids\nwidth, if it uses a width calculated from its columns.</p>",
          "scope": "instance"
        },
        {
          "name": "onInternalResize",
          "access": "private",
          "description": "<p>Called when grid changes size. SubGrid determines if it has changed size and triggers scroll (for virtual\nrendering in cells to work when resizing etc.)</p>",
          "scope": "instance"
        },
        {
          "name": "syncParallelSplitters",
          "access": "private",
          "description": "<p>Keeps the parallel splitters in the header, footer and fake scroller synced in terms\nof being collapsed or not.</p>",
          "scope": "instance"
        },
        {
          "name": "updateHasFlex",
          "access": "internal",
          "description": "<p>Called when updating column widths to apply 'b-has-flex' which is used when fillLastColumn is configured.</p>",
          "scope": "instance"
        },
        {
          "name": "resizeColumnsToFitContent",
          "description": "<p>Resize all columns in the SubGrid to fit their width, according to their configured\n<a href=\"#Grid/column/Column#config-fitMode\">fitMode</a></p>",
          "scope": "instance"
        },
        {
          "name": "refreshFakeScroll",
          "access": "private",
          "description": "<p>Fixes widths of fake scrollers</p>",
          "scope": "instance"
        },
        {
          "name": "initScroll",
          "access": "private",
          "description": "<p>Init scroll syncing for header and footer (if available).</p>",
          "scope": "instance"
        },
        {
          "name": "syncScrollingPartners",
          "access": "internal",
          "description": "<p>This syncs the horizontal scroll position of the header and the footer with\nthe horizontal scroll position of the grid. Usually, this will be called automatically\nwhen the grid scrolls. In some cases, such as a refresh caused by column changes\nit will need to be called from elsewhere.</p>",
          "scope": "instance"
        },
        {
          "name": "scrollColumnIntoView",
          "description": "<p>Scrolls a column into view (if it is not already). Called by Grid#scrollColumnIntoView, use it instead to not\nhave to care about which SubGrid contains a column.</p>",
          "parameters": [
            {
              "name": "column",
              "type": [
                "Grid.column.Column",
                "String",
                "Number"
              ],
              "description": "<p>Column name (data) or column index or actual column object.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the element: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the element or rectangle to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>If the column exists, a promise which is resolved when the column header element has been scrolled into view.</p>"
          }
        },
        {
          "name": "onAddRow",
          "access": "private",
          "description": "<p>Creates elements for the new rows when RowManager has determined that more rows are needed</p>",
          "scope": "instance"
        },
        {
          "name": "clearRows",
          "access": "private",
          "description": "<p>Removes all row elements from the subgrids body and empties cache</p>",
          "scope": "instance"
        },
        {
          "name": "collapse",
          "description": "<p>Collapses subgrid. If collapsing subgrid is the only one expanded, next subgrid to the right (or previous) will\nbe expanded.</p>",
          "examples": [
            "let locked = grid.getSubGrid('locked');\nlocked.collapse().then(() => {\n    console.log(locked.collapsed); // Logs 'True'\n});\n\nlet normal = grid.getSubGrid('normal');\nnormal.collapse().then(() => {\n    console.log(locked.collapsed); // Logs 'False'\n    console.log(normal.collapsed); // Logs 'True'\n});"
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when this SubGrid is fully collapsed.</p>"
          }
        },
        {
          "name": "expand",
          "description": "<p>Expands subgrid.</p>",
          "examples": [
            "grid.getSubGrid('locked').expand().then(() => console.log('locked grid expanded'));"
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when this SubGrid is fully expanded.</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "width",
          "description": "<p>Get/set SubGrid width, which also sets header and footer width (if available).</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "flex",
          "description": "<p>Get/set SubGrid flex, which also sets header and footer flex (if available).</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "instance"
        },
        {
          "name": "viewRectangle",
          "description": "<p>Get the &quot;viewport&quot; for the SubGrid as a Rectangle</p>",
          "type": "Core.helper.util.Rectangle",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "rowElements",
          "description": "<p>Get all row elements for this SubGrid.</p>",
          "type": "Array.<HTMLElement>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "collapsed",
          "description": "<p>Get/set collapsed state</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TreeGrid",
      "modulePath": "Grid/view/TreeGrid",
      "classDescription": "<p>A TreeGrid, a Tree combined with a Grid. Must be configured with exactly one <a href=\"#Grid/column/TreeColumn\">TreeColumn</a> (<code>type: tree</code>), but can also have an\narbitrary number of other columns. Most features that can be used with Grid also works with TreeGrid, with the\nexception of the Group feature.</p>",
      "extends": [
        "Grid/view/Grid"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TreeGrid.js",
      "path": "/Calendar/lib/Grid/view",
      "classType": "treegrid",
      "externalExamples": [
        "Grid/view/TreeGrid.js"
      ],
      "configs": [
        {
          "name": "store",
          "description": "<p>The store instance or config object that holds the records to be displayed by this TreeGrid. If assigning\na store instance, it must be configured with <code>tree: true</code>.</p>\n<p>A store will be created if none is specified.</p>",
          "type": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner",
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "toggleCollapse",
          "description": "<p>Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.</p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to toggle</p>"
            },
            {
              "name": "collapse",
              "type": "Boolean",
              "description": "<p>Force collapse (true) or expand (false)</p>",
              "optional": true
            },
            {
              "name": "skipRefresh",
              "type": "Boolean",
              "description": "<p>Set to true to not refresh rows (if calling in batch)</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "collapse",
          "description": "<p>Collapse a single node.</p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to collapse</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expand",
          "description": "<p>Expand a single node.</p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node to expand</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "expandTo",
          "description": "<p>Expands parent nodes to make this node &quot;visible&quot;.</p>",
          "parameters": [
            {
              "name": "idOrRecord",
              "type": [
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Record (the node itself) or id of a node</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        }
      ]
    },
    {
      "name": "ExportDialog",
      "modulePath": "Grid/view/export/ExportDialog",
      "classDescription": "<p>Dialog window used by the <a href=\"#Grid/feature/export/PdfExport\">PDF export feature</a>. It allows users to select export\noptions like paper format and columns to export. This dialog contains a number of predefined\n<a href=\"#Core/widget/Field\">fields</a> which you can access through the popup's <a href=\"#Grid/view/export/ExportDialog#property-widgetMap\">widgetMap</a>.</p>\n<h2>Default widgets</h2>\n<p>The default widgets of this dialog are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>columnsField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>100</td>\n<td>Choose columns to export</td>\n</tr>\n<tr>\n<td><code>rowsRangeField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>200</td>\n<td>Choose which rows to export</td>\n</tr>\n<tr>\n<td><code>exporterTypeField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>300</td>\n<td>Type of the exporter to use</td>\n</tr>\n<tr>\n<td><code>alignRowsField</code></td>\n<td><a href=\"#Core/widget/Checkbox\">Checkbox</a></td>\n<td>400</td>\n<td>Align row top to the page top on every exported page</td>\n</tr>\n<tr>\n<td><code>repeatHeaderField</code></td>\n<td><a href=\"#Core/widget/Checkbox\">Checkbox</a></td>\n<td>500</td>\n<td>Toggle repeating headers on / off</td>\n</tr>\n<tr>\n<td><code>fileFormatField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>600</td>\n<td>Choose file format</td>\n</tr>\n<tr>\n<td><code>paperFormatField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>700</td>\n<td>Choose paper format</td>\n</tr>\n<tr>\n<td><code>orientationField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>800</td>\n<td>Choose orientation</td>\n</tr>\n</tbody>\n</table>\n<p>The default buttons are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>exportButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>100</td>\n<td>Triggers export</td>\n</tr>\n<tr>\n<td><code>cancelButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>200</td>\n<td>Cancel export</td>\n</tr>\n</tbody>\n</table>\n<p>Bottom buttons may be customized using <code>bbar</code> config passed to <code>exportDialog</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        pdfExport : {\n            editorConfig : {\n                bbar : {\n                    items : {\n                        exportButton : { text : 'Go!' }\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<h2>Configuring default widgets</h2>\n<p>Widgets can be customized with <a href=\"#Grid/feature/export/PdfExport#config-exportDialog\">exportDialog</a> config:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        pdfExport : {\n            exportDialog : {\n                items : {\n                    // hide the field\n                    orientationField  : { hidden : true },\n\n                    // reorder fields\n                    exporterTypeField : { weight : 150 },\n\n                    // change default format in exporter\n                    fileFormatField   : { value : 'png' }\n                }\n            }\n        }\n    }\n});\n\ngrid.features.pdfExport.showExportDialog();\n</code></pre>\n<h2>Configuring default columns</h2>\n<p>By default all visible columns are selected in the export dialog. This is managed by the\n<a href=\"#Grid/view/export/ExportDialog#config-autoSelectVisibleColumns\">autoSelectVisibleColumns</a> config. To change default selected columns you should disable this config\nand set field value. Value should be an array of valid column ids (or column instances). This way you can\npreselect hidden columns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : [\n        { id : 'name', text : 'Name', field : 'name' },\n        { id : 'age', text : 'Age', field : 'age' },\n        { id : 'city', text : 'City', field : 'city', hidden : true }\n    ],\n    features : {\n        pdfExport : {\n            exportDialog : {\n                autoSelectVisibleColumns : false,\n                items : {\n                    columnsField : { value : ['name', 'city'] }\n                }\n            }\n        }\n    }\n})\n\n// This will show export dialog with Name and City columns selected\n// even though City column is hidden in the UI\ngrid.features.pdfExport.showExportDialog();\n</code></pre>\n<h2>Adding fields</h2>\n<p>You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\na specific naming pattern - it should have <code>ref</code> config ending with <code>Field</code>, see other fields for reference -\n<code>orientationField</code>, <code>columnsField</code>, etc. Fields not matching this pattern are ignored. When values are collected from\nthe dialog, <code>Field</code> part of the widget reference is removed, so <code>orientationField</code> becomes <code>orientation</code>, <code>fooField</code>\nbecomes <code>foo</code>, etc.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        pdfExport : {\n            exportDialog : {\n                items : {\n                    // This field gets into export config\n                    fooField : {\n                        type : 'text',\n                        label : 'Foo',\n                        value : 'FOO'\n                    },\n\n                    // This one does not, because name doesn't end with `Field`\n                    bar : {\n                        type : 'text',\n                        label : 'Bar',\n                        value : 'BAR'\n                    },\n\n                    // Add a container widget to wrap some fields together\n                    myContainer : {\n                        type : 'container',\n                        items : {\n                            // This one gets into config too despite the nesting level\n                            bazField : {\n                                type : 'text',\n                                label : 'Baz',\n                                value : 'BAZ'\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n\n// Assuming export dialog is opened and export triggered with default values\n// you can receive custom field values here\ngrid.on({\n    beforePdfExport({ config }) {\n        console.log(config.foo) // 'FOO'\n        console.log(config.bar) // undefined\n        console.log(config.baz) // 'BAZ'\n    }\n});\n</code></pre>\n<h2>Configuring widgets at runtime</h2>\n<p>If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\nbefore dialog pops up:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    columns : [\n        { id : 'name', text : 'Name', field : 'name' },\n        { id : 'age', text : 'Age', field : 'age' },\n        { id : 'city', text : 'City', field : 'city', hidden : true }\n    ],\n    features : {\n        pdfExport : true\n    }\n});\n\n// Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n// above this will show Name and City columns\ngrid.features.pdfExport.exportDialog.on({\n    beforeShow() {\n        this.widgetMap.columnsField.value = ['age', 'city']\n    }\n});\n</code></pre>",
      "extends": [
        "Core/widget/Popup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ExportDialog.js",
      "path": "/Calendar/lib/Grid/view/export",
      "properties": [
        {
          "name": "values",
          "description": "<p>Returns map of values of dialog fields.</p>",
          "type": "Object",
          "scope": "inner",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "client",
          "description": "<p>Grid instance to build export dialog for</p>",
          "type": "Grid.view.Grid",
          "scope": "inner"
        },
        {
          "name": "autoSelectVisibleColumns",
          "description": "<p>Set to <code>false</code> to not preselect all visible columns when the dialog is shown</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "hidePNGMultipageOption",
          "description": "<p>Set to <code>false</code> to allow using PNG + Multipage config in export dialog</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "export",
          "description": "<p>Fires when export button is clicked</p>",
          "parameters": [
            {
              "name": "values",
              "type": "Object",
              "description": "<p>Object containing config for <a href=\"#Grid/feature/export/PdfExport#function-export\">export()</a> method</p>"
            }
          ]
        },
        {
          "name": "cancel",
          "description": "<p>Fires when cancel button is clicked. Popup will hide itself.</p>"
        }
      ]
    },
    {
      "name": "GridElementEvents",
      "modulePath": "Grid/view/mixin/GridElementEvents",
      "description": "<p>Mixin for Grid that handles dom events. Some listeners fire own events but all can be chained by features. None of\nthe functions in this class are indented to be called directly.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridElementEvents.js",
      "path": "/Calendar/lib/Grid/view/mixin",
      "configs": [
        {
          "name": "longPressTime",
          "description": "<p>Time in ms until a longpress is triggered</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 400,
          "category": "Events"
        },
        {
          "name": "enableUndoRedoKeys",
          "description": "<p>Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is pressed).\nOnly applicable when using a <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Events"
        }
      ],
      "events": [
        {
          "name": "cellClick",
          "description": "<p>Fired when user clicks in a grid cell</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record representing the row</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column to which the cell belongs</p>"
            },
            {
              "name": "cellElement",
              "type": "HTMLElement",
              "description": "<p>The cell HTML element</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The target element</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The native DOM event</p>"
            }
          ]
        },
        {
          "name": "cellDblClick",
          "description": "<p>Fired when user double clicks a grid cell</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record representing the row</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column to which the cell belongs</p>"
            },
            {
              "name": "cellElement",
              "type": "HTMLElement",
              "description": "<p>The cell HTML element</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The target element</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The native DOM event</p>"
            }
          ]
        },
        {
          "name": "cellContextMenu",
          "description": "<p>Fired when user activates contextmenu in a grid cell</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record representing the row</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column to which the cell belongs</p>"
            },
            {
              "name": "cellElement",
              "type": "HTMLElement",
              "description": "<p>The cell HTML element</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The target element</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The native DOM event</p>"
            }
          ]
        },
        {
          "name": "cellMouseOver",
          "description": "<p>Fired when user moves the mouse over a grid cell</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record representing the row</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column to which the cell belongs</p>"
            },
            {
              "name": "cellElement",
              "type": "HTMLElement",
              "description": "<p>The cell HTML element</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The target element</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The native DOM event</p>"
            }
          ]
        },
        {
          "name": "cellMouseOut",
          "description": "<p>Fired when a user moves the mouse out of a grid cell</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance</p>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>The record representing the row</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>The column to which the cell belongs</p>"
            },
            {
              "name": "cellElement",
              "type": "HTMLElement",
              "description": "<p>The cell HTML element</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The target element</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The native DOM event</p>"
            }
          ]
        },
        {
          "name": "mouseOver",
          "description": "<p>Mouse moved in over element in grid</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The native browser event</p>"
            }
          ]
        },
        {
          "name": "mouseOut",
          "description": "<p>Mouse moved out from element in grid</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The native browser event</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "initInternalEvents",
          "access": "private",
          "description": "<p>Init listeners for a bunch of dom events. All events are handled by handleEvent().</p>",
          "scope": "instance",
          "category": "Events"
        },
        {
          "name": "getCellDataFromEvent",
          "access": "internal",
          "description": "<p>This method finds the cell location of the passed event. It returns an object describing the cell.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>A Mouse, Pointer or Touch event targeted at part of the grid.</p>"
            }
          ],
          "scope": "instance",
          "category": "Events",
          "returns": {
            "type": "Object",
            "description": "<p>An object containing the following properties:</p>\n<ul>\n<li><code>cellElement</code> - The cell element clicked on.</li>\n<li><code>column</code> - The <a href=\"#Grid/column/Column\">column</a> clicked under.</li>\n<li><code>columnId</code> - The <code>id</code> of the <a href=\"#Grid/column/Column\">column</a> clicked under.</li>\n<li><code>record</code> - The <a href=\"#Core/data/Model\">record</a> clicked on.</li>\n<li><code>id</code> - The <code>id</code> of the <a href=\"#Core/data/Model\">record</a> clicked on.</li>\n</ul>"
          }
        },
        {
          "name": "getHeaderDataFromEvent",
          "access": "internal",
          "description": "<p>This method finds the header location of the passed event. It returns an object describing the header.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>A Mouse, Pointer or Touch event targeted at part of the grid.</p>"
            }
          ],
          "scope": "instance",
          "category": "Events",
          "returns": {
            "type": "Object",
            "description": "<p>An object containing the following properties:</p>\n<ul>\n<li><code>headerElement</code> - The header element clicked on.</li>\n<li><code>column</code> - The <a href=\"#Grid/column/Column\">column</a> clicked under.</li>\n<li><code>columnId</code> - The <code>id</code> of the <a href=\"#Grid/column/Column\">column</a> clicked under.</li>\n</ul>"
          }
        },
        {
          "name": "handleEvent",
          "access": "private",
          "description": "<p>Handles all dom events, routing them to correct functions (touchstart -&gt; onElementTouchStart)</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Events"
        },
        {
          "name": "onElementTouchStart",
          "access": "internal",
          "description": "<p>Touch start, chain this function in features to handle the event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Touch events"
        },
        {
          "name": "onElementTouchMove",
          "access": "internal",
          "description": "<p>Touch move, chain this function in features to handle the event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Touch events"
        },
        {
          "name": "onElementTouchEnd",
          "access": "internal",
          "description": "<p>Touch end, chain this function in features to handle the event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Touch events"
        },
        {
          "name": "onElementMouseDown",
          "access": "internal",
          "description": "<p>Mouse down, chain this function in features to handle the event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Mouse events"
        },
        {
          "name": "onElementMouseMove",
          "access": "internal",
          "description": "<p>Mouse move, chain this function in features to handle the event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Mouse events"
        },
        {
          "name": "onElementMouseUp",
          "access": "internal",
          "description": "<p>Mouse up, chain this function in features to handle the event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Mouse events"
        },
        {
          "name": "onHandleElementClick",
          "access": "internal",
          "description": "<p>Called before <a href=\"#Grid/view/mixin/GridElementEvents#function-onElementClick\">onElementClick</a>.\nFires 'beforeElementClick' event which can return false to cancel further onElementClick actions.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeElementClick"
          ],
          "category": "Mouse events"
        },
        {
          "name": "onElementClick",
          "access": "internal",
          "description": "<p>Click, select cell on click and also fire 'cellClick' event.\nChain this function in features to handle the dom event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:cellClick"
          ],
          "category": "Mouse events"
        },
        {
          "name": "onElementDblClick",
          "access": "internal",
          "description": "<p>Double click, fires 'cellDblClick' event.\nChain this function in features to handle the dom event.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:cellDblClick"
          ],
          "category": "Mouse events"
        },
        {
          "name": "onElementMouseOver",
          "access": "internal",
          "description": "<p>Mouse over, adds 'hover' class to elements.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:mouseOver"
          ],
          "category": "Mouse events"
        },
        {
          "name": "onElementMouseOut",
          "access": "internal",
          "description": "<p>Mouse out, removes 'hover' class from elements.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:mouseOut"
          ],
          "category": "Mouse events"
        },
        {
          "name": "onElementKeyDown",
          "access": "internal",
          "description": "<p>Key down, handles arrow keys for selection.\nChain this function in features to handle the dom event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Keyboard events"
        },
        {
          "name": "onElementKeyPress",
          "access": "internal",
          "description": "<p>Key press, chain this function in features to handle the dom event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Keyboard events"
        },
        {
          "name": "onElementKeyUp",
          "access": "internal",
          "description": "<p>Key up, chain this function in features to handle the dom event.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Keyboard events"
        },
        {
          "name": "onElementContextMenu",
          "access": "internal",
          "description": "<p>Context menu, chain this function in features to handle the dom event.\nIn most cases, include ContextMenu feature instead.</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Other events"
        },
        {
          "name": "onInternalResize",
          "access": "internal",
          "description": "<p>Overrides empty base function in View, called when view is resized.</p>",
          "parameters": [
            {
              "name": "element"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "oldWidth"
            },
            {
              "name": "oldHeight"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:resize"
          ],
          "category": "Other events"
        }
      ]
    },
    {
      "name": "GridFeatures",
      "modulePath": "Grid/view/mixin/GridFeatures",
      "description": "<p>Mixin for Grid that handles features. Features are plugins that add functionality to the grid. Feature classes should\nregister with Grid by calling <a href=\"#Grid/feature/GridFeatureManager#function-registerFeature-static\">registerFeature</a>. This\nenables features to be specified and configured in grid\nconfig.</p>\n<p>Define which features to use:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// specify which features to use (note that some features are used by default)\nconst grid = new Grid({\n  features: {\n     sort: 'name',\n     search: true\n  }\n});\n</code></pre>\n<p>Access a feature in use:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.features.search.search('cat');\n</code></pre>\n<p>Basic example of implementing a feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyFeature extends InstancePlugin {\n\n}\n\nGridFeatures.registerFeature(MyFeature);\n\n// using the feature\nconst grid = new Grid({\n  features: {\n    myFeature: true\n  }\n});\n</code></pre>\n<h2>Enable and disable features at runtime</h2>\n<p>Each feature is either &quot;enabled&quot; (included by default), or &quot;off&quot; (excluded completely). You can always check the docs\nof a specific feature to find out how it is configured by default.</p>\n<p>Features which are &quot;off&quot; completely are not available and cannot be enabled at runtime.</p>\n<p>For a feature that is <strong>off</strong> by default that you want to enable later during runtime,\nconfigure it with <code>disabled : true</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n     featureName : {\n         disabled : true // on and disabled, can be enabled later\n     }\n});\n\n// enable the feature\ngrid.featureName.disabled = false;\n</code></pre>\n<p>If the feature is <strong>off</strong> by default, and you want to include and enable the feature, configure it as <code>true</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n     featureName : true // on and enabled, can be disabled later\n});\n\n// disable the feature\ngrid.featureName.disabled = true;\n</code></pre>\n<p>If the feature is <strong>on</strong> by default, but you want to turn it <strong>off</strong>, configure it as <code>false</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n     featureName : false // turned off, not included at all\n});\n</code></pre>\n<p>If the feature is <strong>enabled</strong> by default and you have no need of reconfiguring it,\nyou can omit the feature configuration.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridFeatures.js",
      "path": "/Calendar/lib/Grid/view/mixin",
      "configs": [
        {
          "name": "features",
          "description": "<p>Specify which features to use on the grid. Most features accepts a boolean, some also accepts a config object.\nPlease note that if you are not using the bundles you might need to import the features you want to use.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        stripe : true,   // Enable stripe feature\n        sort   : 'name', // Configure sort feature\n        group  : false   // Disable group feature\n    }\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "properties": [
        {
          "name": "features",
          "description": "<p>Map of the features available on the grid. Use it to access them on your grid object</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.features.group.expandAll();\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "readonly": true,
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "hasFeature",
          "description": "<p>Check if a feature is included</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>Feature name, as registered with <code>GridFeatureManager.registerFeature()</code></p>"
            }
          ],
          "scope": "instance",
          "category": "Misc",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "GridNavigation",
      "modulePath": "Grid/view/mixin/GridNavigation",
      "description": "<p>Mixin for Grid that handles cell to cell navigation.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridNavigation.js",
      "path": "/Calendar/lib/Grid/view/mixin",
      "functions": [
        {
          "name": "onFocusedRowDerender",
          "access": "protected",
          "description": "<p>Called by the RowManager when the row which contains the focus location is derendered.</p>\n<p>This keeps focus in a consistent place.</p>",
          "scope": "instance"
        },
        {
          "name": "isFocused",
          "description": "<p>Checks whether or not a cell is focused.</p>",
          "parameters": [
            {
              "name": "cellSelector",
              "type": [
                "Object",
                "String",
                "Number"
              ],
              "description": "<p>Cell selector { id: x, columnId: xx } or row id</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if cell or row is focused, otherwise false</p>"
          }
        },
        {
          "name": "onGridBodyFocusIn",
          "access": "private",
          "description": "<p>This function handles focus moving into, or within the grid.</p>",
          "parameters": [
            {
              "name": "focusEvent",
              "type": "Event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "focusCell",
          "description": "<p>Navigates to a cell and/or its row (depending on selectionMode)</p>",
          "parameters": [
            {
              "name": "cellSelector",
              "type": "Object",
              "description": "<p>{ id: rowId, columnId: 'columnId' }</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Modifier options for how to deal with focusing the cell. These\nare used as the <a href=\"#Core/helper/util/Scroller#function-scrollTo\">scrollTo</a> options.</p>"
            },
            {
              "name": "options.scroll",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>Pass <code>false</code> to not scroll the cell into view, or a\nscroll options object to affect the scroll.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:navigate"
          ],
          "returns": {
            "type": "Grid.util.Location",
            "description": "<p>A Location object representing the focused location.</p>"
          }
        },
        {
          "name": "internalNextPrevCell",
          "access": "private",
          "description": "<p>Selects the cell before or after currently focused cell.</p>",
          "parameters": [
            {
              "name": "next",
              "description": "<p>Specify true to select the next cell, false to select the previous</p>",
              "default": true
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Optionally, the UI event which caused navigation.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Used cell selector</p>"
          }
        },
        {
          "name": "navigateRight",
          "description": "<p>Select the cell after the currently focused one.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Optionally, the UI event which caused navigation.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Cell selector</p>"
          }
        },
        {
          "name": "navigateLeft",
          "description": "<p>Select the cell before the currently focused one.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Optionally, the UI event which caused navigation.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Cell selector</p>"
          }
        },
        {
          "name": "internalNextPrevRow",
          "access": "private",
          "description": "<p>Selects the next or previous record in relation to the current selection. Scrolls into view if outside.</p>",
          "parameters": [
            {
              "name": "next",
              "description": "<p>Next record (true) or previous (false)</p>"
            },
            {
              "name": "skipSpecialRows",
              "type": "Boolean",
              "description": "<p>True to not return specialRows like headers</p>",
              "default": true
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Optionally, the UI event which caused navigation.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Object",
              "Boolean"
            ],
            "description": "<p>Selection context for the focused row (&amp; cell) or false if no selection was made</p>"
          }
        },
        {
          "name": "navigateDown",
          "description": "<p>Navigates to the cell below the currently focused cell</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Optionally, the UI event which caused navigation.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Selector for focused row (&amp; cell)</p>"
          }
        },
        {
          "name": "navigateUp",
          "description": "<p>Navigates to the cell above the currently focused cell</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Optionally, the UI event which caused navigation.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Selector for focused row (&amp; cell)</p>"
          }
        }
      ],
      "events": [
        {
          "name": "navigate",
          "description": "<p>Triggered when a user navigates to a grid cell</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>The grid instance</p>"
            },
            {
              "name": "last",
              "type": "Grid.util.Location",
              "description": "<p>The previously focused location</p>"
            },
            {
              "name": "location",
              "type": "Grid.util.Location",
              "description": "<p>The new focused location</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The UI event which caused navigation.</p>",
              "optional": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "focusedCell",
          "description": "<p>Grid Location which encapsulates the currently focused cell.\nSet to focus a cell or use <a href=\"#Grid/view/mixin/GridNavigation#function-focusCell\">focusCell</a>.</p>",
          "type": "Grid.util.Location",
          "scope": "instance"
        },
        {
          "name": "isActionableLocation",
          "description": "<p>This property is <code>true</code> if an element <em>within</em> a cell is focused.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "cellCSSSelector",
          "description": "<p>CSS selector for currently focused cell. Format is &quot;[data-index=index] [data-column-id=columnId]&quot;.</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "GridResponsive",
      "modulePath": "Grid/view/mixin/GridResponsive",
      "description": "<p>Simplifies making grid responsive. Supply levels as <a href=\"#Grid/view/mixin/GridResponsive#config-responsiveLevels\">responsiveLevels</a> config, default levels are:</p>\n<dl>\n<dt>small <dd>< 400px,\n<dt>medium <dd>< 600px\n<dt>large <dd>> 600px\n</dl>\n<p>Columns can define configs per level to be resized etc:</p>\n<pre class=\"prettyprint source\"><code>let grid = new Grid({\n  responsiveLevels: {\n    small: 300,\n    medium: 400,\n    large: '*' // everything above 400\n  },\n\n  columns: [\n    {\n      field: 'name',\n      text: 'Name',\n      responsiveLevels: {\n        small: { hidden: true },\n        '*': { hidden: false } // all other levels\n      }\n    },\n    { field: 'xx', ... }\n  ]\n});\n</code></pre>\n<p>It is also possible to give a <a href=\"#Grid/view/mixin/GridState\">Grid state</a> object instead of a level width, but in that\ncase the object must contain a <code>levelWidth</code> property:</p>\n<pre class=\"prettyprint source\"><code>let grid = new Grid({\n  responsiveLevels: {\n    small: {\n      // Width is required\n      levelWidth : 400,\n      // Other configs are optional, see GridState for available options\n      rowHeight  : 30\n    },\n    medium : {\n      levelWidth : 600,\n      rowHeight  : 40\n    },\n    large: {\n      levelWidth : '*', // everything above 300\n      rowHeight  : 45\n    }\n  }\n});\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridResponsive.js",
      "path": "/Calendar/lib/Grid/view/mixin",
      "demo": {
        "product": "grid",
        "demo": "responsive"
      },
      "externalExamples": [
        "Grid/view/mixin/Responsive.js"
      ],
      "configs": [
        {
          "name": "responsiveLevels",
          "description": "<p>&quot;Break points&quot; for which responsive config to use for columns and css.</p>",
          "type": "Object",
          "scope": "inner",
          "defaultValue": "{ small : 400, medium : 600, large : '*' }",
          "category": "Misc"
        }
      ],
      "functions": [
        {
          "name": "getClosestBiggerLevel",
          "access": "private",
          "description": "<p>Find closes bigger level, aka level we want to use.</p>",
          "scope": "instance",
          "category": "Misc"
        },
        {
          "name": "updateResponsive",
          "access": "private",
          "description": "<p>Check if resize lead to a new responsive level and take appropriate actions</p>",
          "parameters": [
            {
              "name": "width"
            },
            {
              "name": "oldWidth"
            }
          ],
          "scope": "instance",
          "fires": [
            "event:responsive"
          ],
          "category": "Misc"
        }
      ],
      "properties": [
        {
          "name": "responsiveLevel",
          "description": "<p>Get currently used responsive level (as string)</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true,
          "category": "Misc"
        }
      ],
      "events": [
        {
          "name": "responsive",
          "description": "<p>Grid resize lead to a new responsive level being applied</p>",
          "parameters": [
            {
              "name": "grid",
              "type": "Grid.view.Grid",
              "description": "<p>Grid that was resized</p>"
            },
            {
              "name": "level",
              "type": "String",
              "description": "<p>New responsive level (small, large, etc)</p>"
            },
            {
              "name": "width",
              "type": "Number",
              "description": "<p>New width in px</p>"
            },
            {
              "name": "oldLevel",
              "type": "String",
              "description": "<p>Old responsive level</p>"
            },
            {
              "name": "oldWidth",
              "type": "Number",
              "description": "<p>Old width in px</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GridSelection",
      "modulePath": "Grid/view/mixin/GridSelection",
      "description": "<p>A mixin for Grid that handles row and cell selection. See <a href=\"#Grid/view/mixin/GridSelection#config-selectionMode\">selectionMode</a> for details on how to control what should be selected (rows or cells)</p>",
      "mixin": true,
      "examples": [
        "// select a row\ngrid.selectedRow = 7;\n\n// select a cell\ngrid.selectedCell = { id: 5, columnId: 'column1' }\n\n// select a record\ngrid.selectedRecord = grid.store.last;\n\n// select multiple records by ids\ngrid.selectedRecords = [1, 2, 4, 6]"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridSelection.js",
      "path": "/Calendar/lib/Grid/view/mixin",
      "configs": [
        {
          "name": "selectionMode",
          "description": "<p>The selection settings, where you can set these boolean flags to control what is selected. Options below:</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Selection",
          "parameters": [
            {
              "name": "selectionMode.row",
              "type": "Boolean",
              "description": "<p>select rows</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.cell",
              "type": "Boolean",
              "description": "<p>select cells</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.rowCheckboxSelection",
              "type": "Boolean",
              "description": "<p>select rows only when clicking in the checkbox column</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.multiSelect",
              "type": "Boolean",
              "description": "<p>Allow multiple selection</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.checkbox",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>Set to true to add a checkbox selection column to the grid,\nor pass a config object for the <a href=\"#Grid/column/CheckColumn\">CheckColumn</a></p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.showCheckAll",
              "type": "Boolean",
              "description": "<p>true to add a checkbox to the selection column header to select/deselect all rows</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.deselectFilteredOutRecords",
              "type": "Boolean",
              "description": "<p>true to deselect rows that are filtered out</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.includeChildren",
              "type": "Boolean",
              "description": "<p>true to also select/deselect child nodes when a parent node is selected</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.preserveSelectionOnPageChange",
              "type": "Boolean",
              "description": "<p>This flag controls whether the Grid should preserve\nits selection when loading a new page of a paged data store</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.preserveSelectionOnDatasetChange",
              "type": "Boolean",
              "description": "<p>This flag controls whether the Grid should preserve\nits selection of cells / rows when loading a new dataset (assuming the selected records are included in\nthe newly loaded dataset)</p>",
              "isSubParam": true
            },
            {
              "name": "selectionMode.deselectOnClick",
              "type": "Boolean",
              "description": "<p>This flag controls whether the Grid should deselect a\nselected row when clicking it</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "onStoreRecordIdChange",
          "access": "private",
          "description": "<p>Triggered from Grid view when the id of a record has changed.\nUpdate the collection indices.</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "onSelectedRecordCollectionChange",
          "access": "private",
          "description": "<p>Responds to mutations of the underlying storage Collection</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "spliceSelectedRecords",
          "description": "<p>Removes and adds records to/from the selection at the same time. Analogous\nto the <code>Array</code> <code>splice</code> method.</p>\n<p>Note that if items that are specified for removal are also in the <code>toAdd</code> array,\nthen those items are <em>not</em> removed then appended. They remain in the same position\nrelative to all remaining items.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index at which to remove a block of items. Only valid if the\nsecond, <code>toRemove</code> argument is a number.</p>"
            },
            {
              "name": "toRemove",
              "type": [
                "Array.<Object>",
                "Number"
              ],
              "description": "<p>Either the number of items to remove starting\nat the passed <code>index</code>, or an array of items to remove (If an array is passed, the <code>index</code> is ignored).</p>"
            },
            {
              "name": "toAdd",
              "type": [
                "Array.<Object>",
                "Object"
              ],
              "description": "<p>An item, or an array of items to add.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "isSelected",
          "description": "<p>Checks whether or not a cell or row is selected.</p>",
          "parameters": [
            {
              "name": "cellSelectorOrId",
              "type": [
                "Object",
                "String",
                "Number",
                "Core.data.Model"
              ],
              "description": "<p>Cell selector { id: x, column: xx } or row id, or record</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if cell or row is selected, otherwise false</p>"
          }
        },
        {
          "name": "isSelectable",
          "description": "<p>Checks whether or not a cell or row can be selected.</p>",
          "parameters": [
            {
              "name": "recordCellOrId",
              "type": [
                "Core.data.Model",
                "Object",
                "String",
                "Number"
              ],
              "description": "<p>Record or cell or record id</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if cell or row can be selected, otherwise false</p>"
          }
        },
        {
          "name": "selectRow",
          "description": "<p>Selects a row (without selecting a cell).</p>",
          "parameters": [
            {
              "name": "options",
              "type": [
                "Object",
                "Core.data.Model"
              ],
              "description": "<p>A record to select or an config object describing the selection</p>"
            },
            {
              "name": "options.record",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record or record id, specifying null will deselect all</p>",
              "isSubParam": true
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>The column to scroll into view if <code>scrollIntoView</code> is not specified as <code>false</code>. Defaults to the grid's first column.</p>",
              "isSubParam": true
            },
            {
              "name": "options.scrollIntoView",
              "type": "Boolean",
              "description": "<p>Specify <code>false</code> to prevent row from being scrolled into view</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.addToSelection",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to add to selection, defaults to <code>false</code> which replaces</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:selectionChange"
          ],
          "category": "Selection"
        },
        {
          "name": "selectCell",
          "description": "<p>Selects a cell and/or its row (depending on <a href=\"#Grid/view/mixin/GridSelection#config-selectionMode\">selectionMode</a>)</p>",
          "parameters": [
            {
              "name": "cellSelector",
              "type": "Object",
              "description": "<p>{ id: rowId, columnId: 'columnId' }</p>"
            },
            {
              "name": "scrollIntoView",
              "type": "Boolean",
              "description": "<p>Specify <code>false</code> to prevent row from being scrolled into view</p>",
              "default": false
            },
            {
              "name": "addToSelection",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to add to selection, defaults to <code>false</code> which replaces</p>",
              "default": false
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to not trigger any events when selecting the cell</p>",
              "default": false
            }
          ],
          "scope": "instance",
          "fires": [
            "event:selectionChange"
          ],
          "category": "Selection",
          "returns": {
            "type": "Object",
            "description": "<p>Cell selector</p>"
          }
        },
        {
          "name": "selectAll",
          "description": "<p>Selects all rows. If store is filtered, this will merge the selection of all visible rows with any selection made prior to filtering</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectAll",
          "description": "<p>Deselects all selected rows and cells. If store is filtered, this will unselect all visible rows only. Any\nselections made prior to filtering remains.</p>",
          "parameters": [
            {
              "name": "removeCurrentRecordsOnly",
              "type": "Boolean",
              "description": "<p>Pass <code>false</code> to clear all selected records, and <code>true</code> to only\nclear selected records in the current set of records</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectRow",
          "description": "<p>Deselect a row</p>",
          "parameters": [
            {
              "name": "recordOrId",
              "type": [
                "Core.data.Model",
                "String",
                "Number"
              ],
              "description": "<p>Record or an id for a record</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectRows",
          "description": "<p>Select one or more rows</p>",
          "parameters": [
            {
              "name": "recordOrIds",
              "type": [
                "Core.data.Model",
                "String",
                "Number",
                "Array.<Core.data.Model>",
                "Array.<String>",
                "Array.<Number>"
              ],
              "description": "<p>An array of records or ids for a record</p>"
            },
            {
              "name": "addToSelection",
              "type": "Boolean",
              "description": "<p><code>false</code> clears existing selections first, <code>true</code> adds to existing selection</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectRows",
          "description": "<p>Deselect one or more rows</p>",
          "parameters": [
            {
              "name": "recordOrIds",
              "type": [
                "Core.data.Model",
                "String",
                "Number",
                "Array.<Core.data.Model>",
                "Array.<String>",
                "Array.<Number>"
              ],
              "description": "<p>An array of records or ids for a record</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectCell",
          "description": "<p>Deselect a cell/row, depending on settings in Grid#selectionMode</p>",
          "parameters": [
            {
              "name": "cellSelector",
              "type": "Object"
            }
          ],
          "scope": "instance",
          "category": "Selection",
          "returns": {
            "type": "Object",
            "description": "<p>Normalized cell selector</p>"
          }
        },
        {
          "name": "selectRange",
          "description": "<p>Selects rows corresponding to a range of records (from fromId to toId)</p>",
          "parameters": [
            {
              "name": "fromId",
              "type": [
                "String",
                "Number"
              ]
            },
            {
              "name": "toId",
              "type": [
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "onStoreRemove",
          "access": "private",
          "description": "<p>Triggered from Grid view when records get removed from the store.\nDeselects all records which have been removed.</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "onStoreDataChange",
          "access": "private",
          "description": "<p>Triggered from Grid view when the store changes. This might happen\nif store events are batched and then resumed.\nDeselects all records which have been removed.</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "onStoreRemoveAll",
          "access": "private",
          "description": "<p>Triggered from Grid view when all records get removed from the store.\nDeselects all records.</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "handleMouseMultiSelect",
          "access": "private",
          "description": "<p>Handles multi selection using the mouse. Called from GridElementEvents on mousedown in a cell and\nsimultaneously pressing a modifier key.</p>",
          "parameters": [
            {
              "name": "cellData"
            },
            {
              "name": "event"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "onCellNavigate",
          "access": "private",
          "description": "<p>Triggered from GridNavigation when focus is moved to another cell within the grid. Selects the cell unless\nmodifier keys are pressed, in which case it has already been handled</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "triggerChangeEvent",
          "access": "private",
          "description": "<p>Keeps the UI synced with the selectionChange event before firing it out.\nEvent is not fired if the <code>silent</code> parameter is truthy.</p>",
          "parameters": [
            {
              "name": "selectionChangeEvent",
              "type": "Object",
              "description": "<p>The change event to sync the UI to, and to possibly fire.</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to not trigger any the passed.</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        }
      ],
      "events": [
        {
          "name": "selectionChange",
          "description": "<p>The selection has been changed.</p>",
          "parameters": [
            {
              "name": "action",
              "type": "String",
              "description": "<p><code>'select'</code>/<code>'deselect'</code></p>"
            },
            {
              "name": "mode",
              "type": "String",
              "description": "<p><code>'row'</code>/<code>'cell'</code></p>"
            },
            {
              "name": "source",
              "type": "Grid.view.Grid"
            },
            {
              "name": "deselected",
              "type": [
                "Array.<Core.data.Model>",
                "Object"
              ],
              "description": "<p>The records or cells (depending on the <code>mode</code>) deselected in this operation.</p>"
            },
            {
              "name": "selected",
              "type": [
                "Array.<Core.data.Model>",
                "Object"
              ],
              "description": "<p>The records or cells (depending on the <code>mode</code>) selected in this operation.</p>"
            },
            {
              "name": "selection",
              "type": [
                "Array.<Core.data.Model>",
                "Object"
              ],
              "description": "<p>The records or cells (depending on the <code>mode</code>) in the new selection.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "selectedCell",
          "description": "<p>Cell selector for selected cell, set to select a cell or use <a href=\"#Grid/view/mixin/GridSelection#function-selectCell\">selectCell()</a>.</p>",
          "type": "Object",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectedRecord",
          "description": "<p>The last selected record. Set to select a row or use Grid#selectRow. Set to null to\ndeselect all</p>",
          "type": "Core.data.Model",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectedRecords",
          "description": "<p>Selected records.</p>\n<p>Can be set as array of ids:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>grid.selectedRecords = [1, 2, 4, 6]\n</code></pre>",
          "type": "Array.<Core.data.Model>",
          "accepts": [
            "Core.data.Model[]",
            "Number[]"
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectedCellCSSSelector",
          "description": "<p>CSS selector for the currently selected cell. Format is &quot;[data-index=index] [data-column-id=column]&quot;.</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true,
          "category": "Selection"
        }
      ]
    },
    {
      "name": "GridState",
      "modulePath": "Grid/view/mixin/GridState",
      "description": "<p>Mixin for Grid that handles state. It serializes the following grid properties:</p>\n<ul>\n<li>rowHeight</li>\n<li>readOnly</li>\n<li>selectedCell</li>\n<li>selectedRecords</li>\n<li>columns (order, widths, visibility)</li>\n<li>store (sorters, groupers, filters)</li>\n<li>scroll position</li>\n</ul>\n<p>See <a href=\"#Core/mixin/State\">State</a> for more information on state.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridState.js",
      "path": "/Calendar/lib/Grid/view/mixin",
      "demo": {
        "product": "grid",
        "demo": "state"
      },
      "externalExamples": [
        "Grid/view/mixin/GridState.js"
      ],
      "properties": [
        {
          "name": "state",
          "description": "<p>Gets or sets grid's state. Check out <a href=\"#Grid/view/mixin/GridState\">GridState</a> mixin for details.</p>",
          "type": "Object",
          "scope": "inner",
          "properties": [
            {
              "name": "state.columns",
              "type": "Array.<Object>",
              "isSubParam": true
            },
            {
              "name": "state.readOnly",
              "type": "Boolean",
              "isSubParam": true
            },
            {
              "name": "state.rowHeight",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.scroll",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.scroll.scrollLeft",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.scroll.scrollTop",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.selectedRecords",
              "type": "Array",
              "isSubParam": true
            },
            {
              "name": "state.style",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "state.selectedCell",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "state.store",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.store.sorters",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.store.groupers",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.store.filters",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.subGrids",
              "type": "Object",
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getState",
          "access": "private",
          "description": "<p>Get grid's current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,\nselectedRecordId, column states and store state etc.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>State object to be serialized</p>"
          }
        },
        {
          "name": "applyState",
          "access": "private",
          "description": "<p>Apply previously stored state.</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Object"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "GridSubGrids",
      "modulePath": "Grid/view/mixin/GridSubGrids",
      "description": "<p>Mixin for grid that handles SubGrids. Each SubGrid is scrollable horizontally separately from the other SubGrids.\nHaving two SubGrids allows you to achieve what is usually called locked or frozen columns.</p>\n<p>By default a Grid has two SubGrids, one named 'locked' and one 'normal'. The <code>locked</code> region has fixed width, while\nthe <code>normal</code> region grows to fill all available width (flex).</p>\n<p>Which SubGrid a column belongs to is determined using its <a href=\"#Grid/column/Column#config-region\">region</a> config. For\nexample to put a column into the locked region, specify <code>{ region: 'locked' }</code>. For convenience, a column can be put\nin the locked region using <code>{ locked: true }</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Grid({\n  columns : [\n    // These two columns both end up in the &quot;locked&quot; region\n    { field: 'name', text: 'Name', locked: true }\n    { field: 'age', text: 'Age', region: 'locked' }\n  ]\n});\n</code></pre>\n<p>To customize the SubGrids, use <a href=\"#Grid/view/Grid#config-subGridConfigs\">subGridConfigs</a>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// change the predefined subgrids\nnew Grid({\n  subGridConfigs : {\n      locked : { flex : 1 } ,\n      normal : { flex : 3 }\n  }\n})\n\n// or define your own entirely\nnew Grid({\n  subGridConfigs : {\n      a : { width : 150 } ,\n      b : { flex  : 1 },\n      c : { width : 150 }\n  },\n\n  columns : [\n      { field : 'name', text : 'Name', region : 'a' },\n      ...\n  ]\n})\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GridSubGrids.js",
      "path": "/Calendar/lib/Grid/view/mixin",
      "demo": {
        "product": "grid",
        "demo": "lockedcolumns"
      },
      "properties": [
        {
          "name": "subGrids",
          "description": "<p>An object containing the <a href=\"#Grid/view/SubGrid\">SubGrid</a> region instances, indexed by subGrid id ('locked', normal'...)</p>",
          "type": "Object",
          "scope": "inner",
          "readonly": true,
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "eachSubGrid",
          "access": "internal",
          "description": "<p>Iterate over all subGrids, calling the supplied function for each.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>Function to call for each instance</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference to call the function in, defaults to the subGrid itself</p>"
            }
          ],
          "scope": "instance",
          "category": "SubGrid"
        },
        {
          "name": "callEachSubGrid",
          "access": "internal",
          "description": "<p>Call a function by name for all subGrids (that have the function).</p>",
          "parameters": [
            {
              "name": "fnName",
              "type": "String",
              "description": "<p>Name of function to call, uses the subGrid itself as <code>this</code> reference</p>"
            },
            {
              "name": "params",
              "description": "<p>Parameters to call the function with</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance",
          "category": "SubGrid",
          "returns": {
            "type": "*",
            "description": "<p>Return value from first SubGrid is returned</p>"
          }
        },
        {
          "name": "getLastRegions",
          "access": "private",
          "description": "<p>This method should return names of the two last regions in the grid as they are visible in the UI. In case\n<code>regions</code> property cannot be trusted, use different approach. Used by SubGrid and RegionResize to figure out\nwhich region should collapse or expand.</p>",
          "scope": "instance",
          "category": "SubGrid",
          "returns": {
            "type": "Array.<String>"
          }
        },
        {
          "name": "getNextRegion",
          "access": "private",
          "description": "<p>This method should return right neighbour for passed region, or left neighbour in case last visible region is passed.\nThis method is used to decide which subgrid should take space of the collapsed one.</p>",
          "parameters": [
            {
              "name": "region",
              "type": "String"
            }
          ],
          "scope": "instance",
          "category": "SubGrid",
          "returns": {
            "type": "String"
          }
        },
        {
          "name": "getSubGrid",
          "description": "<p>Returns the subGrid for the specified region.</p>",
          "parameters": [
            {
              "name": "region",
              "type": "String",
              "description": "<p>Region, eg. locked or normal (per default)</p>"
            }
          ],
          "scope": "instance",
          "category": "SubGrid",
          "returns": {
            "type": "Grid.view.SubGrid",
            "description": "<p>A subGrid</p>"
          }
        },
        {
          "name": "getSubGridFromColumn",
          "description": "<p>Get the SubGrid that contains specified column</p>",
          "parameters": [
            {
              "name": "column",
              "type": [
                "String",
                "Grid.column.Column"
              ],
              "description": "<p>Column &quot;name&quot; or column object</p>"
            }
          ],
          "scope": "instance",
          "category": "SubGrid",
          "returns": {
            "type": "Grid.view.SubGrid"
          }
        },
        {
          "name": "resolveSplitter",
          "access": "private",
          "description": "<p>Returns splitter element for subgrid</p>",
          "parameters": [
            {
              "name": "subGrid",
              "type": [
                "Grid.view.SubGrid",
                "String"
              ]
            }
          ],
          "scope": "instance",
          "category": "SubGrid",
          "returns": {
            "type": "HTMLElement"
          }
        }
      ]
    },
    {
      "name": "DurationColumn",
      "modulePath": "Scheduler/column/DurationColumn",
      "classDescription": "<p>A column showing the task <a href=\"#Scheduler/model/TimeSpan#property-fullDuration\">duration</a>. Please note, this column\nis preconfigured and expects its field to be of the <a href=\"#Core/data/Duration\">Duration</a> type.</p>\n<p>The default editor is a <a href=\"#Core/widget/DurationField\">DurationField</a>. It parses time units, so you can enter &quot;4d&quot;\nindicating 4 days duration, or &quot;4h&quot; indicating 4 hours, etc. The numeric magnitude can be either an integer or a\nfloat value. Both &quot;,&quot; and &quot;.&quot; are valid decimal separators. For example, you can enter &quot;4.5d&quot; indicating 4.5 days\nduration, or &quot;4,5h&quot; indicating 4.5 hours.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/column/DurationColumn.js\"></div></p>",
      "extends": [
        "Grid/column/NumberColumn"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DurationColumn.js",
      "path": "/Calendar/lib/Scheduler/column",
      "classType": "duration",
      "configs": [
        {
          "name": "decimalPrecision",
          "description": "<p>Precision of displayed duration, defaults to use <a href=\"#Scheduler/view/Scheduler#config-durationDisplayPrecision\">durationDisplayPrecision</a>.\nSpecify an integer value to override that setting, or <code>false</code> to use raw value</p>",
          "type": [
            "Number",
            "Boolean"
          ],
          "scope": "inner"
        },
        {
          "name": "min",
          "description": "<p>Min value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "max",
          "description": "<p>Max value</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "step",
          "description": "<p>Step size for spin button clicks. Also used when pressing up/down keys in the field.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        },
        {
          "name": "largeStep",
          "description": "<p>Large step size, defaults to 10 * <code>step</code>. Applied when pressing SHIFT and stepping either by click or\nusing keyboard.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": "10"
        }
      ],
      "properties": [
        {
          "name": "step",
          "description": "<p>Step size for spin button clicks.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "ResourceCollapseColumn",
      "modulePath": "Scheduler/column/ResourceCollapseColumn",
      "classDescription": "<p>A column toggling the resource <a href=\"#Scheduler/model/ResourceModel#field-eventLayout\">eventLayout</a> between <code>none</code> and <code>stack</code>.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceCollapseColumn.js",
      "path": "/Calendar/lib/Scheduler/column",
      "externalExamples": [
        "Scheduler/column/ResourceCollapseColumn.js"
      ],
      "classType": "resourceCollapse",
      "hideConfigs": [
        "renderer"
      ]
    },
    {
      "name": "ResourceInfoColumn",
      "modulePath": "Scheduler/column/ResourceInfoColumn",
      "classDescription": "<p>Displays basic resource information. Defaults to showing an image + name + event count (all configurable).</p>\n<p>If a resource has no image, you can either provide an icon using <code>iconCls</code> in the data (you then need to specify\n<code>image === false</code> in your data) or the resource initials will be shown.</p>\n<p>Be sure to specify <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath\">resourceImagePath</a> to instruct the\ncolumn where to look for the images.</p>\n<p>If a image fails to load or if a resource lacks an image, the resource name initials will be rendered. If the\nresource has an <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-eventColor\">eventColor</a> specified, it will be used as the\nbackground color of the initials.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceInfoColumn.js",
      "path": "/Calendar/lib/Scheduler/column",
      "externalExamples": [
        "Scheduler/column/ResourceInfoColumn.js"
      ],
      "classType": "resourceInfo",
      "hideConfigs": [
        "renderer"
      ],
      "configs": [
        {
          "name": "showImage",
          "description": "<p>Show image. Looks for image name in fields on the resource in the following order: 'imageUrl', 'image',\n'name'. Set <code>showImage</code> to a field name to use a custom field. Set <code>Scheduler.resourceImagePath</code> to\nspecify where to load images from. If no extension found, defaults to\n<a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImageExtension\">resourceImageExtension</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showEventCount",
          "description": "<p>Show number of events assigned to the resource below the name.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showMeta",
          "description": "<p>A template string to render any extra information about the resource below the name</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The record representing the current row</p>"
            }
          ]
        },
        {
          "name": "showRole",
          "description": "<p>Show resource role below the name. Specify <code>true</code> to display data from the <code>role</code> field, or specify a field\nname to read this value from.</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "validNames",
          "description": "<p>Valid image names. Set to <code>null</code> to allow all names.</p>",
          "type": "Array.<String>",
          "scope": "inner",
          "deprecated": true
        },
        {
          "name": "autoScaleThreshold",
          "description": "<p>Specify 0 to prevent the column from adapting its content according to the used row height, or specify a\na threshold (row height) at which scaling should start.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 40
        }
      ]
    },
    {
      "name": "TimeAxisColumn",
      "modulePath": "Scheduler/column/TimeAxisColumn",
      "classDescription": "<p>A column containing the timeline &quot;viewport&quot;, in which events, dependencies etc are drawn.\nNormally you do not need to interact with or create this column, it is handled by Scheduler.</p>\n<p>If you wish to output custom contents inside the time axis row cells, you can provide your custom column configuration\nusing the <a href=\"#Scheduler/column/TimeAxisColumn#config-renderer\">renderer</a> like so:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n   appendTo         : document.body\n   columns          : [\n      { text : 'Name', field : 'name', width : 130 },\n      {\n          type : 'timeAxis',\n          renderer({ record, cellElement }) {\n              return '&lt;div class=&quot;cool-chart&quot;>&lt;/div>';\n          }\n      }\n   ]\n});\n</code></pre>",
      "extends": [
        "Grid/column/WidgetColumn"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeAxisColumn.js",
      "path": "/Calendar/lib/Scheduler/column",
      "configs": [
        {
          "name": "draggable",
          "description": "<p>Set to false to prevent this column header from being dragged.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "groupable",
          "description": "<p>Set to false to prevent grouping by this column.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "hideable",
          "description": "<p>Allow column visibility to be toggled through UI.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "showColumnPicker",
          "description": "<p>Show column picker for the column.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Menu"
        },
        {
          "name": "filterable",
          "description": "<p>Allow filtering data in the column (if Filter feature is enabled)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "sortable",
          "description": "<p>Allow sorting of data in the column</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "resizable",
          "description": "<p>Set to <code>false</code> to prevent the column from being drag-resized when the ColumnResize plugin is enabled.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "searchable",
          "description": "<p>Allow searching in the column (respected by QuickFind and Search features)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction"
        },
        {
          "name": "editor",
          "type": "String",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "enableCellContextMenu",
          "description": "<p>Set to <code>true</code> to show a context menu on the cell elements in this column</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Menu"
        },
        {
          "name": "tooltipRenderer",
          "type": [
            "function",
            "Boolean"
          ],
          "scope": "inner",
          "hide": true
        },
        {
          "name": "cls",
          "description": "<p>CSS class added to the header of this column</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "'b-sch-timeaxiscolumn'",
          "category": "Rendering"
        }
      ],
      "functions": [
        {
          "name": "refreshHeader",
          "description": "<p>Refreshes the columns header contents (which is either a HorizontalTimeAxis or a ResourceHeader). Useful if you\nhave rendered some extra meta data that depends on external data such as the EventStore or ResourceStore.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "VerticalTimeAxisColumn",
      "modulePath": "Scheduler/column/VerticalTimeAxisColumn",
      "classDescription": "<p>A column containing the time axis labels for vertical mode. Normally you do not need to interact with or\ncreate this column, it is handled by Scheduler/Gantt.</p>",
      "extends": [
        "Grid/column/Column"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "VerticalTimeAxisColumn.js",
      "path": "/Calendar/lib/Scheduler/column",
      "configs": [
        {
          "name": "draggable",
          "description": "<p>Set to false to prevent this column header from being dragged.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "groupable",
          "description": "<p>Set to false to prevent grouping by this column.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "hideable",
          "description": "<p>Allow column visibility to be toggled through UI.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "showColumnPicker",
          "description": "<p>Show column picker for the column.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Menu",
          "hide": true
        },
        {
          "name": "filterable",
          "description": "<p>Allow filtering data in the column (if Filter feature is enabled)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "sortable",
          "description": "<p>Allow sorting of data in the column</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "searchable",
          "description": "<p>Allow searching in the column (respected by QuickFind and Search features)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "editor",
          "description": "<p>Specifies if this column should be editable, and define which editor to use for editing cells in the column (if CellEdit feature is enabled)</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": false,
          "category": "Interaction",
          "hide": true
        },
        {
          "name": "enableCellContextMenu",
          "description": "<p>Set to <code>true</code> to show a context menu on the cell elements in this column</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Menu",
          "hide": true
        },
        {
          "name": "tooltipRenderer",
          "type": "function",
          "scope": "inner",
          "hide": true
        },
        {
          "name": "minWidth",
          "description": "<p>Column minimal width. If value is Number then minimal width is in pixels</p>",
          "type": [
            "Number",
            "String"
          ],
          "scope": "inner",
          "defaultValue": "0",
          "category": "Layout"
        }
      ]
    },
    {
      "name": "AbstractCrudManager",
      "modulePath": "Scheduler/crud/AbstractCrudManager",
      "classDescription": "<p>This is an abstract class serving as the base for the <a href=\"#Scheduler/data/CrudManager\">CrudManager</a> class.\nIt implements basic mechanisms to organize batch communication with a server.\nYet it does not contain methods related to <em>data transfer</em> nor <em>encoding</em>.\nThese methods are to be provided in sub-classes by consuming the appropriate mixins.</p>\n<p>For example, this is how the class can be used to implement an JSON encoding system:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// let's make new CrudManager using AJAX as a transport system and JSON for encoding\nclass MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {\n\n}\n</code></pre>\n<h2>Data transfer and encoding methods</h2>\n<p>These are methods that must be provided by subclasses of this class:</p>\n<ul>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest\">#sendRequest</a></li>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest\">#cancelRequest</a></li>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-encode\">#encode</a></li>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-decode\">#decode</a></li>\n</ul>",
      "extends": [
        "Core/Base"
      ],
      "mixes": [
        "Scheduler/crud/AbstractCrudManagerMixin"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "AbstractCrudManager.js",
      "path": "/Calendar/lib/Scheduler/crud",
      "properties": [
        {
          "name": "revision",
          "description": "<p>The server revision stamp.\nThe <em>revision stamp</em> is a number which should be incremented after each server-side change.\nThis property reflects the current version of the data retrieved from the server and gets updated after each\n<a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load</a> and <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync</a> call.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "json",
          "description": "<p>Get or set data of <a href=\"#Scheduler/crud/AbstractCrudManager#property-crudStores\">crudStores</a> as a JSON string.</p>\n<p>Get a JSON string:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>\nconst jsonString = scheduler.crudManager.json;\n\n// returned jsonString:\n'{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'\n\n// object representation of the returned jsonString:\n{\n    resourcesData    : [...],\n    eventsData       : [...],\n    assignmentsData  : [...],\n    dependenciesData : [...],\n    timeRangesData   : [...],\n    // data from other stores\n}\n</code></pre>\n<p>Set a JSON string (to populate the CrudManager stores):</p>\n<pre class=\"prettyprint source lang-javascript\"><code>scheduler.crudManager.json = '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'\n</code></pre>",
          "type": "String",
          "scope": "instance"
        },
        {
          "name": "inlineData",
          "description": "<p>Get or set data of CrudManager stores. The returned data is identical to what\n<a href=\"#Scheduler/crud/AbstractCrudManager#function-toJSON\">toJSON</a> returns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>\nconst data = scheduler.crudManager.inlineData;\n\n// data:\n{\n    eventsData : [...],\n    resourcesData : [...],\n    dependenciesData : [...],\n    assignmentsData : [...],\n    timeRangesData : [...],\n    resourceTimeRangesData : [...],\n    ... other stores data\n}\n\n\n// Plug it back in later\nscheduler.crudManager.inlineData = data;\n</code></pre>",
          "type": "Object",
          "scope": "instance"
        },
        {
          "name": "stores",
          "description": "<p>A list of registered stores whose server communication will be collected into a single batch.\nEach store is represented by a <em>store descriptor</em>, an object having following structure:</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "properties": [
            {
              "name": "stores.storeId",
              "type": "String",
              "description": "<p>Unique store identifier.</p>",
              "isSubParam": true
            },
            {
              "name": "stores.store",
              "type": "Core.data.Store",
              "description": "<p>Store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "stores.phantomIdField",
              "type": "String",
              "description": "<p>Set this if store model has a predefined field to keep phantom record identifier.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "stores.idField",
              "type": "String",
              "description": "<p>id field name, if it's not specified then class will try to get it from a store model.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "isLoading",
          "description": "<p>Returns true if the crud manager is currently loading data</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "CRUD"
        }
      ],
      "configs": [
        {
          "name": "stores",
          "description": "<p>Sets the list of stores controlled by the CRUD manager.</p>\n<p>When adding a store to the CrudManager, make sure the server response format is correct for <code>load</code> and <code>sync</code> requests.\nLearn more in the <a href=\"#Scheduler/guides/data/crud_manager.md#loading-data\">Working with data</a> guide.</p>\n<p>Store can be provided by itself, its storeId or an object having the following structure:</p>",
          "type": [
            "Array.<Core.data.Store>",
            "Array.<String>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "properties": [
            {
              "name": "stores.storeId",
              "type": "String",
              "description": "<p>Unique store identifier. Under this name the store related requests/responses will be sent.</p>",
              "isSubParam": true
            },
            {
              "name": "stores.store",
              "type": "Core.data.Store",
              "description": "<p>The store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "stores.phantomIdField",
              "type": "String",
              "description": "<p>Set this if the store model has a predefined field to keep phantom record identifier.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "stores.idField",
              "type": "String",
              "description": "<p>id field name, if it's not specified then class will try to get it from a store model.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "toJSON",
          "description": "<p>Returns the data from all CrudManager <code>crudStores</code> in a format that can be consumed by <code>inlineData</code>.</p>\n<p>Used by JSON.stringify to correctly convert this CrudManager to json.</p>\n<p>The returned data is identical to what <a href=\"#Scheduler/crud/AbstractCrudManager#property-inlineData\">inlineData</a> contains.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>\nconst json = scheduler.crudManager.toJSON();\n\n// json:\n{\n    eventsData : [...],\n    resourcesData : [...],\n    dependenciesData : [...],\n    assignmentsData : [...],\n    timeRangesData : [...],\n    resourceTimeRangesData : [...],\n    // ... other stores data\n}\n</code></pre>\n<p>Output can be consumed by <code>inlineData</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const json = scheduler.crudManager.toJSON();\n\n// Plug it back in later\nscheduler.crudManager.inlineData = json;\n</code></pre>",
          "scope": "inner",
          "category": "JSON",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "addStore",
          "description": "<p>Adds a store to the collection.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// append stores to the end of collection\ncrudManager.addStore([\n    store1,\n    // storeId\n    'bar',\n    // store descriptor\n    {\n        storeId : 'foo',\n        store   : store3\n    },\n    {\n        storeId         : 'bar',\n        store           : store4,\n        // to write all fields of modified records\n        writeAllFields  : true\n    }\n]);\n</code></pre>\n<p><strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.\nExactly in this order the loaded data will be put into each store.</p>\n<p>When adding a store to the CrudManager, make sure the server response format is correct for <code>load</code> and <code>sync</code> requests.\nLearn more in the <a href=\"#Scheduler/guides/data/crud_manager.md#loading-data\">Working with data</a> guide.</p>",
          "parameters": [
            {
              "name": "store",
              "type": [
                "Core.data.Store",
                "String",
                "Object",
                "Array.<Core.data.Store>",
                "Array.<String>",
                "Array.<Object>"
              ],
              "description": "<p>A store or list of stores. Each store might be specified by its instance, <code>storeId</code> or <em>descriptor</em>.\nThe <em>store descriptor</em> is an object having following properties:</p>"
            },
            {
              "name": "store.storeId",
              "type": "String",
              "description": "<p>The store identifier that will be used as a key in requests.</p>",
              "isSubParam": true
            },
            {
              "name": "store.store",
              "type": "Core.data.Store",
              "description": "<p>The store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "store.idField",
              "type": "String",
              "description": "<p>The idField of the store. If not specified will be taken from the store model.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "store.phantomIdField",
              "type": "String",
              "description": "<p>The field holding unique Ids of phantom records (if store has such model).</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "store.writeAllFields",
              "type": "Boolean",
              "description": "<p>Set to true to write all fields from modified records</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "position",
              "type": "Number",
              "description": "<p>The relative position of the store. If <code>fromStore</code> is specified the this position will be taken relative to it.\nIf not specified then store(s) will be appended to the end of collection.\nOtherwise it will be just a position in stores collection.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// insert stores store4, store5 to the start of collection\ncrudManager.addStore([ store4, store5 ], 0);\n</code></pre>",
              "optional": true
            },
            {
              "name": "fromStore",
              "type": [
                "String",
                "Core.data.Store",
                "Object"
              ],
              "description": "<p>The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor\">getStoreDescriptor</a> call).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// insert store6 just before a store having storeId equal to 'foo'\ncrudManager.addStore(store6, 0, 'foo');\n\n// insert store7 just after store3 store\ncrudManager.addStore(store7, 1, store3);\n</code></pre>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "AbstractCrudManagerMixin",
      "modulePath": "Scheduler/crud/AbstractCrudManagerMixin",
      "description": "<p>An abstract mixin that supplies most of the CrudManager functionality.\nIt implements basic mechanisms of collecting stores to organize batch communication with a server.\nIt does not contain methods related to <em>data transfer</em> nor <em>encoding</em>.\nThese methods are to be provided in sub-classes.\nOut of the box there are mixins implementing <a href=\"#Scheduler/crud/transport/AjaxTransport\">support of AJAX for data transferring</a>\nand <a href=\"#Scheduler/crud/encoder/JsonEncoder\">JSON for data encoding system</a>.\nFor example this is how we make a model that will implement CrudManager protocol and use AJAX/JSON to pass the dada to the server:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class SystemSettings extends JsonEncode(AjaxTransport(AbstractCrudManagerMixin(Model))) {\n    ...\n}\n</code></pre>\n<h2>Data transfer and encoding methods</h2>\n<p>These are methods that must be provided by subclasses of this class:</p>\n<ul>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest\">sendRequest</a></li>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest\">cancelRequest</a></li>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-encode\">encode</a></li>\n<li><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-decode\">decode</a></li>\n</ul>",
      "mixes": [
        "Core/mixin/Delayable",
        "Core/mixin/Events",
        "Scheduler/crud/mixin/AbstractCrudManagerValidation"
      ],
      "mixin": true,
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "AbstractCrudManagerMixin.js",
      "path": "/Calendar/lib/Scheduler/crud",
      "events": [
        {
          "name": "beforeResponseApply",
          "description": "<p>Fires before server response gets applied to the stores. Return <code>false</code> to prevent data applying.\nThis event can be used for server data preprocessing. To achieve it user can modify the <code>response</code> object.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "requestType",
              "type": "String",
              "description": "<p>The request type (<code>sync</code> or <code>load</code>).</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            }
          ]
        },
        {
          "name": "beforeLoadApply",
          "description": "<p>Fires before loaded data get applied to the stores. Return <code>false</code> to prevent data applying.\nThis event can be used for server data preprocessing. To achieve it user can modify the <code>response</code> object.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Options provided to the <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load</a> method.</p>"
            }
          ]
        },
        {
          "name": "beforeSyncApply",
          "description": "<p>Fires before sync response data get applied to the stores. Return <code>false</code> to prevent data applying.\nThis event can be used for server data preprocessing. To achieve it user can modify the <code>response</code> object.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            }
          ]
        },
        {
          "name": "hasChanges",
          "description": "<p>Fires when data in any of the registered data stores is changed.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    crudManager.on('hasChanges', function (crud) {\n        // enable persist changes button when some store gets changed\n        saveButton.enable();\n    });\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            }
          ]
        },
        {
          "name": "requestFail",
          "description": "<p>Fires when a request fails.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager instance.</p>"
            },
            {
              "name": "requestType",
              "type": "String",
              "description": "<p>The request type (<code>sync</code> or <code>load</code>).</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            },
            {
              "name": "responseText",
              "type": "String",
              "description": "<p>The raw server response text</p>"
            },
            {
              "name": "responseOptions",
              "type": "Object",
              "description": "<p>The response options.</p>"
            }
          ]
        },
        {
          "name": "loadFail",
          "description": "<p>Fires when a <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load request</a> fails.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager instance.</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            },
            {
              "name": "responseText",
              "type": "String",
              "description": "<p>The raw server response text</p>"
            },
            {
              "name": "responseOptions",
              "type": "Object",
              "description": "<p>The response options.</p>"
            }
          ]
        },
        {
          "name": "syncFail",
          "description": "<p>Fires when a <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync request</a> fails.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager instance.</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            },
            {
              "name": "responseText",
              "type": "String",
              "description": "<p>The raw server response text</p>"
            },
            {
              "name": "responseOptions",
              "type": "Object",
              "description": "<p>The response options.</p>"
            }
          ]
        },
        {
          "name": "requestDone",
          "description": "<p>Fires on successful request completion after data gets applied to the stores.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "requestType",
              "type": "String",
              "description": "<p>The request type (<code>sync</code> or <code>load</code>).</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            },
            {
              "name": "responseOptions",
              "type": "Object",
              "description": "<p>The server response options.</p>"
            }
          ]
        },
        {
          "name": "load",
          "description": "<p>Fires on successful <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load request</a> completion after data gets loaded to the stores.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            },
            {
              "name": "responseOptions",
              "type": "Object",
              "description": "<p>The server response options.</p>"
            }
          ]
        },
        {
          "name": "sync",
          "description": "<p>Fires on successful <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync request</a> completion.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "<p>The decoded server response object.</p>"
            },
            {
              "name": "responseOptions",
              "type": "Object",
              "description": "<p>The server response options.</p>"
            }
          ]
        },
        {
          "name": "noChanges",
          "description": "<p>Fires when registered stores get into state when they don't have any\nnot persisted change. This happens after <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load</a> or <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync</a> request\ncompletion. Or this may happen after a record update which turns its fields back to their original state.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>crudManager.on('nochanges', function (crud) {\n    // disable persist changes button when there is no changes\n    saveButton.disable();\n});\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            }
          ]
        },
        {
          "name": "beforeLoad",
          "description": "<p>Fires before <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load request</a> is sent. Return <code>false</code> to cancel load request.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "pack",
              "type": "Object",
              "description": "<p>The data package which contains data for all stores managed by the crud manager.</p>"
            }
          ]
        },
        {
          "name": "loadCanceled",
          "description": "<p>Fired after <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load request</a> was canceled by some <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad\">beforeLoad</a>\nlistener or due to incomplete prior load request.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "pack",
              "type": "Object",
              "description": "<p>The data package which contains data for all stores managed by the crud\nmanager.</p>"
            }
          ]
        },
        {
          "name": "syncDelayed",
          "description": "<p>Fires after <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync request</a> was delayed due to incomplete previous one.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "arguments",
              "type": "Object",
              "description": "<p>The arguments of <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync</a> call.</p>"
            }
          ]
        },
        {
          "name": "beforeSync",
          "description": "<p>Fires before <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync request</a> is sent. Return <code>false</code> to cancel sync request.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>crudManager.on('beforesync', function() {\n    // cannot persist changes before at least one record is added\n    // to the `someStore` store\n    if (!someStore.getCount()) return false;\n});\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "pack",
              "type": "Object",
              "description": "<p>The data package which contains data for all stores managed by the crud manager.</p>"
            }
          ]
        },
        {
          "name": "syncCanceled",
          "description": "<p>Fires after <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync request</a> was canceled by some <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync\">beforeSync</a> listener.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "pack",
              "type": "Object",
              "description": "<p>The data package which contains data for all stores managed by the crud manager.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "crudRevision",
          "description": "<p>The server revision stamp.\nThe <em>revision stamp</em> is a number which should be incremented after each server-side change.\nThis property reflects the current version of the data retrieved from the server and gets updated after each <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load</a> and <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sync\">sync</a> call.</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true,
          "category": "CRUD"
        },
        {
          "name": "crudStores",
          "description": "<p>A list of registered stores whose server communication will be collected into a single batch.\nEach store is represented by a <em>store descriptor</em>, an object having following structure:</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "CRUD",
          "properties": [
            {
              "name": "crudStores.storeId",
              "type": "String",
              "description": "<p>Unique store identifier.</p>",
              "isSubParam": true
            },
            {
              "name": "crudStores.store",
              "type": "Core.data.Store",
              "description": "<p>Store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "crudStores.phantomIdField",
              "type": "String",
              "description": "<p>Set this if store model has a predefined field to keep phantom record identifier.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "crudStores.idField",
              "type": "String",
              "description": "<p>id field name, if it's not specified then class will try to get it from a store model.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "syncApplySequence",
          "description": "<p>An array of stores presenting an alternative sync responses apply order.\nEach store is represented by a <em>store descriptor</em>, an object having following structure:</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "CRUD",
          "properties": [
            {
              "name": "syncApplySequence.storeId",
              "type": "String",
              "description": "<p>Unique store identifier.</p>",
              "isSubParam": true
            },
            {
              "name": "syncApplySequence.store",
              "type": "Core.data.Store",
              "description": "<p>Store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "syncApplySequence.phantomIdField",
              "type": "String",
              "description": "<p>Set this if store model has a predefined field to keep phantom record identifier.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "syncApplySequence.idField",
              "type": "String",
              "description": "<p>id field name, if it's not specified then class will try to get it from a store model.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "isCrudManagerLoading",
          "description": "<p>Returns true if the crud manager is currently loading data</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "CRUD"
        },
        {
          "name": "isCrudManagerSyncing",
          "description": "<p>Returns true if the crud manager is currently syncing data</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "CRUD"
        },
        {
          "name": "changes",
          "description": "<p>Returns current changes as an object consisting of added/modified/removed arrays of records for every\nmanaged store. Returns <code>null</code> if no changes exist. Format:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    resources : {\n        added    : [{ name : 'New guy' }],\n        modified : [{ id : 2, name : 'Mike' }],\n        removed  : [{ id : 3 }]\n    },\n    events : {\n        modified : [{  id : 12, name : 'Cool task' }]\n    },\n    ...\n}\n</code></pre>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "CRUD"
        },
        {
          "name": "requestId",
          "access": "internal",
          "description": "<p>Generates unique request identifier.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Number"
                ]
              },
              "description": "<p>The request identifier.</p>"
            }
          ],
          "category": "CRUD"
        }
      ],
      "configs": [
        {
          "name": "crudStores",
          "description": "<p>Sets the list of stores controlled by the CRUD manager.</p>\n<p>When adding a store to the CrudManager, make sure the server response format is correct for <code>load</code> and <code>sync</code> requests.\nLearn more in the <a href=\"#Scheduler/guides/data/crud_manager.md#loading-data\">Working with data</a> guide.</p>\n<p>Store can be provided by itself, its storeId or an object having the following structure:</p>",
          "type": [
            "Array.<Core.data.Store>",
            "Array.<String>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "CRUD",
          "properties": [
            {
              "name": "stores.storeId",
              "type": "String",
              "description": "<p>Unique store identifier. Under this name the store related requests/responses will be sent.</p>",
              "isSubParam": true
            },
            {
              "name": "stores.store",
              "type": "Core.data.Store",
              "description": "<p>The store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "stores.phantomIdField",
              "type": "String",
              "description": "<p>Set this if the store model has a predefined field to keep phantom record identifier.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "stores.idField",
              "type": "String",
              "description": "<p>id field name, if it's not specified then class will try to get it from a store model.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "storeIdProperty",
          "description": "<p>Name of a store property to retrieve store identifiers from. Make sure you have an instance of a store to use it by id.\nStore identifier is used as a container name holding corresponding store data while transferring them to/from the server.\nBy default <code>storeId</code> property is used. And in case a container identifier has to differ this config can be used:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class CatStore extends Store {\n    static get defaultConfig() {\n        return {\n            // store id is &quot;meow&quot; but for sending/receiving store data\n            // we want have &quot;cats&quot; container in JSON, so we create a new property &quot;storeIdForCrud&quot;\n            id             : 'meow',\n            storeIdForCrud : 'cats'\n        }\n    }\n});\n\n// create an instance to use a store by id\nnew CatStore();\n\nclass MyCrudManager extends CrudManager {\n    ...\n    crudStores           : ['meow'],\n    // crud manager will get store identifier from &quot;storeIdForCrud&quot; property\n    storeIdProperty  : 'storeIdForCrud'\n});\n</code></pre>\n<p>The <code>storeIdProperty</code> property can also be specified directly on a store:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class CatStore extends Store {\n    static get defaultConfig() {\n        return {\n            // storeId is &quot;meow&quot; but for sending/receiving store data\n            // we want have &quot;cats&quot; container in JSON\n            id              : 'meow',\n            // so we create a new property &quot;storeIdForCrud&quot;..\n            storeIdForCrud  : 'cats',\n            // and point CrudManager to use it as the store identifier source\n            storeIdProperty  : 'storeIdForCrud'\n        }\n    }\n});\n\nclass DogStore extends Store {\n    static get defaultConfig() {\n        return {\n            // storeId is &quot;dogs&quot; and it will be used as a container name for the store data\n            storeId : 'dogs',\n            // id is set to get a store by identifier\n            id      : 'dogs'\n        }\n    }\n});\n\n// create an instance to use a store by id\nnew CatStore();\nnew DogStore();\n\nclass MyCrudManager extends CrudManager {\n    ...\n    crudStores : ['meow', 'dogs']\n});\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "category": "CRUD"
        },
        {
          "name": "trackResponseType",
          "description": "<p>When <code>true</code> forces the CRUD manager to process responses depending on their <code>type</code> attribute.\nSo <code>load</code> request may be responded with <code>sync</code> response for example.\nCan be used for smart server logic allowing the server to decide when it's better to respond with a complete data set (<code>load</code> response)\nor it's enough to return just a delta (<code>sync</code> response).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "CRUD"
        },
        {
          "name": "supportShortSyncResponse",
          "description": "<p>When <code>true</code> the Crud Manager does not require all updated and removed records to be mentioned in the\n<em>sync</em> response. In this case response should include only server side changes.</p>\n<p><strong>Please note that added records should still be mentioned in response to provide real identifier\ninstead of the phantom one.</strong></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "CRUD"
        },
        {
          "name": "phantomIdField",
          "description": "<p>Field name to be used to transfer a phantom record identifier.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "$PhantomId",
          "category": "CRUD"
        },
        {
          "name": "phantomParentIdField",
          "description": "<p>Field name to be used to transfer a phantom parent record identifier.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "$PhantomParentId",
          "category": "CRUD"
        },
        {
          "name": "autoLoad",
          "description": "<p><code>true</code> to automatically call <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-load\">load</a> method after creation.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "CRUD"
        },
        {
          "name": "autoSyncTimeout",
          "description": "<p>The timeout in milliseconds to wait before persisting changes to the server.\nUsed when <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#config-autoSync\">autoSync</a> is set to <code>true</code>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 100,
          "category": "CRUD"
        },
        {
          "name": "autoSync",
          "description": "<p><code>true</code> to automatically persist store changes after edits are made in any of the stores monitored.\nPlease note that sync request will not be invoked immediately but only after <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout\">autoSyncTimeout</a> interval.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "CRUD"
        },
        {
          "name": "resetIdsBeforeSync",
          "description": "<p><code>True</code> to reset identifiers (defined by <code>idField</code> config) of phantom records before submitting them to the server.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "CRUD"
        },
        {
          "name": "syncApplySequence",
          "description": "<p>An array of store identifiers sets an alternative sync responses apply order.\nBy default the order in which sync responses are applied to the stores is the same as they registered in.\nBut in case of some tricky dependencies between stores this order can be changed:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyCrudManager extends CrudManager {\n    // register stores (they will be loaded in the same order: 'store1' then 'store2' and finally 'store3')\n    crudStores : ['store1', 'store2', 'store3'],\n    // but we apply changes from server to them in an opposite order\n    syncApplySequence : ['store3', 'store2', 'store1']\n});\n</code></pre>",
          "type": "Array.<String>",
          "scope": "inner",
          "category": "CRUD"
        },
        {
          "name": "writeAllFields",
          "description": "<p><code>true</code> to write all fields from the record to the server.\nIf set to <code>false</code> it will only send the fields that\nwere modified.\nNote that any fields that have <a href=\"#Core/data/field/DataField#config-persist\">persist</a> set to <code>false</code> will still be ignored and fields\nhaving <a href=\"#Core/data/field/DataField#config-alwaysWrite\">alwaysWrite</a> set to <code>true</code> will always be included.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "CRUD"
        }
      ],
      "functions": [
        {
          "name": "sendRequest",
          "virtual": true,
          "description": "<p>Sends request to the server.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "Object",
              "description": "<p>The request to send. An object having following properties:</p>"
            },
            {
              "name": "request.data",
              "type": "String",
              "description": "<p><a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-encode\">Encoded</a> request.</p>",
              "isSubParam": true
            },
            {
              "name": "request.type",
              "type": "String",
              "description": "<p>Request type, can be either <code>load</code> or <code>sync</code></p>",
              "isSubParam": true
            },
            {
              "name": "request.success",
              "type": "function",
              "description": "<p>Callback to be started on successful request transferring</p>",
              "isSubParam": true
            },
            {
              "name": "request.failure",
              "type": "function",
              "description": "<p>Callback to be started on request transfer failure</p>",
              "isSubParam": true
            },
            {
              "name": "request.thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the above <code>success</code> and <code>failure</code> callbacks</p>",
              "isSubParam": true
            }
          ],
          "scope": "inner",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>The request promise.</p>"
          }
        },
        {
          "name": "cancelRequest",
          "virtual": true,
          "description": "<p>Cancels request to the server.</p>",
          "parameters": [
            {
              "name": "promise",
              "type": "Promise",
              "description": "<p>The request promise to cancel (a value returned by corresponding <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest\">sendRequest</a> call).</p>"
            },
            {
              "name": "reject",
              "type": "function",
              "description": "<p>Reject handle of the corresponding promise</p>"
            }
          ],
          "scope": "inner"
        },
        {
          "name": "encode",
          "virtual": true,
          "description": "<p>Encodes request to the server.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "Object",
              "description": "<p>The request to encode.</p>"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "String",
            "description": "<p>The encoded request.</p>"
          }
        },
        {
          "name": "decode",
          "virtual": true,
          "description": "<p>Decodes response from the server.</p>",
          "parameters": [
            {
              "name": "response",
              "type": "String",
              "description": "<p>The response to decode.</p>"
            }
          ],
          "scope": "inner",
          "returns": {
            "type": "Object",
            "description": "<p>The decoded response.</p>"
          }
        },
        {
          "name": "getStoreDescriptor",
          "description": "<p>Returns a registered store descriptor.</p>",
          "parameters": [
            {
              "name": "storeId",
              "type": [
                "String",
                "Core.data.Store"
              ],
              "description": "<p>The store identifier or registered store instance.</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD",
          "returns": {
            "type": "Object",
            "description": "<p>The descriptor of the store.</p>"
          }
        },
        {
          "name": "getCrudStore",
          "description": "<p>Returns a registered store.</p>",
          "parameters": [
            {
              "name": "storeId",
              "type": "String",
              "description": "<p>Store identifier.</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD",
          "returns": {
            "type": "Core.data.Store",
            "description": "<p>Found store instance.</p>"
          }
        },
        {
          "name": "addCrudStore",
          "description": "<p>Adds a store to the collection.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// append stores to the end of collection\ncrudManager.addCrudStore([\n    store1,\n    // storeId\n    'bar',\n    // store descriptor\n    {\n        storeId : 'foo',\n        store   : store3\n    },\n    {\n        storeId         : 'bar',\n        store           : store4,\n        // to write all fields of modified records\n        writeAllFields  : true\n    }\n]);\n</code></pre>\n<p><strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.\nExactly in this order the loaded data will be put into each store.</p>\n<p>When adding a store to the CrudManager, make sure the server response format is correct for <code>load</code> and <code>sync</code>\nrequests. Learn more in the <a href=\"#Scheduler/guides/data/crud_manager.md#loading-data\">Working with data</a> guide.</p>",
          "parameters": [
            {
              "name": "store",
              "type": [
                "Core.data.Store",
                "String",
                "Object",
                "Array.<Core.data.Store>",
                "Array.<String>",
                "Array.<Object>"
              ],
              "description": "<p>A store or list of stores. Each store might be specified by its instance, <code>storeId</code> or <em>descriptor</em>.\nThe <em>store descriptor</em> is an object having following properties:</p>"
            },
            {
              "name": "store.storeId",
              "type": "String",
              "description": "<p>The store identifier that will be used as a key in requests.</p>",
              "isSubParam": true
            },
            {
              "name": "store.store",
              "type": "Core.data.Store",
              "description": "<p>The store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "store.idField",
              "type": "String",
              "description": "<p>The idField of the store. If not specified will be taken from the store model.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "store.phantomIdField",
              "type": "String",
              "description": "<p>The field holding unique Ids of phantom records (if store has such model).</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "store.writeAllFields",
              "type": "Boolean",
              "description": "<p>Set to true to write all fields from modified records</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "position",
              "type": "Number",
              "description": "<p>The relative position of the store. If <code>fromStore</code> is specified the this position\nwill be taken relative to it. If not specified then store(s) will be appended to the end of collection.\nOtherwise it will be just a position in stores collection.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// insert stores store4, store5 to the start of collection\ncrudManager.addCrudStore([ store4, store5 ], 0);\n</code></pre>",
              "optional": true
            },
            {
              "name": "fromStore",
              "type": [
                "String",
                "Core.data.Store",
                "Object"
              ],
              "description": "<p>The store relative to which position should be calculated.\nCan be defined as a store identifier, instance or descriptor (the result of\n<a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor\">getStoreDescriptor</a> call).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// insert store6 just before a store having storeId equal to 'foo'\ncrudManager.addCrudStore(store6, 0, 'foo');\n\n// insert store7 just after store3 store\ncrudManager.addCrudStore(store7, 1, store3);\n</code></pre>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "removeCrudStore",
          "description": "<p>Removes a store from collection. If the store was registered in alternative sync sequence list\nit will be removed from there as well.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// remove store having storeId equal to &quot;foo&quot;\ncrudManager.removeCrudStore(&quot;foo&quot;);\n\n// remove store3\ncrudManager.removeCrudStore(store3);\n</code></pre>",
          "parameters": [
            {
              "name": "store",
              "type": [
                "Object",
                "String",
                "Core.data.Store"
              ],
              "description": "<p>The store to remove. Either the store descriptor, store\nidentifier or store itself.</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "addStoreToApplySequence",
          "description": "<p>Adds a store to the alternative sync responses apply sequence.\nBy default the order in which sync responses are applied to the stores is the same as they registered in.\nBut this order can be changes either on construction step using <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence\">syncApplySequence</a> option\nor but calling this method.</p>\n<p><strong>Please note</strong>, that if the sequence was not initialized before this method call then\nyou will have to do it yourself like this for example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// alternative sequence was not set for this crud manager\n// so let's fill it with existing stores keeping the same order\ncrudManager.addStoreToApplySequence(crudManager.crudStores);\n\n// and now we can add our new store\n\n// we will load its data last\ncrudManager.addCrudStore(someNewStore);\n// but changes to it will be applied first\ncrudManager.addStoreToApplySequence(someNewStore, 0);\n</code></pre>\n<p>add registered stores to the sequence along with the store(s) you want to add</p>",
          "parameters": [
            {
              "name": "store",
              "type": [
                "Core.data.Store",
                "Object",
                "Array.<Core.data.Store>",
                "Array.<Object>"
              ],
              "description": "<p>The store to add or its <em>descriptor</em> (or\narray of stores or descriptors). Where <em>store descriptor</em> is an object having following properties:</p>"
            },
            {
              "name": "store.storeId",
              "type": "String",
              "description": "<p>The store identifier that will be used as a key in requests.</p>",
              "isSubParam": true
            },
            {
              "name": "store.store",
              "type": "Core.data.Store",
              "description": "<p>The store itself.</p>",
              "isSubParam": true
            },
            {
              "name": "store.idField",
              "type": "String",
              "description": "<p>The idField of the store. If not specified will be taken from the store model.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "store.phantomIdField",
              "type": "String",
              "description": "<p>The field holding unique Ids of phantom records (if store has such\nmodel).</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "position",
              "type": "Number",
              "description": "<p>The relative position of the store. If <code>fromStore</code> is specified the this position\nwill be taken relative to it. If not specified then store(s) will be appended to the end of collection.\nOtherwise it will be just a position in stores collection.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// insert stores store4, store5 to the start of sequence\ncrudManager.addStoreToApplySequence([ store4, store5 ], 0);\n</code></pre>",
              "optional": true
            },
            {
              "name": "fromStore",
              "type": [
                "String",
                "Core.data.Store",
                "Object"
              ],
              "description": "<p>The store relative to which position should be calculated.\nCan be defined as a store identifier, instance or its descriptor (the result of\n<a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor\">getStoreDescriptor</a> call).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// insert store6 just before a store having storeId equal to 'foo'\ncrudManager.addStoreToApplySequence(store6, 0, 'foo');\n\n// insert store7 just after store3 store\ncrudManager.addStoreToApplySequence(store7, 1, store3);\n</code></pre>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "removeStoreFromApplySequence",
          "description": "<p>Removes a store from the alternative sync sequence.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// remove store having storeId equal to &quot;foo&quot;\ncrudManager.removeStoreFromApplySequence(&quot;foo&quot;);\n</code></pre>",
          "parameters": [
            {
              "name": "store",
              "type": [
                "Object",
                "String",
                "Core.data.Store"
              ],
              "description": "<p>The store to remove. Either the store descriptor, store\nidentifier or store itself.</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "suspendAutoSync",
          "description": "<p>Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).</p>",
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "resumeAutoSync",
          "description": "<p>Resumes automatic sync upon store changes. Will trigger commit if the internal counter is 0.</p>",
          "parameters": [
            {
              "name": "doSync",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to trigger data syncing after resuming (if there are pending\nchanges) and <code>false</code> to not persist the changes.</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "crudStoreHasChanges",
          "description": "<p>Returns <code>true</code> if any of registered stores (or some particular store) has non persisted changes.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// if we have any unsaved changes\nif (crudManager.crudStoreHasChanges()) {\n    // persist them\n    crudManager.sync();\n// otherwise\n} else {\n    alert(&quot;There are no unsaved changes...&quot;);\n}\n</code></pre>",
          "parameters": [
            {
              "name": "storeId",
              "type": [
                "String",
                "Core.data.Store"
              ],
              "description": "<p>The store identifier or store instance to check changes for.\nIf not specified then will check changes for all of the registered stores.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "CRUD",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if there are not persisted changes.</p>"
          }
        },
        {
          "name": "loadCrudManagerData",
          "description": "<p>Loads data to the Crud Manager</p>",
          "parameters": [
            {
              "name": "response",
              "type": "Object",
              "description": "<p>A simple object representing the data.\nThe object structure matches the decoded <code>load</code> response structure:</p>\n<pre class=\"prettyprint source lang-js\"><code>// load static data into crudManager\ncrudManager.loadCrudManagerData({\n    success   : true,\n    resources : {\n        rows : [\n            { id : 1, name : 'John' },\n            { id : 2, name : 'Abby' }\n        ]\n    }\n});\n</code></pre>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Extra data loading options.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "load",
          "description": "<p>Loads data to the stores registered in the crud manager. For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>crudManager.load(\n    // here are request parameters\n    {\n        store1 : { append : true, page : 3, smth : 'foo' },\n        store2 : { page : 2, bar : '!!!' }\n    }\n).then(\n    () => alert('OMG! It works!'),\n    ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n);\n</code></pre>\n<p>** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest\">cancelRequest</a>.</p>",
          "parameters": [
            {
              "name": "options",
              "type": [
                "Object",
                "String"
              ],
              "description": "<p>The request parameters or a URL.</p>",
              "optional": true
            },
            {
              "name": "options.request",
              "type": "Object",
              "description": "<p>An object which contains options to merge\ninto the options which are passed to <a href=\"#Scheduler/crud/transport/AjaxTransport#function-sendRequest\">sendRequest</a>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    store1 : { page : 3, append : true, smth : 'foo' },\n    store2 : { page : 2, bar : '!!!' },\n    request : {\n        params : {\n            startDate : '2021-01-01'\n        }\n    }\n},\n</code></pre>\n<p>Omitting request arg:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>crudManager.load().then(\n    () => alert('OMG! It works!'),\n    ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n);\n</code></pre>\n<p>When presented it should be an object where keys are store Ids and values are, in turn, objects\nof parameters related to the corresponding store. These parameters will be transferred in each\nstore's entry in the <code>stores</code> property of the POST data.</p>\n<p>Additionally for flat stores <code>append: true</code> can be specified to add loaded records to the existing records,\ndefault is to remove corresponding store's existing records first.\n<strong>Please note</strong> that for delta loading you can also use an <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#config-trackResponseType\">alternative approach</a>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.type",
              "type": "String",
              "description": "<p>The request type. Either <code>load</code> or <code>sync</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.url",
              "type": "String",
              "description": "<p>The URL for the request. Overrides the URL defined in the <code>transport</code>\nobject</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.data",
              "type": "String",
              "description": "<p>The encoded <em>Crud Manager</em> request data.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.params",
              "type": "Object",
              "description": "<p>An object specifying extra HTTP params to send with the request.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.success",
              "type": "function",
              "description": "<p>A function to be started on successful request transferring.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.success.rawResponse",
              "type": "String",
              "description": "<p><code>Response</code> object returned by the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch api</a>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.failure",
              "type": "function",
              "description": "<p>A function to be started on request transfer failure.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.failure.rawResponse",
              "type": "String",
              "description": "<p><code>Response</code> object returned by the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch api</a>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.request.thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the above <code>success</code> and <code>failure</code> functions.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>Promise, which is resolved if request was successful.\nBoth the resolve and reject functions are passed a <code>state</code> object. State object has following structure:</p>\n<pre class=\"prettyprint source\"><code>{\n    cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n    rawResponse     : String,  // raw response from ajax request, either response xml or text\n    rawResponseText : String,  // raw response text as String from ajax request\n    response        : Object,  // processed response in form of object\n    options         : Object   // options, passed to load request\n}\n</code></pre>\n<p>If promise was rejected by <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad\">beforeLoad</a> event, <code>state</code> object will have the following structure:</p>\n<pre class=\"prettyprint source\"><code>{\n    cancelled : true\n}\n</code></pre>"
          }
        },
        {
          "name": "sync",
          "description": "<p>Persists changes made on the registered stores to the server. Usage:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// persist and run a callback on request completion\ncrud.sync().then(\n    () => console.log(&quot;Changes saved...&quot;),\n    ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n);\n</code></pre>\n<p>** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it until previous request completion.\nIn this case <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#event-syncDelayed\">syncDelayed</a> event will be fired.</p>\n<p>** Note: ** Please take a look at <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#config-autoSync\">autoSync</a> config. This option allows to persist changes automatically after any data modification.</p>",
          "scope": "instance",
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>Promise, which is resolved if request was successful.\nBoth the resolve and reject functions are passed a <code>state</code> object. State object has following structure:</p>\n<pre><code>{\n    cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n    rawResponse     : String,  // raw response from ajax request, either response xml or text\n    rawResponseText : String,  // raw response text as String from ajax request\n    response        : Object,  // processed response in form of object\n}\n</code></pre>\n<p>If promise was rejected by <a href=\"#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync\">beforeSync</a> event, <code>state</code> object will have structure:</p>\n<pre><code>{\n    cancelled : true\n}\n</code></pre>"
          }
        },
        {
          "name": "acceptChanges",
          "description": "<p>Accepts all changes in all stores, resets the modification tracking:</p>\n<ul>\n<li>Clears change tracking for all records</li>\n<li>Clears added</li>\n<li>Clears modified</li>\n<li>Clears removed\nLeaves the store in an &quot;unmodified&quot; state.</li>\n</ul>",
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "revertChanges",
          "description": "<p>Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted\nrecords will be removed.</p>",
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "doDestroy",
          "access": "internal",
          "description": "<p>Removes all stores and cancels active requests.</p>",
          "scope": "instance",
          "category": "CRUD"
        }
      ]
    },
    {
      "name": "JsonEncoder",
      "modulePath": "Scheduler/crud/encoder/JsonEncoder",
      "description": "<p>Implements data encoding functional that should be mixed to a <a href=\"#Scheduler/crud/AbstractCrudManager\">AbstractCrudManager</a> sub-class.\nUses <em>JSON</em> as an encoding system.</p>",
      "mixin": true,
      "examples": [
        "// create a new CrudManager using AJAX as a transport system and JSON for encoding\nclass MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {}"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "JsonEncoder.js",
      "path": "/Calendar/lib/Scheduler/crud/encoder",
      "configs": [
        {
          "name": "encoder",
          "description": "<p>Configuration of the JSON encoder used by the <em>Crud Manager</em>.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "CRUD",
          "properties": [
            {
              "name": "encoder.requestData",
              "type": "Object",
              "description": "<p>Static data to send with the data request.</p>\n<pre class=\"prettyprint source lang-js\"><code>new CrudManager({\n    // add static &quot;foo&quot; property to all requests data\n    encoder : {\n        requestData : {\n            foo : 'Bar'\n        }\n    },\n    ...\n});\n</code></pre>\n<p>The above snippet will result adding &quot;foo&quot; property to all requests data:</p>\n<pre class=\"prettyprint source lang-json\"><code>    {\n        &quot;requestId&quot;   : 756,\n        &quot;type&quot;        : &quot;load&quot;,\n\n        &quot;foo&quot;         : &quot;Bar&quot;,\n\n        &quot;stores&quot;      : [\n            ...\n</code></pre>",
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "encode",
          "description": "<p>Encodes a request object to <em>JSON</em> encoded string. If encoding fails (due to circular structure), it returns null.\nSupposed to be overridden in case data provided by the <em>Crud Manager</em> has to be transformed into format requested by server.</p>",
          "parameters": [
            {
              "name": "requestData",
              "type": "Object",
              "description": "<p>The request to encode.</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD",
          "returns": {
            "type": "String",
            "description": "<p>The encoded request.</p>"
          }
        },
        {
          "name": "decode",
          "description": "<p>Decodes (parses) a <em>JSON</em> response string to an object. If parsing fails, it returns null.\nSupposed to be overridden in case data provided by server has to be transformed into format requested by the <em>Crud Manager</em>.</p>",
          "parameters": [
            {
              "name": "responseText",
              "type": "String",
              "description": "<p>The response text to decode.</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD",
          "returns": {
            "type": "Object",
            "description": "<p>The decoded response.</p>"
          }
        }
      ]
    },
    {
      "name": "AbstractCrudManagerValidation",
      "modulePath": "Scheduler/crud/mixin/AbstractCrudManagerValidation",
      "description": "<p>Mixin proving responses validation API to Crud Manager.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "AbstractCrudManagerValidation.js",
      "path": "/Calendar/lib/Scheduler/crud/mixin",
      "configs": [
        {
          "name": "validateResponse",
          "description": "<p>This config validates the response structure for requests made by the Crud Manager.\nWhen <code>true</code>, the Crud Manager checks every parsed response structure for errors\nand if the response format is invalid, a warning is logged to the browser console.</p>\n<p>The config is intended to help developers implementing backend integration.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "CRUD"
        },
        {
          "name": "skipSuccessProperty",
          "description": "<p>When <code>true</code> treats parsed responses without <code>success</code> property as successful.\nIn this mode a parsed response is treated as invalid if it has explicitly set <code>success : false</code>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "CRUD"
        }
      ]
    },
    {
      "name": "CrudManagerView",
      "modulePath": "Scheduler/crud/mixin/CrudManagerView",
      "description": "<p>Mixin to track Crud Manager requests to the server and mask the view during them. For masking it\nuses the <a href=\"#Core/mixin/LoadMaskable#config-loadMask\">loadMask</a> and <a href=\"#Core/mixin/LoadMaskable#config-syncMask\">syncMask</a>\nproperties.</p>",
      "extends": [
        "Core/mixin/LoadMaskable"
      ],
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "CrudManagerView.js",
      "path": "/Calendar/lib/Scheduler/crud/mixin",
      "functions": [
        {
          "name": "applySyncMask",
          "access": "internal",
          "description": "<p>Applies the <a href=\"#Scheduler/crud/mixin/CrudManagerView#config-syncMask\">syncMask</a> as the\n<a href=\"#Core/widget/Widget#config-masked\">mask</a> for this widget.</p>",
          "scope": "instance"
        },
        {
          "name": "bindCrudManager",
          "access": "private",
          "description": "<p>Hooks up crud manager listeners</p>",
          "scope": "instance",
          "category": "Store"
        }
      ]
    },
    {
      "name": "AjaxTransport",
      "modulePath": "Scheduler/crud/transport/AjaxTransport",
      "description": "<p>Implements data transferring functional that can be used for <a href=\"#Scheduler/crud/AbstractCrudManager\">AbstractCrudManager</a> super classing.\nUses the fetch API for transport, https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</p>",
      "mixin": true,
      "virtual": true,
      "examples": [
        "// create a new CrudManager using AJAX as a transport system and JSON for encoding\nclass MyCrudManager extends AjaxTransport(JsonEncode(AbstractCrudManager)) {}"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AjaxTransport.js",
      "path": "/Calendar/lib/Scheduler/crud/transport",
      "configs": [
        {
          "name": "transport",
          "description": "<p>Configuration of the AJAX requests used by <em>Crud Manager</em> to communicate with a server-side.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    load : {\n        url       : 'http://mycool-server.com/load.php',\n        // HTTP request parameter used to pass serialized &quot;load&quot;-requests\n        paramName : 'data',\n        // pass extra HTTP request parameter\n        params    : {\n            foo : 'bar'\n        }\n    },\n    sync : {\n        url     : 'http://mycool-server.com/sync.php',\n        // specify Content-Type for requests\n        headers : {\n            'Content-Type' : 'application/json'\n        }\n    }\n}\n</code></pre>\n<p>Since the class uses Fetch API you can use\nany its <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request\">Request interface</a> options:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    load : {\n        url         : 'http://mycool-server.com/load.php',\n        // HTTP request parameter used to pass serialized &quot;load&quot;-requests\n        paramName   : 'data',\n        // pass few Fetch API options\n        method      : 'GET',\n        credentials : 'include',\n        cache       : 'no-cache'\n    },\n    sync : {\n        url         : 'http://mycool-server.com/sync.php',\n        // specify Content-Type for requests\n        headers     : {\n            'Content-Type' : 'application/json'\n        },\n        credentials : 'include'\n    }\n}\n</code></pre>\n<p>An object where you can set the following possible properties:</p>",
          "type": "Object",
          "scope": "inner",
          "category": "CRUD",
          "properties": [
            {
              "name": "transport.load",
              "type": "Object",
              "description": "<p>Load requests configuration:</p>",
              "isSubParam": true
            },
            {
              "name": "transport.load.url",
              "type": "String",
              "description": "<p>URL to request for data loading.</p>",
              "isSubParam": true
            },
            {
              "name": "transport.load.method",
              "type": "String",
              "description": "<p>HTTP method to be used for load requests.</p>",
              "default": "'GET'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.load.paramName",
              "type": "String",
              "description": "<p>Name of the parameter that will contain a serialized <code>load</code>\nrequest. The value is mandatory for requests using <code>GET</code> method (default for <code>load</code>) so if the value is not\nprovided <code>data</code> string is used as default.\nThis value is optional for HTTP methods like <code>POST</code> and <code>PUT</code>, the request body will be used for data\ntransferring in these cases.</p>",
              "default": "'data'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.load.params",
              "type": "Object",
              "description": "<p>An object containing extra HTTP parameters to pass to the server when\nsending a <code>load</code> request.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    load : {\n        url       : 'http://mycool-server.com/load.php',\n        // HTTP request parameter used to pass serialized &quot;load&quot;-requests\n        paramName : 'data',\n        // pass extra HTTP request parameter\n        // so resulting URL will look like: http://mycool-server.com/load.php?userId=123456&data=...\n        params    : {\n            userId : '123456'\n        }\n    },\n    ...\n}\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.load.headers",
              "type": "Object",
              "description": "<p>An object containing headers to pass to each server request.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    load : {\n        url       : 'http://mycool-server.com/load.php',\n        // HTTP request parameter used to pass serialized &quot;load&quot;-requests\n        paramName : 'data',\n        // specify Content-Type for &quot;load&quot; requests\n        headers   : {\n            'Content-Type' : 'application/json'\n        }\n    },\n    ...\n}\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.load.fetchOptions",
              "type": "Object",
              "description": "<p><strong>DEPRECATED:</strong> Any Fetch API options can be simply defined on\nthe upper configuration level:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    load : {\n        url          : 'http://mycool-server.com/load.php',\n        // HTTP request parameter used to pass serialized &quot;load&quot;-requests\n        paramName    : 'data',\n        // Fetch API options\n        method       : 'GET',\n        credentials  : 'include'\n    },\n    ...\n}\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.load.requestConfig",
              "type": "Object",
              "description": "<p><strong>DEPRECATED:</strong> The config options can be defined on the upper\nconfiguration level.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.sync",
              "type": "Object",
              "description": "<p>Sync requests (<code>sync</code> in further text) configuration:</p>",
              "isSubParam": true
            },
            {
              "name": "transport.sync.url",
              "type": "String",
              "description": "<p>URL to request for <code>sync</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "transport.sync.method",
              "type": "String",
              "description": "<p>HTTP request method to be used for <code>sync</code>.</p>",
              "default": "'POST'",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.sync.paramName",
              "type": "String",
              "description": "<p>Name of the parameter in which <code>sync</code> data will be\ntransferred. This value is optional for requests using methods like <code>POST</code> and <code>PUT</code>, the request body will be\nused for data transferring in this case (default for <code>sync</code>). And the value is mandatory for requests using <code>GET</code>\nmethod (if the value is not provided <code>data</code> string will be used as fallback).</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.sync.params",
              "type": "Object",
              "description": "<p>HTTP headers to pass with an HTTP request handling <code>sync</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    sync : {\n        url    : 'http://mycool-server.com/sync.php',\n        // extra HTTP request parameter\n        params : {\n            userId : '123456'\n        }\n    },\n    ...\n}\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.sync.headers",
              "type": "Object",
              "description": "<p>HTTP headers to pass with an HTTP request handling <code>sync</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    sync : {\n        url     : 'http://mycool-server.com/sync.php',\n        // specify Content-Type for &quot;sync&quot; requests\n        headers : {\n            'Content-Type' : 'application/json'\n        }\n    },\n    ...\n}\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.sync.fetchOptions",
              "type": "Object",
              "description": "<p><strong>DEPRECATED:</strong> Any Fetch API options can be simply defined on\nthe upper configuration level:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>transport : {\n    sync : {\n        url         : 'http://mycool-server.com/sync.php',\n        credentials : 'include'\n    },\n    ...\n}\n</code></pre>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "transport.sync.requestConfig",
              "type": "Object",
              "description": "<p><strong>DEPRECATED:</strong> The config options can be defined on the upper\nconfiguration level.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "cancelRequest",
          "description": "<p>Cancels a sent request.</p>",
          "parameters": [
            {
              "name": "requestPromise",
              "type": "Promise",
              "description": "<p>The Promise object wrapping the Request to be cancelled.\nThe <em>requestPromise</em> is the value returned from the corresponding <a href=\"#Scheduler/crud/transport/AjaxTransport#function-sendRequest\">sendRequest</a> call.</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        },
        {
          "name": "sendRequest",
          "description": "<p>Sends a <em>Crud Manager</em> request to the server.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "Object",
              "description": "<p>The request configuration object having following properties:</p>"
            },
            {
              "name": "request.type",
              "type": "String",
              "description": "<p>The request type. Either <code>load</code> or <code>sync</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "request.url",
              "type": "String",
              "description": "<p>The URL for the request. Overrides the URL defined in the <code>transport</code> object</p>",
              "isSubParam": true
            },
            {
              "name": "request.data",
              "type": "String",
              "description": "<p>The encoded <em>Crud Manager</em> request data.</p>",
              "isSubParam": true
            },
            {
              "name": "request.params",
              "type": "Object",
              "description": "<p>An object specifying extra HTTP params to send with the request.</p>",
              "isSubParam": true
            },
            {
              "name": "request.success",
              "type": "function",
              "description": "<p>A function to be started on successful request transferring.</p>",
              "isSubParam": true
            },
            {
              "name": "request.success.rawResponse",
              "type": "String",
              "description": "<p><code>Response</code> object returned by the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch api</a>.</p>",
              "isSubParam": true
            },
            {
              "name": "request.failure",
              "type": "function",
              "description": "<p>A function to be started on request transfer failure.</p>",
              "isSubParam": true
            },
            {
              "name": "request.failure.rawResponse",
              "type": "String",
              "description": "<p><code>Response</code> object returned by the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch api</a>.</p>",
              "isSubParam": true
            },
            {
              "name": "request.thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the above <code>success</code> and <code>failure</code> functions.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforesend"
          ],
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>The fetch Promise object.</p>"
          }
        }
      ],
      "events": [
        {
          "name": "beforeSend",
          "description": "<p>Fires before a request is sent to the server.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>crudManager.on('beforeSend', function ({ params, type }) {\n    // let's set &quot;sync&quot; request parameters\n    if (type == 'sync') {\n        // dynamically depending on &quot;flag&quot; value\n        if (flag) {\n            params.foo = 'bar';\n        }\n        else {\n            params.foo = 'smth';\n        }\n    }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "crudManager",
              "type": "Scheduler.crud.AbstractCrudManager",
              "description": "<p>The CRUD manager.</p>"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "<p>HTTP request params to be passed in the request URL.</p>"
            },
            {
              "name": "type",
              "type": "String",
              "description": "<p>CrudManager request type (<code>load</code>/<code>sync</code>)</p>"
            },
            {
              "name": "requestConfig",
              "type": "Object",
              "description": "<p>Configuration object for Ajax request call</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "SchedulerTag",
      "modulePath": "Scheduler/customElements/SchedulerTag",
      "classDescription": "<p>Import this file to be able to use the tag <code>&lt;bryntum-scheduler&gt;</code> to create a Scheduler.</p>\n<p>This is more of a proof of concept than a ready to use class. The dataset of the <code>&lt;data&gt;</code> and <code>&lt;bryntum-scheduler&gt;</code>\ntags is applied to record and Scheduler configs respectively, which means that you can pass any documented config\nthere, not only the ones demonstrated here. Dataset attributes are translated as follows:</p>\n<ul>\n<li><code>data-view-preset</code> -&gt; <code>viewPreset</code></li>\n<li><code>data-start-date</code> -&gt; <code>startDate</code>\netc.</li>\n</ul>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-scheduler data-view-preset=&quot;weekAndDay&quot; data-start-date=&quot;2018-04-02&quot; data-end-date=&quot;2018-04-09&quot;>\n &lt;column data-field=&quot;name&quot;>Name&lt;/column>\n     &lt;data>\n         &lt;events>\n             &lt;data data-id=&quot;1&quot; data-resource-id=&quot;1&quot; data-start-date=&quot;2018-04-03&quot; data-end-date=&quot;2018-04-05&quot;>&lt;/data>\n             &lt;data data-id=&quot;2&quot; data-resource-id=&quot;2&quot; data-start-date=&quot;2018-04-04&quot; data-end-date=&quot;2018-04-06&quot;>&lt;/data>\n             &lt;data data-id=&quot;3&quot; data-resource-id=&quot;3&quot; data-start-date=&quot;2018-04-05&quot; data-end-date=&quot;2018-04-07&quot;>&lt;/data>\n         &lt;/events>\n         &lt;resources>\n             &lt;data data-id=&quot;1&quot; data-name=&quot;Daniel&quot;>&lt;/data>\n             &lt;data data-id=&quot;2&quot; data-name=&quot;Steven&quot;>&lt;/data>\n             &lt;data data-id=&quot;3&quot; data-name=&quot;Sergei&quot;>&lt;/data>\n         &lt;/resources>\n     &lt;/data>\n&lt;/bryntum-scheduler>\n</code></pre>\n<p>To get styling correct, supply the path to the theme you want to use and to the folder that holds Font Awesome:</p>\n<pre class=\"prettyprint source lang-html\"><code>&lt;bryntum-scheduler stylesheet=&quot;resources/scheduler.stockholm.css&quot; fa-path=&quot;resources/fonts&quot;>\n&lt;/bryntum-scheduler>\n</code></pre>\n<p>NOTE: Remember to call <a href=\"#Scheduler/customElements/SchedulerTag#function-destroy\">destroy</a> before removing this web component from the DOM to avoid memory\nleaks.</p>",
      "extends": [
        "Scheduler/customElements/TimelineBaseTag"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerTag.js",
      "path": "/Calendar/lib/Scheduler/customElements",
      "demo": {
        "product": "scheduler",
        "demo": "webcomponents"
      }
    },
    {
      "name": "TimelineBaseTag",
      "modulePath": "Scheduler/customElements/TimelineBaseTag",
      "classDescription": "<p>Abstract base class for SchedulerTag, SchedulerProTag and GanttTag.</p>",
      "extends": [
        "Core/customElements/WidgetTag"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineBaseTag.js",
      "path": "/Calendar/lib/Scheduler/customElements"
    },
    {
      "name": "AssignmentStore",
      "modulePath": "Scheduler/data/AssignmentStore",
      "classDescription": "<p>A store representing a collection of assignments between events in the <a href=\"#Scheduler/data/EventStore\">EventStore</a> and resources\nin the <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a>.</p>\n<p>This store only accepts a model class inheriting from <a href=\"#Scheduler/model/AssignmentModel\">AssignmentModel</a>.</p>\n<p>An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,\nResourceStore and DependencyStore). The project also handles references (event, resource) to related records for the\nrecords in the store.</p>\n<p>Resolving the references happens async, records are not guaranteed to have up to date references until calculations\nare finished. To be certain that references are resolved, call <code>await project.commitAsync()</code> after store actions. Or\nuse one of the <code>xxAsync</code> functions, such as <code>loadDataAsync()</code>.</p>\n<p>Using <code>commitAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignmentStore.data = [{ eventId, resourceId }, ...];\n\n// references (event, resource) not resolved yet\n\nawait assignmentStore.project.commitAsync();\n\n// now they are\n</code></pre>\n<p>Using <code>loadDataAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await assignmentStore.loadDataAsync([{ eventId, resourceId }, ...]);\n\n// references (event, resource) are resolved\n</code></pre>",
      "extends": [
        "Core/data/AjaxStore"
      ],
      "mixes": [
        "Scheduler/data/mixin/AssignmentStoreMixin",
        "Scheduler/data/mixin/PartOfProject"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AssignmentStore.js",
      "path": "/Calendar/lib/Scheduler/data"
    },
    {
      "name": "CrudManager",
      "modulePath": "Scheduler/data/CrudManager",
      "classDescription": "<p>The Crud Manager (or &quot;CM&quot;) is a class implementing centralized loading and saving of data in multiple stores.\nLoading the stores and saving all changes is done using a single request. The stores managed by CRUD manager should\nnot be configured with their own CRUD URLs or use <a href=\"#Core/data/AjaxStore#config-autoLoad\">autoLoad</a>/<a href=\"#Core/data/AjaxStore#config-autoCommit\">autoCommit</a>.</p>\n<p>This class uses JSON as its data encoding format.</p>\n<h2>Scheduler stores</h2>\n<p>The class supports Scheduler specific stores (namely: resource, event, assignment and dependency stores).\nFor these stores, the CM has separate configs (<a href=\"#Scheduler/data/CrudManager#config-resourceStore\">resourceStore</a>, <a href=\"#Scheduler/data/CrudManager#config-eventStore\">eventStore</a>,\n<a href=\"#Scheduler/data/CrudManager#config-assignmentStore\">assignmentStore</a>) to register them.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const crudManager = new CrudManager({\n    autoLoad        : true,\n    resourceStore   : resourceStore,\n    eventStore      : eventStore,\n    assignmentStore : assignmentStore,\n    transport       : {\n        load : {\n            url : 'php/read.php'\n        },\n        sync : {\n            url : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n<h2>AJAX request configuration</h2>\n<p>To configure AJAX request parameters please take a look at the\n<a href=\"#Scheduler/crud/transport/AjaxTransport\">AjaxTransport</a> docs.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const crudManager = new CrudManager({\n    autoLoad        : true,\n    resourceStore,\n    eventStore,\n    assignmentStore,\n    transport       : {\n        load    : {\n            url         : 'php/read.php',\n            // use GET request\n            method      : 'GET',\n            // pass request JSON in &quot;rq&quot; parameter\n            paramName   : 'rq',\n            // extra HTTP request parameters\n            params      : {\n                foo     : 'bar'\n            },\n            // pass some extra Fetch API option\n            credentials : 'include'\n        },\n        sync : {\n            url : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n<h2>Using inline data</h2>\n<p>The CrudManager provides settable property <a href=\"#Scheduler/data/CrudManager#property-inlineData\">inlineData</a> that can\nbe used to get data from all <a href=\"#Scheduler/data/CrudManager#property-crudStores\">crudStores</a> at once and to set this\ndata as well. Populating the stores this way can be useful if you cannot or you do not want to use CrudManager for\nserver requests but you pull the data by other means and have it ready outside CrudManager. Also, the data from all\nstores is available in a single assignment statement.</p>\n<h3>Getting data</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const data = scheduler.crudManager.inlineData;\n\n// use the data in your application\n</code></pre>\n<h3>Setting data</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const data = // your function to pull server data\n\nscheduler.crudManager.inlineData = data;\n</code></pre>\n<h2>Load order</h2>\n<p>The CM is aware of the proper load order for Scheduler specific stores so you don't need to worry about it.\nIf you provide any extra stores (using <a href=\"#Scheduler/data/CrudManager#config-stores\">stores</a> config) they will be\nadded to the start of collection before the Scheduler specific stores.\nIf you need a different loading order, you should use <a href=\"#Scheduler/data/CrudManager#function-addStore\">addStore</a> method to\nregister your store:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const crudManager = new CrudManager({\n    resourceStore   : resourceStore,\n    eventStore      : eventStore,\n    assignmentStore : assignmentStore,\n    // extra user defined stores will get to the start of collection\n    // so they will be loaded first\n    stores          : [ store1, store2 ],\n    transport       : {\n        load : {\n            url : 'php/read.php'\n        },\n        sync : {\n            url : 'php/save.php'\n        }\n    }\n});\n\n// append store3 to the end so it will be loaded last\ncrudManager.addStore(store3);\n\n// now when we registered all the stores let's load them\ncrudManager.load();\n</code></pre>\n<h2>Assignment store</h2>\n<p>The Crud Manager is designed to use <a href=\"#Scheduler/data/AssignmentStore\">AssignmentStore</a> for assigning events to one or multiple resources.\nHowever if server provides <code>resourceId</code> for any of the <code>events</code> then the Crud Manager enables backward compatible mode when\nan event could have a single assignment only. This also disables multiple assignments in Scheduler UI.\nIn order to use multiple assignments server backend should be able to receive/send <code>assignments</code> for <code>load</code> and <code>sync</code> requests.</p>\n<h2>Project</h2>\n<p>The Crud Manager automatically consumes stores of the provided project (namely its <a href=\"#Scheduler/model/ProjectModel#property-eventStore\">eventStore</a>,\n<a href=\"#Scheduler/model/ProjectModel#property-resourceStore\">resourceStore</a>, <a href=\"#Scheduler/model/ProjectModel#property-assignmentStore\">assignmentStore</a>,\n<a href=\"#Scheduler/model/ProjectModel#property-dependencyStore\">dependencyStore</a>, <a href=\"#Scheduler/model/ProjectModel#property-timeRangeStore\">timeRangeStore</a> and\n<a href=\"#Scheduler/model/ProjectModel#property-resourceTimeRangeStore\">resourceTimeRangeStore</a>):</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const crudManager = new CrudManager({\n    // crud manager will get stores from myAppProject project\n    project   : myAppProject,\n    transport : {\n        load : {\n            url : 'php/read.php'\n        },\n        sync : {\n            url : 'php/save.php'\n        }\n    }\n});\n</code></pre>",
      "extends": [
        "Scheduler/crud/AbstractCrudManager"
      ],
      "mixes": [
        "Scheduler/data/mixin/ProjectCrudManager",
        "Scheduler/crud/encoder/JsonEncoder",
        "Scheduler/crud/transport/AjaxTransport"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "CrudManager.js",
      "path": "/Calendar/lib/Scheduler/data",
      "configs": [
        {
          "name": "resourceStore",
          "description": "<p>A store with resources (or its descriptor).</p>",
          "type": [
            "Scheduler.data.ResourceStore",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "eventStore",
          "description": "<p>A store with events (or its descriptor).</p>\n<pre class=\"prettyprint source\"><code>crudManager : {\n     eventStore {\n         storeClass : MyEventStore\n     }\n}\n</code></pre>",
          "type": [
            "Scheduler.data.EventStore",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "assignmentStore",
          "description": "<p>A store with assignments (or its descriptor).</p>",
          "type": [
            "Scheduler.data.AssignmentStore",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "dependencyStore",
          "description": "<p>A store with dependencies (or its descriptor).</p>",
          "type": [
            "Scheduler.data.DependencyStore",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "project",
          "description": "<p>A project that holds and links stores</p>",
          "type": "Scheduler.model.ProjectModel",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "timeRangeStore",
          "description": "<p>Store for <a href=\"#Scheduler/feature/TimeRanges\">timeRanges</a> feature.</p>",
          "type": "Core.data.Store",
          "scope": "instance"
        },
        {
          "name": "resourceTimeRangeStore",
          "description": "<p>Store for <a href=\"#Scheduler/feature/ResourceTimeRanges\">resourceTimeRanges</a> feature.</p>",
          "type": "Core.data.Store",
          "scope": "instance"
        },
        {
          "name": "resourceStore",
          "description": "<p>Get/set the resource store bound to the CRUD manager.</p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "instance"
        },
        {
          "name": "eventStore",
          "description": "<p>Get/set the event store bound to the CRUD manager.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "instance"
        },
        {
          "name": "assignmentStore",
          "description": "<p>Get/set the assignment store bound to the CRUD manager.</p>",
          "type": "Scheduler.data.AssignmentStore",
          "scope": "instance"
        },
        {
          "name": "dependencyStore",
          "description": "<p>Get/set the dependency store bound to the CRUD manager.</p>",
          "type": "Scheduler.data.DependencyStore",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DependencyStore",
      "modulePath": "Scheduler/data/DependencyStore",
      "classDescription": "<p>A store representing a collection of dependencies between events in the <a href=\"#Scheduler/data/EventStore\">EventStore</a>.</p>\n<p>This store only accepts a model class inheriting from <a href=\"#Scheduler/model/DependencyModel\">DependencyModel</a>.</p>\n<p>A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,\nAssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records\nfor the records in the store.</p>\n<p>Resolving the references happens async, records are not guaranteed to have up to date references until calculations\nare finished. To be certain that references are resolved, call <code>await project.commitAsync()</code> after store actions. Or\nuse one of the <code>xxAsync</code> functions, such as <code>loadDataAsync()</code>.</p>\n<p>Using <code>commitAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dependencyStore.data = [{ from, to }, ...];\n\n// references (fromEvent, toEvent) not resolved yet\n\nawait dependencyStore.project.commitAsync();\n\n// now they are\n</code></pre>\n<p>Using <code>loadDataAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await dependencyStore.loadDataAsync([{ from, to }, ...]);\n\n// references (fromEvent, toEvent) are resolved\n</code></pre>",
      "extends": [
        "Core/data/AjaxStore"
      ],
      "mixes": [
        "Scheduler/data/mixin/PartOfProject",
        "Scheduler/data/mixin/DependencyStoreMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DependencyStore.js",
      "path": "/Calendar/lib/Scheduler/data"
    },
    {
      "name": "EventStore",
      "modulePath": "Scheduler/data/EventStore",
      "classDescription": "<p>A store holding all the <a href=\"#Scheduler/model/EventModel\">events</a> to be rendered into a <a href=\"#Scheduler/view/Scheduler\">Scheduler</a>.</p>\n<p>This store only accepts a model class inheriting from <a href=\"#Scheduler/model/EventModel\">EventModel</a>.</p>\n<p>An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\nResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\nthe store. For example if a record is added with a <code>startDate</code> and an <code>endDate</code>, it will calculate the <code>duration</code>.</p>\n<p>The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\ncertain that calculations have finished, call <code>await project.commitAsync()</code> after store actions. Or use one of the\n<code>xxAsync</code> functions, such as <code>loadDataAsync()</code>.</p>\n<p>Using <code>commitAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventStore.data = [{ startDate, endDate }, ...];\n\n// duration of the record is not yet calculated\n\nawait eventStore.project.commitAsync();\n\n// now it is\n</code></pre>\n<p>Using <code>loadDataAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n\n// duration is calculated\n</code></pre>\n<h2>Using recurring events</h2>\n<p>When recurring events are in the database, <strong>all recurring event definitions</strong> which started before\nthe requested start date, and have not yet finished recurring MUST be loaded into the EventStore.</p>\n<p>Only the <strong>base</strong> recurring event <strong>definitions</strong> are stored in the EventStore. You do not\nneed to calculate the future occurrence dates of these events. This is all handled by the EventStore.</p>\n<p>When asked to yield a set of events for a certain date range for creating a UI through\n<a href=\"#Scheduler/data/EventStore#function-getEvents\">getEvents</a>, the EventStore <em>automatically</em> interpolates any occurrences of\nrecurring events into the results. They do not occupy slots in the EventStore for every date\nin their repetition range (that would be very inefficient, and <em>might</em> be infinite).</p>",
      "extends": [
        "Core/data/AjaxStore"
      ],
      "mixes": [
        "Scheduler/data/mixin/PartOfProject",
        "Scheduler/data/mixin/SharedEventStoreMixin",
        "Scheduler/data/mixin/EventStoreMixin",
        "Scheduler/data/mixin/RecurringEventsMixin",
        "Scheduler/data/mixin/GetEventsMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventStore.js",
      "path": "/Calendar/lib/Scheduler/data",
      "configs": [
        {
          "name": "modelClass",
          "description": "<p>Class used to represent records</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner",
          "category": "Common"
        }
      ]
    },
    {
      "name": "ResourceStore",
      "modulePath": "Scheduler/data/ResourceStore",
      "classDescription": "<p>A store holding all the <a href=\"#Scheduler/model/ResourceModel\">resources</a> to be rendered into a\n<a href=\"#Scheduler/view/Scheduler\">Scheduler</a>.</p>\n<p>This store only accepts a model class inheriting from <a href=\"#Scheduler/model/ResourceModel\">ResourceModel</a>.</p>\n<p>A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,\nAssignmentStore and DependencyStore). The project also handles references (assignments, events) to related records\nfor the records in the store.</p>\n<p>Resolving the references happens async, records are not guaranteed to have up to date references until calculations\nare finished. To be certain that references are resolved, call <code>await project.commitAsync()</code> after store actions. Or\nuse one of the <code>xxAsync</code> functions, such as <code>loadDataAsync()</code>.</p>\n<p>Using <code>commitAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>resourceStore.data = [{ id }, ...];\n\n// references (assignments, events) not resolved yet\n\nawait resourceStore.project.commitAsync();\n\n// now they are\n</code></pre>\n<p>Using <code>loadDataAsync()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await resourceStore.loadDataAsync([{ id }, ...]);\n\n// references (assignments, events) are resolved\n</code></pre>",
      "extends": [
        "Core/data/AjaxStore"
      ],
      "mixes": [
        "Scheduler/data/mixin/PartOfProject",
        "Scheduler/data/mixin/ResourceStoreMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceStore.js",
      "path": "/Calendar/lib/Scheduler/data"
    },
    {
      "name": "ResourceTimeRangeStore",
      "modulePath": "Scheduler/data/ResourceTimeRangeStore",
      "classDescription": "<p>A class representing a collection of resource time ranges.\nContains a collection of <a href=\"#Scheduler/model/ResourceTimeRangeModel\">ResourceTimeRangeModel</a> records.\nThe class is used by the <a href=\"#Scheduler/feature/ResourceTimeRanges\">ResourceTimeRanges</a> feature.</p>\n<h2>Recurring ranges support</h2>\n<p>By default the class doesn't support recurrence. In order to add its support\nplease use <a href=\"#Scheduler/data/mixin/RecurringTimeSpansMixin\">RecurringTimeSpansMixin</a> mixin\n(the store model in turn should be mixed with <a href=\"#Scheduler/model/mixin/RecurringTimeSpan\">RecurringTimeSpan</a> class):</p>\n<pre class=\"prettyprint source lang-js\"><code>// Mix RecurringTimeSpan (which adds recurrence support) to ResourceTimeRangeModel\nclass MyResourceTimeRange extends RecurringTimeSpan(ResourceTimeRangeModel) {};\n\n// Mix RecurringTimeSpansMixin (which adds recurrence support) to ResourceTimeRangeStore\nclass MyResourceTimeRangeStore extends RecurringTimeSpansMixin(ResourceTimeRangeStore) {\n    static get defaultConfig() {\n        return {\n            // use our new MyResourceTimeRange model\n            modelClass : MyResourceTimeRange\n        };\n    }\n};\n\n// Make new store that supports time ranges recurrence\nconst store = new MyResourceTimeRangeStore({\n    data : [{        {\n        id             : 1,\n        resourceId     : 'r1',\n        startDate      : '2019-01-01T11:00',\n        endDate        : '2019-01-01T13:00',\n        name           : 'Coffee break',\n        // this time range should repeat every day\n        recurrenceRule : 'FREQ=DAILY'\n    }]\n});\n</code></pre>",
      "extends": [
        "Core/data/AjaxStore"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceTimeRangeStore.js",
      "path": "/Calendar/lib/Scheduler/data",
      "properties": [
        {
          "name": "loadPriority",
          "access": "private",
          "description": "<p>CrudManager must load stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        },
        {
          "name": "syncPriority",
          "access": "private",
          "description": "<p>CrudManager must sync stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "resourceStore",
          "description": "<p>This store should be linked to a ResourceStore to link the time ranges to resources</p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "TimeAxis",
      "modulePath": "Scheduler/data/TimeAxis",
      "classDescription": "<p>A class representing the time axis of the scheduler. The scheduler timescale is based on the ticks generated by this class.\nThis is a pure &quot;data&quot; (model) representation of the time axis and has no UI elements.</p>\n<p>The time axis can be <a href=\"#Scheduler/data/TimeAxis#config-continuous\">continuous</a> or not. In continuous mode, each timespan starts where the previous ended, and in non-continuous mode\nthere can be gaps between the ticks.\nA non-continuous time axis can be used when want to filter out certain periods of time (like weekends) from the time axis.</p>\n<p>To create a non-continuous time axis you have 2 options. First, you can create a time axis containing only the time spans of interest.\nTo do that, subclass this class and override the <a href=\"#Scheduler/data/TimeAxis#property-generateTicks\">generateTicks</a> method.</p>\n<p>The other alternative is to call the <a href=\"#Scheduler/data/TimeAxis#function-filterBy\">filterBy</a> method, passing a function to it which should return <code>false</code> if the time tick should be filtered out.\nCalling <a href=\"#Core/data/mixin/StoreFilter#function-clearFilters\">clearFilters</a> will return you to a full time axis.</p>",
      "extends": [
        "Core/data/Store"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeAxis.js",
      "path": "/Calendar/lib/Scheduler/data",
      "events": [
        {
          "name": "beforeReconfigure",
          "description": "<p>Fires before the timeaxis is about to be reconfigured (e.g. new start/end date or unit/increment). Return false to abort the operation.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.data.TimeAxis",
              "description": "<p>The time axis instance</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The new time axis start date</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The new time axis end date</p>"
            }
          ]
        },
        {
          "name": "endReconfigure",
          "access": "private",
          "description": "<p>Event that is triggered when we end reconfiguring and everything UI-related should be done</p>"
        },
        {
          "name": "reconfigure",
          "description": "<p>Fires when the timeaxis has been reconfigured (e.g. new start/end date or unit/increment)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.data.TimeAxis",
              "description": "<p>The time axis instance</p>"
            }
          ]
        },
        {
          "name": "invalidFilter",
          "description": "<p>Fires if all the ticks in the timeaxis are filtered out. After firing the filter is cleared to return the time\naxis to a valid state.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.data.TimeAxis",
              "description": "<p>The time axis instance</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "continuous",
          "description": "<p>Set to false if the timeline is not continuous, e.g. the next timespan does not start where the previous ended (for example skipping weekends etc).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "include",
          "description": "<p>Include only certain hours or days in the time axis (makes it <code>continuous : false</code>). Accepts and object\nwith <code>day</code> and <code>hour</code> properties:</p>\n<pre class=\"prettyprint source\"><code>const scheduler = new Scheduler({\n    timeAxis : {\n        include : {\n             // Do not display hours after 17 or before 9 (only display 9 - 17). The `to´ value is not\n             // included in the time axis\n             hour : {\n                 from : 9,\n                 to   : 17\n             },\n             // Do not display sunday or saturday\n             day : [0, 6]\n        }\n    }\n}\n</code></pre>\n<p>In most cases we recommend that you use Scheduler's workingTime config instead. It is easier to use and\nmakes sure all parts of the Scheduler gets updated.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "autoAdjust",
          "description": "<p>Automatically adjust the timespan when generating ticks with <a href=\"#Scheduler/data/TimeAxis#property-generateTicks\">generateTicks</a> according to\nthe <code>viewPreset</code> configuration. Setting this to false may lead to shifting time/date of ticks.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "generateTicks",
          "description": "<p>Method generating the ticks for this time axis. Should return an array of ticks. Each tick is an object of the following structure:</p>\n<pre class=\"prettyprint source\"><code>{\n   startDate : ..., // start date\n   endDate   : ...  // end date\n}\n</code></pre>\n<p>Take notice, that this function either has to be called with <code>start</code>/<code>end</code> parameters, or create those variables.</p>\n<p>To see it in action please check out our <a href=\"https://bryntum.com/examples/scheduler/timeaxis/\">TimeAxis</a> example and navigate to &quot;Compressed non-working time&quot; tab.</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Array",
            "description": "<p>ticks The ticks representing the time axis</p>"
          },
          "parameters": [
            {
              "name": "axisStartDate",
              "type": "Date",
              "description": "<p>The start date of the interval</p>"
            },
            {
              "name": "axisEndDate",
              "type": "Date",
              "description": "<p>The end date of the interval</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The unit of the time axis</p>"
            },
            {
              "name": "increment",
              "type": "Number",
              "description": "<p>The increment for the unit specified.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "reconfigure",
          "access": "private",
          "description": "<p>Reconfigures the time axis based on the config object supplied and generates the new 'ticks'.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object"
            },
            {
              "name": "suppressRefresh",
              "type": "Boolean",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setTimeSpan",
          "description": "<p>Changes the time axis timespan to the supplied start and end dates.</p>\n<p><strong>Note</strong> This does <strong>not</strong> preserve the temporal scroll position. You may use\n<a href=\"#Scheduler/view/Scheduler#function-setTimeSpan\">setTimeSpan</a> to set the time axis and\nmaintain temporal scroll position (if possible).</p>",
          "parameters": [
            {
              "name": "newStartDate",
              "type": "Date",
              "description": "<p>The new start date</p>"
            },
            {
              "name": "newEndDate",
              "type": "Date",
              "description": "<p>The new end date</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "shift",
          "description": "<p>Moves the time axis by the passed amount and unit.</p>\n<p>NOTE: When using a filtered TimeAxis the result of <code>shift()</code> cannot be guaranteed, it might shift into a\nfiltered out span. It tries to be smart about it by shifting from unfiltered start and end dates.\nIf that solution does not work for your filtering setup, please call <a href=\"#Scheduler/data/TimeAxis#function-setTimeSpan\">setTimeSpan</a> directly\ninstead.</p>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The number of units to jump</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The unit (Day, Week etc)</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "shiftNext",
          "description": "<p>Moves the time axis forward in time in units specified by the view preset <code>shiftUnit</code>, and by the amount specified by the <code>shiftIncrement</code>\nconfig of the current view preset.</p>\n<p>NOTE: When using a filtered TimeAxis the result of <code>shiftNext()</code> cannot be guaranteed, it might shift into a\nfiltered out span. It tries to be smart about it by shifting from unfiltered start and end dates.\nIf that solution does not work for your filtering setup, please call <a href=\"#Scheduler/data/TimeAxis#function-setTimeSpan\">setTimeSpan</a> directly\ninstead.</p>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The number of units to jump forward</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "shiftPrevious",
          "description": "<p>Moves the time axis backward in time in units specified by the view preset <code>shiftUnit</code>, and by the amount specified by the <code>shiftIncrement</code> config of the current view preset.</p>\n<p>NOTE: When using a filtered TimeAxis the result of <code>shiftPrev()</code> cannot be guaranteed, it might shift into a\nfiltered out span. It tries to be smart about it by shifting from unfiltered start and end dates.\nIf that solution does not work for your filtering setup, please call <a href=\"#Scheduler/data/TimeAxis#function-setTimeSpan\">setTimeSpan</a> directly\ninstead.</p>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The number of units to jump backward</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "filterBy",
          "description": "<p>Filter the time axis by a function. The passed function will be called with each tick in time axis.\nIf the function returns true, the 'tick' is included otherwise it is filtered. If all ticks are filtered out\nthe time axis is considered invalid, triggering <code>invalidFilter</code> and then removing the filter.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to be called, it will receive an object with startDate/endDate properties, and 'index' of the tick.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "roundDate",
          "access": "private",
          "description": "<p>Rounds the date to nearest unit increment</p>",
          "scope": "instance"
        },
        {
          "name": "getTickFromDate",
          "description": "<p>Gets a tick &quot;coordinate&quot; representing the date position on the time scale. Returns -1 if the date is not part of the time axis.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>the date</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>the tick position on the scale or -1 if the date is not part of the time axis</p>"
          }
        },
        {
          "name": "getDateFromTick",
          "description": "<p>Gets the time represented by a tick &quot;coordinate&quot;.</p>",
          "parameters": [
            {
              "name": "tick",
              "type": "Number",
              "description": "<p>the tick &quot;coordinate&quot;</p>"
            },
            {
              "name": "roundingMethod",
              "type": "String",
              "description": "<p>The rounding method to use</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Date",
            "description": "<p>The date to represented by the tick &quot;coordinate&quot;, or null if invalid.</p>"
          }
        },
        {
          "name": "updateTickCache",
          "access": "private",
          "description": "<p>Caches ticks and start/end dates for faster processing during rendering of events.</p>",
          "scope": "instance"
        },
        {
          "name": "dateInAxis",
          "description": "<p>Returns true if the passed date is inside the span of the current time axis.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to query for</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the date is part of the timeaxis</p>"
          }
        },
        {
          "name": "timeSpanInAxis",
          "description": "<p>Returns true if the passed timespan is part of the current time axis (in whole or partially).</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Date",
              "description": "<p>The start date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>The end date</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the timespan is part of the timeaxis</p>"
          }
        },
        {
          "name": "forEachAuxInterval",
          "access": "internal",
          "description": "<p>Calls the supplied iterator function once per interval. The function will be called with four parameters, startDate endDate, index, isLastIteration.</p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The unit to use when iterating over the timespan</p>"
            },
            {
              "name": "increment",
              "type": "Number",
              "description": "<p>The increment to use when iterating over the timespan</p>",
              "default": 1
            },
            {
              "name": "iteratorFn",
              "type": "function",
              "description": "<p>The function to call</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ],
      "properties": [
        {
          "name": "viewPreset",
          "description": "<p>Get/set currently used preset</p>",
          "type": "Scheduler.preset.ViewPreset",
          "scope": "instance"
        },
        {
          "name": "isContinuous",
          "description": "<p>Returns <code>true</code> if the time axis is continuous (will return <code>false</code> when filtered)</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "startDate",
          "description": "<p>Method to get the current start date of the time axis.</p>",
          "type": "Date",
          "scope": "instance"
        },
        {
          "name": "endDate",
          "description": "<p>Method to get a the current end date of the time axis</p>",
          "type": "Date",
          "scope": "instance"
        },
        {
          "name": "generateTicks",
          "description": "<p>Method generating the ticks for this time axis. Should return an array of ticks. Each tick is an object of the following structure:</p>\n<pre class=\"prettyprint source\"><code>{\n   startDate : ..., // start date\n   endDate   : ...  // end date\n}\n</code></pre>\n<p>Take notice, that this function either has to be called with <code>start</code>/<code>end</code> parameters, or create those variables.</p>\n<p>To see it in action please check out our <a href=\"https://bryntum.com/examples/scheduler/timeaxis/\">TimeAxis</a> example and navigate to &quot;Compressed non-working time&quot; tab.</p>",
          "type": "function",
          "scope": "inner",
          "returns": [
            {
              "type": {
                "names": [
                  "Array"
                ]
              },
              "description": "<p>ticks The ticks representing the time axis</p>"
            }
          ],
          "parameters": [
            {
              "name": "axisStartDate",
              "type": "Date",
              "description": "<p>The start date of the interval</p>"
            },
            {
              "name": "axisEndDate",
              "type": "Date",
              "description": "<p>The end date of the interval</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The unit of the time axis</p>"
            },
            {
              "name": "increment",
              "type": "Number",
              "description": "<p>The increment for the unit specified.</p>"
            }
          ]
        },
        {
          "name": "visibleTickTimeSpan",
          "access": "internal",
          "description": "<p>How many ticks are visible across the TimeAxis.</p>\n<p>Usually, this is an integer because <a href=\"#Scheduler/data/TimeAxis#config-autoAdjust\">autoAdjust</a> means that the start and end\ndates are adjusted to be on tick boundaries.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "ticks",
          "description": "<p>Returns the ticks of the timeaxis in an array of objects with a &quot;start&quot; and &quot;end&quot; date.</p>",
          "type": "Array.<Object>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "AssignmentStoreMixin",
      "modulePath": "Scheduler/data/mixin/AssignmentStoreMixin",
      "description": "<p>This is a mixin, containing functionality related to managing assignments.</p>\n<p>It is consumed by the regular <a href=\"#Scheduler/data/AssignmentStore\">AssignmentStore</a> class and Scheduler Pros counterpart.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "AssignmentStoreMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "add",
          "description": "<p>Add assignments to the store.</p>\n<p>NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they\ncannot be directly accessed after using this function.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [assignment] = assignmentStore.add({ eventId, resourceId });\n// assignment.event is not yet available\n</code></pre>\n<p>To guarantee references are set up, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [assignment] = assignmentStore.add({ eventId, resourceId });\nawait assignmentStore.project.commitAsync();\n// assignment.event is available (assuming EventStore is loaded and so on)\n</code></pre>\n<p>Alternatively use <code>addAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n// assignment.event is available (assuming EventStore is loaded and so on)\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.AssignmentModel",
                "Array.<Scheduler.model.AssignmentModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "addAsync",
          "description": "<p>Add assignments to the store and triggers calculations directly after. Await this function to have up to date\nreferences on the added assignments.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n// assignment.event is available (assuming EventStore is loaded and so on)\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.AssignmentModel",
                "Array.<Scheduler.model.AssignmentModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "loadDataAsync",
          "description": "<p>Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally\nfetched data into the store.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n// assignmentStore.first.event is available\n</code></pre>",
          "parameters": [
            {
              "name": "data",
              "type": "Array.<Object>",
              "description": "<p>Array of AssignmentModel data objects</p>"
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true
        },
        {
          "name": "getOccurrence",
          "access": "internal",
          "description": "<p>Returns a &quot;fake&quot; assignment used to identify a certain occurrence of a recurring event.\nIf passed the original event, it returns <code>originalAssignment</code>.</p>",
          "parameters": [
            {
              "name": "originalAssignment",
              "type": "Scheduler.model.AssignmentModel"
            },
            {
              "name": "occurrence",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Temporary assignment</p>"
          }
        },
        {
          "name": "mapAssignmentsForEvent",
          "description": "<p>Maps over event assignments.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel"
            },
            {
              "name": "fn",
              "type": "function",
              "optional": true
            },
            {
              "name": "filterFn",
              "type": "function",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": [
              "Array.<Scheduler.model.EventModel>",
              "Array"
            ]
          }
        },
        {
          "name": "mapAssignmentsForResource",
          "description": "<p>Maps over resource assignments.</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "Number",
                "String"
              ]
            },
            {
              "name": "fn",
              "type": "function",
              "optional": true
            },
            {
              "name": "filterFn",
              "type": "function",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": [
              "Array.<Scheduler.model.ResourceModel>",
              "Array"
            ]
          }
        },
        {
          "name": "getAssignmentsForEvent",
          "description": "<p>Returns all assignments for a given event.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.TimeSpan"
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>"
          }
        },
        {
          "name": "removeAssignmentsForEvent",
          "description": "<p>Removes all assignments for given event</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.TimeSpan"
            }
          ],
          "scope": "instance",
          "category": "Assignments"
        },
        {
          "name": "getAssignmentsForResource",
          "description": "<p>Returns all assignments for a given resource.</p>",
          "parameters": [
            {
              "name": "resource",
              "type": "Scheduler.model.ResourceModel"
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>"
          }
        },
        {
          "name": "removeAssignmentsForResource",
          "description": "<p>Removes all assignments for given resource</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "*"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignments"
        },
        {
          "name": "getResourcesForEvent",
          "description": "<p>Returns all resources assigned to an event.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": "Array.<Scheduler.model.ResourceModel>"
          }
        },
        {
          "name": "getEventsForResource",
          "description": "<p>Returns all events assigned to a resource</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": "Array.<Scheduler.model.TimeSpan>"
          }
        },
        {
          "name": "assignEventToResource",
          "description": "<p>Creates and adds assignment record(s) for a given event and resource(s).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.TimeSpan"
            },
            {
              "name": "resources",
              "type": [
                "Scheduler.model.ResourceModel",
                "Array.<Scheduler.model.ResourceModel>"
              ],
              "description": "<p>The resource(s) to assign to the event</p>"
            },
            {
              "name": "assignmentSetupFn",
              "type": "function",
              "description": "<p>A hook function which takes an assignment as its argument and must return an assignment.</p>",
              "optional": true
            },
            {
              "name": "removeExistingAssignments",
              "type": "Boolean",
              "description": "<p><code>true</code> to remove assignments for other resources</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Assign",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>",
            "description": "<p>An array with the created assignment(s)</p>"
          }
        },
        {
          "name": "unassignEventFromResource",
          "description": "<p>Removes assignment record for a given event and resource.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.TimeSpan",
                "String",
                "Number"
              ]
            },
            {
              "name": "resources",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>The resource to unassign the event from. If omitted, all resources of the events will be unassigned</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Assign",
          "returns": {
            "type": [
              "Scheduler.model.AssignmentModel",
              "Array.<Scheduler.model.AssignmentModel>"
            ]
          }
        },
        {
          "name": "isEventAssignedToResource",
          "description": "<p>Checks whether an event is assigned to a resource.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ],
              "description": "<p>Event record or id</p>"
            },
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>Resource record or id</p>"
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "getAssignmentForEventAndResource",
          "description": "<p>Returns an assignment record for a given event and resource</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ],
              "description": "<p>The event or its id</p>"
            },
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>The resource or its id</p>"
            }
          ],
          "scope": "instance",
          "category": "Assignments",
          "returns": {
            "type": "Scheduler.model.AssignmentModel"
          }
        }
      ],
      "properties": [
        {
          "name": "data",
          "description": "<p>Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.</p>\n<p>NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus\nthey cannot be directly accessed after assigning the new dataset.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignmentStore.data = [{ eventId, resourceId }];\n// assignmentStore.first.event is not yet available\n</code></pre>\n<p>To guarantee references are available, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignmentStore.data = [{ eventId, resourceId  }];\nawait assignmentStore.project.commitAsync();\n// assignmentStore.first.event is available\n</code></pre>\n<p>Alternatively use <code>loadDataAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n// assignmentStore.first.event is available\n</code></pre>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Records"
        },
        {
          "name": "loadPriority",
          "access": "private",
          "description": "<p>CrudManager must load stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        },
        {
          "name": "syncPriority",
          "access": "private",
          "description": "<p>CrudManager must sync stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "AttachToProjectMixin",
      "modulePath": "Scheduler/data/mixin/AttachToProjectMixin",
      "description": "<p>Mixin that calls the target class <code>attachToProject()</code> function when a new project is assigned to Scheduler/Gantt.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "AttachToProjectMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "attachToProject",
          "description": "<p>Override to take action when the project instance is replaced.</p>",
          "parameters": [
            {
              "name": "project",
              "type": "Scheduler.model.ProjectModel"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachToEventStore",
          "description": "<p>Override to take action when the EventStore instance is replaced, either from being replaced on the project or\nfrom assigning a new project.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Scheduler.data.EventStore"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachToResourceStore",
          "description": "<p>Override to take action when the ResourceStore instance is replaced, either from being replaced on the project\nor from assigning a new project.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Scheduler.data.ResourceStore"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachToAssignmentStore",
          "description": "<p>Override to take action when the AssignmentStore instance is replaced, either from being replaced on the project\nor from assigning a new project.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Scheduler.data.AssignmentStore"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachToDependencyStore",
          "description": "<p>Override to take action when the DependencyStore instance is replaced, either from being replaced on the project\nor from assigning a new project.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Scheduler.data.DependencyStore"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "attachToCalendarManagerStore",
          "description": "<p>Override to take action when the CalendarManagerStore instance is replaced, either from being replaced on the\nproject or from assigning a new project.</p>",
          "parameters": [
            {
              "name": "store",
              "type": "Core.data.Store"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DayIndexMixin",
      "modulePath": "Scheduler/data/mixin/DayIndexMixin",
      "description": "<p>Mixing handling Calendars day indices.</p>\n<p>Consumed by EventStore in Scheduler &amp; Scheduler Pro and TaskStore in Gantt.</p>",
      "mixin": true,
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DayIndexMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "onDataChange",
          "access": "private",
          "description": "<p>Responds to mutations of the underlying storage Collection.</p>\n<p>Maintain indices for fast finding of events by date.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "invalidateDayIndices",
          "access": "internal",
          "description": "<p>Invalidates associated day indices.</p>",
          "scope": "instance"
        },
        {
          "name": "registerDayIndex",
          "access": "internal",
          "description": "<p>Registers a <code>DayTime</code> instance, creating an <code>EventDayIndex</code> for each distinct <code>startShift</code>. This index is\nmaintained until all instances with a matching <code>startShift</code> are <a href=\"#Scheduler/data/mixin/DayIndexMixin#function-unregisterDayIndex\">unregistered</a>.</p>",
          "parameters": [
            {
              "name": "dayTime",
              "type": "Core.util.DayTime",
              "description": "<p>The instance to register.</p>"
            }
          ],
          "scope": "instance",
          "category": "Indexing"
        },
        {
          "name": "unregisterDayIndex",
          "access": "internal",
          "description": "<p>Removes a registered <code>DayTime</code> instance. If this is the last instance registered to an <code>EventDayIndex</code>, that\nindex is removed.</p>",
          "parameters": [
            {
              "name": "dayTime",
              "type": "Core.util.DayTime",
              "description": "<p>The instance to unregister.</p>"
            }
          ],
          "scope": "instance",
          "category": "Indexing"
        },
        {
          "name": "useDayIndex",
          "access": "private",
          "description": "<p>Returns the <code>EventDayIndex</code> to use for the given <code>DayTime</code> instance. This may be the primary instance or a\nchild instance created by <a href=\"#Scheduler/data/mixin/DayIndexMixin#function-registerDayIndex\">registerDayIndex</a>.</p>",
          "parameters": [
            {
              "name": "dayTime",
              "type": "Core.util.DayTime",
              "description": "<p>The <code>DayTime</code> of the desired index.</p>"
            }
          ],
          "scope": "instance",
          "category": "Indexing",
          "returns": {
            "type": "Scheduler.data.util.EventDayIndex"
          }
        }
      ]
    },
    {
      "name": "DependencyStoreMixin",
      "modulePath": "Scheduler/data/mixin/DependencyStoreMixin",
      "description": "<p>This is a mixin, containing functionality related to managing dependencies.</p>\n<p>It is consumed by the regular <a href=\"#Scheduler/data/DependencyStore\">DependencyStore</a> class and Scheduler Pros counterpart.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "DependencyStoreMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "add",
          "description": "<p>Add dependencies to the store.</p>\n<p>NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they\ncannot be directly accessed after using this function.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [dependency] = dependencyStore.add({ from, to });\n// dependency.fromEvent is not yet available\n</code></pre>\n<p>To guarantee references are set up, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [dependency] = dependencyStore.add({ from, to });\nawait dependencyStore.project.commitAsync();\n// dependency.fromEvent is available (assuming EventStore is loaded and so on)\n</code></pre>\n<p>Alternatively use <code>addAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [dependency] = await dependencyStore.addAsync({ from, to });\n// dependency.fromEvent is available (assuming EventStore is loaded and so on)\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.DependencyModel",
                "Array.<Scheduler.model.DependencyModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "returns": {
            "type": "Array.<Scheduler.model.DependencyModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "addAsync",
          "description": "<p>Add dependencies to the store and triggers calculations directly after. Await this function to have up to date\nreferences on the added dependencies.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [dependency] = await dependencyStore.addAsync({ from, to });\n// dependency.fromEvent is available (assuming EventStore is loaded and so on)\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.DependencyModel",
                "Array.<Scheduler.model.DependencyModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Array.<Scheduler.model.DependencyModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "loadDataAsync",
          "description": "<p>Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally\nfetched data into the store.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await dependencyStore.loadDataAsync([{ from, to }]);\n// dependencyStore.first.fromEvent is available\n</code></pre>",
          "parameters": [
            {
              "name": "data",
              "type": "Array.<Object>",
              "description": "<p>Array of DependencyModel data objects</p>"
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true
        },
        {
          "name": "getEventDependencies",
          "description": "<p>Returns all dependencies for a certain event (both incoming and outgoing)</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Scheduler.model.DependencyModel>"
          }
        },
        {
          "name": "getDependencyForSourceAndTargetEvents",
          "description": "<p>Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st\ntask to 2nd) or backward (from 2nd to 1st).</p>",
          "parameters": [
            {
              "name": "sourceEvent",
              "type": [
                "Scheduler.model.EventModel",
                "String"
              ],
              "description": "<p>1st event</p>"
            },
            {
              "name": "targetEvent",
              "type": [
                "Scheduler.model.EventModel",
                "String"
              ],
              "description": "<p>2nd event</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.DependencyModel"
          }
        },
        {
          "name": "getEventsLinkingDependency",
          "description": "<p>Returns a dependency model instance linking given events if such dependency exists in the store.\nThe dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).</p>",
          "parameters": [
            {
              "name": "sourceEvent",
              "type": [
                "Scheduler.model.EventModel",
                "String"
              ]
            },
            {
              "name": "targetEvent",
              "type": [
                "Scheduler.model.EventModel",
                "String"
              ]
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.DependencyModel"
          }
        },
        {
          "name": "isValidDependency",
          "description": "<p>Validation method used to validate a dependency. Override and return <code>true</code> to indicate that an\nexisting dependency between two tasks is valid. For a new dependency being created please see\n<a href=\"#Scheduler/data/mixin/DependencyStoreMixin#function-isValidDependencyToCreate\">isValidDependencyToCreate</a>.</p>",
          "parameters": [
            {
              "name": "dependencyOrFromId",
              "type": [
                "Scheduler.model.DependencyModel",
                "Number",
                "String"
              ],
              "description": "<p>The dependency model or from event id</p>"
            },
            {
              "name": "toId",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p>To event id if the first parameter is not a dependency model instance</p>",
              "optional": true
            },
            {
              "name": "type",
              "type": "Number",
              "description": "<p>Dependency <a href=\"#Scheduler/model/DependencyBaseModel#property-Type-static\">Type</a>  if the first parameter is not a dependency model instance.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isValidDependencyToCreate",
          "description": "<p>Validation method used to validate a dependency while creating. Override and return <code>true</code> to indicate that\na new dependency is valid to be created.</p>",
          "parameters": [
            {
              "name": "fromId",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p><code>From</code> event id</p>"
            },
            {
              "name": "toId",
              "type": [
                "Number",
                "String"
              ],
              "description": "<p><code>To</code> event id</p>"
            },
            {
              "name": "type",
              "type": "Number",
              "description": "<p>Dependency <a href=\"#Scheduler/model/DependencyBaseModel#property-Type-static\">Type</a></p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "getHighlightedDependencies",
          "description": "<p>Returns all dependencies highlighted with the given CSS class</p>",
          "parameters": [
            {
              "name": "cls",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Scheduler.model.DependencyBaseModel>"
          }
        }
      ],
      "properties": [
        {
          "name": "data",
          "description": "<p>Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.</p>\n<p>NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus\nthey cannot be directly accessed after assigning the new dataset.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dependencyStore.data = [{ from, to }];\n// dependencyStore.first.fromEvent is not yet available\n</code></pre>\n<p>To guarantee references are available, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dependencyStore.data = [{ from, to }];\nawait dependencyStore.project.commitAsync();\n// dependencyStore.first.fromEvent is available\n</code></pre>\n<p>Alternatively use <code>loadDataAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await dependencyStore.loadDataAsync([{ from, to }]);\n// dependencyStore.first.fromEvent is available\n</code></pre>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Records"
        },
        {
          "name": "loadPriority",
          "access": "private",
          "description": "<p>CrudManager must load stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        },
        {
          "name": "syncPriority",
          "access": "private",
          "description": "<p>CrudManager must sync stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "EventStoreMixin",
      "modulePath": "Scheduler/data/mixin/EventStoreMixin",
      "description": "<p>This is a mixin, containing functionality related to managing events.</p>\n<p>It is consumed by the regular <a href=\"#Scheduler/data/EventStore\">EventStore</a> class and the Scheduler Pro's <code>EventStore</code> class.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventStoreMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "getEventCounts",
          "description": "<p>Returns a <code>Map</code>, keyed by <code>YYYY-MM-DD</code> date keys containing event counts for all the days\nbetween the passed <code>startDate</code> and <code>endDate</code>. Occurrences of recurring events are included.</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventCounts = eventStore.getEventCounts({\n     startDate : scheduler.timeAxis.startDate,\n     endDate   : scheduler.timeAxis.endDate\n });\n</code></pre>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An options object determining which events to return</p>"
            },
            {
              "name": "options.startDate",
              "type": "Date",
              "description": "<p>The start date for the range of events to include.</p>",
              "isSubParam": true
            },
            {
              "name": "options.endDate",
              "type": "Date",
              "description": "<p>The end date for the range of events to include.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Events"
        },
        {
          "name": "forEachScheduledEvent",
          "description": "<p>Calls the supplied iterator function once for every scheduled event, providing these arguments</p>\n<ul>\n<li>event : the event record</li>\n<li>startDate : the event start date</li>\n<li>endDate : the event end date</li>\n</ul>\n<p>Returning false cancels the iteration.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>iterator function</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>"
            }
          ],
          "scope": "instance",
          "category": "Events"
        },
        {
          "name": "getTotalTimeSpan",
          "description": "<p>Returns an object defining the earliest start date and the latest end date of all the events in the store.</p>",
          "scope": "instance",
          "category": "Events",
          "returns": {
            "type": "Object",
            "description": "<p>An object with 'start' and 'end' Date properties (or null values if data is missing).</p>"
          }
        },
        {
          "name": "isEventPersistable",
          "description": "<p>Checks if given event record is persistable. By default it always is, override EventModels <code>isPersistable</code> if you\nneed custom logic.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "category": "Events",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isDateRangeAvailable",
          "description": "<p>Checks if a date range is allocated or not for a given resource.</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Date",
              "description": "<p>The start date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>The end date</p>"
            },
            {
              "name": "excludeEvent",
              "type": [
                "Scheduler.model.EventModel",
                "null"
              ],
              "description": "<p>An event to exclude from the check (or null)</p>"
            },
            {
              "name": "resource",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource</p>"
            }
          ],
          "scope": "instance",
          "category": "Resource",
          "returns": {
            "type": "Boolean",
            "description": "<p>True if the timespan is available for the resource</p>"
          }
        },
        {
          "name": "filterEventsForResource",
          "access": "private",
          "description": "<p>Filters the events associated with a resource, based on the function provided. An array will be returned for those\nevents where the passed function returns true.</p>",
          "parameters": [
            {
              "name": "resource",
              "type": "Scheduler.model.ResourceModel"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Resource",
          "returns": {
            "type": "Array.<Scheduler.model.EventModel>",
            "description": "<p>the events in the time span</p>"
          }
        },
        {
          "name": "getResourcesForEvent",
          "description": "<p>Returns all resources assigned to an event.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Resource",
          "returns": {
            "type": "Array.<Scheduler.model.ResourceModel>"
          }
        },
        {
          "name": "getEventsForResource",
          "description": "<p>Returns all events assigned to a resource.\n<em>NOTE:</em> this does not include occurrences of recurring events. Use the\n<a href=\"#Scheduler/data/mixin/GetEventsMixin#function-getEvents\">getEvents</a> API to include occurrences of recurring events.</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>Resource or resource id.</p>"
            }
          ],
          "scope": "instance",
          "category": "Resource",
          "returns": {
            "type": "Array.<Scheduler.model.EventModel>"
          }
        },
        {
          "name": "getAssignmentsForEvent",
          "description": "<p>Returns all assignments for a given event.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignment",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>"
          }
        },
        {
          "name": "getAssignmentsForResource",
          "description": "<p>Returns all assignments for a given resource.</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignment",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>"
          }
        },
        {
          "name": "assignEventToResource",
          "description": "<p>Creates and adds assignment record for a given event and a resource.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ]
            },
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number",
                "Array.<Scheduler.model.ResourceModel>",
                "Array.<String>",
                "Array.<Number>"
              ],
              "description": "<p>The resource(s) to assign to the event</p>"
            },
            {
              "name": "removeExistingAssignments",
              "type": "Boolean",
              "description": "<p><code>true</code> to first remove existing assignments</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Assignment",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>",
            "description": "<p>An array with the created assignment(s)</p>"
          }
        },
        {
          "name": "unassignEventFromResource",
          "description": "<p>Removes assignment record for a given event and a resource.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ]
            },
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignment"
        },
        {
          "name": "reassignEventFromResourceToResource",
          "description": "<p>Reassigns an event from an old resource to a new resource</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>An event or id of the event to reassign</p>"
            },
            {
              "name": "oldResource",
              "type": [
                "Scheduler.model.ResourceModel",
                "Array.<Scheduler.model.ResourceModel>"
              ],
              "description": "<p>A resource or id to unassign from</p>"
            },
            {
              "name": "newResource",
              "type": [
                "Scheduler.model.ResourceModel",
                "Array.<Scheduler.model.ResourceModel>"
              ],
              "description": "<p>A resource or id to assign to</p>"
            }
          ],
          "scope": "instance",
          "category": "Assignment"
        },
        {
          "name": "isEventAssignedToResource",
          "description": "<p>Checks whether an event is assigned to a resource.</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ]
            },
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignment",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "removeAssignmentsForEvent",
          "description": "<p>Removes all assignments for given event</p>",
          "parameters": [
            {
              "name": "event",
              "type": [
                "Scheduler.model.EventModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignment"
        },
        {
          "name": "removeAssignmentsForResource",
          "description": "<p>Removes all assignments for given resource</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ]
            }
          ],
          "scope": "instance",
          "category": "Assignment"
        }
      ]
    },
    {
      "name": "GetEventsMixin",
      "modulePath": "Scheduler/data/mixin/GetEventsMixin",
      "description": "<p>Mixing containing functionality for retrieving a range of events, mainly used during rendering.</p>\n<p>Consumed by EventStore in Scheduler &amp; Scheduler Pro and TaskStore in Gantt.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GetEventsMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "getEvents",
          "description": "<p>Returns an array of events for the date range specified by the <code>startDate</code> and <code>endDate</code> options.</p>\n<p>By default, for any date, this includes any event which <em>intersects</em> that date.</p>\n<p>To only include events that are fully contained <em>within</em> the date range, pass the <code>allowPartial</code>\noption as <code>false</code>.</p>\n<p>By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If\nthat is not required, pass the <code>includeOccurrences</code> option as <code>false</code>. <strong>Note that if <code>includeOccurrences</code> is\n<code>true</code>, the start date and end date options are mandatory. The method must know what range of occurrences needs\nto be generated and returned.</strong></p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> visibleEvents = eventStore.getEvents({\n     resourceRecord : myResource,\n     startDate      : scheduler.timeAxis.startDate,\n     endDate        : scheduler.timeAxis.endDate\n });\n</code></pre>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An options object determining which events to return</p>"
            },
            {
              "name": "options.date",
              "type": "Date",
              "description": "<p>If only one date is required, pass this option instead of the\n<code>startDate</code> and <code>endDate</code> options.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.startDate",
              "type": "Date",
              "description": "<p>The start date for the range of events to include.</p>",
              "isSubParam": true
            },
            {
              "name": "options.endDate",
              "type": "Date",
              "description": "<p>The end date for the range of events to include.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Pass a resource to only return events assigned to\nthis resource. Not supported when using the <code>dateMap</code> option (see below)</p>",
              "isSubParam": true
            },
            {
              "name": "options.filter",
              "type": "function",
              "description": "<p>A function to filter out events which are not required.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.includeOccurrences",
              "type": "Boolean",
              "description": "<p>Occurrences of recurring events are included by default.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.allowPartial",
              "type": "Boolean",
              "description": "<p>Events which start before or after the range, but <em>intersect</em> the\nrange are included by default.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.startOnly",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to only include events which <em>start on</em> each date in the range.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.onlyAssigned",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to only include events that are assigned to a resource</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.dateMap",
              "type": [
                "Boolean",
                "Map"
              ],
              "description": "<p>Populates the passed <code>Map</code>, or if passed as <code>true</code>, creates and\nreturns a new <code>Map</code>. The keys are <code>YYYY-MM-DD</code> date strings and the entries are arrays of\n<a href=\"#Scheduler/model/EventModel\">EventModel</a>s.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Events",
          "returns": {
            "type": [
              "Array.<Scheduler.model.EventModel>",
              "Map"
            ],
            "description": "<p>Events which match the passed configuration.</p>"
          }
        },
        {
          "name": "getEventsAsArray",
          "access": "private",
          "description": "<p>Internal implementation for <a href=\"#Scheduler/data/mixin/GetEventsMixin#function-getEvents\">getEvents</a> to use when not using dateMap.</p>",
          "scope": "instance"
        },
        {
          "name": "getEventsAsMap",
          "access": "private",
          "description": "<p>Internal implementation for <a href=\"#Scheduler/data/mixin/GetEventsMixin#function-getEvents\">getEvents</a> to use when using dateMap.</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "loadDateRange",
          "description": "<p>Fired when a range of events is requested from the <a href=\"#Scheduler/data/mixin/GetEventsMixin#function-getEvents\">getEvents</a> method.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.data.EventStore",
              "description": "<p>This EventStore</p>"
            },
            {
              "name": "old",
              "type": "Object",
              "description": "<p>The old date range</p>"
            },
            {
              "name": "old.startDate",
              "type": "Date",
              "description": "<p>the old start date.</p>",
              "isSubParam": true
            },
            {
              "name": "old.endDate",
              "type": "Date",
              "description": "<p>the old end date.</p>",
              "isSubParam": true
            },
            {
              "name": "new",
              "type": "Object",
              "description": "<p>The new date range</p>"
            },
            {
              "name": "new.startDate",
              "type": "Date",
              "description": "<p>the new start date.</p>",
              "isSubParam": true
            },
            {
              "name": "new.endDate",
              "type": "Date",
              "description": "<p>the new end date.</p>",
              "isSubParam": true
            }
          ]
        }
      ]
    },
    {
      "name": "PartOfProject",
      "modulePath": "Scheduler/data/mixin/PartOfProject",
      "description": "<p>This is a mixin, included in all models and stores of the Scheduler project. It provides a common API for accessing\nall stores of the project.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "PartOfProject.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "properties": [
        {
          "name": "project",
          "description": "<p>Returns the project this entity belongs to.</p>",
          "type": "Scheduler.model.ProjectModel",
          "scope": "inner",
          "readonly": true,
          "category": "Project"
        },
        {
          "name": "eventStore",
          "description": "<p>Returns the event store of the project this entity belongs to.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner",
          "readonly": true,
          "category": "Project"
        },
        {
          "name": "dependencyStore",
          "description": "<p>Returns the dependency store of the project this entity belongs to.</p>",
          "type": "Scheduler.data.DependencyStore",
          "scope": "inner",
          "readonly": true,
          "category": "Project"
        },
        {
          "name": "assignmentStore",
          "description": "<p>Returns the assignment store of the project this entity belongs to.</p>",
          "type": "Scheduler.data.AssignmentStore",
          "scope": "inner",
          "readonly": true,
          "category": "Project"
        },
        {
          "name": "resourceStore",
          "description": "<p>Returns the resource store of the project this entity belongs to.</p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "inner",
          "readonly": true,
          "category": "Project"
        }
      ]
    },
    {
      "name": "ProjectConsumer",
      "modulePath": "Scheduler/data/mixin/ProjectConsumer",
      "description": "<p>Creates a Project using any configured stores, and sets the stores configured into the project into\nthe host object.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ProjectConsumer.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "properties": [
        {
          "name": "project",
          "description": "<p>The <a href=\"#Scheduler/model/ProjectModel\">ProjectModel</a> instance, containing the data visualized by the Scheduler.</p>\n<p><strong>Note:</strong> In SchedulerPro the project is instance of SchedulerPro.model.ProjectModel class.</p>",
          "type": "Scheduler.model.ProjectModel",
          "scope": "inner",
          "category": "Data",
          "typings": {
            "returns": "ProjectModel"
          }
        },
        {
          "name": "isEngineReady",
          "description": "<p>Returns <code>true</code> if engine is in a stable calculated state, <code>false</code> otherwise.</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ],
      "configs": [
        {
          "name": "project",
          "description": "<p>A <a href=\"#Scheduler/model/ProjectModel\">ProjectModel</a> instance or a config object. The project holds all Scheduler data.\nCan be omitted in favor of individual store configs or <a href=\"#Scheduler/view/mixin/SchedulerStores#config-crudManager\">crudManager</a> config.</p>\n<p><strong>Note:</strong> This config is <strong>mandatory</strong> in SchedulerPro. See SchedulerPro.model.ProjectModel class.</p>",
          "type": [
            "Scheduler.model.ProjectModel",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "destroyStores",
          "description": "<p>Configure as <code>true</code> to destroy the Project and stores when <code>this</code> is destroyed.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Data"
        }
      ],
      "functions": [
        {
          "name": "updateProject",
          "description": "<p>Implement in subclass to take action when project is replaced.</p>\n<p><strong><code>super.updateProject(...arguments)</code> must be called first.</strong></p>",
          "parameters": [
            {
              "name": "project",
              "type": "Scheduler.model.ProjectModel"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "whenProjectReady",
          "description": "<p>Accepts a callback that will be called when the underlying project is ready (no commit pending and current commit\nfinalized)</p>",
          "parameters": [
            {
              "name": "callback",
              "type": "function"
            }
          ],
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "dataChange",
          "description": "<p>Fired when data in any of the projects stores changes.</p>\n<p>Basically a relayed version of each stores own change event, decorated with which store it originates from.\nSee the <a href=\"#Core/data/Store#event-change\">store change event</a> documentation for more information.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.data.mixin.ProjectConsumer",
              "description": "<p>Owning component</p>"
            },
            {
              "name": "project",
              "type": "Scheduler.model.mixin.ProjectModelMixin",
              "description": "<p>Project model</p>"
            },
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>Affected store</p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Name of action which triggered the change. May be one of:</p>\n<ul>\n<li><code>'remove'</code></li>\n<li><code>'removeAll'</code></li>\n<li><code>'add'</code></li>\n<li><code>'updatemultiple'</code></li>\n<li><code>'clearchanges'</code></li>\n<li><code>'filter'</code></li>\n<li><code>'update'</code></li>\n<li><code>'dataset'</code></li>\n<li><code>'replace'</code></li>\n</ul>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Changed record, for actions that affects exactly one record (<code>'update'</code>)</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Changed records, passed for all actions except <code>'removeAll'</code></p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Passed for the <code>'update'</code> action, info on which record fields changed</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ProjectCrudManager",
      "modulePath": "Scheduler/data/mixin/ProjectCrudManager",
      "description": "<p>This mixin provides Crud Manager functionality supporting loading of scheduling engine projects.</p>",
      "mixes": [
        "Scheduler/crud/AbstractCrudManagerMixin",
        "Scheduler/crud/transport/AjaxTransport",
        "Scheduler/crud/encoder/JsonEncoder"
      ],
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ProjectCrudManager.js",
      "path": "/Calendar/lib/Scheduler/data/mixin"
    },
    {
      "name": "RecurringEventsMixin",
      "modulePath": "Scheduler/data/mixin/RecurringEventsMixin",
      "description": "<p>This mixin class provides recurring events functionality to the <a href=\"#Scheduler/data/EventStore\">event store</a>.</p>",
      "extends": [
        "Scheduler/data/mixin/RecurringTimeSpansMixin"
      ],
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurringEventsMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "getRecurringEvents",
          "description": "<p>Returns all the recurring events.</p>\n<p>**An alias for ** <a href=\"#Scheduler/data/mixin/RecurringTimeSpansMixin#function-getRecurringTimeSpans\">getRecurringTimeSpans</a> method.</p>",
          "scope": "instance",
          "category": "Recurrence",
          "returns": {
            "type": "Array.<Scheduler.model.EventModel>",
            "description": "<p>Array of recurring events.</p>"
          }
        }
      ]
    },
    {
      "name": "RecurringTimeSpansMixin",
      "modulePath": "Scheduler/data/mixin/RecurringTimeSpansMixin",
      "description": "<p>This mixin class provides recurring timespans functionality to a store of <a href=\"#Scheduler/model/TimeSpan\">TimeSpan</a> models.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurringTimeSpansMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "onDataChange",
          "access": "private",
          "description": "<p>Responds to mutations of the underlying storage Collection.</p>\n<p>Maintain indices for fast finding of events by date.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "isRecurrenceRelatedFieldChange",
          "access": "internal",
          "description": "<p>The method restricts which field modifications should trigger timespan occurrences building.\nBy default any field change of a recurring timespan causes the rebuilding.</p>",
          "parameters": [
            {
              "name": "timeSpan",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The modified timespan.</p>"
            },
            {
              "name": "wasSet",
              "type": "Object",
              "description": "<p>Object containing the change set.</p>"
            }
          ],
          "scope": "instance",
          "category": "Recurrence",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>True</code> if the fields modification should trigger the timespan occurrences rebuilding.</p>"
          }
        },
        {
          "name": "getOccurrencesForTimeSpan",
          "access": "private",
          "description": "<p>Builds occurrences for the provided timespan across the provided date range.</p>",
          "scope": "instance",
          "category": "Recurrence"
        },
        {
          "name": "getRecurringTimeSpans",
          "description": "<p>Returns all the recurring timespans.</p>",
          "scope": "instance",
          "category": "Recurrence",
          "returns": {
            "type": "Array.<Scheduler.model.TimeSpan>",
            "description": "<p>Array of recurring events.</p>"
          }
        }
      ]
    },
    {
      "name": "ResourceStoreMixin",
      "modulePath": "Scheduler/data/mixin/ResourceStoreMixin",
      "description": "<p>This is a mixin for the ResourceStore functionality. It is consumed by the <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a>.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceStoreMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "add",
          "description": "<p>Add resources to the store.</p>\n<p>NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they\ncannot be directly accessed after using this function.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [resource] = resourceStore.add({ id });\n// resource.events is not yet available\n</code></pre>\n<p>To guarantee references are set up, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [resource] = resourceStore.add({ id });\nawait resourceStore.project.commitAsync();\n// resource.events is available (assuming EventStore is loaded and so on)\n</code></pre>\n<p>Alternatively use <code>addAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [resource] = await resourceStore.addAsync({ id });\n// resource.events is available (assuming EventStore is loaded and so on)\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.ResourceModel",
                "Array.<Scheduler.model.ResourceModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "returns": {
            "type": "Array.<Scheduler.model.ResourceModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "addAsync",
          "description": "<p>Add resources to the store and triggers calculations directly after. Await this function to have up to date\nreferences on the added resources.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const [resource] = await resourceStore.addAsync({ id });\n// resource.events is available (assuming EventStore is loaded and so on)\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.ResourceModel",
                "Array.<Scheduler.model.ResourceModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Array.<Scheduler.model.ResourceModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "loadDataAsync",
          "description": "<p>Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally\nfetched data into the store.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await resourceStore.loadDataAsync([{ id }]);\n// resourceStore.first.events is available\n</code></pre>",
          "parameters": [
            {
              "name": "data",
              "type": "Array.<Object>",
              "description": "<p>Array of ResourceModel data objects</p>"
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true
        }
      ],
      "properties": [
        {
          "name": "data",
          "description": "<p>Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.</p>\n<p>NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus\nthey cannot be directly accessed after assigning the new dataset.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>resourceStore.data = [{ id }];\n// resourceStore.first.events is not yet available\n</code></pre>\n<p>To guarantee references are available, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>resourceStore.data = [{ id }];\nawait resourceStore.project.commitAsync();\n// resourceStore.first.events is available\n</code></pre>\n<p>Alternatively use <code>loadDataAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await resourceStore.loadDataAsync([{ id }]);\n// resourceStore.first.events is available\n</code></pre>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Records"
        },
        {
          "name": "loadPriority",
          "access": "private",
          "description": "<p>CrudManager must load stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        },
        {
          "name": "syncPriority",
          "access": "private",
          "description": "<p>CrudManager must sync stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "SharedEventStoreMixin",
      "modulePath": "Scheduler/data/mixin/SharedEventStoreMixin",
      "description": "<p>This is a mixin, containing functionality related to managing events.</p>\n<p>It is consumed by the regular <a href=\"#Scheduler/data/EventStore\">EventStore</a> class and Scheduler Pros counterpart.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SharedEventStoreMixin.js",
      "path": "/Calendar/lib/Scheduler/data/mixin",
      "functions": [
        {
          "name": "add",
          "description": "<p>Add events to the store.</p>\n<p>NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation\nengine. Thus they cannot be directly accessed after using this function.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventStore.add({ startDate, duration });\n// endDate is not yet calculated\n</code></pre>\n<p>To guarantee data is in a calculated state, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventStore.add({ startDate, duration });\nawait eventStore.project.commitAsync();\n// endDate is calculated\n</code></pre>\n<p>Alternatively use <code>addAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await eventStore.addAsync({ startDate, duration });\n// endDate is calculated\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.EventModel",
                "Array.<Scheduler.model.EventModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "returns": {
            "type": "Array.<Scheduler.model.EventModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "addAsync",
          "description": "<p>Add events to the store and triggers calculations directly after. Await this function to have up to date data on\nthe added events.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await eventStore.addAsync({ startDate, duration });\n// endDate is calculated\n</code></pre>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Scheduler.model.EventModel",
                "Array.<Scheduler.model.EventModel>",
                "Object",
                "Array.<Object>"
              ],
              "description": "<p>Array of records/data or a single record/data to add to store</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to suppress events</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true,
          "returns": {
            "type": "Array.<Scheduler.model.EventModel>",
            "description": "<p>Added records</p>"
          }
        },
        {
          "name": "loadDataAsync",
          "description": "<p>Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally\nfetched data into the store.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await eventStore.loadDataAsync([{ startDate, duration }]);\n// eventStore.first.endDate is calculated\n</code></pre>",
          "parameters": [
            {
              "name": "data",
              "type": "Array.<Object>",
              "description": "<p>Array of EventModel data objects</p>"
            }
          ],
          "scope": "inner",
          "category": "CRUD",
          "async": true
        },
        {
          "name": "append",
          "description": "<p>Appends a new record to the store</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record to append to the store</p>"
            }
          ],
          "scope": "instance",
          "category": "CRUD"
        }
      ],
      "properties": [
        {
          "name": "data",
          "description": "<p>Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.</p>\n<p>NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation\nengine. Thus they cannot be directly accessed after assigning the new dataset.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventStore.data = [{ startDate, duration }];\n// eventStore.first.endDate is not yet calculated\n</code></pre>\n<p>To guarantee data is in a calculated state, wait for calculations for finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventStore.data = [{ startDate, duration }];\nawait eventStore.project.commitAsync();\n// eventStore.first.endDate is calculated\n</code></pre>\n<p>Alternatively use <code>loadDataAsync()</code> instead:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await eventStore.loadDataAsync([{ startDate, duration }]);\n// eventStore.first.endDate is calculated\n</code></pre>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Records"
        },
        {
          "name": "loadPriority",
          "access": "private",
          "description": "<p>CrudManager must load stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        },
        {
          "name": "syncPriority",
          "access": "private",
          "description": "<p>CrudManager must sync stores in the correct order. Lowest first.</p>",
          "scope": "inner"
        },
        {
          "name": "modelClass",
          "description": "<p>Class used to represent records. Defaults to class EventModel.</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner",
          "category": "Records",
          "typings": {
            "returns": "typeof EventModel"
          }
        }
      ],
      "configs": [
        {
          "name": "removeUnassignedEvent",
          "description": "<p>Configure with <code>true</code> to also remove the event when removing the last assignment from the linked\nAssignmentStore. This config has not effect when using EventStore in legacy <code>resourceId</code>-mode.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Common"
        },
        {
          "name": "singleAssignment",
          "description": "<p>Configure with <code>true</code> to force single-resource mode, an event can only be assigned to a single resource.\nIf not provided, the mode will be inferred from</p>\n<ol>\n<li>presence of an assignment store (i.e. multi-assignment)</li>\n<li>presence of <code>resourceId</code> in the event store data (i.e. single assignment mode)</li>\n</ol>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        }
      ]
    },
    {
      "name": "EventDayIndex",
      "modulePath": "Scheduler/data/util/EventDayIndex",
      "classDescription": "<p>This utility class is used by event stores to index events by their day (a &quot;YYYY-MM-DD&quot; value, also known as a\n&quot;date key&quot;). This key is produced by a <a href=\"#Core/util/DayTime\">DayTime</a> instance. If two <code>DayTime</code> instances have a common\n<code>startShift</code>, they can share an index.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventDayIndex.js",
      "path": "/Calendar/lib/Scheduler/data/util",
      "properties": [
        {
          "name": "dayTime",
          "description": "<p>The <code>DayTime</code> definition for this index. This is set to the initial DayTime instance but can be used for\nany other <a href=\"#Scheduler/data/util/EventDayIndex#function-register\">registered</a> <code>DayTime</code> instances since they all posses the same value for\n<code>startShift</code>.</p>\n<p>This defaults to <a href=\"#Core/util/DayTime#property-MIDNIGHT-static\">MIDNIGHT</a>.</p>",
          "type": "Core.util.DayTime",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "store",
          "access": "private",
          "description": "<p>The owning store instance of this index.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "users",
          "access": "private",
          "description": "<p>The <code>DayTime</code> instances <a href=\"#Scheduler/data/util/EventDayIndex#function-register\">registered</a> with this index instance. As instances are\n<a href=\"#Scheduler/data/util/EventDayIndex#function-unregister\">unregistered</a> they are removed from this array. Once this array is empty, this\nindex can be discarded.</p>",
          "type": "Array.<Core.util.DayTime>",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "add",
          "access": "private",
          "description": "<p>Adds an event record to the specified index (either &quot;startDate&quot; or &quot;date&quot;) for a given <code>date</code>.</p>",
          "parameters": [
            {
              "name": "indexName",
              "type": "String",
              "description": "<p>The index to which the event record is to be added (either &quot;startDate&quot; or &quot;date&quot;).</p>"
            },
            {
              "name": "date",
              "type": [
                "Date",
                "Number"
              ],
              "description": "<p>A date for which the event record overlaps. The <a href=\"#Core/util/DayTime#function-dateKey\">dateKey</a>\nmethod is used to convert this date to a &quot;YYYY-MM-DD&quot; key for the index.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "addEvent",
          "access": "private",
          "description": "<p>Adds an event record to all indexes for all dates which the event overlaps.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "clear",
          "description": "<p>Clear this index.</p>",
          "scope": "instance"
        },
        {
          "name": "get",
          "description": "<p>Returns an object that has properties named by the <a href=\"#Core/util/DayTime#function-dateKey\">dateKey</a> method, or the\narray of event records if a <code>date</code> is specified, or the event record array and the date key in a 2-element array\nif <code>returnKey</code> is <code>true</code>.</p>",
          "parameters": [
            {
              "name": "indexName",
              "type": "String",
              "description": "<p>The name of the desired index (either 'date' or 'startDate').</p>"
            },
            {
              "name": "date",
              "type": [
                "Number",
                "Date"
              ],
              "description": "<p>The date as a <code>Date</code> or the millisecond UTC epoch. When passed, this method will return\nthe array of event records for this date.</p>"
            },
            {
              "name": "returnKey",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to return the date key along with the event record array.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Object",
              "Array.<Scheduler.model.EventModel>"
            ]
          }
        },
        {
          "name": "initialize",
          "access": "private",
          "description": "<p>Called when this index is first used. Once called, further store changes will be used to maintain this index.</p>",
          "scope": "instance"
        },
        {
          "name": "matches",
          "description": "<p>Returns <code>true</code> if the given <code>dayTime</code> matches this index.</p>",
          "parameters": [
            {
              "name": "dayTime",
              "type": "Core.util.DayTime"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "remove",
          "access": "private",
          "description": "<p>Removes an event record from the specified index (either &quot;startDate&quot; or &quot;date&quot;) for a given <code>date</code>.</p>",
          "parameters": [
            {
              "name": "indexName",
              "type": "String",
              "description": "<p>The index to which the event record is to be removed (either &quot;startDate&quot; or &quot;date&quot;).</p>"
            },
            {
              "name": "date",
              "type": [
                "Date",
                "Number"
              ],
              "description": "<p>A date for which the event record overlaps. The <a href=\"#Core/util/DayTime#function-dateKey\">dateKey</a>\nmethod is used to convert this date to a &quot;YYYY-MM-DD&quot; key for the index.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeEvent",
          "access": "private",
          "description": "<p>Removes an event record from all indexes for all dates which the event overlaps.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date for the event. This may be different from the <code>startDate</code> of the given\n<code>eventRecord</code> when the event is rescheduled.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date for the event. This may be different from the <code>endDate</code> of the given\n<code>eventRecord</code> when the event is rescheduled.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "register",
          "description": "<p>This method registers a <code>dayTime</code> instance with this index in the <code>users</code> array.</p>",
          "parameters": [
            {
              "name": "dayTime",
              "type": "Core.util.DayTime",
              "description": "<p>The instance to register.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "unregister",
          "description": "<p>This method unregisters a <code>dayTime</code> instance, removing it from the <code>users</code> array. This method returns <code>true</code> if\nthis was the last registered instance and this index is no longer needed.</p>",
          "parameters": [
            {
              "name": "dayTime",
              "type": "Core.util.DayTime",
              "description": "<p>The instance to register.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "ModelPersistencyManager",
      "modulePath": "Scheduler/data/util/ModelPersistencyManager",
      "classDescription": "<p>This class manages model persistency, it listens to model stores' beforesync event and removes all non persistable\nrecords from sync operation. The logic has meaning only for CRUD-less sync operations.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ModelPersistencyManager.js",
      "path": "/Calendar/lib/Scheduler/data/util"
    },
    {
      "name": "DailyRecurrenceIterator",
      "modulePath": "Scheduler/data/util/recurrence/DailyRecurrenceIterator",
      "classDescription": "<p>A class which provides iteration to call a function for dates specified by a\n<a href=\"#Scheduler/model/RecurrenceModel\">RecurrenceModel</a> over a specified date range.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DailyRecurrenceIterator.js",
      "path": "/Calendar/lib/Scheduler/data/util/recurrence",
      "functions": [
        {
          "name": "forEachDate",
          "description": "<p>Iterates over the passed date range, calling the passed callback on each date on which\nstarts a recurring event which matches the passed recurrence rule and overlaps the start and end dates\nand is not an <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#field-exceptionDates\">exceptionDate</a>\nin the recurring event.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>An object which describes how to iterate.</p>"
            },
            {
              "name": "config.startDate",
              "type": "Date",
              "description": "<p>The point in time to begin iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.endDate",
              "type": "Date",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.startOnly",
              "type": "Boolean",
              "description": "<p>By default, all occurrences which intersect the date range\nwill be visited. Pass <code>true</code> to only visit occurrences which <em>start</em> in the date range.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.recurrence",
              "type": "Scheduler.model.RecurrenceModel",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn",
              "type": "function",
              "description": "<p>The function to call for each date which matches the recurrence in the date range.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.date",
              "type": "Date",
              "description": "<p>The occurrence date.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.counter",
              "type": "Number",
              "description": "<p>A counter of how many dates have been visited in this iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.isFirst",
              "type": "Boolean",
              "description": "<p>A flag which is <code>true</code> if the date is the first occurrence in the specified recurrence rule.</p>",
              "isSubParam": true
            },
            {
              "name": "config.extraArgs",
              "type": "Array",
              "description": "<p>Extra arguments to pass to the callback after the <code>isFirst</code> argument.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "MonthlyRecurrenceIterator",
      "modulePath": "Scheduler/data/util/recurrence/MonthlyRecurrenceIterator",
      "classDescription": "<p>A class which provides iteration to call a function for dates specified by a\n<a href=\"#Scheduler/model/RecurrenceModel\">RecurrenceModel</a> over a specified date range.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "MonthlyRecurrenceIterator.js",
      "path": "/Calendar/lib/Scheduler/data/util/recurrence",
      "functions": [
        {
          "name": "forEachDate",
          "description": "<p>Iterates over the passed date range, calling the passed callback on each date on which\nstarts an event which matches the passed recurrence rule and overlaps the start and end dates.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>An object which describes how to iterate.</p>"
            },
            {
              "name": "config.startDate",
              "type": "Date",
              "description": "<p>The point in time to begin iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.endDate",
              "type": "Date",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.startOnly",
              "type": "Boolean",
              "description": "<p>By default, all occurrences which intersect the date range\nwill be visited. Pass <code>true</code> to only visit occurrences which <em>start</em> in the date range.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.recurrence",
              "type": "Scheduler.model.RecurrenceModel",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn",
              "type": "function",
              "description": "<p>The function to call for each date which matches the recurrence in the date range.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.date",
              "type": "Date",
              "description": "<p>The occurrence date.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.counter",
              "type": "Number",
              "description": "<p>A counter of how many dates have been visited in this iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.isFirst",
              "type": "Boolean",
              "description": "<p>A flag which is <code>true</code> if the date is the first occurrence in the specified recurrence rule.</p>",
              "isSubParam": true
            },
            {
              "name": "config.extraArgs",
              "type": "Array",
              "description": "<p>Extra arguments to pass to the callback after the <code>isFirst</code> argument.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "RecurrenceLegend",
      "modulePath": "Scheduler/data/util/recurrence/RecurrenceLegend",
      "classDescription": "<p>A static class allowing to get a human readable description of the provided recurrence.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const event = new EventModel({ startDate : new Date(2018, 6, 3), endDate : new Date(2018, 6, 4) });\nconst recurrence = new RecurrenceModel({ frequency : 'WEEKLY', days : ['MO', 'TU', 'WE'] });\nevent.recurrence = recurrence;\n// &quot;Weekly on  Mon, Tue and Wed&quot;\nRecurrenceLegend.getLegend(recurrence);\n</code></pre>",
      "mixes": [
        "Core/localization/Localizable"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceLegend.js",
      "path": "/Calendar/lib/Scheduler/data/util/recurrence",
      "functions": [
        {
          "name": "getLegend",
          "description": "<p>Returns the provided recurrence description. The recurrence might be assigned to a timespan model,\nin this case the timespan start date should be provided in the second argument.</p>",
          "parameters": [
            {
              "name": "recurrence",
              "type": "Scheduler.model.RecurrenceModel",
              "description": "<p>Recurrence model.</p>"
            },
            {
              "name": "timeSpanStartDate",
              "type": "Date",
              "description": "<p>The recurring timespan start date. Can be omitted if the recurrence is assigned to a timespan model\n(and the timespan has <a href=\"#Scheduler/model/TimeSpan#field-startDate\">startDate</a> filled).\nThen start date will be retrieved from the model.</p>",
              "optional": true
            }
          ],
          "scope": "static",
          "returns": {
            "type": "String",
            "description": "<p>The recurrence description.</p>"
          }
        }
      ]
    },
    {
      "name": "WeeklyRecurrenceIterator",
      "modulePath": "Scheduler/data/util/recurrence/WeeklyRecurrenceIterator",
      "classDescription": "<p>A class which provides iteration to call a function for dates specified by a\n<a href=\"#Scheduler/model/RecurrenceModel\">RecurrenceModel</a> over a specified date range.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "WeeklyRecurrenceIterator.js",
      "path": "/Calendar/lib/Scheduler/data/util/recurrence",
      "functions": [
        {
          "name": "forEachDate",
          "description": "<p>Iterates over the passed date range, calling the passed callback on each date on which\nstarts an event which matches the passed recurrence rule and overlaps the start and end dates.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>An object which describes how to iterate.</p>"
            },
            {
              "name": "config.startDate",
              "type": "Date",
              "description": "<p>The point in time to begin iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.endDate",
              "type": "Date",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.startOnly",
              "type": "Boolean",
              "description": "<p>By default, all occurrences which intersect the date range\nwill be visited. Pass <code>true</code> to only visit occurrences which <em>start</em> in the date range.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.recurrence",
              "type": "Scheduler.model.RecurrenceModel",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn",
              "type": "function",
              "description": "<p>The function to call for each date which matches the recurrence in the date range.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.date",
              "type": "Date",
              "description": "<p>The occurrence date.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.counter",
              "type": "Number",
              "description": "<p>A counter of how many dates have been visited in this iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.isFirst",
              "type": "Boolean",
              "description": "<p>A flag which is <code>true</code> if the date is the first occurrence in the specified recurrence rule.</p>",
              "isSubParam": true
            },
            {
              "name": "config.extraArgs",
              "type": "Array",
              "description": "<p>Extra arguments to pass to the callback after the <code>isFirst</code> argument.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "YearlyRecurrenceIterator",
      "modulePath": "Scheduler/data/util/recurrence/YearlyRecurrenceIterator",
      "classDescription": "<p>A class which provides iteration to call a function for dates specified by a\n<a href=\"#Scheduler/model/RecurrenceModel\">RecurrenceModel</a> over a specified date range.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "YearlyRecurrenceIterator.js",
      "path": "/Calendar/lib/Scheduler/data/util/recurrence",
      "functions": [
        {
          "name": "forEachDate",
          "description": "<p>Iterates over the passed date range, calling the passed callback on each date on which\nstarts an event which matches the passed recurrence rule and overlaps the start and end dates.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>An object which describes how to iterate.</p>"
            },
            {
              "name": "config.startDate",
              "type": "Date",
              "description": "<p>The point in time to begin iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.endDate",
              "type": "Date",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.startOnly",
              "type": "Boolean",
              "description": "<p>By default, all occurrences which intersect the date range\nwill be visited. Pass <code>true</code> to only visit occurrences which <em>start</em> in the date range.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.recurrence",
              "type": "Scheduler.model.RecurrenceModel",
              "description": "<p>The point in time to end iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn",
              "type": "function",
              "description": "<p>The function to call for each date which matches the recurrence in the date range.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.date",
              "type": "Date",
              "description": "<p>The occurrence date.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.counter",
              "type": "Number",
              "description": "<p>A counter of how many dates have been visited in this iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "config.fn.isFirst",
              "type": "Boolean",
              "description": "<p>A flag which is <code>true</code> if the date is the first occurrence in the specified recurrence rule.</p>",
              "isSubParam": true
            },
            {
              "name": "config.extraArgs",
              "type": "Array",
              "description": "<p>Extra arguments to pass to the callback after the <code>isFirst</code> argument.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "static"
        }
      ]
    },
    {
      "name": "HorizontalLayout",
      "modulePath": "Scheduler/eventlayout/HorizontalLayout",
      "classDescription": "<p>Base class for horizontal layouts (HorizontalLayoutPack and HorizontalLayoutStack). Should not be used directly,\ninstead specify <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout\">eventLayout</a> in Scheduler config (stack,\npack or none):</p>",
      "access": "private",
      "virtual": true,
      "examples": [
        "let scheduler = new Scheduler({\n  eventLayout: 'stack'\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "HorizontalLayout.js",
      "path": "/Calendar/lib/Scheduler/eventlayout",
      "functions": [
        {
          "name": "applyLayout",
          "description": "<p>This method performs layout on an array of event render data and returns amount of <em>bands</em>. Band is a multiplier of a\nconfigured <a href=\"#Scheduler/view/Scheduler#config-rowHeight\">rowHeight</a> to calculate total row height required to fit all\nevents.\nThis method should not be used directly, it is called by the Scheduler during the row rendering process.</p>",
          "parameters": [
            {
              "name": "events",
              "type": "Array.<Scheduler.view.mixin.SchedulerEventRendering#EventRenderData>"
            },
            {
              "name": "resource",
              "type": "Scheduler.model.ResourceModel"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "layoutEventsInBands",
          "description": "<p>This method iterates over events and calculates top position for each of them. Default layouts calculate\npositions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single\nrow by reducing their height, Stack layout will increase the row height and keep event height intact.\nThis method should not be used directly, it is called by the Scheduler during the row rendering process.</p>",
          "parameters": [
            {
              "name": "events",
              "type": "Array.<Scheduler.view.mixin.SchedulerEventRendering#EventRenderData>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "HorizontalLayoutPack",
      "modulePath": "Scheduler/eventlayout/HorizontalLayoutPack",
      "classDescription": "<p>Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit\navailable row height</p>",
      "extends": [
        "Scheduler/eventlayout/HorizontalLayout"
      ],
      "mixes": [
        "Scheduler/eventlayout/PackMixin"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "HorizontalLayoutPack.js",
      "path": "/Calendar/lib/Scheduler/eventlayout"
    },
    {
      "name": "HorizontalLayoutStack",
      "modulePath": "Scheduler/eventlayout/HorizontalLayoutStack",
      "classDescription": "<p>Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height when to fit\nall overlapping events.</p>\n<p>This layout is used by default in horizontal mode.</p>",
      "extends": [
        "Scheduler/eventlayout/HorizontalLayout"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "HorizontalLayoutStack.js",
      "path": "/Calendar/lib/Scheduler/eventlayout"
    },
    {
      "name": "PackMixin",
      "modulePath": "Scheduler/eventlayout/PackMixin",
      "description": "<p>Mixin holding functionality shared between HorizontalLayoutPack and VerticalLayout.</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "PackMixin.js",
      "path": "/Calendar/lib/Scheduler/eventlayout"
    },
    {
      "name": "VerticalLayout",
      "modulePath": "Scheduler/eventlayout/VerticalLayout",
      "classDescription": "<p>Assists with event layout in vertical mode, handles <code>eventLayout: none|pack|mixed</code></p>",
      "mixes": [
        "Scheduler/eventlayout/PackMixin"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "VerticalLayout.js",
      "path": "/Calendar/lib/Scheduler/eventlayout"
    },
    {
      "name": "AbstractTimeRanges",
      "modulePath": "Scheduler/feature/AbstractTimeRanges",
      "classDescription": "<p>Abstract base class, you should not use this class directly.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "mixes": [
        "Core/mixin/Delayable"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "AbstractTimeRanges.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "configs": [
        {
          "name": "store",
          "description": "<p>Store that holds timeRanges (using the <a href=\"#Scheduler/model/TimeSpan\">TimeSpan</a> model or subclass thereof).\nA store will be automatically created if none is specified</p>",
          "type": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "enableResizing",
          "description": "<p>Set to <code>true</code> to enable dragging and resizing of range elements in the header. Only relevant when <a href=\"#Scheduler/feature/AbstractTimeRanges#config-showHeaderElements\">showHeaderElements</a> is true.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "showTooltip",
          "description": "<p>A Boolean specifying whether or not to show tooltip while resizing range elements, or a\n<a href=\"#Core/widget/Tooltip\">Tooltip</a> config object which is applied to the tooltip</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showHeaderElements",
          "description": "<p><code>true</code> to render range elements into the time axis header</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "tooltipTemplate",
          "description": "<p>Template used to generate the tooltip contents when hovering a time range header element.</p>\n<pre class=\"prettyprint source\"><code>const scheduler = new Scheduler({\n  features : {\n    timeRanges : {\n      tooltipTemplate({ timeRange }) {\n        return `${timeRange.name}`\n      }\n    }\n  }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Tooltip data</p>"
            },
            {
              "name": "data.timeRange",
              "type": "Scheduler.model.TimeSpan",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "headerRenderer",
          "description": "<p>Function used to generate the HTML content for a time range header element.</p>\n<pre class=\"prettyprint source\"><code>const scheduler = new Scheduler({\n  features : {\n    timeRanges : {\n      headerRenderer({ timeRange }) {\n        return `${timeRange.name}`\n      }\n    }\n  }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Render data</p>"
            },
            {
              "name": "data.timeRange",
              "type": "Scheduler.model.TimeSpan",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "bodyRenderer",
          "description": "<p>Function used to generate the HTML content for a time range body element.</p>\n<pre class=\"prettyprint source\"><code>const scheduler = new Scheduler({\n  features : {\n    timeRanges : {\n      bodyRenderer({ timeRange }) {\n        return `${timeRange.name}`\n      }\n    }\n  }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Render data</p>"
            },
            {
              "name": "data.timeRange",
              "type": "Scheduler.model.TimeSpan",
              "isSubParam": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "timeRanges",
          "description": "<p>Returns the TimeRanges in the store.</p>",
          "type": "Array.<Scheduler.model.TimeSpan>",
          "scope": "instance"
        },
        {
          "name": "showHeaderElements",
          "description": "<p>Get/set if header elements should be rendered</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "store",
          "description": "<p>Returns the <a href=\"#Core/data/Store\">store</a> used by this feature</p>",
          "type": "Core.data.Store",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "shouldRenderRange",
          "description": "<p>Based on this method result the feature decides whether the provided range should\nbe rendered or not.\nThe method checks that the range has non-zero <a href=\"#Scheduler/model/TimeSpan#field-duration\">duration</a>\nand lays in the visible timespan.</p>\n<p>Override the method to implement your custom range rendering vetoing logic.</p>",
          "parameters": [
            {
              "name": "range",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>Range to render.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the range should be rendered and <code>false</code> otherwise.</p>"
          }
        },
        {
          "name": "populateTimeAxisHeaderMenu",
          "access": "internal",
          "description": "<p>Adds menu items for the context menu, and may mutate the menu configuration.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getTipHtml",
          "description": "<p>Generates the html to display in the tooltip during drag drop.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ColumnLines",
      "modulePath": "Scheduler/feature/ColumnLines",
      "classDescription": "<p>Displays column lines for ticks, with a different styling for major ticks (by default they are darker). If this\nfeature is disabled, no lines are shown. If it's enabled, line are shown for the tick level which is set in current\nViewPreset. Please see <a href=\"#Scheduler/preset/ViewPreset#field-columnLinesFor\">columnLinesFor</a> config for details.</p>\n<p>The lines are drawn as divs, with only visible lines available in DOM. The color and style of the lines are\ndetermined the css rules for <code>.b-column-line</code> and <code>.b-column-line-major</code>.</p>\n<p>For vertical mode, this features also draws vertical resource column lines if scheduler is configured with\n<code>columnLines : true</code> (which is the default, see <a href=\"#Grid/view/GridBase#config-columnLines\">columnLines</a>).</p>\n<p>This feature is <strong>enabled</strong> by default</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "mixes": [
        "Core/mixin/Delayable"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ColumnLines.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "externalExamples": [
        "Scheduler/feature/ColumnLines.js"
      ],
      "classType": "columnLines",
      "functions": [
        {
          "name": "render",
          "access": "private",
          "description": "<p>Draw lines when scheduler/gantt is rendered.</p>",
          "scope": "instance"
        },
        {
          "name": "refresh",
          "access": "private",
          "description": "<p>Draw column lines that are in view</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Dependencies",
      "modulePath": "Scheduler/feature/Dependencies",
      "classDescription": "<p>Feature that draws dependencies between events Uses a <a href=\"#Scheduler/data/DependencyStore\">DependencyStore</a> to\ndetermine which dependencies to draw, if none is defined one will be created automatically. Dependencies can also be\nspecified as Scheduler#dependencies, see example below.</p>\n<p><strong>Note</strong>: In case milestone elements have <code>iconCls</code> defined dependency feature will refer to the DOM to get exact\nelement size which might slightly decrease the performance.</p>\n<p>To customize the dependency tooltip, you can provide the <a href=\"#Scheduler/feature/Dependencies#config-tooltip\">tooltip</a> config and specify a <a href=\"#Core/widget/Tooltip#config-getHtml\">getHtml</a> function.\nFor example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        dependencies : {\n            tooltip : {\n                getHtml({ activeTarget }) {\n                    const dependencyModel = scheduler.resolveDependencyRecord(activeTarget);\n\n                    if (!dependencyModel) return null;\n\n                    const { fromEvent, toEvent } = dependencyModel;\n\n                    return `${fromEvent.name} (${fromEvent.id}) -> ${toEvent.name} (${toEvent.id})`;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<h2>Styling dependency lines</h2>\n<p>You can easily customize the arrows drawn between events. To change all arrows, apply\nthe following basic SVG CSS:</p>\n<pre class=\"prettyprint source lang-css\"><code>.b-sch-dependency {\n   stroke-width: 2;\n   stroke : red;\n}\n\n.b-sch-dependency-arrow {\n    fill: red;\n}\n</code></pre>\n<p>To style an individual dependency line, you can provide a <a href=\"#Scheduler/model/DependencyModel#field-cls\">cls</a> in your data:</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n    &quot;id&quot;   : 9,\n    &quot;from&quot; : 7,\n    &quot;to&quot;   : 8,\n    &quot;cls&quot;  : &quot;special-dependency&quot;\n}\n</code></pre>\n<pre class=\"prettyprint source lang-scss\"><code>// Make line dashed\n.b-sch-dependency {\n   stroke-dasharray: 5, 5;\n}\n</code></pre>\n<p>This feature is <strong>off</strong> by default. It is <strong>not</strong> supported in vertical mode.\nFor info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "mixes": [
        "Core/mixin/Delayable",
        "Scheduler/feature/mixin/DependencyCreation"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Dependencies.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "dependencies"
      },
      "externalExamples": [
        "Scheduler/feature/Dependencies.js"
      ],
      "classType": "dependencies",
      "events": [
        {
          "name": "dependenciesDrawn",
          "description": "<p>Fired when dependencies are rendered</p>",
          "parameters": [
            {
              "name": "partial",
              "type": "Boolean",
              "description": "<p>Optional event parameter. <code>true</code> when subset of dependencies is repainted, omitted\nwhen all lines were repainted.</p>",
              "optional": true
            }
          ]
        },
        {
          "name": "dependencyClick",
          "description": "<p>Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel"
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "onOwner": true
        },
        {
          "name": "dependencyDblClick",
          "description": "<p>Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel"
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "onOwner": true
        },
        {
          "name": "dependencyMouseOver",
          "description": "<p>Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel"
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "onOwner": true
        },
        {
          "name": "dependencyMouseOut",
          "description": "<p>Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel"
            },
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "onOwner": true
        }
      ],
      "configs": [
        {
          "name": "pathFinderConfig",
          "description": "<p>Path finder instance configuration</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "overCls",
          "access": "private",
          "description": "<p>The CSS class to add to a dependency line when hovering over it</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-dependency-over"
        },
        {
          "name": "baseCls",
          "access": "private",
          "description": "<p>The CSS class applied to dependency lines</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-dependency"
        },
        {
          "name": "noMarkerCls",
          "access": "private",
          "description": "<p>The CSS class applied to the too narrow dependency line</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-dependency-markerless"
        },
        {
          "name": "showTooltip",
          "description": "<p>Set to true to show a tooltip when hovering a dependency line</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "tooltip",
          "description": "<p>A tooltip config object that will be applied to the dependency hover tooltip. Can be used to for example\ncustomize delay</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "initMarkerElement",
          "access": "private",
          "description": "<p>Creates SVG marker element (arrow) which is used for all dependency lines</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>Id of the marker element</p>"
            },
            {
              "name": "refX",
              "type": "String"
            },
            {
              "name": "arrowPath",
              "type": "String",
              "description": "<p>Path defining arrow</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "createLineDefAdjusters",
          "access": "private",
          "description": "<p>Returns an array of functions used to alter path config when no path found.\nIt first tries to shrink arrow margins and secondly hides arrows entirely</p>",
          "scope": "instance",
          "returns": {
            "type": "Array.<function()>"
          }
        },
        {
          "name": "resolveDependencyRecord",
          "description": "<p>Returns the dependency record for a DOM element</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The dependency line element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.DependencyModel",
            "description": "<p>The dependency record</p>"
          }
        },
        {
          "name": "onTranslateRow",
          "access": "private",
          "description": "<p>Flags for redrawing if a rows height has changed</p>",
          "scope": "instance"
        },
        {
          "name": "onChangeTotalHeight",
          "access": "private",
          "description": "<p>Redraws all dependencies if a rows height changed, as detected in onTranslateRow</p>",
          "scope": "instance"
        },
        {
          "name": "onHorizontalScroll",
          "access": "private",
          "description": "<p>Draws dependencies on horizontal scroll</p>",
          "scope": "instance"
        },
        {
          "name": "onVerticalScroll",
          "access": "private",
          "description": "<p>Draws dependencies on vertical scroll</p>",
          "scope": "instance"
        },
        {
          "name": "onResourceStoreRefresh",
          "access": "private",
          "description": "<p>Redraws dependencies when a row has changed</p>",
          "scope": "instance"
        },
        {
          "name": "onDependencyChange",
          "access": "private",
          "description": "<p>Redraws dependencies when a dependency has changed</p>",
          "scope": "instance",
          "async": true
        },
        {
          "name": "onEventChange",
          "access": "private",
          "description": "<p>Redraws dependencies when an event has changed</p>",
          "scope": "instance"
        },
        {
          "name": "generateBoundaryBoxes",
          "access": "private",
          "description": "<p>Generates <code>otherBoxes</code> config for rectangular path finder, which push dependency line to the row boundary.\nIt should be enough to return single box with top/bottom taken from row top/bottom and left/right taken from source\nbox, extended by start arrow margin to both sides.</p>",
          "parameters": [
            {
              "name": "box",
              "type": "Core.helper.util.Rectangle",
              "description": "<p>Box for which other boxes are required</p>"
            },
            {
              "name": "side",
              "type": "String",
              "description": "<p>Side of the box where line starts</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Object>"
          }
        },
        {
          "name": "refreshDependency",
          "description": "<p>Re-caches and redraws a dependency, for all assignments.</p>",
          "parameters": [
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>Dependency to refresh</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "refreshDependencyAssignment",
          "access": "private",
          "description": "<p>Re-caches and redraws a dependency for given assignment.</p>",
          "parameters": [
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>Dependency to refresh</p>"
            },
            {
              "name": "assignmentData",
              "type": "Object"
            },
            {
              "name": "assignmentData.from",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Source assignment</p>",
              "isSubParam": true
            },
            {
              "name": "assignmentData.to",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Target assignment</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "scheduleRefreshDependency",
          "access": "private",
          "description": "<p>Stores all dependencies/assignments that were requested to refresh and schedules repaint on next animation frame</p>",
          "parameters": [
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>Dependency model to refresh</p>"
            },
            {
              "name": "assignmentData",
              "type": "Object",
              "description": "<p>Assignment data</p>",
              "optional": true
            },
            {
              "name": "assignmentData.from",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Source assignment</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "assignmentData.to",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Target assignment</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getSortedDependenciesToRefresh",
          "access": "private",
          "description": "<p>Implement on subclass when a certain sort order is needed</p>",
          "scope": "instance",
          "returns": {
            "type": "Map",
            "description": "<p>Dependencies</p>"
          }
        },
        {
          "name": "refreshDependencyOnFrame",
          "access": "private",
          "description": "<p>Repaints scheduled dependencies/assignments</p>",
          "scope": "instance"
        },
        {
          "name": "drawDependency",
          "description": "<p>Draws a single dependency (for a single assignment if using multiple), if in view.</p>",
          "parameters": [
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>Dependency to draw</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "drawForTimeSpan",
          "access": "private",
          "description": "<p>Draws multiple dependencies, called from drawForEvent() or drawFromTask().</p>",
          "scope": "instance"
        },
        {
          "name": "drawForEvent",
          "description": "<p>Draws all dependencies for the specified event.</p>",
          "scope": "instance"
        },
        {
          "name": "draw",
          "description": "<p>Draws all dependencies that overlap the current viewport</p>",
          "scope": "instance"
        },
        {
          "name": "releaseDependency",
          "description": "<p>Release a dependency that is determined to be no longer visible</p>",
          "parameters": [
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyModel"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getConnectorStartSide",
          "description": "<p>Gets displaying item start side</p>",
          "parameters": [
            {
              "name": "timeSpanRecord",
              "type": "Scheduler.model.TimeSpan"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>'left' / 'right' / 'top' / 'bottom'</p>"
          }
        },
        {
          "name": "getConnectorEndSide",
          "description": "<p>Gets displaying item end side</p>",
          "parameters": [
            {
              "name": "timeSpanRecord",
              "type": "Scheduler.model.TimeSpan"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>'left' / 'right' / 'top' / 'bottom'</p>"
          }
        },
        {
          "name": "getHoverTipHtml",
          "access": "private",
          "description": "<p>Generates html for the tooltip shown when hovering a dependency</p>",
          "parameters": [
            {
              "name": "tooltipConfig",
              "type": "Object"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>Html to display in the tooltip</p>"
          }
        }
      ]
    },
    {
      "name": "DependencyEdit",
      "modulePath": "Scheduler/feature/DependencyEdit",
      "classDescription": "<p>Feature that displays a popup containing fields for editing a dependency. Requires the\n<a href=\"#Scheduler/feature/Dependencies\">Dependencies</a> feature to be enabled. Double click a line in the demo below to show the\neditor.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/feature/Dependencies.js\"></div></p>\n<h2>Customizing the built-in widgets</h2>\n<pre class=\"prettyprint source lang-javascript\"><code> const scheduler = new Scheduler({\n     columns : [\n         { field : 'name', text : 'Name', width : 100 }\n     ],\n     features : {\n         dependencies   : true,\n         dependencyEdit : {\n             editorConfig : {\n                 items : {\n                     // Custom label for the type field\n                     typeField : {\n                         label : 'Kind'\n                     }\n                 },\n\n                 bbar : {\n                     items : {\n                         // Hiding save button\n                         saveButton : {\n                             hidden : true\n                         }\n                     }\n                 }\n             }\n         }\n     }\n });\n</code></pre>\n<h2>Built in widgets</h2>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fromNameField</code></td>\n<td><a href=\"#Core/widget/DisplayField\">DisplayField</a></td>\n<td>100</td>\n<td>From task name (readonly)</td>\n</tr>\n<tr>\n<td><code>toNameField</code></td>\n<td><a href=\"#Core/widget/DisplayField\">DisplayField</a></td>\n<td>200</td>\n<td>To task name (readonly)</td>\n</tr>\n<tr>\n<td><code>typeField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>300</td>\n<td>Edit type</td>\n</tr>\n<tr>\n<td><code>lagField</code></td>\n<td><a href=\"#Core/widget/DurationField\">DurationField</a></td>\n<td>400</td>\n<td>Edit lag</td>\n</tr>\n</tbody>\n</table>\n<p>The built in buttons are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>saveButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>100</td>\n<td>Save button on the bbar</td>\n</tr>\n<tr>\n<td><code>deleteButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>200</td>\n<td>Delete button on the bbar</td>\n</tr>\n<tr>\n<td><code>cancelButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>300</td>\n<td>Cancel editing button on the bbar</td>\n</tr>\n</tbody>\n</table>\n<p>This feature is <strong>off</strong> by default.\nFor info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "DependencyEdit.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "dependencies"
      },
      "classType": "dependencyEdit",
      "configs": [
        {
          "name": "autoClose",
          "description": "<p>True to hide this editor if a click is detected outside it (defaults to true)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Editor"
        },
        {
          "name": "saveAndCloseOnEnter",
          "description": "<p>True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Editor"
        },
        {
          "name": "showDeleteButton",
          "description": "<p>True to show a delete button in the form.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Editor widgets"
        },
        {
          "name": "triggerEvent",
          "description": "<p>The event that shall trigger showing the editor. Defaults to <code>dependencydblclick</code>, set to empty string or <code>null</code> to disable editing of dependencies.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "dependencydblclick",
          "category": "Editor"
        },
        {
          "name": "showLagField",
          "description": "<p>True to show the lag field for the dependency</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Editor widgets"
        },
        {
          "name": "editorConfig",
          "description": "<p>Default editor configuration, used to configure the Popup.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Editor"
        }
      ],
      "properties": [
        {
          "name": "fromNameField",
          "description": "<p>Reference to the from name</p>",
          "type": "Core.widget.DisplayField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "toNameField",
          "description": "<p>Reference to the to name field</p>",
          "type": "Core.widget.DisplayField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "typeField",
          "description": "<p>Reference to the type field</p>",
          "type": "Core.widget.Combo",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "lagField",
          "description": "<p>Reference to the lag field</p>",
          "type": "Core.widget.DurationField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "saveButton",
          "description": "<p>Reference to the save button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "deleteButton",
          "description": "<p>Reference to the delete button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "cancelButton",
          "description": "<p>Reference to the cancel button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "onBeforeSave",
          "description": "<p>Template method, intended to be overridden. Called before the dependency record has been updated.</p>",
          "parameters": [
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The dependency record</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onAfterSave",
          "description": "<p>Template method, intended to be overridden. Called after the dependency record has been updated.</p>",
          "parameters": [
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The dependency record</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateRecord",
          "access": "private",
          "description": "<p>Updates record being edited with values from the editor</p>",
          "scope": "instance"
        },
        {
          "name": "editDependency",
          "description": "<p>Opens a popup to edit the passed dependency.</p>",
          "parameters": [
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The dependency to edit</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getEditor",
          "access": "internal",
          "description": "<p>Gets an editor instance. Creates on first call, reuses on consecutive</p>",
          "scope": "instance",
          "returns": {
            "type": "Scheduler.view.DependencyEditor",
            "description": "<p>Editor popup</p>"
          }
        },
        {
          "name": "loadRecord",
          "access": "private",
          "description": "<p>Sets fields values from record being edited</p>",
          "scope": "instance"
        },
        {
          "name": "save",
          "access": "private",
          "description": "<p>Saves the changes (applies them to record if valid, if invalid editor stays open)</p>",
          "scope": "instance",
          "fires": [
            "event:beforeDependencySave",
            "event:beforeDependencyAdd",
            "event:afterDependencySave"
          ],
          "async": true,
          "returns": {
            "type": "*"
          }
        },
        {
          "name": "deleteDependency",
          "access": "private",
          "description": "<p>Delete dependency being edited</p>",
          "scope": "instance",
          "fires": [
            "event:beforeDependencyDelete"
          ],
          "async": true
        }
      ],
      "events": [
        {
          "name": "beforeDependencyEdit",
          "description": "<p>Fires on the owning Scheduler before an dependency is displayed in the editor.\nThis may be listened for to allow an application to take over dependency editing duties. Returning <code>false</code>\nstops the default editing UI from being shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "dependencyEdit",
              "type": "Scheduler.feature.DependencyEdit",
              "description": "<p>The dependencyEdit feature</p>"
            },
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The record about to be shown in the editor.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "beforeDependencyEditShow",
          "description": "<p>Fires on the owning Scheduler when the editor for a dependency is available but before it is shown. Allows\nmanipulating fields before the widget is shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "dependencyEdit",
              "type": "Scheduler.feature.DependencyEdit",
              "description": "<p>The dependencyEdit feature</p>"
            },
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The record about to be shown in the editor.</p>"
            },
            {
              "name": "editor",
              "type": "Core.widget.Popup",
              "description": "<p>The editor popup</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeDependencySave",
          "description": "<p>Fires on the owning Scheduler before a dependency is saved</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler instance</p>"
            },
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The dependency about to be saved</p>"
            },
            {
              "name": "values",
              "type": "Object",
              "description": "<p>The new values</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "beforeDependencyAdd",
          "description": "<p>Fires on the owning Scheduler before a dependency is added</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "dependencyEdit",
              "type": "Scheduler.feature.DependencyEdit",
              "description": "<p>The dependency edit feature</p>"
            },
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The dependency about to be added</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "afterDependencySave",
          "description": "<p>Fires on the owning Scheduler after a dependency is successfully saved</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler instance</p>"
            },
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The dependency about to be saved</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeDependencyDelete",
          "description": "<p>Fires on the owning Scheduler before a dependency is deleted</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler instance</p>"
            },
            {
              "name": "dependencyRecord",
              "type": "Scheduler.model.DependencyModel",
              "description": "<p>The dependency record about to be deleted</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        }
      ]
    },
    {
      "name": "EventCopyPaste",
      "modulePath": "Scheduler/feature/EventCopyPaste",
      "classDescription": "<p>Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste events.</p>\n<p>This feature also adds entries to the <a href=\"#Scheduler/feature/EventMenu\">EventMenu</a> for copying &amp; cutting (see example below\nfor how to configure) and to the <a href=\"#Scheduler/feature/ScheduleMenu\">ScheduleMenu</a> for pasting.</p>\n<p>You can configure how a newly pasted record is named using <a href=\"#Scheduler/feature/EventCopyPaste#function-generateNewName\">generateNewName</a>.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/feature/EventCopyPaste.js\"></div></p>\n<p>If you want to highlight the paste location when clicking in the schedule, consider enabling the\n<a href=\"#Scheduler/feature/ScheduleContext\">ScheduleContext</a> feature.</p>\n<div class=\"note\">When used with Scheduler Pro, pasting will bypass any constraint set on the event to allow the\ncopy to be assigned the targeted date.</div>\n<p>This feature is <strong>enabled</strong> by default.</p>\n<h2>Customize menu items</h2>\n<p>See <a href=\"#Scheduler/feature/EventMenu\">EventMenu</a> and <a href=\"#Scheduler/feature/ScheduleMenu\">ScheduleMenu</a> for more info on customizing the\nmenu items supplied by the feature. This snippet illustrates the concept:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Custom copy text + remove cut option from event menu:\nconst scheduler = new Scheduler({\n    features : {\n        eventCopyPaste : true,\n        eventMenu : {\n            items : {\n                copyEvent : {\n                    text : 'Copy booking'\n                },\n                cutEvent  : false\n            }\n        }\n    }\n});\n</code></pre>\n<h2>Keyboard shortcuts</h2>\n<p>By default, this feature will react to <code>Ctrl+C</code>, <code>Ctrl+X</code> and <code>Ctrl+V</code> for standard clipboard actions.\nYou can reconfigure the keys used to trigger these actions, see <a href=\"#Scheduler/feature/EventCopyPaste#config-keyMap\">keyMap</a> for more details.</p>\n<h2>Multi assigned events</h2>\n<p>In a Scheduler that uses single assignment, copying and then pasting creates a clone of the event and assigns it\nto the target resource. Cutting and pasting moves the original event to the target resource.</p>\n<p>In a Scheduler using multi assignment, the behaviour is slightly more complex. Cutting and pasting reassigns the\nevent to the target, keeping other assignments of the same event intact. The behaviour for copying and pasting is\nconfigurable using the <a href=\"#Scheduler/feature/EventCopyPaste#config-copyPasteAction\">copyPasteAction</a> config. It accepts two values:</p>\n<ul>\n<li><code>'clone'</code> - The default, the event is cloned and the clone is assigned to the target resource. Very similar to the\nbehaviour with single assignment (event count goes up by 1).</li>\n<li><code>'assign'</code> - The original event is assigned to the target resource (event count is unaffected).</li>\n</ul>\n<p>This snippet shows how to reconfigure it:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventCopyPaste : {\n            copyPasteAction : 'assign'\n        }\n    }\n});\n</code></pre>\n<div class=\"note\">Copying multiple assignments of the same event will always result in all but the first assignment\nbeing removed on paste, since paste targets a single resource and an event can only be assigned to a resource once.\n</div>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventCopyPaste.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "classType": "eventCopyPaste",
      "configs": [
        {
          "name": "nameField",
          "description": "<p>The field to use as the name field when updating the name of copied records</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "name"
        },
        {
          "name": "keyMap",
          "description": "<p>The feature has the following default key mappings during editing:</p>\n<table>\n<thead>\n<tr>\n<th>Keys</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+C</td>\n<td>copy</td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>cut</td>\n</tr>\n<tr>\n<td>Ctrl+V</td>\n<td>paste</td>\n</tr>\n</tbody>\n</table>\n<p>You can supply your own key map if you want to change any mapping, or set it to <code>null</code> to disable all keyboard\nshortcuts.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n   features : {\n       eventCopyPaste : {\n           keyMap : {\n               // disable cut via keyboard\n               'Ctrl-X' : null\n           }\n       }\n   }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "copyPasteAction",
          "description": "<p>How to handle a copy paste operation when the host uses multi assignment. Either:</p>\n<ul>\n<li><code>'clone'</code>  - The default, clone the copied event, assigning the clone to the target resource.</li>\n<li><code>'assign'</code> - Add an assignment for the existing event to the target resource.</li>\n</ul>\n<p>For single assignment mode, it always uses the <code>'clone'</code> behaviour.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "clone"
        }
      ],
      "functions": [
        {
          "name": "copyEvents",
          "description": "<p>Copy events (when using single assignment mode) or assignments (when using multi assignment mode) to clipboard to\npaste later</p>",
          "parameters": [
            {
              "name": "records",
              "type": [
                "Array.<Scheduler.model.EventModel>",
                "Array.<Scheduler.model.AssignmentModel>"
              ],
              "description": "<p>Pass records to copy them,\nleave out to copying current selection</p>",
              "optional": true
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p>Copies by default, pass <code>true</code> to cut instead</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeCopy"
          ],
          "category": "Edit"
        },
        {
          "name": "pasteEvents",
          "description": "<p>Paste events or assignments to specified date and resource</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date where the events or assignments will be pasted</p>",
              "optional": true
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource to assign the pasted events or assignments to</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforePaste"
          ],
          "category": "Edit"
        },
        {
          "name": "generateNewName",
          "description": "<p>A method used to generate the name for a copy pasted record. By defaults appends &quot;- 2&quot;, &quot;- 3&quot; as a suffix.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new eventRecord being pasted</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        }
      ],
      "events": [
        {
          "name": "beforeCopy",
          "description": "<p>Fires on the owning Scheduler before a copy action is performed, return <code>false</code> to prevent the action</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Owner scheduler</p>"
            },
            {
              "name": "records",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Deprecated, will be removed in 6.0. Use eventRecords instead.</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The event records about to be copied</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>The assignment records about to be copied</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "copy",
          "description": "<p>Fires on the owning Scheduler after a copy action is performed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Owner scheduler</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The event records that were copied</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>The assignment records that were copied</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforePaste",
          "description": "<p>Fires on the owning Scheduler before a paste action is performed, return <code>false</code> to prevent the action</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Owner scheduler</p>"
            },
            {
              "name": "records",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Deprecated, will be removed in 6.0. Use eventRecords instead.</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The events about to be pasted</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>The assignments about to be pasted</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date when the pasted events will be scheduled</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The target resource record, the clipboard\nevent records will be assigned to this resource.</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "paste",
          "description": "<p>Fires on the owning Scheduler after a paste action is performed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Owner scheduler</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Pasted events</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Pasted assignments</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>date Pasted to this date</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The target resource record</p>"
            },
            {
              "name": "isCut",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is a cut action</p>"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "EventDrag",
      "modulePath": "Scheduler/feature/EventDrag",
      "classDescription": "<p>Allows user to drag and drop events within the scheduler, to change startDate or resource assignment.</p>\n<p>This feature is <strong>enabled</strong> by default</p>\n<h2>Customizing the drag drop tooltip</h2>\n<p>To show custom HTML in the tooltip, please see the <a href=\"#Scheduler/feature/EventDrag#config-tooltipTemplate\">tooltipTemplate</a> config. Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features: {\n    eventDrag : {\n        // A minimal start date tooltip\n        tooltipTemplate : ({ eventRecord, startDate }) => {\n            return DateHelper.format(startDate, 'HH:mm');\n        }\n    }\n}\n</code></pre>\n<h2>Constraining the drag drop area</h2>\n<p>You can constrain how the dragged event is allowed to move by using the following configs</p>\n<ul>\n<li><a href=\"#Scheduler/feature/EventDrag#config-constrainDragToResource\">constrainDragToResource</a> Resource fixed, only allowed to change start date</li>\n<li><a href=\"#Scheduler/feature/EventDrag#config-constrainDragToTimeSlot\">constrainDragToTimeSlot</a> Start date is fixed, only move between resources</li>\n<li><a href=\"#Scheduler/view/Scheduler#config-getDateConstraints\">getDateConstraints</a> A method on the Scheduler instance\nwhich lets you define the date range for the dragged event programmatically</li>\n</ul>\n<pre class=\"prettyprint source lang-js\"><code>// Enable dragging + constrain drag to current resource\nconst scheduler = new Scheduler({\n    features : {\n        eventDrag : {\n            constrainDragToResource : true\n        }\n    }\n});\n</code></pre>\n<h2>Drag drop events from outside</h2>\n<p>Dragging unplanned events from an external grid is a very popular use case. There are\nseveral demos showing you how to do this. Please see the <a href=\"../examples/dragfromgrid\">Drag from grid demo</a>\nand study the <strong>Drag from grid guide</strong> to learn more.</p>\n<h2>Drag drop events to outside target</h2>\n<p>You can also drag events outside the schedule area by setting <a href=\"#Scheduler/feature/EventDrag#config-constrainDragToTimeline\">constrainDragToTimeline</a> to <code>false</code>. You\nshould also either:</p>\n<ul>\n<li>provide a <a href=\"#Scheduler/feature/EventDrag#config-validatorFn\">validatorFn</a> to programmatically define if a drop location is valid or not</li>\n<li>configure a <a href=\"#Scheduler/feature/EventDrag#config-externalDropTargetSelector\">externalDropTargetSelector</a> CSS selector to define where drops are allowed</li>\n</ul>\n<p>See <a href=\"../examples/drag-outside\">this demo</a> to see this in action.</p>\n<h2>Validating drag drop</h2>\n<p>It is easy to programmatically decide what is a valid drag drop operation. Use the <a href=\"#Scheduler/feature/EventDrag#config-validatorFn\">validatorFn</a>\nand return either <code>true</code> / <code>false</code> (optionally a message to show to the user).</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    eventDrag : {\n       validatorFn({ eventRecords, newResource }) {\n           const task  = eventRecords[0],\n                 valid = newResource.role === task.resource.role;\n\n           return {\n               valid   : newResource.role === task.resource.role,\n               message : valid ? '' : 'Resource role does not match required role for this task'\n           };\n       }\n    }\n}\n</code></pre>\n<p>See <a href=\"../examples/validation\">this demo</a> to see validation in action.</p>\n<p>If you instead want to do a single validation upon drop, you can listen to <a href=\"#Scheduler/feature/EventDrag#event-beforeEventDropFinalize\">beforeEventDropFinalize</a>\nand set the <code>valid</code> flag on the context object provided.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>  const scheduler = new Scheduler({\n     listeners : {\n         beforeEventDropFinalize({ context }) {\n             const { eventRecords } = context;\n             // Don't allow dropping events in the past\n             context.valid = Date.now() &lt;= eventRecords[0].startDate;\n         }\n     }\n });\n</code></pre>\n<h2>Preventing drag of certain events</h2>\n<p>To prevent certain events from being dragged, you have two options. You can set <a href=\"#Scheduler/model/EventModel#field-draggable\">draggable</a>\nto <code>false</code> in your data, or you can listen for the <a href=\"#Scheduler/view/Scheduler#event-beforeEventDrag\">beforeEventDrag</a> event and\nreturn <code>false</code> to block the drag.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n   listeners : {\n       beforeEventDrag({ eventRecord }) {\n           // Don't allow dragging events that have already started\n           return Date.now() &lt;= eventRecord.startDate;\n       }\n   }\n})\n</code></pre>",
      "extends": [
        "Scheduler/feature/base/DragBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventDrag.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "externalExamples": [
        "Scheduler/feature/EventDrag.js"
      ],
      "classType": "eventDrag",
      "configs": [
        {
          "name": "tooltipTemplate",
          "description": "<p>Template used to generate drag tooltip contents.</p>\n<pre class=\"prettyprint source\"><code>const scheduler = new Scheduler({\n  features : {\n    eventDrag : {\n      dragTipTemplate({eventRecord, startText}) {\n        return `${eventRecord.name}: ${startText}`\n      }\n    }\n  }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "String"
          },
          "parameters": [
            {
              "name": "data",
              "type": "Object",
              "description": "<p>Tooltip data</p>"
            },
            {
              "name": "data.eventRecord",
              "type": "Scheduler.model.EventModel",
              "isSubParam": true
            },
            {
              "name": "data.valid",
              "type": "Boolean",
              "description": "<p>Currently over a valid drop target or not</p>",
              "isSubParam": true
            },
            {
              "name": "data.startDate",
              "type": "Date",
              "description": "<p>New start date</p>",
              "isSubParam": true
            },
            {
              "name": "data.endDate",
              "type": "Date",
              "description": "<p>New end date</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "constrainDragToResource",
          "description": "<p>Set to true to only allow dragging events within the same resource.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "constrainDragToTimeSlot",
          "description": "<p>Set to true to only allow dragging events to different resources, and disallow rescheduling by dragging.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "externalDropTargetSelector",
          "description": "<p>A CSS selector specifying elements outside the scheduler element which are valid drop targets.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "validatorFn",
          "description": "<p>An empty function by default, but provided so that you can perform custom validation on\nthe item being dragged. This function is called during the drag and drop process and also after the drop is made.\nReturn true if the new position is valid, false to prevent the drag.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features : {\n    eventDrag : {\n       validatorFn({ eventRecords, newResource }) {\n           const task  = eventRecords[0],\n                 valid = newResource.role === task.resource.role;\n\n           return {\n               valid   : newResource.role === task.resource.role,\n               message : valid ? '' : 'Resource role does not match required role for this task'\n           };\n       }\n    }\n}\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": [
              "Boolean",
              "Object"
            ],
            "description": "<p><code>true</code> if this validation passes, <code>false</code> if it does not.</p>\n<p>Or an object with 2 properties: <code>valid</code> -  Boolean <code>true</code>/<code>false</code> depending on validity,\nand <code>message</code> - String with a custom error message to display when invalid.</p>"
          },
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>A drag drop context object</p>"
            },
            {
              "name": "context.startDate",
              "type": "Date",
              "description": "<p>New start date</p>",
              "isSubParam": true
            },
            {
              "name": "context.endDate",
              "type": "Date",
              "description": "<p>New end date</p>",
              "isSubParam": true
            },
            {
              "name": "context.assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignment records which were dragged</p>",
              "isSubParam": true
            },
            {
              "name": "context.eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Event records which were dragged</p>",
              "isSubParam": true
            },
            {
              "name": "context.newResource",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>New resource record</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event object</p>"
            }
          ]
        },
        {
          "name": "validatorFnThisObj",
          "description": "<p>The <code>this</code> reference for the validatorFn</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "unifiedDrag",
          "description": "<p>When the host Scheduler is <code><a href=\"#Scheduler/view/mixin/EventSelection#config-multiEventSelect\">multiEventSelect</a>: true</code>\nthen, there are two modes of dragging <em>within the same Scheduler</em>.</p>\n<p>Non unified means that all selected events are dragged by the same number of resource rows.</p>\n<p>Unified means that all selected events are collected together and dragged as one, and are all dropped\non the same targeted resource row at the same targeted time.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "snapToPosition",
          "description": "<p>A hook that allows manipulating the position the drag proxy snaps to. Manipulate the <code>snapTo</code> property\nto alter snap position.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n   features : {\n       eventDrag : {\n           snapToPosition({ eventRecord, snapTo }) {\n               if (eventRecord.late) {\n                   snapTo.x = 400;\n               }\n           }\n       }\n   }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Dragged assignment</p>",
              "isSubParam": true
            },
            {
              "name": "context.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Dragged event</p>",
              "isSubParam": true
            },
            {
              "name": "context.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Currently over this resource</p>",
              "isSubParam": true
            },
            {
              "name": "context.startDate",
              "type": "Date",
              "description": "<p>Start date for current position</p>",
              "isSubParam": true
            },
            {
              "name": "context.endDate",
              "type": "Date",
              "description": "<p>End date for current position</p>",
              "isSubParam": true
            },
            {
              "name": "context.snapTo",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "context.snapTo.x",
              "type": "Number",
              "description": "<p>X to snap to</p>",
              "isSubParam": true
            },
            {
              "name": "context.snapTo.y",
              "type": "Number",
              "description": "<p>Y to snap to</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "constrainDragToResource",
          "description": "<p>Set to true to only allow dragging events within the same resource.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "constrainDragToTimeSlot",
          "description": "<p>Set to true to only allow dragging events to different resources, and disallow rescheduling by dragging.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "unifiedDrag",
          "description": "<p>When the host Scheduler is <code><a href=\"#Scheduler/view/mixin/EventSelection#config-multiEventSelect\">multiEventSelect</a>: true</code>\nthen, there are two modes of dragging <em>within the same Scheduler</em>.</p>\n<p>Non unified means that all selected events are dragged by the same number of resource rows.</p>\n<p>Unified means that all selected events are collected together and dragged as one, and are all dropped\non the same targeted resource row at the same targeted time.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "beforeEventDropFinalize",
          "description": "<p>Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting <code>context.async = true</code>\nin the listener, to show a confirmation popup etc.</p>\n<pre class=\"prettyprint source\"><code> scheduler.on('beforeeventdropfinalize', ({ context }) => {\n     context.async = true;\n     setTimeout(() => {\n         // async code don't forget to call finalize\n         context.finalize();\n     }, 1000);\n })\n</code></pre>\n<p>For synchronous one-time validation, simply set <code>context.valid</code> to true or false.</p>\n<pre class=\"prettyprint source\"><code> scheduler.on('beforeeventdropfinalize', ({ context }) => {\n     context.valid = false;\n })\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.async",
              "type": "Boolean",
              "description": "<p>Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)</p>",
              "isSubParam": true
            },
            {
              "name": "context.eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Event records being dragged</p>",
              "isSubParam": true
            },
            {
              "name": "context.assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignment records being dragged</p>",
              "isSubParam": true
            },
            {
              "name": "context.targetEventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record for drop target</p>",
              "isSubParam": true
            },
            {
              "name": "context.newResource",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record for drop target</p>",
              "isSubParam": true
            },
            {
              "name": "context.valid",
              "type": "Boolean",
              "description": "<p>Set this to <code>false</code> to abort the drop immediately.</p>",
              "isSubParam": true
            },
            {
              "name": "context.finalize",
              "type": "function",
              "description": "<p>Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one\nargument: pass <code>true</code> to update records, or <code>false</code> to ignore changes</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "afterEventDrop",
          "description": "<p>Fired on the owning Scheduler after event drop</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>"
            },
            {
              "name": "valid",
              "type": "Boolean"
            },
            {
              "name": "context",
              "type": "Object"
            }
          ],
          "onOwner": true
        },
        {
          "name": "eventDrop",
          "description": "<p>Fired on the owning Scheduler when an event is dropped</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>"
            },
            {
              "name": "externalDropTarget",
              "type": "HTMLElement",
              "description": "<p>The HTML element dropped upon, if drop happened on a valid external drop target</p>"
            },
            {
              "name": "isCopy",
              "type": "Boolean"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.targetEventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record for drop target</p>",
              "isSubParam": true
            },
            {
              "name": "context.newResource",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record for drop target</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeEventDrag",
          "description": "<p>Fired on the owning Scheduler before event dragging starts. Return <code>false</code> to prevent the action.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record the drag starts from</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record the drag starts from</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Event records being dragged</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignment records being dragged</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "eventDragStart",
          "description": "<p>Fired on the owning Scheduler when event dragging starts</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record the drag starts from</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Event records being dragged</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignment records being dragged</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "eventDrag",
          "description": "<p>Fired on the owning Scheduler when event is dragged</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Event records being dragged</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignment records being dragged</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>Start date for the current location</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>End date for the current location</p>"
            },
            {
              "name": "newResource",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource at the current location</p>"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.valid",
              "type": "Boolean",
              "description": "<p>Set this to <code>false</code> to signal that the current drop position is invalid.</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "eventDragAbort",
          "description": "<p>Fired on the owning Scheduler after an event drag operation has been aborted</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Event records being dragged</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignment records being dragged</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "eventDragReset",
          "description": "<p>Fired on the owning Scheduler after an event drag operation regardless of the operation being cancelled or not</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            }
          ],
          "onOwner": true
        }
      ],
      "functions": [
        {
          "name": "isValidDrop",
          "access": "private",
          "description": "<p>Checks if an event can be dropped on the specified position.</p>",
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Valid (true) or invalid (false)</p>"
          }
        },
        {
          "name": "updateRecords",
          "access": "private",
          "description": "<p>Update events being dragged.</p>",
          "parameters": [
            {
              "name": "context",
              "description": "<p>Drag data.</p>"
            }
          ],
          "scope": "instance",
          "async": true
        },
        {
          "name": "updateAssignments",
          "access": "private",
          "description": "<p>Update assignments being dragged</p>",
          "scope": "instance",
          "async": true
        },
        {
          "name": "getDragData",
          "access": "private",
          "description": "<p>Initializes drag data (dates, constraints, dragged events etc). Called when drag starts.</p>",
          "parameters": [
            {
              "name": "info"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*"
          }
        },
        {
          "name": "getRelatedRecords",
          "description": "<p>Provide your custom implementation of this to allow additional selected records to be dragged together with the original one.</p>",
          "parameters": [
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment about to be dragged</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Scheduler.model.AssignmentModel>",
            "description": "<p>An array of assignment records to drag together with the original</p>"
          }
        },
        {
          "name": "getCoordinate",
          "access": "private",
          "description": "<p>Get correct axis coordinate depending on schedulers mode (horizontal -&gt; x, vertical -&gt; y). Also takes milestone\nlayout into account.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Record being dragged</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element being dragged</p>"
            },
            {
              "name": "coord",
              "type": "Array.<Number>",
              "description": "<p>XY coordinates</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Number",
              "Array.<Number>"
            ],
            "description": "<p>X,Y or XY</p>"
          }
        },
        {
          "name": "resolveResource",
          "access": "private",
          "description": "<p>Get resource record occluded by the drag proxy.</p>",
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.ResourceModel"
          }
        }
      ]
    },
    {
      "name": "EventDragCreate",
      "modulePath": "Scheduler/feature/EventDragCreate",
      "classDescription": "<p>Feature that allows the user to create new events by dragging in empty parts of the scheduler rows.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/feature/EventDragCreate.js\"></div></p>\n<p>This feature is <strong>enabled</strong> by default.</p>\n<div class=\"note\">Incompatible with the <a href=\"#Scheduler/feature/EventDragSelect\">EventDragSelect</a> and\n<a href=\"#Scheduler/feature/Pan\">Pan</a> features. If either of those features are enabled, this feature has no effect.\n</div>\n<h2>Conditionally preventing drag creation</h2>\n<p>To conditionally prevent drag creation for a certain resource or a certain timespan, you listen for the\n<a href=\"#Scheduler/feature/EventDragCreate#event-beforeDragCreate\">beforeDragCreate</a> event, add your custom logic to it and return <code>false</code> to prevent the operation\nfrom starting. For example to not allow drag creation on the topmost resource:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    listeners : {\n        beforeDragCreate({ resource }) {\n            // Prevent drag creating on the topmost resource\n            if (resource === scheduler.resourceStore.first) {\n                return false;\n            }\n        }\n    }\n});\n</code></pre>",
      "extends": [
        "Scheduler/feature/base/DragCreateBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventDragCreate.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "classType": "eventDragCreate",
      "configs": [
        {
          "name": "validatorFn",
          "description": "<p>An empty function by default, but provided so that you can perform custom validation on the event being\ncreated. Return <code>true</code> if the new event is valid, <code>false</code> to prevent an event being created.</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if this validation passes</p>"
          },
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>A drag create context</p>"
            },
            {
              "name": "context.startDate",
              "type": "Date",
              "description": "<p>Event start date</p>",
              "isSubParam": true
            },
            {
              "name": "context.endDate",
              "type": "Date",
              "description": "<p>Event end date</p>",
              "isSubParam": true
            },
            {
              "name": "context.record",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>",
              "isSubParam": true
            },
            {
              "name": "context.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event object</p>"
            }
          ]
        },
        {
          "name": "lockLayout",
          "description": "<p>Locks the layout during drag create, overriding the default behaviour that uses the same rendering\npathway for drag creation as for already existing events.</p>\n<p>This more closely resembles the behaviour of versions prior to 4.2.0.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "events": [
        {
          "name": "dragCreateEnd",
          "description": "<p>Fires on the owning Scheduler after the new event has been created.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new <code>EventModel</code> record.</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource for the row in which the event is being\ncreated.</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>The ending mouseup event.</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement",
              "description": "<p>The DOM element representing the newly created event un the UI.</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeDragCreate",
          "description": "<p>Fires on the owning Scheduler at the beginning of the drag gesture. Returning <code>false</code> from a listener prevents\nthe drag create operation from starting.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    listeners : {\n        beforeDragCreate({ date }) {\n            // Prevent drag creating on odd dates\n            if (date.getDate() % 2 === 1) {\n                return false;\n            }\n        }\n    }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The datetime associated with the drag start point.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "dragCreateStart",
          "description": "<p>Fires on the owning Scheduler after the drag start has created a proxy element.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record being created</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement",
              "description": "<p>The element representing the new event.</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeDragCreateFinalize",
          "description": "<p>Fires on the owning Scheduler to allow implementer to prevent immediate finalization by setting\n<code>data.context.async = true</code> in the listener, to show a confirmation popup etc</p>\n<pre class=\"prettyprint source lang-javascript\"><code> scheduler.on('beforedragcreatefinalize', ({context}) => {\n     context.async = true;\n     setTimeout(() => {\n         // async code don't forget to call finalize\n         context.finalize();\n     }, 1000);\n })\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record being created</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement",
              "description": "<p>Proxy element, representing future event</p>"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.async",
              "type": "Boolean",
              "description": "<p>Set true to handle drag create asynchronously (e.g. to wait for user\nconfirmation)</p>",
              "isSubParam": true
            },
            {
              "name": "context.finalize",
              "type": "function",
              "description": "<p>Call this method to finalize drag create. This method accepts one\nargument: pass true to update records, or false, to ignore changes</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "afterDragCreate",
          "description": "<p>Fires on the owning Scheduler at the end of the drag create gesture whether or not\na new event was created by the gesture.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record being created</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement",
              "description": "<p>The element representing the created event record</p>"
            }
          ],
          "onOwner": true
        }
      ],
      "functions": [
        {
          "name": "createEventRecord",
          "access": "private",
          "description": "<p>Creates an event by the event object coordinates</p>",
          "parameters": [
            {
              "name": "drag",
              "type": "Object",
              "description": "<p>The Bryntum event object</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "EventDragSelect",
      "modulePath": "Scheduler/feature/EventDragSelect",
      "classDescription": "<p>Enables users to click and drag to select events (or assignments in multi assignment mode) inside the Scheduler's\ntimeline.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/feature/EventDragSelect.js\"></div></p>\n<p>This feature is <strong>off</strong> by default. For info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>\n<p><strong>NOTE:</strong> Incompatible with the <a href=\"#Scheduler/feature/EventDragCreate\">EventDragCreate</a> and the <a href=\"#Scheduler/feature/Pan\">Pan</a> features.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n  features : {\n    eventDragSelect : true,\n    eventDragCreate : false\n  }\n});\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "mixes": [
        "Core/mixin/Delayable"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventDragSelect.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "dragselection"
      },
      "classType": "eventDragSelect"
    },
    {
      "name": "EventEdit",
      "modulePath": "Scheduler/feature/EventEdit",
      "classDescription": "<p>Feature that displays a popup containing widgets for editing event data.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/feature/EventEdit.js\"></div></p>\n<p>To customize its contents you can:</p>\n<ul>\n<li>Reconfigure built in widgets by providing override configs in the <a href=\"#Scheduler/feature/base/EditBase#config-items\">items</a> config.</li>\n<li>Change the date format of the date &amp; time fields: <a href=\"#Scheduler/feature/base/EditBase#config-dateFormat\">dateFormat</a> and <a href=\"#Scheduler/feature/base/EditBase#config-timeFormat\">timeFormat</a></li>\n<li>Configure provided widgets in the editor and add your own in the <a href=\"#Scheduler/feature/base/EditBase#config-items\">items</a> config.</li>\n<li>Remove fields related to recurring events configuration (such as <code>recurrenceCombo</code>) by setting <a href=\"#Scheduler/feature/mixin/RecurringEventEdit#config-showRecurringUI\">showRecurringUI</a> config to <code>false</code>.</li>\n<li>Advanced: Reconfigure the whole editor widget using <a href=\"#Scheduler/feature/EventEdit#config-editorConfig\">editorConfig</a></li>\n</ul>\n<h2>Built in widgets</h2>\n<p>The built in widgets are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>nameField</code></td>\n<td><a href=\"#Core/widget/TextField\">TextField</a></td>\n<td>100</td>\n<td>Edit name</td>\n</tr>\n<tr>\n<td><code>resourceField</code></td>\n<td><a href=\"#Scheduler/widget/ResourceCombo\">ResourceCombo</a></td>\n<td>200</td>\n<td>Pick resource(s)</td>\n</tr>\n<tr>\n<td><code>startDateField</code></td>\n<td><a href=\"#Core/widget/DateField\">DateField</a></td>\n<td>300</td>\n<td>Edit startDate (date part)</td>\n</tr>\n<tr>\n<td><code>startTimeField</code></td>\n<td><a href=\"#Core/widget/TimeField\">TimeField</a></td>\n<td>400</td>\n<td>Edit startDate (time part)</td>\n</tr>\n<tr>\n<td><code>endDateField</code></td>\n<td><a href=\"#Core/widget/DateField\">DateField</a></td>\n<td>500</td>\n<td>Edit endDate (date part)</td>\n</tr>\n<tr>\n<td><code>endTimeField</code></td>\n<td><a href=\"#Core/widget/TimeField\">TimeField</a></td>\n<td>600</td>\n<td>Edit endDate (time part)</td>\n</tr>\n<tr>\n<td><code>recurrenceCombo</code></td>\n<td><a href=\"#Scheduler/view/recurrence/field/RecurrenceCombo\">RecurrenceCombo</a></td>\n<td>700</td>\n<td>Select recurrence rule (only visible if recurrence is used)</td>\n</tr>\n<tr>\n<td><code>editRecurrenceButton</code></td>\n<td><a href=\"#Scheduler/view/recurrence/RecurrenceLegendButton\">RecurrenceLegendButton</a></td>\n<td>800</td>\n<td>Edit the recurrence rule  (only visible if recurrence is used)</td>\n</tr>\n</tbody>\n</table>\n<p>The built in buttons are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>saveButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>100</td>\n<td>Save event button on the bbar</td>\n</tr>\n<tr>\n<td><code>deleteButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>200</td>\n<td>Delete event button on the bbar</td>\n</tr>\n<tr>\n<td><code>cancelButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>300</td>\n<td>Cancel event editing button on the bbar</td>\n</tr>\n</tbody>\n</table>\n<h2>Removing a built in item</h2>\n<p>To remove a built in widget, specify its <code>ref</code> as <code>null</code> in the <code>items</code> config:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit : {\n            items : {\n                // Remove the start time field\n                startTimeField : null\n            }\n        }\n    }\n})\n</code></pre>\n<p>Bottom buttons may be hidden using <code>bbar</code> config passed to <code>editorConfig</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit : {\n            editorConfig : {\n                bbar : {\n                    items : {\n                        deleteButton : null\n                    }\n                }\n            }\n        }\n    }\n})\n</code></pre>\n<p>To remove fields related to recurring events configuration (such as <code>recurrenceCombo</code>), set <a href=\"#Scheduler/feature/mixin/RecurringEventEdit#config-showRecurringUI\">showRecurringUI</a> config to <code>false</code>.</p>\n<h2>Customizing a built in widget</h2>\n<p>To customize a built in widget, use its <code>ref</code> as the key in the <code>items</code> config and specify the configs you want\nto change (they will merge with the widgets default configs):</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit : {\n            items : {\n                // ref for an existing field\n                nameField : {\n                    // Change its label\n                    label : 'Description'\n                }\n            }\n        }\n    }\n})\n</code></pre>\n<h2>Adding custom widgets</h2>\n<p>To add a custom widget, add an entry to the <code>items</code> config. The <code>name</code> property links the input field to a field in\nthe loaded event record:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit : {\n            items : {\n                // Key to use as fields ref (for easier retrieval later)\n                color : {\n                    type  : 'combo',\n                    label : 'Color',\n                    items : ['red', 'green', 'blue'],\n                    // name will be used to link to a field in the event record when loading and saving in the editor\n                    name  : 'eventColor'\n                }\n            }\n        }\n    }\n})\n</code></pre>\n<p>For more info on customizing the event editor, please see &quot;Customize event editor&quot; guide.</p>\n<p>This feature is <strong>enabled</strong> by default</p>",
      "extends": [
        "Scheduler/feature/base/EditBase"
      ],
      "mixes": [
        "Scheduler/feature/mixin/RecurringEventEdit"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventEdit.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "eventeditor"
      },
      "classType": "eventEdit",
      "configs": [
        {
          "name": "triggerEvent",
          "description": "<p>The event that shall trigger showing the editor. Defaults to <code>eventdblclick</code>, set to `` or null to disable editing of existing events.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "eventdblclick",
          "category": "Editor"
        },
        {
          "name": "typeField",
          "description": "<p>The data field in the model that defines the eventType.\nApplied as class (b-eventtype-xx) to the editors element, to allow showing/hiding fields depending on\neventType. Dynamic toggling of fields in the editor is activated by adding an <code>eventTypeField</code> field to\nyour widget:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n   features : {\n      eventEdit : {\n          items : {\n              eventTypeField : {\n                 type  : 'combo',\n                 name  : 'eventType',\n                 label : 'Type',\n                 items : ['Appointment', 'Internal', 'Meeting']\n              }\n          }\n       }\n    }\n});\n</code></pre>\n<p>Note, your event model class also must declare this field:</p>\n<pre class=\"prettyprint source lang-javascript\"><code> class MyEvent extends EventModel {\n     static get fields() {\n         return [\n             { name : 'eventType' }\n         ];\n     }\n }\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "eventType",
          "category": "Editor"
        },
        {
          "name": "readOnly",
          "description": "<p>Specify <code>true</code> to put the editor in read only mode.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "editorConfig",
          "description": "<p>The configuration for the internal editor widget. With this config you can control the <em>type</em>\nof editor (defaults to <code>Popup</code>) and which widgets to show,\nchange the items in the <code>bbar</code>, or change whether the popup should be modal etc.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit  : {\n            editorConfig : {\n                modal  : true,\n                cls    : 'my-editor' // A CSS class,\n                items  : {\n                    owner : {\n                        weight : -100, // Will sort above system-supplied fields which are weight 100 to 800\n                        type   : 'usercombo',\n                        name   : 'owner',\n                        label  : 'Owner'\n                    },\n                    agreement : {\n                        weight : 1000, // Will sort below system-supplied fields which are weight 100 to 800\n                        type   : 'checkbox',\n                        name   : 'agreement',\n                        label  : 'Agree to terms'\n                    }\n                },\n                bbar : {\n                    items : {\n                        deleteButton : {\n                            hidden : true\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Or to use your own custom editor:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit  : {\n            editorConfig : {\n                type : 'myCustomEditorType'\n            }\n        }\n    }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Editor"
        }
      ],
      "properties": [
        {
          "name": "eventRecord",
          "description": "<p>The current <a href=\"#Scheduler/model/EventModel\">EventModel</a> record, which is being edited by the event editor.</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "nameField",
          "description": "<p>Reference to the name field, if used</p>",
          "type": "Core.widget.TextField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "resourceField",
          "description": "<p>Reference to the resource field, if used</p>",
          "type": "Core.widget.Combo",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "startDateField",
          "description": "<p>Reference to the start date field, if used</p>",
          "type": "Core.widget.DateField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "startTimeField",
          "description": "<p>Reference to the start time field, if used</p>",
          "type": "Core.widget.TimeField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "endDateField",
          "description": "<p>Reference to the end date field, if used</p>",
          "type": "Core.widget.DateField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "endTimeField",
          "description": "<p>Reference to the end time field, if used</p>",
          "type": "Core.widget.TimeField",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "saveButton",
          "description": "<p>Reference to the save button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "deleteButton",
          "description": "<p>Reference to the delete button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "cancelButton",
          "description": "<p>Reference to the cancel button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "readOnly",
          "description": "<p>Get/set readonly state</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "editor",
          "description": "<p>Returns the editor widget representing this feature</p>",
          "type": "Core.widget.Popup",
          "scope": "instance"
        },
        {
          "name": "isEditing",
          "description": "<p>Returns true if the editor is currently active</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ],
      "events": [
        {
          "name": "eventEditBeforeSetRecord",
          "description": "<p>Fired before the editor will load the event record data into its input fields. This is useful if you\nwant to modify the fields before data is loaded (e.g. set some input field to be readonly)</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Container",
              "description": "<p>The editor widget</p>"
            },
            {
              "name": "record",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeEventEdit",
          "description": "<p>Fires on the owning Scheduler before an event is displayed in an editor.\nThis may be listened for to allow an application to take over event editing duties. Returning <code>false</code>\nstops the default editing UI from being shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "eventEdit",
              "type": "Scheduler.feature.EventEdit",
              "description": "<p>The eventEdit feature</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record about to be shown in the event editor.</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The Resource record for the event. If the event\nis being created, it will not contain a resource, so this parameter specifies the resource the\nevent is being created for.</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement",
              "description": "<p>The element which represents the event in the scheduler display.</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "beforeEventEditShow",
          "description": "<p>Fires on the owning Scheduler when the editor for an event is available but before it is populated with\ndata and shown. Allows manipulating fields etc.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "eventEdit",
              "type": "Scheduler.feature.EventEdit",
              "description": "<p>The eventEdit feature</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record about to be shown in the event editor.</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The Resource record for the event. If the event\nis being created, it will not contain a resource, so this parameter specifies the resource the\nevent is being created for.</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement",
              "description": "<p>The element which represents the event in the scheduler display.</p>"
            },
            {
              "name": "editor",
              "type": "Core.widget.Popup",
              "description": "<p>The editor</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "afterEventSave",
          "description": "<p>Fires on the owning Scheduler after an event is successfully saved</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record about to be saved</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeEventSave",
          "description": "<p>Fires on the owning Scheduler before an event is saved, return <code>false</code> to prevent the save.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record about to be saved</p>"
            },
            {
              "name": "resourceRecords",
              "type": "Array.<Scheduler.model.ResourceModel>",
              "description": "<p>The resources to which the event is assigned</p>"
            },
            {
              "name": "values",
              "type": "Object",
              "description": "<p>The new values</p>"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Extended save context:</p>"
            },
            {
              "name": "context.async",
              "type": "Boolean",
              "description": "<p>Set this to <code>true</code> in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "context.finalize",
              "type": "function",
              "description": "<p>Function to call to finalize the save. Used when <code>async</code> is <code>true</code>. Provide <code>false</code> to the function to prevent the save.</p>",
              "isSubParam": true
            }
          ],
          "preventable": true,
          "onOwner": true
        }
      ],
      "functions": [
        {
          "name": "editEvent",
          "description": "<p>Opens an editor for the passed event. This function is exposed on Scheduler and can be called as\n<code>scheduler.editEvent()</code>.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event to edit</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The Resource record for the event.\nThis parameter is needed if the event is newly created for a resource and has not been assigned, or when using\nmulti assignment.</p>",
              "optional": true
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to anchor editor to (defaults to events element)</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "onOwner": true
        },
        {
          "name": "loadRecord",
          "access": "private",
          "description": "<p>Sets fields values from record being edited</p>",
          "scope": "instance"
        },
        {
          "name": "save",
          "access": "private",
          "description": "<p>Saves the changes (applies them to record if valid, if invalid editor stays open)</p>",
          "scope": "instance",
          "fires": [
            "event:beforeEventSave",
            "event:beforeEventAdd",
            "event:afterEventSave"
          ],
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "deleteEvent",
          "access": "private",
          "description": "<p>Delete event being edited</p>",
          "scope": "instance",
          "fires": [
            "event:beforeEventDelete"
          ],
          "async": true,
          "returns": {
            "type": "Promise"
          }
        }
      ]
    },
    {
      "name": "EventFilter",
      "modulePath": "Scheduler/feature/EventFilter",
      "classDescription": "<p>Adds event filter menu items to the timeline header context menu.</p>\n<p>This feature is <strong>enabled</strong> by default</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "let scheduler = new Scheduler({\n  features : {\n    eventFilter : true // `true` by default, set to `false` to disable the feature and remove the menu item from the timeline header\n  }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventFilter.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "classType": "eventFilter",
      "externalExamples": [
        "Scheduler/feature/EventFilter.js"
      ],
      "functions": [
        {
          "name": "populateTimeAxisHeaderMenu",
          "access": "internal",
          "description": "<p>Populates the header context menu items.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "EventMenu",
      "modulePath": "Scheduler/feature/EventMenu",
      "classDescription": "<p>Displays a context menu for events. Items are populated by other features and/or application code.</p>\n<h3>Default event menu items</h3>\n<p>Here is the list of menu items provided by the feature and populated by the other features:</p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Text</th>\n<th>Weight</th>\n<th>Feature</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>editEvent</code></td>\n<td>Edit event</td>\n<td>100</td>\n<td><a href=\"#Scheduler/feature/EventEdit\">EventEdit</a></td>\n<td>Edit in the event editor. Hidden when read-only</td>\n</tr>\n<tr>\n<td><code>copyEvent</code></td>\n<td>Copy event</td>\n<td>110</td>\n<td><a href=\"#Scheduler/feature/EventCopyPaste\">EventCopyPaste</a></td>\n<td>Copy event or assignment. Hidden when read-only</td>\n</tr>\n<tr>\n<td><code>cutEvent </code></td>\n<td>Cut event</td>\n<td>120</td>\n<td><a href=\"#Scheduler/feature/EventCopyPaste\">EventCopyPaste</a></td>\n<td>Cut event or assignment. Hidden when read-only</td>\n</tr>\n<tr>\n<td><code>deleteEvent</code></td>\n<td>Delete event</td>\n<td>200</td>\n<td><em>This feature</em></td>\n<td>Remove event. Hidden when read-only</td>\n</tr>\n<tr>\n<td><code>unassignEvent</code></td>\n<td>Unassign event</td>\n<td>300</td>\n<td><em>This feature</em></td>\n<td>Unassign event. Hidden when read-only, shown for multi-assignment</td>\n</tr>\n</tbody>\n</table>\n<h3>Customizing the menu items</h3>\n<p>The menu items in the Event menu can be customized, existing items can be changed or removed,\nand new items can be added. This is handled using the <code>items</code> config of the feature.</p>\n<p>Add extra items for all events:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventMenu : {\n            items : {\n                extraItem : {\n                    text : 'Extra',\n                    icon : 'b-fa b-fa-fw b-fa-flag',\n                    onItem({eventRecord}) {\n                        eventRecord.flagged = true;\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Remove existing items:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventMenu : {\n            items : {\n                deleteEvent   : false,\n                unassignEvent : false\n            }\n        }\n    }\n});\n</code></pre>\n<p>Customize existing item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventMenu : {\n            items : {\n                deleteEvent : {\n                    text : 'Delete booking'\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Manipulate existing items for all events or specific events:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventMenu : {\n            // Process items before menu is shown\n            processItems({eventRecord, items}) {\n                 // Push an extra item for conferences\n                 if (eventRecord.type === 'conference') {\n                     items.showSessionItem = {\n                         text : 'Show sessions',\n                         onItem({eventRecord}) {\n                             // ...\n                         }\n                     };\n                 }\n\n                 // Do not show menu for secret events\n                 if (eventRecord.type === 'secret') {\n                     return false;\n                 }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Full information of the menu customization can be found in the &quot;Customizing the Event menu, the Schedule menu, and the TimeAxisHeader menu&quot; guide.</p>\n<p>This feature is <strong>enabled</strong> by default</p>",
      "extends": [
        "Scheduler/feature/base/TimeSpanMenuBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventMenu.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "eventmenu"
      },
      "classType": "eventMenu",
      "configs": [
        {
          "name": "processItems",
          "description": "<p>A function called before displaying the menu that allows manipulations of its items.\nReturning <code>false</code> from this function prevents the menu being shown.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features         : {\n   eventMenu : {\n        processItems({ items, eventRecord, assignmentRecord, resourceRecord }) {\n            // Add or hide existing items here as needed\n            items.myAction = {\n                text   : 'Cool action',\n                icon   : 'b-fa b-fa-fw b-fa-ban',\n                onItem : () => console.log(`Clicked ${eventRecord.name}`),\n                weight : 1000 // Move to end\n            };\n\n           if (!eventRecord.allowDelete) {\n                items.deleteEvent.hidden = true;\n            }\n        }\n    }\n},\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>An object with information about the menu being shown</p>"
            },
            {
              "name": "context.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record representing the current event</p>",
              "isSubParam": true
            },
            {
              "name": "context.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The record representing the current resource</p>",
              "isSubParam": true
            },
            {
              "name": "context.assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment record</p>",
              "isSubParam": true
            },
            {
              "name": "context.items",
              "type": "Object",
              "description": "<p>An object containing the <a href=\"#Core/widget/MenuItem\">menu item</a> configs keyed by their id</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The DOM event object that triggered the show</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "events": [
        {
          "name": "eventMenuBeforeShow",
          "description": "<p>This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items\nto show in the same way as in <code>processItems</code>. Returning <code>false</code> from a listener prevents the menu from\nbeing shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record for which the menu was triggered</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record, if assignments are used</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Pointer event which triggered the context menu (if any)</p>",
              "optional": true
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "eventMenuItem",
          "description": "<p>This event fires on the owning Scheduler when an item is selected in the context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "item",
              "type": "Core.widget.MenuItem"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record, if assignments are used</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement"
            }
          ],
          "onOwner": true
        },
        {
          "name": "eventMenuShow",
          "description": "<p>This event fires on the owning Scheduler after showing the context menu for an event</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record for which the menu was triggered</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record, if assignments are used</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement"
            }
          ],
          "onOwner": true
        }
      ],
      "functions": [
        {
          "name": "showContextMenuFor",
          "description": "<p>Shows context menu for the provided event. If record is not rendered (outside of time span/filtered)\nmenu won't appear.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record to show menu for.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "optional": true
            },
            {
              "name": "options.targetElement",
              "type": "HTMLElement",
              "description": "<p>Element to align context menu to.</p>",
              "isSubParam": true
            },
            {
              "name": "options.event",
              "type": "MouseEvent",
              "description": "<p>Browser event.\nIf provided menu will be aligned according to clientX/clientY coordinates.\nIf omitted, context menu will be centered to event element.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "EventResize",
      "modulePath": "Scheduler/feature/EventResize",
      "classDescription": "<p>Feature that allows resizing an event by dragging its end.</p>\n<p>By default it displays a tooltip with the new start and end dates, formatted using\n<a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat\">displayDateFormat</a>.</p>\n<h2>Customizing the resize tooltip</h2>\n<p>To show custom HTML in the tooltip, please see the <a href=\"#Scheduler/feature/EventResize#config-tooltipTemplate\">tooltipTemplate</a> config. Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventResize : {\n    // A minimal end date tooltip\n    tooltipTemplate : ({ record, endDate }) => {\n        return DateHelper.format(endDate, 'MMM D');\n    }\n}\n</code></pre>\n<p>This feature is <strong>enabled</strong> by default</p>\n<p>This feature is extended with a few overrides by the Gantt's <code>TaskResize</code> feature.</p>\n<p>This feature updates the event's <code>startDate</code> or <code>endDate</code> live in order to leverage the\nrendering pathway to always yield a correct appearance. The changes are done in\n<a href=\"#Core/data/Model#function-beginBatch\">batched</a> mode so that changes do not become\neligible for data synchronization or propagation until the operation is completed.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventResize.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "externalExamples": [
        "Scheduler/feature/EventResize.js"
      ],
      "classType": "eventResize",
      "events": [
        {
          "name": "beforeEventResize",
          "description": "<p>Fired on the owning Scheduler before resizing starts. Return <code>false</code> to prevent the action.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record being resized</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record the resize starts within</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "eventResizeStart",
          "description": "<p>Fires on the owning Scheduler when event resizing starts</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record being resized</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record the resize starts within</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "eventPartialResize",
          "description": "<p>Fires on the owning Scheduler on each resize move event</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record being resized</p>"
            },
            {
              "name": "startDate",
              "type": "Date"
            },
            {
              "name": "endDate",
              "type": "Date"
            },
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeEventResizeFinalize",
          "description": "<p>Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting <code>data.context.async = true</code>\nin the listener, to show a confirmation popup etc</p>\n<pre class=\"prettyprint source\"><code> scheduler.on('beforeeventresizefinalize', ({context}) => {\n     context.async = true;\n     setTimeout(() => {\n         // async code don't forget to call finalize\n         context.finalize();\n     }, 1000);\n })\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.async",
              "type": "Boolean",
              "description": "<p>Set true to handle resize asynchronously (e.g. to wait for user confirmation)</p>",
              "isSubParam": true
            },
            {
              "name": "context.finalize",
              "type": "function",
              "description": "<p>Call this method to finalize resize. This method accepts one argument:\npass <code>true</code> to update records, or <code>false</code>, to ignore changes</p>",
              "isSubParam": true
            }
          ],
          "onOwner": true
        },
        {
          "name": "eventResizeEnd",
          "description": "<p>Fires on the owning Scheduler after the resizing gesture has finished.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>Scheduler instance</p>"
            },
            {
              "name": "changed",
              "type": "Boolean",
              "description": "<p>Shows if the record has been changed by the resize action</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record being resized</p>"
            }
          ],
          "onOwner": true
        }
      ],
      "configs": [
        {
          "name": "leftHandle",
          "description": "<p>Use left handle when resizing. Only applies when owning client's <code>direction</code> is 'horizontal'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "rightHandle",
          "description": "<p>Use right handle when resizing. Only applies when owning client's <code>direction</code> is 'horizontal'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "topHandle",
          "description": "<p>Use top handle when resizing. Only applies when owning client's direction` is 'vertical'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "bottomHandle",
          "description": "<p>Use bottom handle when resizing. Only applies when owning client's <code>direction</code> is 'vertical'</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "handleSize",
          "description": "<p>Resizing handle size</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10
        },
        {
          "name": "dynamicHandleSize",
          "description": "<p>Automatically shrink virtual handles when available space &lt; handleSize. The virtual handles will\ndecrease towards width/height 1, reserving space between opposite handles to for example leave room for\ndragging. To configure reserved space, see <a href=\"#Scheduler/feature/EventResize#config-reservedSpace\">reservedSpace</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "allowResizeToZero",
          "description": "<p>Set to true to allow resizing to a zero-duration span</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "reservedSpace",
          "description": "<p>Room in px to leave unoccupied by handles when shrinking them dynamically (see\n<a href=\"#Scheduler/feature/EventResize#config-dynamicHandleSize\">dynamicHandleSize</a>).</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "touchHandleSize",
          "description": "<p>Resizing handle size on touch devices</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 30
        },
        {
          "name": "dragThreshold",
          "description": "<p>The amount of pixels to move pointer/mouse before it counts as a drag operation.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "showTooltip",
          "description": "<p><code>false</code> to not show a tooltip while resizing</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showExactResizePosition",
          "description": "<p>true to see exact event length during resizing</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "validatorFn",
          "description": "<p>An empty function by default, but provided so that you can perform custom validation on\nthe item being resized. Return true if the new duration is valid, false to signal that it is not.</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Boolean"
          },
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>The resize context, contains the record &amp; dates.</p>"
            },
            {
              "name": "context.record",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The record being resized.</p>",
              "isSubParam": true
            },
            {
              "name": "context.startDate",
              "type": "Date",
              "description": "<p>The new start date.</p>",
              "isSubParam": true
            },
            {
              "name": "context.endDate",
              "type": "Date",
              "description": "<p>The new start date.</p>",
              "isSubParam": true
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser Event object</p>"
            }
          ]
        },
        {
          "name": "validatorFnThisObj",
          "description": "<p><code>this</code> reference for the validatorFn</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "tip",
          "description": "<p>If a tooltip is required to illustrate the resize, specify this as <code>true</code>, or a config\nobject for the <a href=\"#Core/widget/Tooltip\">Tooltip</a>.</p>",
          "type": [
            "Core.widget.Tooltip",
            "Object"
          ],
          "scope": "inner"
        },
        {
          "name": "tooltipTemplate",
          "description": "<p>A template function returning the content to show during a resize operation.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>A context object</p>"
            },
            {
              "name": "context.startDate",
              "type": "Date",
              "description": "<p>New start date</p>",
              "isSubParam": true
            },
            {
              "name": "context.endDate",
              "type": "Date",
              "description": "<p>New end date</p>",
              "isSubParam": true
            },
            {
              "name": "context.record",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The record being resized</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "tip",
          "description": "<p>Setting this property may change the configuration of the <a href=\"#Scheduler/feature/EventResize#config-tip\">tip</a>, or\ncause it to be destroyed if <code>null</code> is passed.</p>\n<p>Reading this property returns the Tooltip instance.</p>",
          "type": [
            "Core.widget.Tooltip",
            "Object"
          ],
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "checkResizeHandles",
          "access": "private",
          "description": "<p>Check if mouse is over a resize handle (virtual). If so, highlight.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "highlightHandle",
          "access": "private",
          "description": "<p>Highlights handles (applies css that changes cursor).</p>",
          "scope": "instance"
        },
        {
          "name": "unHighlightHandle",
          "access": "private",
          "description": "<p>Unhighlight handles (removes css).</p>",
          "scope": "instance"
        },
        {
          "name": "isOverLeftHandle",
          "access": "private",
          "description": "<p>Check if over left handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over left handle, otherwise false</p>"
          }
        },
        {
          "name": "isOverRightHandle",
          "access": "private",
          "description": "<p>Check if over right handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over left handle, otherwise false</p>"
          }
        },
        {
          "name": "isOverTopHandle",
          "access": "private",
          "description": "<p>Check if over top handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over top handle, otherwise false</p>"
          }
        },
        {
          "name": "isOverBottomHandle",
          "access": "private",
          "description": "<p>Check if over bottom handle (virtual).</p>",
          "parameters": [
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>MouseEvent</p>"
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "<p>The current target element</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns true if mouse is over bottom handle, otherwise false</p>"
          }
        }
      ]
    },
    {
      "name": "EventTooltip",
      "modulePath": "Scheduler/feature/EventTooltip",
      "classDescription": "<p>Displays a tooltip when hovering events. The template used to render the tooltip can be customized, see <a href=\"#Scheduler/feature/EventTooltip#config-template\">template</a>.\nConfig options are also applied to the tooltip shown, see <a href=\"#Core/widget/Tooltip\">Tooltip</a> for available options.</p>\n<h2>Showing local data</h2>\n<p>To show a basic &quot;local&quot; tooltip (with data available in the Event record) upon hover:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n  features : {\n    eventTooltip : {\n        // Tooltip configs can be used here\n        align : 'l-r' // Align left to right,\n        // A custom HTML template\n        template : data => `&lt;dl>\n          &lt;dt>Assigned to:&lt;/dt>\n             &lt;dt>Time:&lt;/dt>\n             &lt;dd>\n                 ${DateHelper.format(data.eventRecord.startDate, 'LT')} - ${DateHelper.format(data.eventRecord.endDate, 'LT')}\n             &lt;/dd>\n             ${data.eventRecord.get('note') ? `&lt;dt>Note:&lt;/dt>&lt;dd>${data.eventRecord.note}&lt;/dd>` : ''}\n\n             ${data.eventRecord.get('image') ? `&lt;dt>Image:&lt;/dt>&lt;dd>&lt;img class=&quot;image&quot; src=&quot;${data.eventRecord.get('image')}&quot;/>&lt;/dd>` : ''}\n         &lt;/dl>`\n    }\n  }\n});\n</code></pre>\n<h2>Showing remotely loaded data</h2>\n<p>Loading remote data into the event tooltip is easy. Simply use the <a href=\"#Scheduler/feature/EventTooltip#config-template\">template</a> and return a Promise which yields the content to show.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n  features : {\n    eventTooltip : {\n       template : ({ eventRecord }) => AjaxHelper.get(`./fakeServer?name=${eventRecord.name}`).then(response => response.text())\n    }\n  }\n});\n</code></pre>\n<p>This feature is <strong>enabled</strong> by default</p>\n<p>By default, the tooltip <a href=\"#Core/widget/Widget#config-scrollAction\">realigns on scroll</a>\nmeaning that it will stay aligned with its target should a scroll interaction make the target move.</p>\n<p>If this is causing performance issues in a Scheduler, such as if there are many dozens of events\nvisible, you can configure this feature with <code>scrollAction: 'hide'</code>. This feature's configuration is\napplied to the tooltip, so that will mean that the tooltip will hide if its target is moved by a\nscroll interaction.</p>",
      "extends": [
        "Scheduler/feature/base/TooltipBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventTooltip.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "externalExamples": [
        "Scheduler/feature/EventTooltip.js"
      ],
      "classType": "eventTooltip",
      "configs": [
        {
          "name": "template",
          "description": "<p>A function which receives data about the event and returns a string,\nor a Promise yielding a string (for async tooltips), to be displayed in the tooltip.\nThis method will be called with an object containing the fields below</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "data",
              "type": "Object"
            },
            {
              "name": "data.eventRecord",
              "type": "Scheduler.model.EventModel",
              "isSubParam": true
            },
            {
              "name": "data.startDate",
              "type": "Date",
              "isSubParam": true
            },
            {
              "name": "data.endDate",
              "type": "Date",
              "isSubParam": true
            },
            {
              "name": "data.startText",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "data.endText",
              "type": "String",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "scrollAction",
          "description": "<p>Defines what to do if document is scrolled while the tooltip is visible.</p>\n<p>Valid values: ´null´: do nothing, ´hide´: hide the tooltip or ´realign´: realign to the target if possible.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "hide"
        }
      ]
    },
    {
      "name": "GroupSummary",
      "modulePath": "Scheduler/feature/GroupSummary",
      "classDescription": "<p>A special version of the Grid GroupSummary feature that enables summaries within scheduler. To use a single summary\nit is easiest to configure <a href=\"#Scheduler/feature/GroupSummary#config-renderer\">renderer</a>, for multiple summaries see <a href=\"#Scheduler/feature/GroupSummary#config-summaries\">summaries</a>.</p>\n<p>This feature is <strong>disabled</strong> by default. It is <strong>not</strong> supported in vertical mode.</p>",
      "extends": [
        "Grid/feature/GroupSummary"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "GroupSummary.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "typings": {
        "Grid/feature/GroupSummary": "Grid/feature/GridGroupSummary"
      },
      "classType": "groupSummary",
      "externalExamples": [
        "Scheduler/feature/GroupSummary.js"
      ],
      "demo": {
        "product": "scheduler",
        "demo": "groupsummary"
      },
      "configs": [
        {
          "name": "showTooltip",
          "description": "<p>Show tooltip containing summary values and labels</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "summaries",
          "description": "<p>Array of summary configs which consists of a label and a <a href=\"#Scheduler/feature/GroupSummary#config-renderer\">renderer</a> function</p>\n<pre class=\"prettyprint source\"><code> summaries : [\n     {\n        label : 'Label',\n        renderer : ({ startDate, endDate, eventStore, resourceStore, events, resources, groupRecord, groupField, groupValue }) => {\n            // return display value\n            returns '&lt;div>Renderer output&lt;/div>';\n        }\n     }\n ]\n</code></pre>",
          "type": "Array.<Object>",
          "scope": "inner"
        },
        {
          "name": "renderer",
          "description": "<p>Renderer function for a single time axis tick in a group summary row.\nShould calculate a sum and return HTML as a result.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    features : {\n        groupSummary : {\n            renderer : ({ startDate, endDate, eventStore, resourceStore, events, resources, groupRecord, groupField, groupValue }) => {\n                // return display value\n                returns '&lt;div>Renderer output&lt;/div>';\n            }\n        }\n    }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "String",
            "description": "<p>Html content</p>"
          },
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>Tick start date</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>Tick end date</p>"
            },
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Events which belong to the group</p>"
            },
            {
              "name": "resources",
              "type": "Array.<Scheduler.model.ResourceModel>",
              "description": "<p>Resources which belong to the group</p>"
            },
            {
              "name": "eventStore",
              "type": "Scheduler.data.EventStore",
              "description": "<p>Event store</p>"
            },
            {
              "name": "resourceStore",
              "type": "Scheduler.data.ResourceStore",
              "description": "<p>Resource store</p>"
            },
            {
              "name": "groupRecord",
              "type": "Core.data.Model",
              "description": "<p>Current groups header row record</p>"
            },
            {
              "name": "groupField",
              "type": "String",
              "description": "<p>Current groups field name</p>"
            },
            {
              "name": "groupValue",
              "type": "String",
              "description": "<p>Current groups value</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "onBeforeRenderRow",
          "access": "private",
          "description": "<p>Called before rendering row contents, used to reset rows no longer used as group summary rows</p>",
          "scope": "instance"
        },
        {
          "name": "generateHtml",
          "access": "private",
          "description": "<p>Called by parent class to fill timeaxis with summary contents. Generates tick &quot;cells&quot; and populates them with\nsummaries.</p>\n<pre class=\"prettyprint source\"><code>&lt;div class=&quot;b-timeaxis-group-summary&quot;>\n    &lt;div class=&quot;b-timeaxis-tick&quot;>\n        &lt;div class=&quot;b-timeaxix-summary-value&quot;>x&lt;/div>\n        ...\n    &lt;/div>\n    ...\n&lt;/div>\n</code></pre>",
          "scope": "instance"
        },
        {
          "name": "updateSummaryHtml",
          "access": "private",
          "description": "<p>Overrides parents function to return correct summary count, used when sizing row</p>",
          "scope": "instance"
        },
        {
          "name": "getTipHtml",
          "access": "private",
          "description": "<p>Generates tooltip contents for hovered summary tick</p>",
          "scope": "instance"
        },
        {
          "name": "render",
          "access": "private",
          "description": "<p>Initialize tooltip on render</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "HeaderZoom",
      "modulePath": "Scheduler/feature/HeaderZoom",
      "classDescription": "<p>Enables users to click and drag to zoom to a date range in Scheduler's header time axis. Only supported in horizontal\nmode.</p>\n<p>This feature is <strong>off</strong> by default. For info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "let scheduler = new Scheduler({\n  features : {\n    headerZoom : true\n  }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "HeaderZoom.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "classType": "headerZoom",
      "externalExamples": [
        "Scheduler/feature/HeaderZoom.js"
      ]
    },
    {
      "name": "Labels",
      "modulePath": "Scheduler/feature/Labels",
      "classDescription": "<p>Displays labels at positions <a href=\"#Scheduler/feature/Labels#config-top\">top</a>, <a href=\"#Scheduler/feature/Labels#config-right\">right</a>, <a href=\"#Scheduler/feature/Labels#config-bottom\">bottom</a> and\n<a href=\"#Scheduler/feature/Labels#config-left\">left</a>.</p>\n<p>Text in labels can be set from a field on the <a href=\"#Scheduler/model/EventModel\">EventModel</a> or the\n<a href=\"#Scheduler/model/ResourceModel\">ResourceModel</a> or using a custom renderer.</p>\n<p>Since <code>top</code> and <code>bottom</code> labels occupy space that would otherwise be used by the event we recommend using bigger\nrowHeights (&gt;55px for both labels with default styling) and zero barMargins because <code>top</code>/<code>bottom</code> labels give space\naround events anyway.</p>\n<p>To prevent labels from being overlapped by other events, see <a href=\"#Scheduler/feature/Labels#config-labelLayoutMode\">labelLayoutMode</a>.</p>\n<p>This feature is <strong>off</strong> by default. It is <strong>not</strong> supported in vertical mode.\nFor info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Labels.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "labels"
      },
      "externalExamples": [
        "Scheduler/feature/Labels.js"
      ],
      "classType": "labels",
      "configs": [
        {
          "name": "labelCls",
          "description": "<p>CSS class to apply to label elements</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-label"
        },
        {
          "name": "top",
          "description": "<p>Top label configuration object. May contain the following properties:</p>",
          "type": "Object",
          "scope": "inner",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>The name of a field in one of the associated records,\n<a href=\"#Scheduler/model/EventModel\">EventModel</a> or <a href=\"#Scheduler/model/ResourceModel\">ResourceModel</a>.\nThe record from which the field value is drawn will be ascertained by checking for field definitions by\nthe specified name.</p>"
            },
            {
              "name": "renderer",
              "type": "function",
              "description": "<p>A function, which when passed an object containing <code>eventRecord</code>,\n<code>resourceRecord</code>, <code>assignmentRecord</code> and <code>domConfig</code> properties, returns the HTML to display as the\nlabel</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference to use in the <code>renderer</code>.</p>"
            },
            {
              "name": "editor",
              "type": [
                "Object",
                "Core.widget.Field"
              ],
              "description": "<p>If the label is to be editable, a field configuration object\nwith a <code>type</code> property, or an instantiated Field. <strong>The <code>field</code> property is mandatory for editing to\nwork</strong>.</p>"
            }
          ]
        },
        {
          "name": "right",
          "description": "<p>Right label configuration object. May contain the following properties:</p>",
          "type": "Object",
          "scope": "inner",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>The name of a field in one of the associated records,\n<a href=\"#Scheduler/model/EventModel\">EventModel</a> or <a href=\"#Scheduler/model/ResourceModel\">ResourceModel</a>.\nThe record from which the field value is drawn will be ascertained by checking for field definitions by\nthe specified name.</p>"
            },
            {
              "name": "renderer",
              "type": "function",
              "description": "<p>A function, which when passed an object containing <code>eventRecord</code>,\n<code>resourceRecord</code>, <code>assignmentRecord</code> and <code>domConfig</code> properties, returns the HTML to display as the\nlabel</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference to use in the <code>renderer</code>.</p>"
            },
            {
              "name": "editor",
              "type": [
                "Object",
                "Core.widget.Field"
              ],
              "description": "<p>If the label is to be editable, a field configuration object\nwith a <code>type</code> property, or an instantiated Field. <strong>The <code>field</code> property is mandatory for editing to\nwork</strong>.</p>"
            }
          ]
        },
        {
          "name": "bottom",
          "description": "<p>Bottom label configuration object. May contain the following properties:</p>",
          "type": "Object",
          "scope": "inner",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>The name of a field in one of the associated records,\n<a href=\"#Scheduler/model/EventModel\">EventModel</a> or <a href=\"#Scheduler/model/ResourceModel\">ResourceModel</a>.\nThe record from which the field value is drawn will be ascertained by checking for field definitions by\nthe specified name.</p>"
            },
            {
              "name": "renderer",
              "type": "function",
              "description": "<p>A function, which when passed an object containing <code>eventRecord</code>,\n<code>resourceRecord</code>, <code>assignmentRecord</code> and <code>domConfig</code> properties, returns the HTML to display as the\nlabel</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference to use in the <code>renderer</code>.</p>"
            },
            {
              "name": "editor",
              "type": [
                "Object",
                "Core.widget.Field"
              ],
              "description": "<p>If the label is to be editable, a field configuration object\nwith a <code>type</code> property, or an instantiated Field. <strong>The <code>field</code> property is mandatory for editing to\nwork</strong>.</p>"
            }
          ]
        },
        {
          "name": "left",
          "description": "<p>Left label configuration object. May contain the following properties:</p>",
          "type": "Object",
          "scope": "inner",
          "parameters": [
            {
              "name": "field",
              "type": "String",
              "description": "<p>The name of a field in one of the associated records,\n<a href=\"#Scheduler/model/EventModel\">EventModel</a> or <a href=\"#Scheduler/model/ResourceModel\">ResourceModel</a>.\nThe record from which the field value is drawn will be ascertained by checking for field definitions by\nthe specified name.</p>"
            },
            {
              "name": "renderer",
              "type": "function",
              "description": "<p>A function, which when passed an object containing <code>eventRecord</code>,\n<code>resourceRecord</code>, <code>assignmentRecord</code> and <code>domConfig</code> properties, returns the HTML to display as the\nlabel</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> reference to use in the <code>renderer</code>.</p>"
            },
            {
              "name": "editor",
              "type": [
                "Object",
                "Core.widget.Field"
              ],
              "description": "<p>If the label is to be editable, a field configuration object\nwith a <code>type</code> property, or an instantiated Field. <strong>The <code>field</code> property is mandatory for editing to\nwork</strong>.</p>"
            }
          ]
        },
        {
          "name": "blurAction",
          "description": "<p>What action should be taken when focus moves leaves the cell editor, for example when clicking outside.\nMay be <code>'complete'</code> or <code>'cancel</code>'.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "cancel"
        },
        {
          "name": "labelLayoutMode",
          "description": "<p>How to handle labels during event layout. Options are:</p>\n<ul>\n<li>default - Labels do not affect event layout, events will overlap labels</li>\n<li>estimate - Label width is estimated by multiplying text length with <a href=\"#Scheduler/feature/Labels#config-labelCharWidth\">labelCharWidth</a></li>\n<li>measure - Label width is determined by measuring the label, precise but slow</li>\n</ul>\n<p>Note that this only applies to the left and right labels, top and bottom labels does not take part in the\nevent layout process.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "default"
        },
        {
          "name": "labelCharWidth",
          "description": "<p>Factor representing the average char width in pixels used to determine label width when configured\nwith <code>labelLayoutMode: 'estimate'</code>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 7
        }
      ]
    },
    {
      "name": "NonWorkingTime",
      "modulePath": "Scheduler/feature/NonWorkingTime",
      "classDescription": "<p>Feature that allows styling of weekends (and other non working time) by adding timeRanges for those days.</p>\n<p>By default the basic Scheduler calendar is empty. When enabling this feature it injects Saturday and Sunday weekend\nintervals if no intervals are encountered.</p>\n<p>Please note that the feature does not render ranges shorter than the base unit used by the time axis.\nThat is made to reduce the view detailing when zooming out.\nThe behavior can be disabled with <a href=\"#Scheduler/feature/NonWorkingTime#config-hideRangesOnZooming\">hideRangesOnZooming</a> config.\nAnd for some levels the feature bails out rendering ranges completely (see <a href=\"#Scheduler/feature/NonWorkingTime#config-maxTimeAxisUnit\">maxTimeAxisUnit</a> for details).</p>\n<p>This feature is <strong>off</strong> by default for Scheduler, but <strong>enabled</strong> by default for Scheduler Pro in which case it is\nattached to the configured calendars and therefore does not show auto-generated weekends as non-working time.\nFor info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>",
      "extends": [
        "Scheduler/feature/AbstractTimeRanges"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "NonWorkingTime.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "configuration"
      },
      "externalExamples": [
        "Scheduler/feature/NonWorkingTime.js"
      ],
      "classType": "nonWorkingTime",
      "configs": [
        {
          "name": "highlightWeekends",
          "description": "<p>Set to <code>true</code> to highlight non working periods of time</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "maxTimeAxisUnit",
          "description": "<p>The maximum time axis unit to display non working ranges for ('hour' or 'day' etc).\nWhen zooming to a view with a larger unit, no non-working time elements will be rendered.</p>\n<p><strong>Note:</strong> Be careful with setting this config to big units like 'year'. When doing this,\nmake sure the timeline <a href=\"#Scheduler/view/TimelineBase#config-startDate\">start</a> and\n<a href=\"#Scheduler/view/TimelineBase#config-endDate\">end</a> dates are set tightly.\nWhen using a long range (for example many years) with non-working time elements rendered per hour,\nyou will end up with millions of elements, impacting performance.\nWhen zooming, use the <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-zoomKeepsOriginalTimespan\">zoomKeepsOriginalTimespan</a> config.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "week"
        },
        {
          "name": "hideRangesOnZooming",
          "description": "<p>The feature by default does not render ranges smaller than the base unit used by the time axis.\nSet this config to <code>false</code> to disable this behavior.</p>\n<p><strong>Please mind</strong> another <a href=\"#Scheduler/feature/NonWorkingTime#config-maxTimeAxisUnit\">maxTimeAxisUnit</a> config\ndefining zoom condition to bail out ranges rendering completely.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "functions": [
        {
          "name": "shouldRenderRange",
          "description": "<p>Based on this method result the feature decides whether the provided non-working period should\nbe rendered or not.\nThe method checks that the range has non-zero <a href=\"#Scheduler/model/TimeSpan#field-duration\">duration</a>,\nlays in the visible timespan and its duration is longer or equal the base timeaxis unit\n(if <a href=\"#Scheduler/feature/NonWorkingTime#config-hideRangesOnZooming\">hideRangesOnZooming</a> is <code>true</code>).</p>\n<p>Override the method to implement your custom range rendering vetoing logic.</p>",
          "parameters": [
            {
              "name": "range",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>Range to render.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the range should be rendered and <code>false</code> otherwise.</p>"
          }
        }
      ]
    },
    {
      "name": "Pan",
      "modulePath": "Scheduler/feature/Pan",
      "classDescription": "<p>Makes the scheduler's timeline pannable by dragging with the mouse. Try it out in the demo below.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/feature/Pan.js\"></div></p>\n<p>This feature is <strong>off</strong> by default. For info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>\n<p><strong>NOTE:</strong> Incompatible with the <a href=\"#Scheduler/feature/EventDragCreate\">EventDragCreate</a> and the\n<a href=\"#Scheduler/feature/EventDragSelect\">EventDragSelect</a> features.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "examples": [
        "// enable Pan\nlet scheduler = new Scheduler({\n  features : {\n    pan : true,\n    eventDragCreate : false\n  }\n});"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Pan.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "classType": "pan",
      "configs": [
        {
          "name": "horizontal",
          "description": "<p>Set to false to not pan horizontally</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "vertical",
          "description": "<p>Set to false to not pan vertically</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "enableInHeader",
          "description": "<p>Set to false to not pan horizontally when dragging in the time axis header</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ]
    },
    {
      "name": "ResourceTimeRanges",
      "modulePath": "Scheduler/feature/ResourceTimeRanges",
      "classDescription": "<p>Feature that draws resource time ranges, shaded areas displayed behind events. These zones are similar to events in\nthat they have a start and end date but different in that they do not take part in the event layout and they always\noccupy full row height.</p>\n<p>Each time range is represented by an instances of <a href=\"#Scheduler/model/ResourceTimeRangeModel\">ResourceTimeRangeModel</a>, held in a\n<a href=\"#Scheduler/data/ResourceTimeRangeStore\">ResourceTimeRangeStore</a>. Currently the they are readonly UI-wise, but can be manipulated on\nthe data level. To style the rendered elements, use the <a href=\"#Scheduler/model/TimeSpan#field-cls\">cls</a> field or use the <a href=\"#Scheduler/model/ResourceTimeRangeModel#field-timeRangeColor\">timeRangeColor</a> field.</p>\n<p>Data can be provided either using the <a href=\"#Scheduler/view/Scheduler#config-resourceTimeRanges\">resourceTimeRanges</a> config on the Scheduler config object:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    ...\n   features :  {\n       resourceTimeRanges : true\n   },\n\n   // Data specified directly on the Scheduler instance\n   resourceTimeRanges : [\n       // Either specify startDate & endDate or startDate & duration when defining a range\n       { startDate : new Date(2019,0,1), endDate : new Date(2019,0,3), name : 'Occupied', timeRangeColor : 'red' },\n       { startDate : new Date(2019,0,3), duration : 2, durationUnit : 'd', name : 'Available' },\n   ]\n})\n</code></pre>\n<p>or the <a href=\"#Scheduler/view/Scheduler#config-resourceTimeRangeStore\">resourceTimeRangeStore</a> config on the Scheduler config object:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    ...\n    features :  {\n        resourceTimeRanges : true\n    },\n    resourceTimeRangeStore : new ResourceTimeRangeStore({\n        readUrl : './resourceTimeRanges/'\n    })\n})\n</code></pre>\n<p>This feature is <strong>off</strong> by default. For info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>\n<h2>Recurring ranges support</h2>\n<p>The feature supports recurring ranges in case the provided store and models\nhave <a href=\"#Scheduler/data/mixin/RecurringTimeSpansMixin\">RecurringTimeSpansMixin</a> and <a href=\"#Scheduler/model/mixin/RecurringTimeSpan\">RecurringTimeSpan</a>\nmixins applied:</p>\n<pre class=\"prettyprint source lang-js\"><code>// We want to use recurring time ranges\n// so we make a special model extending standard ResourceTimeRangeModel\n// with RecurringTimeSpan which adds recurrence support\nclass MyResourceTimeRange extends RecurringTimeSpan(ResourceTimeRangeModel) {};\n\n// Define a new store extending standard ResourceTimeRangeStore\n// with RecurringTimeSpansMixin mixin to add recurrence support to the store.\n// This store will contain time ranges.\nclass MyResourceTimeRangeStore extends RecurringTimeSpansMixin(ResourceTimeRangeStore) {\n    static get defaultConfig() {\n        return {\n            // use our new MyResourceTimeRange model\n            modelClass : MyResourceTimeRange\n        };\n    }\n};\n\n// Instantiate store for resourceTimeRanges using our new classes\nconst resourceTimeRangeStore = new MyResourceTimeRangeStore({\n    data : [{        {\n        id             : 1,\n        resourceId     : 'r1',\n        startDate      : '2019-01-01T11:00',\n        endDate        : '2019-01-01T13:00',\n        name           : 'Lunch',\n        // this time range should repeat every day\n        recurrenceRule : 'FREQ=DAILY'\n    }]\n});\n\nconst scheduler = new Scheduler({\n    ...\n    features : {\n        resourceTimeRanges : true\n    },\n    // store for &quot;resourceTimeRanges&quot; feature\n    resourceTimeRangeStore,\n    ...\n</code></pre>",
      "extends": [
        "Scheduler/feature/base/ResourceTimeRangesBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceTimeRanges.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "resourcetimeranges"
      },
      "externalExamples": [
        "Scheduler/feature/ResourceTimeRanges.js"
      ],
      "classType": "resourceTimeRanges",
      "configs": [
        {
          "name": "tabIndex",
          "description": "<p>Specify value to use for the tabIndex attribute of resource time range elements</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        }
      ]
    },
    {
      "name": "ScheduleContext",
      "modulePath": "Scheduler/feature/ScheduleContext",
      "classDescription": "<p>Allow visually selecting a schedule &quot;cell&quot; by clicking</p>\n<p>This feature is <strong>disabled</strong> by default</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleContext : true // `false` by default, set to `true` to enable the feature\n    }\n});\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ScheduleContext.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "externalExamples": [
        "Scheduler/feature/ScheduleContext.js"
      ],
      "classType": "scheduleContext"
    },
    {
      "name": "ScheduleMenu",
      "modulePath": "Scheduler/feature/ScheduleMenu",
      "classDescription": "<p>Displays a context menu for empty parts of the schedule. Items are populated in the first place\nby configurations of this Feature, then by other features and/or application code.</p>\n<h3>Default scheduler zone menu items</h3>\n<p>The Scheduler menu feature provides only one item:</p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Text</th>\n<th>Weight</th>\n<th>Feature</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>addEvent</code></td>\n<td>Add event</td>\n<td>100</td>\n<td><em>This feature</em></td>\n<td>Add new event at the target time and resource. Hidden when read-only</td>\n</tr>\n<tr>\n<td><code>pasteEvent</code></td>\n<td>Paste event</td>\n<td>110</td>\n<td><a href=\"#Scheduler/feature/EventCopyPaste\">EventCopyPaste</a></td>\n<td>Paste event at the target time and resource. Hidden when is read-only</td>\n</tr>\n</tbody>\n</table>\n<h3>Customizing the menu items</h3>\n<p>The menu items in the Scheduler menu can be customized, existing items can be changed or removed,\nand new items can be added. This is handled using the <code>items</code> config of the feature.</p>\n<p>Add extra item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleMenu : {\n            items : {\n                extraItem : {\n                    text : 'Extra',\n                    icon : 'b-fa b-fa-fw b-fa-flag',\n                    onItem({date, resourceRecord, items}) {\n                        // Custom date based action\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Remove existing item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleMenu : {\n            items : {\n                addEvent : false\n            }\n        }\n    }\n});\n</code></pre>\n<p>Customize existing item:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleMenu : {\n            items : {\n                addEvent : {\n                    text : 'Create new booking'\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Manipulate existing items:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleMenu : {\n            // Process items before menu is shown\n            processItems({date, resourceRecord, items}) {\n                 // Add an extra item for ancient times\n                 if (date &lt; new Date(2018, 11, 17)) {\n                     items.modernize = {\n                         text : 'Modernize',\n                         ontItem({date}) {\n                             // Custom date based action\n                         }\n                     };\n                 }\n\n                 // Do not show menu for Sundays\n                 if (date.getDay() === 0) {\n                     return false;\n                 }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Full information of the menu customization can be found in the &quot;Customizing the Event menu, the Schedule menu, and the TimeAxisHeader menu&quot; guide.</p>\n<p>This feature is <strong>enabled</strong> by default</p>",
      "extends": [
        "Scheduler/feature/base/TimeSpanMenuBase"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ScheduleMenu.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "classType": "scheduleMenu",
      "configs": [
        {
          "name": "items",
          "description": "<p>This is a preconfigured set of items used to create the default context menu.</p>\n<p>The <code>items</code> provided by this feature are listed below. These are the predefined property names which you may\nconfigure:</p>\n<ul>\n<li><code>addEvent</code> Add an event for at the resource and time indicated by the <code>contextmenu</code> event.</li>\n</ul>\n<p>To remove existing items, set corresponding keys to <code>false</code></p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleMenu : {\n            items : {\n                addEvent : false\n            }\n        }\n    }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "processItems",
          "description": "<p>A function called before displaying the menu that allows manipulations of its items.\nReturning <code>false</code> from this function prevents the menu being shown.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>features         : {\n   scheduleMenu : {\n        processItems({ items, date, resourceRecord }) {\n           // Add or hide existing items here as needed\n           items.myAction = {\n               text   : 'Cool action',\n               icon   : 'b-fa b-fa-cat',\n               onItem : () => console.log(`Clicked on ${resourceRecord.name} at ${date}`),\n               weight : 1000 // Move to end\n           };\n\n           if (!resourceRecord.allowAdd) {\n               items.addEvent.hidden = true;\n           }\n       }\n   }\n},\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>An object with information about the menu being shown</p>"
            },
            {
              "name": "context.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The record representing the current resource</p>",
              "isSubParam": true
            },
            {
              "name": "context.date",
              "type": "Date",
              "description": "<p>The clicked date</p>",
              "isSubParam": true
            },
            {
              "name": "context.items",
              "type": "Object",
              "description": "<p>An object containing the <a href=\"#Core/widget/MenuItem\">menu item</a> configs keyed by their id</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The DOM event object that triggered the show</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "events": [
        {
          "name": "scheduleMenuBeforeShow",
          "description": "<p>This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items\nto show in the same way as in <code>processItems</code>. Returning <code>false</code> from a listener prevents the menu from\nbeing shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record for which the menu was triggered</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record, if assignments are used</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "scheduleMenuItem",
          "description": "<p>This event fires on the owning Scheduler when an item is selected in the context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "item",
              "type": "Core.widget.MenuItem"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record, if assignments are used</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement"
            }
          ],
          "onOwner": true
        },
        {
          "name": "scheduleMenuShow",
          "description": "<p>This event fires on the owning Scheduler after showing the context menu for an event</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record for which the menu was triggered</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record, if assignments are used</p>"
            },
            {
              "name": "eventElement",
              "type": "HTMLElement"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "ScheduleTooltip",
      "modulePath": "Scheduler/feature/ScheduleTooltip",
      "classDescription": "<p>Feature that displays a tooltip containing the time at the mouse position when hovering empty parts of the schedule.\nTo hide the schedule tooltip, just disable this feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleTooltip : false\n    }\n});\n</code></pre>\n<p>You can also output a message along with the default time indicator (to indicate resource availability etc)</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n   features : {\n      scheduleTooltip : {\n          getText(date, event, resource) {\n              return 'Hovering ' + resource.name;\n          }\n      }\n  }\n});\n</code></pre>\n<p>To take full control over the markup shown in the tooltip you can override the <a href=\"#Scheduler/feature/ScheduleTooltip#function-generateTipContent\">generateTipContent</a> method:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleTooltip : {\n            generateTipContent({ date, event, resourceRecord }) {\n                return `\n                    &lt;dl>\n                        &lt;dt>Date&lt;/dt>&lt;dd>${date}&lt;/dd>\n                        &lt;dt>Resource&lt;/dt>&lt;dd>${resourceRecord.name}&lt;/dd>\n                    &lt;/dl>\n                `;\n            }\n        }\n    }\n});\n</code></pre>\n<p>Configuration properties from the feature are passed down into the resulting {@Link Core.widget.Tooltip} instance.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        scheduleTooltip : {\n            // Don't show the tip until the mouse has been over the schedule for three seconds\n            hoverDelay : 3000\n        }\n    }\n});\n</code></pre>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ScheduleTooltip.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "externalExamples": [
        "Scheduler/feature/ScheduleTooltip.js"
      ],
      "classType": "scheduleTooltip",
      "configs": [
        {
          "name": "hideForNonWorkingTime",
          "description": "<p>Set to <code>true</code> to hide this tooltip when hovering non-working time. Defaults to <code>false</code> for Scheduler,\n<code>true</code> for SchedulerPro</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "onPaint",
          "access": "private",
          "description": "<p>Set up drag and drop and hover tooltip.</p>",
          "scope": "instance"
        },
        {
          "name": "getHoverTipHtml",
          "access": "private",
          "scope": "instance",
          "deprecated": true
        },
        {
          "name": "generateTipContent",
          "description": "<p>Called as mouse pointer is moved over a new resource or time block. You can override this to show\ncustom HTML in the tooltip.</p>",
          "parameters": [
            {
              "name": "context",
              "type": "Object"
            },
            {
              "name": "context.date",
              "type": "Date",
              "description": "<p>The date of the hovered point</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The DOM event that triggered this tooltip to show</p>",
              "isSubParam": true
            },
            {
              "name": "context.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>The HTML contents to show in the tooltip (an empty return value will hide the tooltip)</p>"
          }
        },
        {
          "name": "getText",
          "description": "<p>Override this to render custom text to default hover tip</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>Browser event</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        }
      ]
    },
    {
      "name": "SimpleEventEdit",
      "modulePath": "Scheduler/feature/SimpleEventEdit",
      "classDescription": "<p>Feature that displays a text field to edit the event name. You can control the flow of this by listening to the events relayed by this class from the underlying <a href=\"#Core/widget/Editor\">Editor</a>.\nTo use this feature, you also need to disable the built-in default editing feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit       : false,\n        simpleEventEdit : true\n    }\n});\n</code></pre>\n<p>This feature is <strong>off</strong> by default. For info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SimpleEventEdit.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "simpleeditor"
      },
      "externalExamples": [
        "Scheduler/feature/SimpleEventEdit.js"
      ],
      "classType": "simpleEventEdit",
      "events": [
        {
          "name": "beforeStart",
          "description": "<p>Fired before the editor is shown to start an edit operation. Returning <code>false</code> from a handler vetoes the edit operation.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The value to be edited.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "start",
          "description": "<p>Fired when an edit operation has begun.</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The starting value of the field.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ]
        },
        {
          "name": "beforeComplete",
          "description": "<p>Fired when an edit completion has been requested, either by <code>ENTER</code>, or focus loss (if configured to complete on blur).\nThe completion may be vetoed, in which case, focus is moved back into the editor.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The new value.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "complete",
          "description": "<p>Edit has been completed, and any associated record or element has been updated.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The new value.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ]
        },
        {
          "name": "beforeCancel",
          "description": "<p>Fired when cancellation has been requested, either by <code>ESC</code>, or focus loss (if configured to cancel on blur).\nThe cancellation may be vetoed, in which case, focus is moved back into the editor.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The new value.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "cancel",
          "description": "<p>Edit has been canceled without updating the associated record or element.</p>",
          "parameters": [
            {
              "name": "oldValue",
              "type": "Object",
              "description": "<p>The original value.</p>"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "<p>The value of the field.</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Editor",
              "description": "<p>The Editor that triggered the event.</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "triggerEvent",
          "description": "<p>The event that shall trigger showing the editor. Defaults to <code>eventdblclick</code>, set to `` or null to disable editing of existing events.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "eventdblclick",
          "category": "Editor"
        },
        {
          "name": "field",
          "description": "<p>The <a href=\"#Scheduler/model/EventModel\">EventModel</a> field to edit</p>",
          "type": "String",
          "scope": "inner",
          "category": "Editor"
        },
        {
          "name": "editorConfig",
          "description": "<p>The editor configuration, where you can control which widget to show</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Editor"
        }
      ],
      "properties": [
        {
          "name": "eventRecord",
          "description": "<p>The current <a href=\"#Scheduler/model/EventModel\">EventModel</a> record, which is being edited by the event editor.</p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "editEvent",
          "description": "<p>Opens an Editor for the passed event. This function is exposed on Scheduler and can be called as\n<code>scheduler.editEvent()</code>.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The Event to edit</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The Resource record for the event.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "onOwner": true
        }
      ]
    },
    {
      "name": "StickyEvents",
      "modulePath": "Scheduler/feature/StickyEvents",
      "classDescription": "<p>This feature applies native <code>position: sticky</code> to event contents in horizontal mode, keeping the contents in view as\nlong as possible on scroll. For vertical mode it uses a programmatic solution to achieve the same result.</p>\n<p>Assign <code>eventRecord.stickyContents = false</code> to disable stickiness on a per event level (docs for\n<a href=\"#Scheduler/model/EventModel#field-stickyContents\">stickyContents</a>).</p>\n<p>This feature is <strong>enabled</strong> by default.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "StickyEvents.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "classType": "stickyEvents"
    },
    {
      "name": "Summary",
      "modulePath": "Scheduler/feature/Summary",
      "classDescription": "<p>A special version of the Grid Summary feature. This feature displays a summary row in the grid footer.\nFor regular columns in the locked section - specify type of summary on columns, available types are:</p>\n<dl class=\"wide\">\n<dt>sum <dd>Sum of all values in the column\n<dt>add <dd>Alias for sum\n<dt>count <dd>Number of rows\n<dt>countNotEmpty <dd>Number of rows containing a value\n<dt>average <dd>Average of all values in the column\n<dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n</dl>\nColumns can also specify a summaryRender to format the calculated sum.\n<p>To summarize events, either provide a <a href=\"#Scheduler/feature/Summary#config-renderer\">renderer</a> or use <a href=\"#Scheduler/feature/Summary#config-summaries\">summaries</a></p>\n<p>This feature is <strong>disabled</strong> by default.</p>",
      "extends": [
        "Scheduler/feature/TimelineSummary"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "Summary.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "typings": {
        "Grid/feature/Summary": "Grid/feature/GridSummary"
      },
      "classType": "summary",
      "externalExamples": [
        "Scheduler/feature/Summary.js"
      ],
      "demo": {
        "product": "scheduler",
        "demo": "summary"
      },
      "configs": [
        {
          "name": "summaries",
          "description": "<p>Array of summary configs which consists of a label and a <a href=\"#Scheduler/feature/Summary#config-renderer\">renderer</a> function</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    features : {\n        summary : {\n            summaries : [\n                {\n                    label : 'Label',\n                    renderer : ({ startDate, endDate, eventStore, resourceStore, events, element }) => {\n                        // return display value\n                        returns '&lt;div>Renderer output&lt;/div>';\n                    }\n                }\n            ]\n        }\n    }\n});\n</code></pre>",
          "type": "Array.<Object>",
          "scope": "inner"
        },
        {
          "name": "renderer",
          "description": "<p>Renderer function for a single time axis tick. Should calculate a sum and return HTML as a result.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    features : {\n        summary : {\n            renderer : ({ startDate, endDate, eventStore, resourceStore, events, element }) => {\n                // return display value\n                returns '&lt;div>Renderer output&lt;/div>';\n            }\n        }\n    }\n});\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "String",
            "description": "<p>Html content</p>"
          },
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>Tick start date</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>Tick end date</p>"
            },
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Events which belong to the group</p>"
            },
            {
              "name": "eventStore",
              "type": "Scheduler.data.EventStore",
              "description": "<p>Event store</p>"
            },
            {
              "name": "resourceStore",
              "type": "Scheduler.data.ResourceStore",
              "description": "<p>Resource store</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Summary tick container</p>"
            }
          ]
        },
        {
          "name": "verticalSummaryColumnConfig",
          "description": "<p>A config object for the <a href=\"#Grid/column/Column\">Column</a> used to contain the summary bar.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "updateTimelineSummaries",
          "access": "private",
          "description": "<p>Updates summaries.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimeAxisHeaderMenu",
      "modulePath": "Scheduler/feature/TimeAxisHeaderMenu",
      "classDescription": "<p>Adds scheduler specific menu items to the timeline header context menu.</p>\n<h2>Default timeaxis header menu items</h2>\n<p>Here is the list of menu items provided by this and other features:</p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Text</th>\n<th>Weight</th>\n<th>Feature</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>eventsFilter</code></td>\n<td>Filter tasks</td>\n<td>100</td>\n<td><a href=\"#Scheduler/feature/EventFilter\">EventFilter</a></td>\n<td>Submenu for event filtering</td>\n</tr>\n<tr>\n<td>&gt;<code>nameFilter</code></td>\n<td>By name</td>\n<td>110</td>\n<td><a href=\"#Scheduler/feature/EventFilter\">EventFilter</a></td>\n<td>Filter by <code>name</code></td>\n</tr>\n<tr>\n<td><code>zoomLevel</code></td>\n<td>Zoom</td>\n<td>200</td>\n<td><em>This feature</em></td>\n<td>Submenu for timeline zooming</td>\n</tr>\n<tr>\n<td>&gt;<code>zoomSlider</code></td>\n<td>-</td>\n<td>210</td>\n<td><em>This feature</em></td>\n<td>Changes current zoom level</td>\n</tr>\n<tr>\n<td><code>dateRange</code></td>\n<td>Date range</td>\n<td>300</td>\n<td><em>This feature</em></td>\n<td>Submenu for timeline range</td>\n</tr>\n<tr>\n<td>&gt;<code>startDateField</code></td>\n<td>Start date</td>\n<td>310</td>\n<td><em>This feature</em></td>\n<td>Start date for the timeline</td>\n</tr>\n<tr>\n<td>&gt;<code>endDateField</code></td>\n<td>End date</td>\n<td>320</td>\n<td><em>This feature</em></td>\n<td>End date for the timeline</td>\n</tr>\n<tr>\n<td>&gt;<code>leftShiftBtn</code></td>\n<td>&lt;</td>\n<td>330</td>\n<td><em>This feature</em></td>\n<td>Shift backward</td>\n</tr>\n<tr>\n<td>&gt;<code>todayBtn</code></td>\n<td>Today</td>\n<td>340</td>\n<td><em>This feature</em></td>\n<td>Go to today</td>\n</tr>\n<tr>\n<td>&gt;<code>rightShiftBtn</code></td>\n<td>&gt;</td>\n<td>350</td>\n<td><em>This feature</em></td>\n<td>Shift forward</td>\n</tr>\n<tr>\n<td><code>currentTimeLine</code></td>\n<td>Show current timeline</td>\n<td>400</td>\n<td><a href=\"#Scheduler/feature/TimeRanges\">TimeRanges</a></td>\n<td>Show current time line</td>\n</tr>\n</tbody>\n</table>\n<p>&gt; - first level of submenu</p>\n<h2>Customizing the menu items</h2>\n<p>The menu items in the TimeAxis Header menu can be customized, existing items can be changed or removed,\nand new items can be added. This is handled using the <code>items</code> config of the feature.</p>\n<h3>Add extra items:</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        timeAxisHeaderMenu : {\n            items : {\n                extraItem : {\n                    text : 'Extra',\n                    icon : 'b-fa b-fa-fw b-fa-flag',\n                    onItem() {\n                        ...\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<h3>Remove existing items:</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        timeAxisHeaderMenu : {\n            items : {\n                zoomLevel : false\n            }\n        }\n    }\n});\n</code></pre>\n<h3>Customize existing item:</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        timeAxisHeaderMenu : {\n            items : {\n                zoomLevel : {\n                    text : 'Scale'\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<h3>Customizing submenu items:</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n     features : {\n         timeAxisHeaderMenu : {\n             items : {\n                 dateRange : {\n                     menu : {\n                         items : {\n                             todayBtn : {\n                                 text : 'Now'\n                             }\n                         }\n                     }\n                 }\n             }\n         }\n     }\n});\n</code></pre>\n<h3>Manipulate existing items:</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        timeAxisHeaderMenu : {\n            // Process items before menu is shown\n            processItems({ items }) {\n                 // Add an extra item dynamically\n                items.coolItem = {\n                    text : 'Cool action',\n                    onItem() {\n                          // ...\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>Full information of the menu customization can be found in the <a href=\"#Scheduler/guides/customization/contextmenu.md\">&quot;Customizing the Event menu, the Schedule menu, and the TimeAxisHeader menu&quot;</a>\nguide.</p>\n<p>This feature is <strong>enabled</strong> by default</p>",
      "extends": [
        "Grid/feature/HeaderMenu"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeAxisHeaderMenu.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "demo": {
        "product": "scheduler",
        "demo": "basic"
      },
      "classType": "timeAxisHeaderMenu",
      "externalExamples": [
        "Scheduler/feature/TimeAxisHeaderMenu.js"
      ],
      "configs": [
        {
          "name": "processItems",
          "description": "<p>A function called before displaying the menu that allows manipulations of its items.\nReturning <code>false</code> from this function prevents the menu being shown.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>  features         : {\n      timeAxisHeaderMenu : {\n          processItems({ items }) {\n              // Add or hide existing items here as needed\n              items.myAction = {\n                  text   : 'Cool action',\n                  icon   : 'b-fa b-fa-fw b-fa-ban',\n                  onItem : () => console.log('Some coolness'),\n                  weight : 300 // Move to end\n              };\n\n              // Hide zoom slider\n              items.zoomLevel.hidden = true;\n          }\n      }\n  },\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "<p>An object with information about the menu being shown</p>"
            },
            {
              "name": "context.items",
              "type": "Object",
              "description": "<p>An object containing the <a href=\"#Core/widget/MenuItem\">menu item</a> configs keyed by their id</p>",
              "isSubParam": true
            },
            {
              "name": "context.event",
              "type": "Event",
              "description": "<p>The DOM event object that triggered the show</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "items",
          "description": "<p>This is a preconfigured set of items used to create the default context menu.</p>\n<p>The <code>items</code> provided by this feature are listed in the intro section of this class. You can\nconfigure existing items by passing a configuration object to the keyed items.</p>\n<p>To remove existing\nitems, set corresponding keys to <code>false</code></p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        timeAxisHeaderMenu : {\n            items : {\n                eventsFilter        : false\n            }\n        }\n    }\n});\n</code></pre>\n<p>See the feature config in the above example for details.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "timeAxisHeaderContextMenuBeforeShow",
          "description": "<p>This event fires on the owning Scheduler before the context menu is shown for the time axis header.\nAllows manipulation of the items to show in the same way as in the <a href=\"#Scheduler/feature/TimeAxisHeaderMenu#config-processItems\">processItems</a>.</p>\n<p>Returning <code>false</code> from a listener prevents the menu from being shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Time axis column</p>"
            }
          ],
          "preventable": true,
          "onOwner": true
        },
        {
          "name": "timeAxisHeaderContextMenuShow",
          "description": "<p>This event fires on the owning Scheduler after the context menu is shown for a header</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "items",
              "type": "Object",
              "description": "<p>Menu item configs</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Time axis column</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "timeAxisHeaderContextMenuItem",
          "description": "<p>This event fires on the owning Scheduler when an item is selected in the header context menu.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The scheduler</p>"
            },
            {
              "name": "menu",
              "type": "Core.widget.Menu",
              "description": "<p>The menu</p>"
            },
            {
              "name": "item",
              "type": "Object",
              "description": "<p>Selected menu item</p>"
            },
            {
              "name": "column",
              "type": "Grid.column.Column",
              "description": "<p>Time axis column</p>"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "TimeRanges",
      "modulePath": "Scheduler/feature/TimeRanges",
      "classDescription": "<p>Feature that renders global ranges of time in the timeline. Use this feature to visualize a <code>range</code> like a 1 hr lunch or some important point in time\n(a <code>line</code>, i.e. a range with 0 duration). This feature can also show a current time indicator if you set <a href=\"#Scheduler/feature/TimeRanges#config-showCurrentTimeLine\">showCurrentTimeLine</a> to true. To style\nthe rendered elements, use the <a href=\"#Scheduler/model/TimeSpan#field-cls\">cls</a> field of the <code>TimeSpan</code> class.</p>\n<p>Each time range is represented by an instances of <a href=\"#Scheduler/model/TimeSpan\">TimeSpan</a>, held in a simple <a href=\"#Core/data/Store\">Store</a>.\nThe feature uses <a href=\"#Scheduler/model/ProjectModel#property-timeRangeStore\">timeRangeStore</a> defined on the project.\nThe store/persisting loading is handled by Crud Manager (if it's used by the component).</p>\n<p>This feature is <strong>off</strong> by default. For info on enabling it, see <a href=\"#Grid/view/mixin/GridFeatures\">GridFeatures</a>.</p>\n<h2>Showing an icon in the time range header</h2>\n<p>You can use Font Awesome icons easily (or set any other icon using CSS) by using the <a href=\"#Scheduler/model/TimeSpan#field-cls\">cls</a>\nfield. The JSON data below will show a flag icon:</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n    &quot;id&quot;        : 5,\n    &quot;cls&quot;       : &quot;b-fa b-fa-flag&quot;,\n    &quot;name&quot;      : &quot;v5.0&quot;,\n    &quot;startDate&quot; : &quot;2019-02-07 15:45&quot;\n},\n</code></pre>\n<h2>Recurring time ranges</h2>\n<p>The feature supports recurring ranges in case the provided store and models\nhave <a href=\"#Scheduler/data/mixin/RecurringTimeSpansMixin\">RecurringTimeSpansMixin</a> and <a href=\"#Scheduler/model/mixin/RecurringTimeSpan\">RecurringTimeSpan</a>\nmixins applied:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// We want to use recurring time ranges so we make a special model extending standard TimeSpan model with\n// RecurringTimeSpan which adds recurrence support\nclass MyTimeRange extends RecurringTimeSpan(TimeSpan) {}\n\n// Define a new store extending standard Store with RecurringTimeSpansMixin mixin to add recurrence support to the\n// store. This store will contain time ranges.\nclass MyTimeRangeStore extends RecurringTimeSpansMixin(Store) {\n    static get defaultConfig() {\n        return {\n            // use our new MyResourceTimeRange model\n            modelClass : MyTimeRange\n        };\n    }\n};\n\n// Instantiate store for timeRanges using our new classes\nconst timeRangeStore = new MyTimeRangeStore({\n    data : [{\n        id             : 1,\n        resourceId     : 'r1',\n        startDate      : '2019-01-01T11:00',\n        endDate        : '2019-01-01T13:00',\n        name           : 'Lunch',\n        // this time range should repeat every day\n        recurrenceRule : 'FREQ=DAILY'\n    }]\n});\n\nconst scheduler = new Scheduler({\n    ...\n    features : {\n        timeRanges : true\n    },\n\n    crudManager : {\n        // store for &quot;timeRanges&quot; feature\n        timeRangeStore\n    }\n});\n</code></pre>",
      "extends": [
        "Scheduler/feature/AbstractTimeRanges"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeRanges.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "classType": "timeRanges",
      "demo": {
        "product": "scheduler",
        "demo": "timeranges"
      },
      "externalExamples": [
        "Scheduler/feature/TimeRanges.js"
      ],
      "configs": [
        {
          "name": "currentTimeLineUpdateInterval",
          "description": "<p>The interval (as amount of ms) defining how frequently the current timeline will be updated</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10000
        },
        {
          "name": "currentDateFormat",
          "description": "<p>The date format to show in the header for the current time line (when <a href=\"#Scheduler/feature/TimeRanges#config-showCurrentTimeLine\">showCurrentTimeLine</a> is configured).\nSee <a href=\"#Core/helper/DateHelper\">DateHelper</a> for the possible formats to use.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "HH:mm"
        },
        {
          "name": "showCurrentTimeLine",
          "description": "<p>Show a line indicating current time. Either <code>true</code> or <code>false</code> or a <a href=\"#Scheduler/model/TimeSpan\">TimeSpan</a> configuration object to apply to this\nspecial time range (allowing you to provide a custom text):</p>\n<pre class=\"prettyprint source lang-javascript\"><code>showCurrentTimeLine : {\n    name : 'Now'\n}\n</code></pre>\n<p>The line carries the CSS class name <code>b-sch-current-time</code>, and this may be used to add custom styling to the current time line.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "properties": [
        {
          "name": "timeRanges",
          "description": "<p>Returns the TimeRanges which occur within the client Scheduler's time axis.</p>",
          "type": "Array.<Scheduler.model.TimeSpan>",
          "scope": "instance"
        },
        {
          "name": "showCurrentTimeLine",
          "description": "<p>Get/set the current time line display state</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "disabled",
          "description": "<p>Get/set the features disabled state</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "populateTimeAxisHeaderMenu",
          "access": "internal",
          "description": "<p>Adds a menu item to show/hide current time line.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimelineSummary",
      "modulePath": "Scheduler/feature/TimelineSummary",
      "classDescription": "<p>Base class, not to be used directly.</p>",
      "extends": [
        "Grid/feature/Summary"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineSummary.js",
      "path": "/Calendar/lib/Scheduler/feature",
      "configs": [
        {
          "name": "showTooltip",
          "description": "<p>Show tooltip containing summary values and labels</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "functions": [
        {
          "name": "refresh",
          "description": "<p>Refreshes the summaries</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DragBase",
      "modulePath": "Scheduler/feature/base/DragBase",
      "classDescription": "<p>Base class for EventDrag (Scheduler) and TaskDrag (Gantt) features. Contains shared code. Not to be used directly.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragBase.js",
      "path": "/Calendar/lib/Scheduler/feature/base",
      "configs": [
        {
          "name": "showTooltip",
          "description": "<p>Specifies whether or not to show tooltip while dragging event</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showExactDropPosition",
          "description": "<p>When enabled, the event being dragged always &quot;snaps&quot; to the exact start date that it will have after drop.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "dragHelperConfig",
          "description": "<p>An object used to configure the internal <a href=\"#Core/helper/DragHelper\">DragHelper</a> class</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "constrainDragToTimeline",
          "description": "<p>Set to <code>false</code> to allow dragging tasks outside of the client Scheduler.\nUseful when you want to drag tasks between multiple Scheduler instances</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "tip",
          "description": "<p>A config object to allow customization of the <a href=\"#Core/widget/Tooltip\">Tooltip</a> which tracks\nthe event during a drag operation.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "tip",
          "description": "<p>Yields the <a href=\"#Core/widget/Tooltip\">Tooltip</a> which tracks the event during a drag operation.</p>",
          "type": "Core.widget.Tooltip",
          "scope": "inner"
        },
        {
          "name": "isDragging",
          "description": "<p>Returns true if a drag operation is active</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "onPaint",
          "access": "private",
          "description": "<p>Called when scheduler is rendered. Sets up drag and drop and hover tooltip.</p>",
          "scope": "instance"
        },
        {
          "name": "onDragStart",
          "access": "private",
          "description": "<p>Triggered when dragging of an event starts. Initializes drag data associated with the event being dragged.</p>",
          "scope": "instance"
        },
        {
          "name": "onDrag",
          "access": "private",
          "description": "<p>Triggered while dragging an event. Updates drag data, validation etc.</p>",
          "scope": "instance"
        },
        {
          "name": "onDrop",
          "access": "private",
          "description": "<p>Triggered when dropping an event. Finalizes the operation.</p>",
          "scope": "instance"
        },
        {
          "name": "onInternalInvalidDrop",
          "access": "private",
          "description": "<p>Triggered internally on invalid drop.</p>",
          "scope": "instance"
        },
        {
          "name": "finalize",
          "access": "private",
          "description": "<p>Called on drop to update the record of the event being dropped.</p>",
          "parameters": [
            {
              "name": "updateRecords",
              "type": "Boolean",
              "description": "<p>Specify true to update the record, false to treat as invalid</p>"
            }
          ],
          "scope": "instance",
          "async": true
        },
        {
          "name": "updateDragContext",
          "access": "private",
          "description": "<p>Updates drag data's dates and validity (calls #validatorFn if specified)</p>",
          "scope": "instance"
        },
        {
          "name": "getDragData",
          "access": "private",
          "description": "<p>Initializes drag data (dates, constraints, dragged events etc). Called when drag starts.</p>",
          "parameters": [
            {
              "name": "info"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "*"
          }
        },
        {
          "name": "getTipHtml",
          "description": "<p>Gets html to display in tooltip while dragging event. Uses clockTemplate to display start &amp; end dates.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "DragCreateBase",
      "modulePath": "Scheduler/feature/base/DragCreateBase",
      "classDescription": "<p>Base class for EventDragCreate (Scheduler) and TaskDragCreate (Gantt) features. Contains shared code. Not to be used directly.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DragCreateBase.js",
      "path": "/Calendar/lib/Scheduler/feature/base",
      "configs": [
        {
          "name": "showTooltip",
          "description": "<p>true to show a time tooltip when dragging to create a new event</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "dragTolerance",
          "description": "<p>Number of pixels the drag target must be moved before dragging is considered to have started. Defaults to 2.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 2
        },
        {
          "name": "validatorFnThisObj",
          "description": "<p><code>this</code> reference for the validatorFn</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "proxyCls",
          "access": "private",
          "description": "<p>CSS class to add to proxy used when creating a new event</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-dragcreator-proxy"
        }
      ],
      "functions": [
        {
          "name": "onElementContextMenu",
          "access": "private",
          "description": "<p>Prevent right click when drag creating</p>",
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        }
      ]
    },
    {
      "name": "EditBase",
      "modulePath": "Scheduler/feature/base/EditBase",
      "classDescription": "<p>Base class for EventEdit (Scheduler) and TaskEdit (Gantt) features. Contains shared code. Not to be used directly.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "EditBase.js",
      "path": "/Calendar/lib/Scheduler/feature/base",
      "configs": [
        {
          "name": "saveAndCloseOnEnter",
          "description": "<p>True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Editor"
        },
        {
          "name": "dateFormat",
          "description": "<p>This config parameter is passed to the <code>startDateField</code> and <code>endDateField</code> constructor.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "L",
          "category": "Editor widgets"
        },
        {
          "name": "timeFormat",
          "description": "<p>This config parameter is passed to the <code>startTimeField</code> and <code>endTimeField</code> constructor.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "LT",
          "category": "Editor widgets"
        },
        {
          "name": "editorConfig",
          "description": "<p>Default editor configuration, which widgets it shows etc.</p>\n<p>This is the entry point into configuring any aspect of the editor.</p>\n<p>The <a href=\"#Core/widget/Container#config-items\">items</a> configuration of a Container\nis <em>deeply merged</em> with its default <code>items</code> value. This means that you can specify\nan <code>editorConfig</code> object which configures the editor, or widgets inside the editor:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit  : {\n            editorConfig : {\n                autoClose : false,\n                modal     : true,\n                cls       : 'editor-widget-cls',\n                items : {\n                    resourceField : {\n                        hidden : true\n                    },\n                    // Add our own event owner field at the top of the form.\n                    // Weight -100 will make it sort top the top.\n                    ownerField : {\n                        weight : -100,\n                        type   : 'usercombo',\n                        name   : 'owner',\n                        label  : 'Owner'\n                    }\n                },\n                bbar : {\n                    items : {\n                        deleteButton : false\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Editor"
        },
        {
          "name": "items",
          "description": "<p>An object to merge with the provided items config of the editor to override the\nconfiguration of provided fields, or add new fields.</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        eventEdit  : {\n            items : {\n                // Merged with provided config of the resource field\n                resourceField : {\n                    label : 'Calendar'\n                },\n                owner : {\n                    weight : -100, // Will sort above system-supplied fields which are weight 0\n                    type   : 'usercombo',\n                    name   : 'owner',\n                    label  : 'Owner'\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>The provided fields are called</p>\n<ul>\n<li><code>nameField</code></li>\n<li><code>resourceField</code></li>\n<li><code>startDateField</code></li>\n<li><code>startTimeField</code></li>\n<li><code>endDateField</code></li>\n<li><code>endTimeField</code></li>\n<li><code>recurrenceCombo</code></li>\n<li><code>editRecurrenceButton</code></li>\n</ul>",
          "type": "Object",
          "scope": "inner",
          "category": "Editor widgets"
        },
        {
          "name": "weekStartDay",
          "description": "<p>The week start day used in all date fields of the feature editor form by default.\n0 means Sunday, 6 means Saturday.\nDefaults to the locale's week start day.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "onBeforeSave",
          "description": "<p>Template method, intended to be overridden. Called before the event record has been updated.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onAfterSave",
          "description": "<p>Template method, intended to be overridden. Called after the event record has been updated.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "updateRecord",
          "access": "private",
          "description": "<p>Updates record being edited with values from the editor</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ResourceTimeRangesBase",
      "modulePath": "Scheduler/feature/base/ResourceTimeRangesBase",
      "classDescription": "<p>Abstract base class for ResourceTimeRanges and ResourceNonWorkingTime features.\nYou should not use this class directly.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceTimeRangesBase.js",
      "path": "/Calendar/lib/Scheduler/feature/base",
      "configs": [
        {
          "name": "tabIndex",
          "description": "<p>Specify value to use for the tabIndex attribute of range elements</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "generateElementId",
          "access": "internal",
          "description": "<p>Generates ID from the passed time range record</p>",
          "parameters": [
            {
              "name": "record",
              "type": "Scheduler.model.TimeSpan"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>Generated ID for the DOM element</p>"
          }
        }
      ]
    },
    {
      "name": "TimeSpanMenuBase",
      "modulePath": "Scheduler/feature/base/TimeSpanMenuBase",
      "classDescription": "<p>Abstract base class used by other context menu features which show the context menu for TimeAxis.\nUsing this class you can make sure the menu expects the target to disappear,\nsince it can be scroll out of the scheduling zone.</p>\n<p>Features that extend this class are:</p>\n<ul>\n<li><a href=\"#Scheduler/feature/EventMenu\">EventMenu</a>;</li>\n<li><a href=\"#Scheduler/feature/ScheduleMenu\">ScheduleMenu</a>;</li>\n<li><a href=\"#Scheduler/feature/TimeAxisHeaderMenu\">TimeAxisHeaderMenu</a>;</li>\n</ul>",
      "extends": [
        "Core/feature/base/ContextMenuBase"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeSpanMenuBase.js",
      "path": "/Calendar/lib/Scheduler/feature/base"
    },
    {
      "name": "TooltipBase",
      "modulePath": "Scheduler/feature/base/TooltipBase",
      "classDescription": "<p>Base class for <code>EventTooltip</code> (Scheduler) and <code>TaskTooltip</code> (Gantt) features. Contains shared code. Not to be used directly.</p>",
      "extends": [
        "Core/mixin/InstancePlugin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TooltipBase.js",
      "path": "/Calendar/lib/Scheduler/feature/base",
      "extendsconfigs": [
        "Core/widget/Tooltip"
      ],
      "configs": [
        {
          "name": "autoUpdate",
          "description": "<p>Specify true to have tooltip updated when mouse moves, if you for example want to display date at mouse\nposition.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Misc"
        },
        {
          "name": "hoverDelay",
          "description": "<p>The amount of time to hover before showing</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 250
        },
        {
          "name": "hideDelay",
          "description": "<p>The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.</p>\n<p>May be configured as <code>false</code> to persist visible after the mouse exits the target element. Configure it\nas 0 to always retrigger <code>hoverDelay</code> even when moving mouse inside <code>fromElement</code></p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 100
        }
      ],
      "events": [
        {
          "name": "beforeShow",
          "description": "<p>Triggered before a tooltip is shown. Return <code>false</code> to prevent the action.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Tooltip",
              "description": "<p>The tooltip being shown.</p>"
            },
            {
              "name": "source.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>",
              "isSubParam": true
            }
          ],
          "preventable": true
        },
        {
          "name": "show",
          "description": "<p>Triggered after a tooltip is shown.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Tooltip",
              "description": "<p>The tooltip.</p>"
            },
            {
              "name": "source.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>",
              "isSubParam": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "tooltip",
          "description": "<p>A reference to the tooltip instance, which will have a special <code>eventRecord</code> property that\nyou can use to get data from the contextual event record to which this tooltip is related.</p>",
          "type": "Core.widget.Tooltip",
          "scope": "inner",
          "readonly": true,
          "category": "Misc"
        }
      ]
    },
    {
      "name": "ExcelExporter",
      "modulePath": "Scheduler/feature/experimental/ExcelExporter",
      "classDescription": "<p><strong>NOTE</strong>: This class requires a 3rd party library to operate.</p>\n<p>A plugin that allows exporting Scheduler data to Excel without involving the server. It uses <a href=\"#Scheduler/util/ScheduleTableExporter\">ScheduleTableExporter</a>\nclass as data provider, <a href=\"https://www.npmjs.com/package/zipcelx\">zipcelx library</a>\nforked and adjusted to support <a href=\"https://github.com/bryntum/zipcelx/tree/column-width-build\">column width config</a>\nand <a href=\"https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx\">Microsoft XML specification</a>.\nZipcelx should be either in global scope (window) or can be provided with <a href=\"#Scheduler/feature/experimental/ExcelExporter#config-zipcelx\">zipcelx</a> config.</p>\n<pre class=\"prettyprint source\"><code>// Global scope\n&lt;script src=&quot;zipcelx.js&quot;>&lt;/script>\n\n// importing from package\nimport zipcelx from 'zipcelx';\n\nconst grid = new Grid({\n    features : {\n        excelExporter : {\n            zipcelx\n        }\n    }\n})\n</code></pre>\n<p>Here is an example of how to add the feature:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        excelExporter : {\n            // Choose the date format for date fields\n            dateFormat : 'YYYY-MM-DD HH:mm',\n            exporterConfig : {\n                // Choose the Resource fields to include in the exported file\n                columns : [{ text : 'Staff', field : 'name' }],\n\n                // Choose the Event fields to include in the exported file\n                eventColumns    : [\n                    { text : 'Task', field : 'name' },\n                    { text : 'Starts', field : 'startDate', width : 140 },\n                    { text : 'Ends', field : 'endDate', width : 140 }\n                ]\n            }\n        }\n    }\n});\n</code></pre>\n<p>And how to call it:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>scheduler.features.excelExporter.export({\n    filename : 'Export',\n    exporterConfig : {\n        columns : [{ text : 'Staff', field : 'name' }]\n    }\n})\n</code></pre>",
      "extends": [
        "Grid/feature/experimental/ExcelExporter"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ExcelExporter.js",
      "path": "/Calendar/lib/Scheduler/feature/experimental",
      "typings": {
        "Grid/feature/experimental/ExcelExporter": "Grid/feature/experimental/GridExcelExporter"
      },
      "classType": "excelExporter",
      "demo": {
        "product": "scheduler",
        "demo": "exporttoexcel"
      },
      "configs": [
        {
          "name": "exporterClass",
          "description": "<p>Exporter class. Must subclass <a href=\"#Scheduler/util/ScheduleTableExporter\">ScheduleTableExporter</a></p>",
          "type": "Scheduler.util.ScheduleTableExporter",
          "scope": "inner",
          "typings": {
            "returns": "typeof ScheduleTableExporter"
          }
        },
        {
          "name": "exporterConfig",
          "description": "<p>Configuration object for <a href=\"#Scheduler/feature/experimental/ExcelExporter#config-exporterClass\">exporter class</a>.</p>",
          "type": "Object",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "PdfExport",
      "modulePath": "Scheduler/feature/export/PdfExport",
      "classDescription": "<p>Generates PDF/PNG files from the Scheduler component.</p>\n<img src=\"Scheduler/export-dialog.png\" style=\"max-width : 300px\" alt=\"Scheduler Export dialog\">\n<p><strong>NOTE:</strong> Server side is required to make export work!</p>\n<p>The export server is written in nodejs and it is shipped with our examples. You can find setup instructions in\n<code>examples/_shared/server/README.md</code> and <code>examples/export/README.md</code> files.</p>\n<p>When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\nwith the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\non <a href=\"#Scheduler/feature/export/PdfExport#config-sendAsBinary\">sendAsBinary</a> config). Then the Export feature opens the link in a new tab and the file is\nautomatically downloaded by your browser. This is configurable, see <a href=\"#Scheduler/feature/export/PdfExport#config-openAfterExport\">openAfterExport</a> config.</p>\n<p>The <a href=\"#Scheduler/feature/export/PdfExport#config-exportServer\">exportServer</a> URL must be configured. The URL can be localhost if you start the server locally,\nor your remote server address.</p>\n<h2>Usage</h2>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        pdfExport : {\n            exportServer : 'http://localhost:8080' // Required\n        }\n    }\n})\n\n// Opens popup allowing to customize export settings\nscheduler.features.pdfExport.showExportDialog();\n\n// Simple export\nscheduler.features.pdfExport.export({\n    // Required, set list of column ids to export\n    columns : scheduler.columns.map(c => c.id)\n}).then(result => {\n    // Response instance and response content in JSON\n    let { response, responseJSON } = result;\n});\n</code></pre>\n<p>Appends configs related to exporting time axis: <a href=\"#Scheduler/feature/export/PdfExport#config-scheduleRange\">scheduleRange</a>, <a href=\"#Scheduler/feature/export/PdfExport#config-rangeStart\">rangeStart</a>,\n<a href=\"#Scheduler/feature/export/PdfExport#config-rangeEnd\">rangeEnd</a></p>\n<h2>Loading resources</h2>\n<p>If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\nThis is due to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Cross-Origin Resource Sharing</a> (CORS). There are 2 options how to handle this:</p>\n<ul>\n<li>Allow cross origin requests from the server where your export is hosted to the server where your application is hosted;</li>\n<li>Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\nand setup paths using <a href=\"#Grid/feature/export/PdfExport#config-translateURLsToAbsolute\">translateURLsToAbsolute</a> config and configure the export server to give access to the path:</li>\n</ul>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        pdfExport : {\n            exportServer : 'http://localhost:8080',\n            // '/resources' is hardcoded in WebServer implementation\n            translateURLsToAbsolute : 'http://localhost:8080/resources'\n        }\n    }\n})\n</code></pre>\n<pre class=\"prettyprint source lang-javascript\"><code>// Following path would be served by this address: http://localhost:8080/resources/\nnode ./src/server.js -h 8080 -r web/application/styles\n</code></pre>\n<p>where <code>web/application/styles</code> is a physical root location of the copied resources, for example:</p>\n<img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />",
      "extends": [
        "Grid/feature/export/PdfExport"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "PdfExport.js",
      "path": "/Calendar/lib/Scheduler/feature/export",
      "typings": {
        "Grid/feature/export/PdfExport": "Grid/feature/export/GridPdfExport"
      },
      "classType": "pdfExport",
      "configs": [
        {
          "name": "scheduleRange",
          "description": "<p>Specifies how to export time span.</p>\n<ul>\n<li>completeview - Complete configured time span, from scheduler start date to end date</li>\n<li>currentview  - Currently visible time span</li>\n<li>daterange    - Use specific date range, provided additionally in config. See <a href=\"#Scheduler/feature/export/PdfExport#config-rangeStart\">rangeStart</a>/\n<a href=\"#Scheduler/feature/export/PdfExport#config-rangeEnd\">rangeEnd</a></li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "completeview",
          "category": "Export file config"
        },
        {
          "name": "rangeStart",
          "description": "<p>Exported time span range start. Used with <code>daterange</code> config of the <a href=\"#Scheduler/feature/export/PdfExport#config-scheduleRange\">scheduleRange</a></p>",
          "type": "Date",
          "scope": "inner",
          "category": "Export file config"
        },
        {
          "name": "exportDialog",
          "description": "<p>A config object to apply to the <a href=\"#Scheduler/view/export/SchedulerExportDialog\">SchedulerExportDialog</a> widget.</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "rangeEnd",
          "description": "<p>Exported time span range end. Used with <code>daterange</code> config of the <a href=\"#Scheduler/feature/export/PdfExport#config-scheduleRange\">scheduleRange</a></p>",
          "type": "Date",
          "scope": "inner",
          "category": "Export file config"
        }
      ],
      "properties": [
        {
          "name": "exportDialog",
          "description": "<p>Returns the instantiated export dialog widget as configured by <a href=\"#Scheduler/feature/export/PdfExport#config-exportDialog\">exportDialog</a></p>",
          "type": "Scheduler.view.export.SchedulerExportDialog",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "MultiPageExporter",
      "modulePath": "Scheduler/feature/export/exporter/MultiPageExporter",
      "classDescription": "<p>A multiple page exporter. Used by the <a href=\"#Scheduler/feature/export/PdfExport\">PdfExport</a> feature to export to multiple pages.\nYou do not need to use this class directly.</p>\n<h3>Extending exporter</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyMultiPageExporter extends MultiPageExporter {\n    // type is required for exporter\n    static get type() {\n        return 'mymultipageexporter';\n    }\n\n    get stylesheets() {\n        const stylesheets = super.stylesheets;\n\n        stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n\n        return stylesheets;\n    }\n}\n\nconst scheduler = new Scheduler({\n    features : {\n        pdfExport : {\n            // this export feature is configured with only one exporter\n            exporters : [MyMultiPageExporter]\n        }\n    }\n});\n\n// run export with the new exporter\nscheduler.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n</code></pre>",
      "extends": [
        "Grid/feature/export/exporter/MultiPageExporter"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "MultiPageExporter.js",
      "path": "/Calendar/lib/Scheduler/feature/export/exporter",
      "typings": {
        "Grid/feature/export/exporter/MultiPageExporter": "Grid/feature/export/exporter/GridMultiPageExporter"
      },
      "classType": "multipage"
    },
    {
      "name": "MultiPageVerticalExporter",
      "modulePath": "Scheduler/feature/export/exporter/MultiPageVerticalExporter",
      "classDescription": "<p>A vertical multiple page exporter. Used by the <a href=\"#Scheduler/feature/export/PdfExport\">PdfExport</a> feature to export to\nmultiple pages. Content will be scaled in a horizontal direction to fit the page.</p>\n<p>You do not need to use this class directly.</p>\n<h3>Extending exporter</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n    // type is required for exporter\n    static get type() {\n        return 'mymultipageverticalexporter';\n    }\n\n    get stylesheets() {\n        const stylesheets = super.stylesheets;\n\n        stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n\n        return stylesheets;\n    }\n}\n\nconst scheduler = new Scheduler({\n    features : {\n        pdfExport : {\n            // this export feature is configured with only one exporter\n            exporters : [MyMultiPageVerticalExporter]\n        }\n    }\n});\n\n// run export with the new exporter\nscheduler.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n</code></pre>",
      "extends": [
        "Grid/feature/export/exporter/MultiPageVerticalExporter"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "MultiPageVerticalExporter.js",
      "path": "/Calendar/lib/Scheduler/feature/export/exporter",
      "typings": {
        "Grid/feature/export/exporter/MultiPageVerticalExporter": "Grid/feature/export/exporter/GridMultiPageVerticalExporter"
      },
      "classType": "multipagevertical"
    },
    {
      "name": "SinglePageExporter",
      "modulePath": "Scheduler/feature/export/exporter/SinglePageExporter",
      "classDescription": "<p>A single page exporter. Used by the <a href=\"#Scheduler/feature/export/PdfExport\">PdfExport</a> feature to export to single page.\nContent will be scaled in both directions to fit the page.</p>\n<p>You do not need to use this class directly.</p>\n<h3>Extending exporter</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>class MySinglePageExporter extends SinglePageExporter {\n    // type is required for exporter\n    static get type() {\n        return 'mysinglepageexporter';\n    }\n\n    get stylesheets() {\n        const stylesheets = super.stylesheets;\n\n        stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n\n        return stylesheets;\n    }\n}\n\nconst scheduler = new Scheduler({\n    features : {\n        pdfExport : {\n            // this export feature is configured with only one exporter\n            exporters : [MySinglePageExporter]\n        }\n    }\n});\n\n// run export with the new exporter\nscheduler.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n</code></pre>",
      "extends": [
        "Grid/feature/export/exporter/SinglePageExporter"
      ],
      "feature": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SinglePageExporter.js",
      "path": "/Calendar/lib/Scheduler/feature/export/exporter",
      "typings": {
        "Grid/feature/export/exporter/SinglePageExporter": "Grid/feature/export/exporter/GridSinglePageExporter"
      },
      "classType": "singlepage"
    },
    {
      "name": "DependencyCreation",
      "modulePath": "Scheduler/feature/mixin/DependencyCreation",
      "description": "<p>Mixin for Dependencies feature that handles dependency creation (drag &amp; drop from terminals which are shown on hover).\nRequires <a href=\"#Core/mixin/Delayable\">Delayable</a> to be mixed in alongside.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "DependencyCreation.js",
      "path": "/Calendar/lib/Scheduler/feature/mixin",
      "properties": [
        {
          "name": "allowDropOnEventBar",
          "description": "<p><code>false</code> to require a drop on a target event bar side circle to define the dependency type.\nIf dropped on the event bar, the <code>defaultValue</code> of the DependencyModel <code>type</code> field will be used to\ndetermine the target task side.</p>",
          "type": "Boolean",
          "scope": "inner"
        }
      ],
      "configs": [
        {
          "name": "allowDropOnEventBar",
          "description": "<p><code>false</code> to require a drop on a target event bar side circle to define the dependency type.\nIf dropped on the event bar, the <code>defaultValue</code> of the DependencyModel <code>type</code> field will be used to\ndetermine the target task side.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "showCreationTooltip",
          "description": "<p><code>false</code> to not show a tooltip while creating a dependency</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "creationTooltip",
          "description": "<p>A tooltip config object that will be applied to the dependency creation tooltip</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "terminalCls",
          "description": "<p>CSS class used for terminals</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-terminal"
        },
        {
          "name": "terminalSides",
          "description": "<p>Where (at events borders) to display terminals</p>",
          "type": "Array.<String>",
          "scope": "inner",
          "defaultValue": "[\"left\",\"top\",\"right\",\"bottom\"]"
        },
        {
          "name": "allowCreate",
          "description": "<p>Set to <code>false</code> to not allow creating dependencies</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "functions": [
        {
          "name": "onTimeSpanMouseEnter",
          "access": "private",
          "description": "<p>Show terminals when mouse enters event/task element</p>",
          "scope": "instance"
        },
        {
          "name": "onTimeSpanMouseLeave",
          "access": "private",
          "description": "<p>Hide terminals when mouse leaves event/task element</p>",
          "scope": "instance"
        },
        {
          "name": "onTerminalMouseOut",
          "access": "private",
          "description": "<p>Remove hover styling when mouse leaves terminal. Also hides terminals when mouse leaves one it and not creating a\ndependency.</p>",
          "scope": "instance"
        },
        {
          "name": "onTerminalPointerDown",
          "access": "private",
          "description": "<p>Start creating a dependency when mouse is pressed over terminal</p>",
          "scope": "instance"
        },
        {
          "name": "onMouseMove",
          "access": "private",
          "description": "<p>Update connector line showing dependency between source and target when mouse moves. Also check if mouse is over\na valid target terminal</p>",
          "scope": "instance"
        },
        {
          "name": "onMouseUp",
          "access": "private",
          "description": "<p>Create a new dependency if mouse release over valid terminal. Hides connector</p>",
          "scope": "instance",
          "async": true
        },
        {
          "name": "abort",
          "description": "<p>Aborts dependency creation, removes proxy and cleans up listeners</p>",
          "scope": "instance"
        },
        {
          "name": "createConnector",
          "access": "private",
          "description": "<p>Creates a connector line that visualizes dependency source &amp; target</p>",
          "scope": "instance"
        },
        {
          "name": "removeConnector",
          "access": "private",
          "description": "<p>Remove connector</p>",
          "scope": "instance"
        },
        {
          "name": "showTerminals",
          "description": "<p>Show terminals for specified event at sides defined in #terminalSides.</p>",
          "parameters": [
            {
              "name": "timeSpanRecord",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>Event/task to show terminals for</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Event/task element</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hideTerminals",
          "description": "<p>Hide terminals for specified event</p>",
          "parameters": [
            {
              "name": "eventElement",
              "type": "HTMLElement",
              "description": "<p>Event element</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "createDependency",
          "access": "internal",
          "description": "<p>Create a new dependency from source terminal to target terminal</p>",
          "scope": "instance"
        },
        {
          "name": "updateTooltip",
          "access": "private",
          "description": "<p>Update dependency creation tooltip</p>",
          "scope": "instance"
        }
      ],
      "events": [
        {
          "name": "beforeDependencyCreateDrag",
          "description": "<p>Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false to\nprevent it</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The source task</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "dependencyCreateDragStart",
          "description": "<p>Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The source task</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "dependencyValidationComplete",
          "description": "<p>Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The source task</p>"
            },
            {
              "name": "target",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The target task</p>"
            },
            {
              "name": "dependencyType",
              "type": "Number",
              "description": "<p>The dependency type, see <a href=\"#Scheduler/model/DependencyBaseModel#property-Type-static\">Type</a></p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "dependencyValidationStart",
          "description": "<p>Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The source task</p>"
            },
            {
              "name": "target",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The target task</p>"
            },
            {
              "name": "dependencyType",
              "type": "Number",
              "description": "<p>The dependency type, see <a href=\"#Scheduler/model/DependencyBaseModel#property-Type-static\">Type</a></p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "beforeDependencyCreateFinalize",
          "description": "<p>Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The source task</p>"
            },
            {
              "name": "target",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The target task</p>"
            },
            {
              "name": "fromSide",
              "type": "String",
              "description": "<p>The from side (left / right / top / bottom)</p>"
            },
            {
              "name": "toSide",
              "type": "String",
              "description": "<p>The to side (left / right / top / bottom)</p>"
            }
          ],
          "preventable": true,
          "async": true,
          "onOwner": true
        },
        {
          "name": "dependencyCreateDrop",
          "description": "<p>Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The source task</p>"
            },
            {
              "name": "target",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The target task</p>"
            },
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyBaseModel",
              "description": "<p>The created dependency</p>"
            }
          ],
          "onOwner": true
        },
        {
          "name": "afterDependencyCreateDrop",
          "description": "<p>Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The source task</p>"
            },
            {
              "name": "target",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The target task</p>"
            },
            {
              "name": "dependency",
              "type": "Scheduler.model.DependencyBaseModel",
              "description": "<p>The created dependency</p>"
            }
          ],
          "onOwner": true
        }
      ]
    },
    {
      "name": "RecurringEventEdit",
      "modulePath": "Scheduler/feature/mixin/RecurringEventEdit",
      "description": "<p>This mixin class provides recurring events functionality to the <a href=\"#Scheduler/feature/EventEdit\">event editor</a>.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurringEventEdit.js",
      "path": "/Calendar/lib/Scheduler/feature/mixin",
      "properties": [
        {
          "name": "recurrenceCombo",
          "description": "<p>Reference to the <code>Repeat</code> event field, if used</p>",
          "type": "Scheduler.view.recurrence.field.RecurrenceCombo",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "editRecurrenceButton",
          "description": "<p>Reference to the button that opens the event repeat settings dialog, if used</p>",
          "type": "Scheduler.view.recurrence.RecurrenceLegendButton",
          "scope": "inner",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "showRecurringUI",
          "description": "<p>Set to <code>false</code> to hide recurring fields in event editor,\neven if the <a href=\"#Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents\">Recurring Events</a> is <code>true</code>\nand a recurring event is being edited.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Recurring"
        }
      ]
    },
    {
      "name": "AssignmentModel",
      "modulePath": "Scheduler/model/AssignmentModel",
      "classDescription": "<p>This model represents a single assignment of a resource to an event in the scheduler, usually added to a\n<a href=\"#Scheduler/data/AssignmentStore\">AssignmentStore</a>.</p>\n<p>It is a subclass of the <a href=\"#Core/data/Model\">Model</a> class. Please refer to the documentation for that class to become\nfamiliar with the base interface of this class.</p>\n<h2>Fields and references</h2>\n<p>An Assignment has the following fields:</p>\n<ul>\n<li><code>id</code> - The id of the assignment</li>\n<li><code>resourceId</code> - The id of the resource assigned (optionally replaced with <code>resource</code> for load)</li>\n<li><code>eventId</code> - The id of the event to which the resource is assigned (optionally replaced with <code>event</code> for load)</li>\n</ul>\n<p>The data source for these fields can be customized by subclassing this class:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyAssignment extends AssignmentModel {\n  static get fields() {\n      return [\n         { name : 'resourceId', dataSource : 'linkedResource' }\n      ];\n  }\n}\n</code></pre>\n<p>After load and project normalization, these references are accessible (assuming their respective stores are loaded):</p>\n<ul>\n<li><code>event</code> - The linked event record</li>\n<li><code>resource</code> - The linked resource record</li>\n</ul>\n<h2>Async resolving of references</h2>\n<p>As described above, an assignment links an event to a resource. It holds references to an event record and a resource\nrecord. These references are populated async, using the calculation engine of the project that the assignment via\nits store is a part of. Because of this asyncness, references cannot be used immediately after modifications:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignment.resourceId = 2;\n// assignment.resource is not yet available\n</code></pre>\n<p>To make sure references are updated, wait for calculations to finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignment.resourceId = 2;\nawait assignment.project.commitAsync();\n// assignment.resource is available\n</code></pre>\n<p>As an alternative, you can also use <code>setAsync()</code> to trigger calculations directly after the change:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await assignment.setAsync({ resourceId : 2});\n// assignment.resource is available\n</code></pre>",
      "extends": [
        "Core/data/Model"
      ],
      "mixes": [
        "Scheduler/model/mixin/AssignmentModelMixin"
      ],
      "uninherit": [
        "Core/data/mixin/TreeNode"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "AssignmentModel.js",
      "path": "/Calendar/lib/Scheduler/model",
      "fields": [
        {
          "name": "event",
          "description": "<p>Id for event to assign. Can be used as an alternative to <code>eventId</code>, but please note that after\nload it will be populated with the actual event and not its id. This field is not persistable.</p>",
          "type": "Scheduler.model.EventModel",
          "accepts": [
            "String",
            "Number",
            "Scheduler.model.EventModel"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "resource",
          "description": "<p>Id for resource to assign to. Can be used as an alternative to <code>resourceId</code>, but please note that after\nload it will be populated with the actual resource and not its id. This field is not persistable.</p>",
          "type": "Scheduler.model.ResourceModel",
          "accepts": [
            "String",
            "Number",
            "Scheduler.model.ResourceModel"
          ],
          "scope": "inner",
          "category": "Common"
        }
      ]
    },
    {
      "name": "DependencyBaseModel",
      "modulePath": "Scheduler/model/DependencyBaseModel",
      "classDescription": "<p>Base class used for both Scheduler and Gantt. Not intended to be used directly</p>",
      "extends": [
        "Core/data/Model"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DependencyBaseModel.js",
      "path": "/Calendar/lib/Scheduler/model",
      "functions": [
        {
          "name": "setAsync",
          "description": "<p>Set value for the specified field(s), triggering engine calculations immediately. See\n<a href=\"#Core/data/Model#function-set\">Model#set()</a> for arguments.\n*</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dependency.set('from', 2);\n// dependency.fromEvent is not yet up to date\n\nawait dependency.setAsync('from', 2);\n// dependency.fromEvent is up to date\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The field to set value for, or an object with multiple values to set in one call</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to set</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Set to true to not trigger events\nautomatically.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Editing",
          "async": true
        },
        {
          "name": "getHardType",
          "description": "<p>Returns dependency hard type, see <a href=\"#Scheduler/model/DependencyBaseModel#property-hardType\">hardType</a>.</p>",
          "scope": "instance",
          "category": "Dependency",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "setHardType",
          "description": "<p>Sets dependency <a href=\"#Scheduler/model/DependencyBaseModel#field-type\">type</a> and resets <a href=\"#Scheduler/model/DependencyBaseModel#field-fromSide\">fromSide</a> and <a href=\"#Scheduler/model/DependencyBaseModel#field-toSide\">toSide</a> to null.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "Number"
            }
          ],
          "scope": "instance",
          "category": "Dependency"
        },
        {
          "name": "setLag",
          "description": "<p>Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is readonly after creation</p>",
          "parameters": [
            {
              "name": "lag",
              "type": [
                "Number",
                "String",
                "Object"
              ],
              "description": "<p>The lag value. May be just a numeric magnitude, or a full string descriptor eg '1d'</p>"
            },
            {
              "name": "lagUnit",
              "type": "String",
              "description": "<p>Unit for numeric lag value, see <a href=\"#Scheduler/model/DependencyBaseModel#field-lagUnit\">lagUnit</a> for valid values</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Dependency"
        },
        {
          "name": "highlight",
          "description": "<p>Applies given CSS class to dependency, the value doesn't persist</p>",
          "parameters": [
            {
              "name": "cls",
              "type": "String"
            }
          ],
          "scope": "instance",
          "category": "Dependency"
        },
        {
          "name": "unhighlight",
          "description": "<p>Removes given CSS class from dependency if applied, the value doesn't persist</p>",
          "parameters": [
            {
              "name": "cls",
              "type": "String"
            }
          ],
          "scope": "instance",
          "category": "Dependency"
        },
        {
          "name": "isHighlightedWith",
          "description": "<p>Checks if the given CSS class is applied to dependency.</p>",
          "parameters": [
            {
              "name": "cls",
              "type": "String"
            }
          ],
          "scope": "instance",
          "category": "Dependency",
          "returns": {
            "type": "Boolean"
          }
        }
      ],
      "properties": [
        {
          "name": "Type",
          "description": "<p>An enumerable object, containing names for the dependency types integer constants.</p>\n<ul>\n<li>0 StartToStart</li>\n<li>1 StartToEnd</li>\n<li>2 EndToStart</li>\n<li>3 EndToEnd</li>\n</ul>",
          "type": "Object",
          "scope": "static",
          "readonly": true,
          "category": "Dependency"
        },
        {
          "name": "hardType",
          "description": "<p>Alias to dependency type, but when set resets <a href=\"#Scheduler/model/DependencyBaseModel#field-fromSide\">fromSide</a> &amp; <a href=\"#Scheduler/model/DependencyBaseModel#field-toSide\">toSide</a> to null as well.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Dependency"
        },
        {
          "name": "fullLag",
          "description": "<p>Property which encapsulates the lag's magnitude and units. An object which contains two properties:</p>",
          "type": "Core.data.Duration",
          "scope": "instance",
          "category": "Dependency",
          "properties": [
            {
              "name": "fullLag.magnitude",
              "type": "Number",
              "description": "<p>The magnitude of the duration</p>",
              "isSubParam": true
            },
            {
              "name": "fullLag.unit",
              "type": "String",
              "description": "<p>The unit in which the duration is measured, eg <code>'d'</code> for days</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "isPersistable",
          "description": "<p>Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Editing"
        },
        {
          "name": "isValid",
          "description": "<p>Returns <code>true</code> if the dependency is valid. Has valid type and both source and target ids set and not links to itself.</p>",
          "type": "Boolean",
          "scope": "instance",
          "category": "Editing",
          "typings": false
        }
      ],
      "fields": [
        {
          "name": "from",
          "description": "<p>From event, id of source event</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "to",
          "description": "<p>To event, id of target event</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "type",
          "description": "<p>Dependency type, see static property <a href=\"#Scheduler/model/DependencyBaseModel#property-Type-static\">Type</a></p>",
          "type": "Number",
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "cls",
          "description": "<p>CSS class to apply to lines drawn for the dependency</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "bidirectional",
          "description": "<p>Bidirectional, drawn with arrows in both directions</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "fromSide",
          "description": "<p>Start side on source (top, left, bottom, right)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "toSide",
          "description": "<p>End side on target (top, left, bottom, right)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "lag",
          "description": "<p>The magnitude of this dependency's lag (the number of units).</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "lagUnit",
          "description": "<p>The units of this dependency's lag, defaults to &quot;d&quot; (days). Valid values are:</p>\n<ul>\n<li>&quot;ms&quot; (milliseconds)</li>\n<li>&quot;s&quot; (seconds)</li>\n<li>&quot;m&quot; (minutes)</li>\n<li>&quot;h&quot; (hours)</li>\n<li>&quot;d&quot; (days)</li>\n<li>&quot;w&quot; (weeks)</li>\n<li>&quot;M&quot; (months)</li>\n<li>&quot;y&quot; (years)</li>\n</ul>\n<p>This field is readonly after creation, to change <code>lagUnit</code> use <a href=\"#Scheduler/model/DependencyBaseModel#function-setLag\">setLag()</a>.</p>",
          "type": "String",
          "scope": "inner",
          "readonly": true,
          "category": "Dependency"
        },
        {
          "name": "fromEvent",
          "description": "<p>Gets/sets the source event of the dependency.</p>\n<p>Accepts multiple formats but always returns an <a href=\"#Scheduler/model/EventModel\">EventModel</a>.</p>\n<p><strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\nneed to remap, consider using <a href=\"#Scheduler/model/DependencyBaseModel#field-from\">from</a> instead.</p>",
          "type": "Scheduler.model.EventModel",
          "accepts": [
            "String",
            "Number",
            "Scheduler.model.EventModel"
          ],
          "scope": "inner",
          "category": "Dependency"
        },
        {
          "name": "toEvent",
          "description": "<p>Gets/sets the target event of the dependency.</p>\n<p>Accepts multiple formats but always returns an <a href=\"#Scheduler/model/EventModel\">EventModel</a>.</p>\n<p><strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\nneed to remap, consider using <a href=\"#Scheduler/model/DependencyBaseModel#field-to\">to</a> instead.</p>",
          "type": "Scheduler.model.EventModel",
          "accepts": [
            "String",
            "Number",
            "Scheduler.model.EventModel"
          ],
          "scope": "inner",
          "category": "Dependency"
        }
      ]
    },
    {
      "name": "DependencyModel",
      "modulePath": "Scheduler/model/DependencyModel",
      "classDescription": "<p>This model represents a dependency between two events, usually added to a <a href=\"#Scheduler/data/DependencyStore\">DependencyStore</a>.</p>\n<p>It is a subclass of the <a href=\"#Scheduler/model/DependencyBaseModel\">DependencyBaseModel</a> class, which in its turn subclasses\n<a href=\"#Core/data/Model\">Model</a>. Please refer to documentation of those classes to become familiar with the base interface of\nthis class.</p>\n<h2>Fields and references</h2>\n<p>A Dependency has a few predefined fields, see Fields below.  The name of any fields data source can be customized in\nthe subclass, see the example below. Please also refer to <a href=\"#Core/data/Model\">Model</a> for details.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyDependency extends DependencyModel {\n  static get fields() {\n    return [\n      { name: 'to', dataSource: 'targetId' },\n      { name: 'from', dataSource: 'sourceId' }\n    ]);\n  }\n}\n</code></pre>\n<p>After load and project normalization, these references are accessible (assuming their respective stores are loaded):</p>\n<ul>\n<li><code>fromEvent</code> - The event on the start side of the dependency</li>\n<li><code>toEvent</code> - The event on the end side of the dependency</li>\n</ul>\n<h2>Async resolving of references</h2>\n<p>As described above, a dependency has links to events. These references are populated async, using the calculation\nengine of the project that the resource via its store is a part of. Because of this asyncness, references cannot be\nused immediately after modifications:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dependency.from = 2;\n// dependency.fromEvent is not yet up to date\n</code></pre>\n<p>To make sure references are updated, wait for calculations to finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>dependency.from = 2;\nawait dependency.project.commitAsync();\n// dependency.fromEvent is up to date\n</code></pre>\n<p>As an alternative, you can also use <code>setAsync()</code> to trigger calculations directly after the change:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await dependency.setAsync({ from : 2});\n// dependency.fromEvent is up to date\n</code></pre>",
      "extends": [
        "Scheduler/model/DependencyBaseModel"
      ],
      "uninherit": [
        "Core/data/mixin/TreeNode"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "DependencyModel.js",
      "path": "/Calendar/lib/Scheduler/model"
    },
    {
      "name": "EventModel",
      "modulePath": "Scheduler/model/EventModel",
      "classDescription": "<p>This class represent a single event in your schedule, usually added to a <a href=\"#Scheduler/data/EventStore\">EventStore</a>.</p>\n<p>It is a subclass of the <a href=\"#Scheduler/model/TimeSpan\">TimeSpan</a>, which is in turn subclass of <a href=\"#Core/data/Model\">Model</a>.\nPlease refer to documentation of that class to become familiar with the base interface of the event.</p>\n<h2>Async date calculations</h2>\n<p>A record created from an <a href=\"#Scheduler/model/EventModel\">EventModel</a> is normally part of an <a href=\"#Scheduler/data/EventStore\">EventStore</a>,\nwhich in turn is part of a project. When dates or the duration of an event is changed, the project performs async calculations\nto normalize the other fields.\nFor example if <a href=\"#Scheduler/model/EventModel#field-duration\">duration</a> is changed, it will calculate <a href=\"#Scheduler/model/EventModel#field-endDate\">endDate</a>.</p>\n<p>As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\nimmediately after a change. To ensure data is up to date, await the calculations to finish.</p>\n<p>For example, <a href=\"#Scheduler/model/EventModel#field-endDate\">endDate</a> is not up to date after this operation:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventRecord.duration = 5;\n// endDate not yet calculated\n</code></pre>\n<p>But if calculations are awaited it is up to date:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventRecord.duration = 5;\nawait eventRecord.project.commitAsync();\n// endDate is calculated\n</code></pre>\n<p>As an alternative, you can also use <code>setAsync()</code> to trigger calculations directly after the change:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await eventRecord.setAsync({ duration : 5});\n// endDate is calculated\n</code></pre>\n<h2>Subclassing the Event model class</h2>\n<p>The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for the existing fields,\nyou can do that by subclassing this class (see example below).</p>\n<pre class=\"prettyprint source\"><code>class MyEvent extends EventModel {\n\n    static get fields() {\n        return [\n           // Add new field\n           { name: 'myField', type : 'number', defaultValue : 0 }\n        ];\n    },\n\n    myCheckMethod() {\n        return this.myField > 0\n    },\n\n    ...\n});\n</code></pre>\n<p>If you in your data want to use other names for the <a href=\"#Scheduler/model/EventModel#field-startDate\">startDate</a>, <a href=\"#Scheduler/model/EventModel#field-endDate\">endDate</a>, <a href=\"#Scheduler/model/EventModel#field-resourceId\">resourceId</a> and name fields you can configure\nthem as seen below:</p>\n<pre class=\"prettyprint source\"><code>class MyEvent extends EventModel {\n\n    static get fields() {\n        return [\n           { name: 'startDate', dataSource : 'taskStart' },\n           { name: 'endDate', dataSource : 'taskEnd', format: 'YYYY-MM-DD' },\n           { name: 'resourceId', dataSource : 'userId' },\n           { name: 'name', dataSource : 'taskTitle' },\n        ];\n    },\n    ...\n});\n</code></pre>\n<p>Please refer to <a href=\"#Core/data/Model\">Model</a> for additional details.</p>",
      "extends": [
        "Scheduler/model/TimeSpan"
      ],
      "mixes": [
        "Scheduler/model/mixin/RecurringTimeSpan",
        "Scheduler/model/mixin/EventModelMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventModel.js",
      "path": "/Calendar/lib/Scheduler/model"
    },
    {
      "name": "ProjectModel",
      "modulePath": "Scheduler/model/ProjectModel",
      "classDescription": "<p>This class represents a global project of your Scheduler - a central place for all data.</p>\n<p>It holds and links the stores usually used by Scheduler:</p>\n<ul>\n<li><a href=\"#Scheduler/data/EventStore\">EventStore</a></li>\n<li><a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a></li>\n<li><a href=\"#Scheduler/data/AssignmentStore\">AssignmentStore</a></li>\n<li><a href=\"#Scheduler/data/DependencyStore\">DependencyStore</a></li>\n<li><a href=\"#Scheduler/model/ProjectModel#config-timeRangeStore\">TimeRangeStore</a></li>\n<li><a href=\"#Scheduler/data/ResourceTimeRangeStore\">ResourceTimeRangeStore</a></li>\n</ul>\n<p>The project uses a calculation engine to normalize dates and durations. It is also responsible for\nhandling references between models, for example to link an event via an assignment to a resource. These operations\nare asynchronous, a fact that is hidden when working in the Scheduler UI but which you must know about when performing\nmore advanced operations on the data level.</p>\n<p>When there is a change to data that requires something else to be recalculated, the project schedules a calculation (a\ncommit) which happens moments later. It is also possible to trigger these calculations directly. This snippet illustrate\nthe process:</p>\n<ol>\n<li>Something changes which requires the project to recalculate, for example adding a new task:</li>\n</ol>\n<pre class=\"prettyprint source lang-javascript\"><code>const [event] = project.eventStore.add({ startDate, endDate });\n</code></pre>\n<ol start=\"2\">\n<li>A recalculation is scheduled, thus:</li>\n</ol>\n<pre class=\"prettyprint source lang-javascript\"><code>event.duration; // &lt;- Not yet calculated\n</code></pre>\n<ol start=\"3\">\n<li>Calculate now instead of waiting for the scheduled calculation</li>\n</ol>\n<pre class=\"prettyprint source lang-javascript\"><code>await project.commitAsync();\n\nevent.duration; // &lt;- Now available\n</code></pre>\n<h2>Using inline data</h2>\n<p>The project provides settable property <a href=\"#Scheduler/crud/AbstractCrudManager#property-inlineData\">inlineData</a> that can\nbe used to get data from all its stores at once and to set this data as well. Populating the stores this way can\nbe useful if you cannot or you do not want to use CrudManager for server requests but you pull the data by other\nmeans and have it ready outside of ProjectModel. Also, the data from all stores is available in a single\nassignment statement.</p>\n<h3>Getting data</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const data = scheduler.project.inlineData;\n\n// use the data in your application\n</code></pre>\n<h3>Setting data</h3>\n<pre class=\"prettyprint source lang-javascript\"><code>const data = // your function to pull server data\n\nscheduler.project.inlineData = data;\n</code></pre>\n<h2>Monitoring data changes</h2>\n<p>While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\nto have a centralized place to handle all data changes. By listening for the <a href=\"#Scheduler/model/ProjectModel#event-change\">change event</a> your\ncode gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\ndate:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    project: {\n        listeners : {\n            change({ store, action, records }) {\n                const { $name } = store.constructor;\n\n                if (action === 'add') {\n                    externalDataModel.add($name, records);\n                }\n\n                if (action === 'remove') {\n                    externalDataModel.remove($name, records);\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<h2>Built in StateTrackingManager</h2>\n<p>The project also has a built in <a href=\"#Core/data/stm/StateTrackingManager\">StateTrackingManager</a> (STM for short), that\nhandles undo/redo for the project stores (additional stores can also be added). You can enable it to track all\nproject store changes:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Turn on auto recording when you create your Scheduler:\nconst scheduler = new Scheduler({\n   project : {\n       stm : {\n           autoRecord : true\n       }\n   }\n});\n\n// Undo a transaction\nproject.stm.undo();\n\n// Redo\nproject.stm.redo();\n</code></pre>\n<p>Check out the <code>undoredo</code> demo to see it in action.</p>",
      "extends": [
        "Core/data/Model"
      ],
      "mixes": [
        "Scheduler/model/mixin/ProjectModelMixin"
      ],
      "uninherit": [
        "Core/data/mixin/TreeNode"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ProjectModel.js",
      "path": "/Calendar/lib/Scheduler/model",
      "hideFields": [
        "id",
        "readOnly",
        "children",
        "parentId",
        "parentIndex"
      ],
      "properties": [
        {
          "name": "events",
          "description": "<p>Get/set <a href=\"#Scheduler/model/ProjectModel#property-eventStore\">eventStore</a> data.</p>\n<p>Always returns an array of <a href=\"#Scheduler/model/EventModel\">EventModels</a> but also accepts an array of\nits configuration objects as input.</p>",
          "type": "Array.<Scheduler.model.EventModel>",
          "accepts": [
            "Scheduler.model.EventModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "resources",
          "description": "<p>Get/set <a href=\"#Scheduler/model/ProjectModel#property-resourceStore\">resourceStore</a> data.</p>\n<p>Always returns an array of <a href=\"#Scheduler/model/ResourceModel\">ResourceModels</a> but also accepts an array\nof its configuration objects as input.</p>",
          "type": "Array.<Scheduler.model.ResourceModel>",
          "accepts": [
            "Scheduler.model.ResourceModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "assignments",
          "description": "<p>Get/set <a href=\"#Scheduler/model/ProjectModel#property-assignmentStore\">assignmentStore</a> data.</p>\n<p>Always returns an array of <a href=\"#Scheduler/model/AssignmentModel\">AssignmentModels</a> but also accepts an\narray of its configuration objects as input.</p>",
          "type": "Array.<Scheduler.model.AssignmentModel>",
          "accepts": [
            "Scheduler.model.AssignmentModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "dependencies",
          "description": "<p>Get/set <a href=\"#Scheduler/model/ProjectModel#property-dependencyStore\">dependencyStore</a> data.</p>\n<p>Always returns an array of <a href=\"#Scheduler/model/DependencyModel\">DependencyModels</a> but also accepts an\narray of its configuration objects as input.</p>",
          "type": "Array.<Scheduler.model.DependencyModel>",
          "accepts": [
            "Scheduler.model.DependencyModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "timeRanges",
          "description": "<p>Get/set <a href=\"#Scheduler/model/ProjectModel#property-timeRangeStore\">timeRangeStore</a> data.</p>\n<p>Always returns an array of <a href=\"#Scheduler/model/TimeSpan\">TimeSpans</a> but also accepts an\narray of its configuration objects as input.</p>",
          "type": "Array.<Scheduler.model.TimeSpan>",
          "accepts": [
            "Scheduler.model.TimeSpan[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "resourceTimeRanges",
          "description": "<p>Get/set <a href=\"#Scheduler/model/ProjectModel#property-resourceTimeRangeStore\">resourceTimeRangeStore</a> data.</p>\n<p>Always returns an array of <a href=\"#Scheduler/model/ResourceTimeRangeModel\">ResourceTimeRangeModels</a> but\nalso accepts an array of its configuration objects as input.</p>",
          "type": "Array.<Scheduler.model.ResourceTimeRangeModel>",
          "accepts": [
            "Scheduler.model.ResourceTimeRangeModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "eventStore",
          "description": "<p>The <a href=\"#Scheduler/data/EventStore\">store</a> holding the events information.</p>\n<p>See also <a href=\"#Scheduler/model/EventModel\">EventModel</a></p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "dependencyStore",
          "description": "<p>The <a href=\"#Scheduler/data/DependencyStore\">store</a> holding the dependencies information.</p>\n<p>See also <a href=\"#Scheduler/model/DependencyModel\">DependencyModel</a></p>",
          "type": "Scheduler.data.DependencyStore",
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "resourceStore",
          "description": "<p>The <a href=\"#Scheduler/data/ResourceStore\">store</a> holding the resources that can be assigned to the events in the event store.</p>\n<p>See also <a href=\"#Scheduler/model/ResourceModel\">ResourceModel</a></p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "assignmentStore",
          "description": "<p>The <a href=\"#Scheduler/data/AssignmentStore\">store</a> holding the assignments information.</p>\n<p>See also <a href=\"#Scheduler/model/AssignmentModel\">AssignmentModel</a></p>",
          "type": "Scheduler.data.AssignmentStore",
          "scope": "inner",
          "category": "Models & Stores"
        }
      ],
      "configs": [
        {
          "name": "events",
          "description": "<p>Data use to fill the <a href=\"#Scheduler/model/ProjectModel#property-eventStore\">eventStore</a>. Should be an array of\n<a href=\"#Scheduler/model/EventModel\">EventModels</a> or its configuration objects.</p>",
          "type": [
            "Array.<Scheduler.model.EventModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "resources",
          "description": "<p>Data use to fill the <a href=\"#Scheduler/model/ProjectModel#property-resourceStore\">resourceStore</a>. Should be an array of\n<a href=\"#Scheduler/model/ResourceModel\">ResourceModels</a> or its configuration objects.</p>",
          "type": [
            "Array.<Scheduler.model.ResourceModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "assignments",
          "description": "<p>Data use to fill the <a href=\"#Scheduler/model/ProjectModel#property-assignmentStore\">assignmentStore</a>. Should be an array of\n<a href=\"#Scheduler/model/AssignmentModel\">AssignmentModels</a> or its configuration objects.</p>",
          "type": [
            "Array.<Scheduler.model.AssignmentModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "dependencies",
          "description": "<p>Data use to fill the <a href=\"#Scheduler/model/ProjectModel#property-dependencyStore\">dependencyStore</a>. Should be an array of\n<a href=\"#Scheduler/model/DependencyModel\">DependencyModels</a> or its configuration objects.</p>",
          "type": [
            "Array.<Scheduler.model.DependencyModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "timeRanges",
          "description": "<p>Data use to fill the <a href=\"#Scheduler/model/ProjectModel#property-timeRangeStore\">timeRangeStore</a>. Should be an array of\n<a href=\"#Scheduler/model/TimeSpan\">TimeSpans</a> or its configuration objects.</p>",
          "type": [
            "Array.<Scheduler.model.TimeSpan>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "resourceTimeRanges",
          "description": "<p>Data use to fill the <a href=\"#Scheduler/model/ProjectModel#property-resourceTimeRangeStore\">resourceTimeRangeStore</a>. Should be an array\nof <a href=\"#Scheduler/model/ResourceTimeRangeModel\">ResourceTimeRangeModels</a> or its configuration objects.</p>",
          "type": [
            "Array.<Scheduler.model.ResourceTimeRangeModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "eventsData",
          "description": "<p>The initial data, to fill the <a href=\"#Scheduler/model/ProjectModel#property-eventStore\">eventStore</a> with.\nShould be an array of <a href=\"#Scheduler/model/EventModel\">EventModels</a> or its configuration objects.</p>",
          "type": "Array.<Scheduler.model.EventModel>",
          "scope": "inner",
          "category": "Legacy inline data"
        },
        {
          "name": "dependenciesData",
          "description": "<p>The initial data, to fill the <a href=\"#Scheduler/model/ProjectModel#property-dependencyStore\">dependencyStore</a> with.\nShould be an array of <a href=\"#Scheduler/model/DependencyModel\">DependencyModels</a> or its configuration\nobjects.</p>",
          "type": "Array.<Scheduler.model.DependencyModel>",
          "scope": "inner",
          "category": "Legacy inline data"
        },
        {
          "name": "resourcesData",
          "description": "<p>The initial data, to fill the <a href=\"#Scheduler/model/ProjectModel#property-resourceStore\">resourceStore</a> with.\nShould be an array of <a href=\"#Scheduler/model/ResourceModel\">ResourceModels</a> or its configuration objects.</p>",
          "type": "Array.<Scheduler.model.ResourceModel>",
          "scope": "inner",
          "category": "Legacy inline data"
        },
        {
          "name": "assignmentsData",
          "description": "<p>The initial data, to fill the <a href=\"#Scheduler/model/ProjectModel#property-assignmentStore\">assignmentStore</a> with.\nShould be an array of <a href=\"#Scheduler/model/AssignmentModel\">AssignmentModels</a> or its configuration\nobjects.</p>",
          "type": "Array.<Scheduler.model.AssignmentModel>",
          "scope": "inner",
          "category": "Legacy inline data"
        },
        {
          "name": "eventStore",
          "description": "<p>An <a href=\"#Scheduler/data/EventStore\">EventStore</a> instance or a config object.</p>",
          "type": [
            "Scheduler.data.EventStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "dependencyStore",
          "description": "<p>A <a href=\"#Scheduler/data/DependencyStore\">DependencyStore</a> instance or a config object.</p>",
          "type": [
            "Scheduler.data.DependencyStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "resourceStore",
          "description": "<p>A <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a> instance or a config object.</p>",
          "type": [
            "Scheduler.data.ResourceStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "assignmentStore",
          "description": "<p>An <a href=\"#Scheduler/data/AssignmentStore\">AssignmentStore</a> instance or a config object.</p>",
          "type": [
            "Scheduler.data.AssignmentStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "eventModelClass",
          "description": "<p>The constructor of the event model class, to be used in the project. Will be set as the\n<a href=\"#Core/data/Store#config-modelClass\">modelClass</a> property of the <a href=\"#Scheduler/model/ProjectModel#property-eventStore\">eventStore</a></p>",
          "type": "Scheduler.model.EventModel",
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": "typeof EventModel"
          }
        },
        {
          "name": "dependencyModelClass",
          "description": "<p>The constructor of the dependency model class, to be used in the project. Will be set as the\n<a href=\"#Core/data/Store#config-modelClass\">modelClass</a> property of the <a href=\"#Scheduler/model/ProjectModel#property-dependencyStore\">dependencyStore</a></p>",
          "type": "Scheduler.model.DependencyModel",
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": "typeof DependencyModel"
          }
        },
        {
          "name": "resourceModelClass",
          "description": "<p>The constructor of the resource model class, to be used in the project. Will be set as the\n<a href=\"#Core/data/Store#config-modelClass\">modelClass</a> property of the <a href=\"#Scheduler/model/ProjectModel#property-resourceStore\">resourceStore</a></p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": "typeof ResourceModel"
          }
        },
        {
          "name": "assignmentModelClass",
          "description": "<p>The constructor of the assignment model class, to be used in the project. Will be set as the\n<a href=\"#Core/data/Store#config-modelClass\">modelClass</a> property of the <a href=\"#Scheduler/model/ProjectModel#property-assignmentStore\">assignmentStore</a></p>",
          "type": "Scheduler.model.AssignmentModel",
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": "typeof AssignmentModel"
          }
        },
        {
          "name": "eventStoreClass",
          "description": "<p>The constructor to create an event store instance with. Should be a class, subclassing the\n<a href=\"#Scheduler/data/EventStore\">EventStore</a></p>",
          "type": [
            "Scheduler.data.EventStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": [
              "typeof EventStore",
              "object"
            ]
          }
        },
        {
          "name": "dependencyStoreClass",
          "description": "<p>The constructor to create a dependency store instance with. Should be a class, subclassing the\n<a href=\"#Scheduler/data/DependencyStore\">DependencyStore</a></p>",
          "type": [
            "Scheduler.data.DependencyStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": [
              "typeof DependencyStore",
              "object"
            ]
          }
        },
        {
          "name": "resourceStoreClass",
          "description": "<p>The constructor to create a resource store instance with. Should be a class, subclassing the\n<a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a></p>",
          "type": [
            "Scheduler.data.ResourceStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": [
              "typeof ResourceStore",
              "object"
            ]
          }
        },
        {
          "name": "assignmentStoreClass",
          "description": "<p>The constructor to create an assignment store instance with. Should be a class, subclassing the\n<a href=\"#Scheduler/data/AssignmentStore\">AssignmentStore</a></p>",
          "type": [
            "Scheduler.data.AssignmentStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": [
              "typeof AssignmentStore",
              "object"
            ]
          }
        },
        {
          "name": "silenceInitialCommit",
          "description": "<p>Silences propagations caused by the project loading.</p>\n<p>Applying the loaded data to the project occurs in two basic stages:</p>\n<ol>\n<li>Data gets into the engine graph which triggers changes propagation</li>\n<li>The changes caused by the propagation get written to related stores</li>\n</ol>\n<p>Setting this flag to <code>true</code> makes the component perform step 2 silently without triggering events causing reactions on those changes\n(like sending changes back to the server if <code>autoSync</code> is enabled) and keeping stores in unmodified state.</p>\n<p>This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\nBy default the system treats the data as consistent so this option is <code>true</code>.</p>\n<pre class=\"prettyprint source lang-js\"><code>new Scheduler({\n    project : {\n        // We want scheduling engine to recalculate the data properly\n        // so then we could save it back to the server\n        silenceInitialCommit : false\n    }\n    ...\n})\n</code></pre>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Advanced"
        }
      ],
      "events": [
        {
          "name": "dataReady",
          "description": "<p>Fired when the engine has finished its calculations and the results has been written back to the records.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>scheduler.project.on({\n    dataReady() {\n       console.log('Calculations finished');\n    }\n});\n\nscheduler.eventStore.first.duration = 10;\n\n// At some point a bit later it will log 'Calculations finished'\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.ProjectModel",
              "description": "<p>The project</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "createModelPersistencyManager",
          "access": "internal",
          "description": "<p>Creates and returns model persistency manager</p>",
          "scope": "instance",
          "returns": {
            "type": "Scheduler.data.util.ModelPersistencyManager"
          }
        }
      ]
    },
    {
      "name": "RecurrenceModel",
      "modulePath": "Scheduler/model/RecurrenceModel",
      "classDescription": "<p>This class represents a timespan recurrence settings.\nIt is a subclass of <a href=\"#Core/data/Model\">Model</a> class.\nPlease refer to the documentation for that class to become familiar with the base interface of this class.</p>\n<p>The data source for these fields can be customized by subclassing this class.</p>",
      "extends": [
        "Core/data/Model"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceModel.js",
      "path": "/Calendar/lib/Scheduler/model",
      "properties": [
        {
          "name": "isRecurrenceModel",
          "description": "<p>Indicates that this is a <code>RecurrenceModel</code> class instance\n(allows to avoid using <code>instanceof</code>).</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "timeSpan",
          "description": "<p>The timespan this recurrence is associated with.</p>",
          "type": "Scheduler.model.TimeSpan",
          "scope": "instance"
        },
        {
          "name": "rule",
          "description": "<p>The recurrence rule. A string in <a href=\"https://tools.ietf.org/html/rfc5545#section-3.3.10\">RFC-5545</a> described format (&quot;RRULE&quot; expression).</p>",
          "type": "String",
          "scope": "instance"
        }
      ],
      "fields": [
        {
          "name": "frequency",
          "description": "<p>Field defines the recurrence frequency. Supported values are: <code>DAILY</code>, <code>WEEKLY</code>, <code>MONTHLY</code>, <code>YEARLY</code>.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "interval",
          "description": "<p>Field defines how often the recurrence repeats.\nFor example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "endDate",
          "description": "<p>End date of the recurrence. Specifies when the recurrence ends.\nThe value is optional, the recurrence can as well be stopped using <a href=\"#Scheduler/model/RecurrenceModel#field-count\">count</a> field value.</p>",
          "type": "Date",
          "scope": "inner"
        },
        {
          "name": "count",
          "description": "<p>Specifies the number of occurrences after which the recurrence ends.\nThe value includes the associated timespan itself so values less than 2 make no sense.\nThe field is optional, the recurrence as well can be stopped using <a href=\"#Scheduler/model/RecurrenceModel#field-endDate\">endDate</a> field value.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "days",
          "description": "<p>Specifies days of the week on which the timespan should occur.\nAn array of string values <code>SU</code>, <code>MO</code>, <code>TU</code>, <code>WE</code>, <code>TH</code>, <code>FR</code>, <code>SA</code>\ncorresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.\nEach value can also be preceded by a positive (+n) or negative (-n) integer.\nIf present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.</p>\n<p><strong>Not applicable</strong> for daily <a href=\"#Scheduler/model/RecurrenceModel#field-frequency\">frequency</a>.</p>",
          "type": "Array.<String>",
          "scope": "inner"
        },
        {
          "name": "monthDays",
          "description": "<p>Specifies days of the month on which the timespan should occur.\nAn array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).\n<strong>Applicable only</strong> for monthly <a href=\"#Scheduler/model/RecurrenceModel#field-frequency\">frequency</a>.</p>",
          "type": "Array.<Number>",
          "scope": "inner"
        },
        {
          "name": "months",
          "description": "<p>Specifies months of the year on which the timespan should occur.\nAn array of integer values (1 - 12).\n<strong>Applicable only</strong> for yearly <a href=\"#Scheduler/model/RecurrenceModel#field-frequency\">frequency</a>.</p>",
          "type": "Array.<Number>",
          "scope": "inner"
        },
        {
          "name": "positions",
          "description": "<p>The positions to include in the recurrence. The values operate on a set of recurrence instances <strong>in one interval</strong> of the recurrence rule.\nAn array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).\n<strong>Not applicable</strong> for daily <a href=\"#Scheduler/model/RecurrenceModel#field-frequency\">frequency</a>.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "forEachOccurrence",
          "access": "internal",
          "description": "<p>Iterate occurrences for the owning timespan across the specified date range. This method can be called even\nif the timespan is not yet a member of a store, however, the occurrences returned will not be cached across\nsubsequent calls to this method.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the iteration.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date of the iteration.</p>"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call for each occurrence.</p>"
            },
            {
              "name": "fn.occurrence",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The occurrence.</p>",
              "isSubParam": true
            },
            {
              "name": "fn.first",
              "type": "Boolean",
              "description": "<p>A flag which is <code>true</code> for the first occurrence of this recurrence.</p>",
              "isSubParam": true
            },
            {
              "name": "fn.counter",
              "type": "Number",
              "description": "<p>A counter of how many dates have been visited in this iteration.</p>",
              "isSubParam": true
            },
            {
              "name": "fn.date",
              "type": "Date",
              "description": "<p>The occurrence date.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "sanitize",
          "access": "private",
          "description": "<p>Cleans up fields that do not makes sense for the current <a href=\"#Scheduler/model/RecurrenceModel#field-frequency\">frequency</a> value.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "ResourceModel",
      "modulePath": "Scheduler/model/ResourceModel",
      "classDescription": "<p>This class represent a single Resource in scheduler, usually added to a <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a>.</p>\n<p>It is a subclass of  <a href=\"#Core/data/Model\">Model</a>. Please refer to the documentation for that class to become familiar\nwith the base interface of the resource.</p>\n<h2>Fields and references</h2>\n<p>A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing\nyour resources then you should subclass this class:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyResource extends ResourceModel {\n  static get fields() {\n    return [\n      // &quot;id&quot; and &quot;name&quot; fields are already provided by the superclass\n      { name: 'company', type : 'string' }\n    ];\n  }\n});\n</code></pre>\n<p>If you want to use other names in your data for the id and name fields you can configure them as seen below:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyResource extends ResourceModel {\n  static get fields() {\n    return [\n       { name: 'name', dataSource: 'userName' }\n    ];\n  },\n});\n</code></pre>\n<p>After load and project normalization, these references are accessible (assuming their respective stores are loaded):</p>\n<ul>\n<li><code>assignments</code> - The linked assignment records</li>\n<li><code>events</code> - The linked (through assignments) event records</li>\n</ul>\n<h2>Async resolving of references</h2>\n<p>As described above, a resource has links to assignments and events. These references are populated async, using the\ncalculation engine of the project that the resource via its store is a part of. Because of this asyncness, references\ncannot be used immediately after assignment modifications:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignment.resourceId = 2;\n// resource.assignments is not yet up to date\n</code></pre>\n<p>To make sure references are updated, wait for calculations to finish:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignment.resourceId = 2;\nawait assignment.project.commitAsync();\n// resource.assignments is up to date\n</code></pre>\n<p>As an alternative, you can also use <code>setAsync()</code> to trigger calculations directly after the change:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await assignment.setAsync({ resourceId : 2});\n// resource.assignments is up to date\n</code></pre>",
      "extends": [
        "Grid/data/GridRowModel"
      ],
      "mixes": [
        "Scheduler/model/mixin/ResourceModelMixin"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceModel.js",
      "path": "/Calendar/lib/Scheduler/model"
    },
    {
      "name": "ResourceTimeRangeModel",
      "modulePath": "Scheduler/model/ResourceTimeRangeModel",
      "classDescription": "<p>This class represent a single resource time range in your schedule.\nTo style the rendered elements, use <a href=\"#Scheduler/model/TimeSpan#field-cls\">cls</a> or <a href=\"#Scheduler/model/ResourceTimeRangeModel#field-timeRangeColor\">timeRangeColor</a> field.\nThe class is used by the <a href=\"#Scheduler/feature/ResourceTimeRanges\">ResourceTimeRanges</a> feature.</p>\n<h2>Recurring ranges support</h2>\n<p>By default the class doesn't support recurrence.\nIn order to add its support please use <a href=\"#Scheduler/model/mixin/RecurringTimeSpan\">RecurringTimeSpan</a> mixin\n(the store containing the model should in turn be mixed with <a href=\"#Scheduler/data/mixin/RecurringTimeSpansMixin\">RecurringTimeSpansMixin</a> class):</p>\n<pre class=\"prettyprint source lang-js\"><code>// Mix RecurringTimeSpan (which adds recurrence support) to ResourceTimeRangeModel\nclass MyResourceTimeRange extends RecurringTimeSpan(ResourceTimeRangeModel) {};\n\n// Mix RecurringTimeSpansMixin (which adds recurrence support) to ResourceTimeRangeStore\nclass MyResourceTimeRangeStore extends RecurringTimeSpansMixin(ResourceTimeRangeStore) {\n    static get defaultConfig() {\n        return {\n            // use our new MyResourceTimeRange model\n            modelClass : MyResourceTimeRange\n        };\n    }\n};\n\n// Make new store that supports time ranges recurrence\nconst store = new MyResourceTimeRangeStore({\n    data : [{        {\n        id             : 1,\n        resourceId     : 'r1',\n        startDate      : '2019-01-01T11:00',\n        endDate        : '2019-01-01T13:00',\n        name           : 'Coffee break',\n        // this time range should repeat every day\n        recurrenceRule : 'FREQ=DAILY'\n    }]\n});\n</code></pre>",
      "extends": [
        "Scheduler/model/TimeSpan"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceTimeRangeModel.js",
      "path": "/Calendar/lib/Scheduler/model",
      "fields": [
        {
          "name": "resourceId",
          "description": "<p>Id of the resource this time range is associated with</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner"
        },
        {
          "name": "timeRangeColor",
          "description": "<p>Controls this time ranges primary color, defaults to using current themes default time range color.</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "properties": [
        {
          "name": "resource",
          "description": "<p>The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned\nto <code>resourceId</code>. The relation also lets you access all time ranges on a resource through\n<code>ResourceModel#timeRanges</code>.</p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "TimeSpan",
      "modulePath": "Scheduler/model/TimeSpan",
      "classDescription": "<p>This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.</p>\n<p>Its a subclass of  <a href=\"#Core/data/Model\">Model</a>.\nPlease refer to documentation of those classes to become familiar with the base interface of this class.</p>\n<p>A TimeSpan has the following fields:</p>\n<ul>\n<li><a href=\"#Scheduler/model/TimeSpan#field-startDate\">startDate</a>    - start date of the task in the ISO 8601 format</li>\n<li><a href=\"#Scheduler/model/TimeSpan#field-endDate\">endDate</a>      - end date of the task in the ISO 8601 format (not inclusive)</li>\n<li><a href=\"#Scheduler/model/TimeSpan#field-duration\">duration</a>     - duration, time between start date and end date</li>\n<li><a href=\"#Scheduler/model/TimeSpan#field-durationUnit\">durationUnit</a> - unit used to express the duration</li>\n<li><a href=\"#Scheduler/model/TimeSpan#field-name\">name</a>         - an optional name of the range</li>\n<li><a href=\"#Scheduler/model/TimeSpan#field-cls\">cls</a>          - an optional CSS class to be associated with the range.</li>\n</ul>\n<p>The data source of any field can be customized in the subclass. Please refer to <a href=\"#Core/data/Model\">Model</a> for details. To specify\nanother date format:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>class MyTimeSpan extends TimeSpan {\n  static get fields() {\n     { name: 'startDate', type: 'date', dateFormat: 'DD/MM/YY' }\n  }\n}\n</code></pre>",
      "extends": [
        "Core/data/Model"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeSpan.js",
      "path": "/Calendar/lib/Scheduler/model",
      "fields": [
        {
          "name": "startDate",
          "description": "<p>The start date of a time span (or Event / Task).</p>\n<p>Uses <a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">DateHelper.defaultFormat</a> to convert a\nsupplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\nchange the dateFormat for this field.</p>\n<p>Note that the field always returns a <code>Date</code>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "endDate",
          "description": "<p>The end date of a time span (or Event / Task).</p>\n<p>Uses <a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">DateHelper.defaultFormat</a> to convert a\nsupplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\nchange the dateFormat for this field.</p>\n<p>Note that the field always returns a <code>Date</code>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "duration",
          "description": "<p>The numeric part of the timespan's duration (the number of units).</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "durationUnit",
          "description": "<p>The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:</p>\n<ul>\n<li>&quot;ms&quot; (milliseconds)</li>\n<li>&quot;s&quot; (seconds)</li>\n<li>&quot;m&quot; (minutes)</li>\n<li>&quot;h&quot; (hours)</li>\n<li>&quot;d&quot; (days)</li>\n<li>&quot;w&quot; (weeks)</li>\n<li>&quot;M&quot; (months)</li>\n<li>&quot;y&quot; (years)</li>\n</ul>\n<p>This field is readonly after creation, to change durationUnit use #setDuration().</p>",
          "type": "String",
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "cls",
          "description": "<p>An encapsulation of the CSS classes to add to the rendered time span element.</p>\n<p>Always returns a <a href=\"#Core/helper/util/DomClassList\">DomClassList</a>, but may still be treated as a string. For\ngranular control of adding and removing individual classes, it is recommended to use the\n<a href=\"#Core/helper/util/DomClassList\">DomClassList</a> API.</p>",
          "type": "Core.helper.util.DomClassList",
          "accepts": [
            "Core.helper.util.DomClassList",
            "String",
            "String[]",
            "Object"
          ],
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "iconCls",
          "description": "<p>CSS class specifying an icon to apply to the rendered time span element.\n<strong>Note</strong>: In case event is a milestone, using <code>iconCls</code> with dependency feature might slightly decrease\nperformance because feature will refer to the DOM to get exact size of the element.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "style",
          "description": "<p>A CSS style string (applied to <code>style.cssText</code>) or object (applied to <code>style</code>)</p>\n<pre class=\"prettyprint source\"><code>record.style = 'color: red;font-weight: 800';\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "name",
          "description": "<p>The name of the time span (or Event / Task)</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "properties": [
        {
          "name": "eventStore",
          "description": "<p>Returns the event store this event is part of.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "fullDuration",
          "description": "<p>Property which encapsulates the duration's magnitude and units.</p>",
          "type": "Core.data.Duration",
          "scope": "instance"
        },
        {
          "name": "dates",
          "description": "<p>Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.</p>",
          "type": "Array.<Date>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "durationMS",
          "description": "<p>Returns the duration of this Event in milliseconds.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isMilestone",
          "description": "<p>Returns true if record is a milestone.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isScheduled",
          "description": "<p>Checks if the range record has both start and end dates set and start &lt;= end</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "wbsCode",
          "description": "<p>Returns the WBS code of this model (e.g '2.1.3'). Only relevant when part of a tree store, as in the Gantt chart.</p>",
          "type": "String",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "setDuration",
          "description": "<p>Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is\nreadonly after creation</p>",
          "parameters": [
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>Duration value</p>"
            },
            {
              "name": "durationUnit",
              "type": "String",
              "description": "<p>Unit for specified duration value, see <a href=\"#Scheduler/model/TimeSpan#field-durationUnit\">durationUnit</a> for valid values</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getDurationInUnit",
          "access": "private",
          "description": "<p>Returns duration of the event in given unit. This is a wrapper for <a href=\"#Core/helper/DateHelper#function-getDurationInUnit-static\">getDurationInUnit</a></p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String"
            },
            {
              "name": "doNotRound",
              "type": "Boolean",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        },
        {
          "name": "setStartDate",
          "description": "<p>Sets the range start date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The new start date</p>"
            },
            {
              "name": "keepDuration",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to keep the duration of the task (&quot;move&quot; the event), <code>false</code> to change the duration (&quot;resize&quot; the event).\nDefaults to <code>true</code></p>",
              "default": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setEndDate",
          "description": "<p>Sets the range end date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The new end date</p>"
            },
            {
              "name": "keepDuration",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to keep the duration of the task (&quot;move&quot; the event), <code>false</code> to change the duration (&quot;resize&quot; the event).\nDefaults to <code>false</code></p>",
              "default": false
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setStartEndDate",
          "description": "<p>Sets the event start and end dates</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Date",
              "description": "<p>The new start date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>The new end date</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to not trigger events</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "forEachDate",
          "description": "<p>Iterates over the <a href=\"#Scheduler/model/TimeSpan#property-dates\">dates</a></p>",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "<p>The function to call for each date</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "shift",
          "description": "<p>Shift the dates for the date range by the passed amount and unit</p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The unit to shift by, see <a href=\"#Core/helper/DateHelper\">DateHelper</a> for more information on valid formats.</p>"
            },
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The amount to shift</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "split",
          "description": "<p>Splits this event into two pieces at the desired position.</p>",
          "parameters": [
            {
              "name": "splitPoint",
              "type": "Number",
              "description": "<p>A number greater than 0 and less than 1, indicating how this event will be split. 0.5 means cut it in half</p>",
              "default": 0.5
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.TimeSpan",
            "description": "<p>The newly created split section of the timespan</p>"
          }
        },
        {
          "name": "exportToICS",
          "description": "<p>Triggers a download of this time span in ICS format (for import in Outlook etc.)</p>\n<pre class=\"prettyprint source lang-javascript\"><code>timeSpan.downloadAsICS({\n     LOCATION : timeSpan.location\n });\n</code></pre>",
          "parameters": [
            {
              "name": "icsEventConfig",
              "type": "Object",
              "description": "<p>A config object with properties to be added in to <code>BEGIN:VEVENT</code> section of the\nexported event.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "isEditable",
          "description": "<p>Defines if the given event field should be manually editable in UI.\nYou can override this method to provide your own logic.</p>\n<p>By default the method defines all the event fields as editable.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Name of the field</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the field is editable, <code>false</code> if it is not and <code>undefined</code> if the model has no such field.</p>"
          }
        }
      ]
    },
    {
      "name": "AssignmentModelMixin",
      "modulePath": "Scheduler/model/mixin/AssignmentModelMixin",
      "description": "<p>Mixin that holds configuration shared between assignments in Scheduler and Scheduler Pro.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "AssignmentModelMixin.js",
      "path": "/Calendar/lib/Scheduler/model/mixin",
      "functions": [
        {
          "name": "setAsync",
          "description": "<p>Set value for the specified field(s), triggering engine calculations immediately. See\n<a href=\"#Core/data/Model#function-set\">Model#set()</a> for arguments.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignment.set('resourceId', 2);\n// assignment.resource is not yet resolved\n\nawait assignment.setAsync('resourceId', 2);\n// assignment.resource is resolved\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The field to set value for, or an object with multiple values to set in one call</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to set</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Set to true to not trigger events\nautomatically.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Editing",
          "async": true
        },
        {
          "name": "getResource",
          "description": "<p>Returns the resource associated with this assignment.</p>",
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.ResourceModel",
            "description": "<p>Instance of resource</p>"
          }
        },
        {
          "name": "toString",
          "description": "<p>Returns a textual representation of this assignment (e.g. Mike 50%).</p>",
          "scope": "instance",
          "returns": {
            "type": "String"
          }
        }
      ],
      "fields": [
        {
          "name": "resourceId",
          "description": "<p>Id for the resource to assign to</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "eventId",
          "description": "<p>Id for the event to assign</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "drawDependencies",
          "description": "<p>Specify <code>false</code> to opt out of drawing dependencies from/to this assignment</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Common"
        }
      ],
      "properties": [
        {
          "name": "eventResourceKey",
          "access": "internal",
          "description": "<p>A key made up from the event id and the id of the resource assigned to.</p>",
          "scope": "instance",
          "readonly": true,
          "properties": [
            {
              "name": "eventResourceKey"
            }
          ]
        },
        {
          "name": "eventName",
          "description": "<p>Convenience property to get the name of the associated event.</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "resourceName",
          "description": "<p>Convenience property to get the name of the associated resource.</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isPersistable",
          "description": "<p>Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "EventModelMixin",
      "modulePath": "Scheduler/model/mixin/EventModelMixin",
      "description": "<p>Mixin that holds configuration shared between events in Scheduler and Scheduler Pro.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventModelMixin.js",
      "path": "/Calendar/lib/Scheduler/model/mixin",
      "functions": [
        {
          "name": "setAsync",
          "description": "<p>Set value for the specified field(s), triggering engine calculations immediately. See\n<a href=\"#Core/data/Model#function-set\">Model#set()</a> for arguments.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventRecord.set('duration', 4);\n// eventRecord.endDate is not yet calculated\n\nawait eventRecord.setAsync('duration', 4);\n// eventRecord.endDate is calculated\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The field to set value for, or an object with multiple values to set in one call</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to set</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Set to true to not trigger events. If event is recurring, occurrences won't be updated\nautomatically.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Editing",
          "async": true
        },
        {
          "name": "forEachResource",
          "access": "private",
          "description": "<p>Iterate over all associated resources</p>",
          "scope": "instance"
        },
        {
          "name": "getResource",
          "description": "<p>Returns either the resource associated with this event (when called w/o <code>resourceId</code>) or resource\nwith specified id.</p>",
          "parameters": [
            {
              "name": "resourceId",
              "type": "String",
              "description": "<p>To retrieve a specific resource</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.ResourceModel"
          }
        },
        {
          "name": "shift",
          "description": "<p>Shift the dates for the date range by the passed amount and unit</p>",
          "parameters": [
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The unit to shift by, see <a href=\"#Core/helper/DateHelper\">DateHelper</a> for more information on valid formats.</p>"
            },
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The amount to shift</p>"
            }
          ],
          "scope": "inner",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when shift calculations are done</p>"
          }
        },
        {
          "name": "assign",
          "description": "<p>Assigns this event to the specified resource.</p>\n<p><em>Note:</em> The event must be part of an EventStore for this to work. If the EventStore uses single assignment\n(loaded using resourceId) existing assignments will always be removed.</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number",
                "Array.<Scheduler.model.ResourceModel>",
                "Array.<String>",
                "Array.<Number>"
              ],
              "description": "<p>A new resource for this event, either as a full\nResource record or an id (or an array of such).</p>"
            },
            {
              "name": "removeExistingAssignments",
              "type": "Boolean",
              "description": "<p><code>true</code> to first remove existing assignments</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "unassign",
          "description": "<p>Unassigns this event from the specified resource</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>The resource to unassign from.</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "reassign",
          "description": "<p>Reassigns an event from an old resource to a new resource</p>",
          "parameters": [
            {
              "name": "oldResourceId",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>A resource to unassign from or its id</p>"
            },
            {
              "name": "newResourceId",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>A resource to assign to or its id</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "isAssignedTo",
          "description": "<p>Returns true if this event is assigned to a certain resource.</p>",
          "parameters": [
            {
              "name": "resource",
              "type": [
                "Scheduler.model.ResourceModel",
                "String",
                "Number"
              ],
              "description": "<p>The resource to query for</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "isEditable",
          "description": "<p>Defines if the given event field should be manually editable in UI.\nYou can override this method to provide your own logic.</p>\n<p>By default the method defines <a href=\"#Scheduler/model/mixin/EventModelMixin#field-endDate\">endDate</a>, <a href=\"#Scheduler/model/mixin/EventModelMixin#field-duration\">duration</a> and <a href=\"#Scheduler/model/mixin/EventModelMixin#property-fullDuration\">fullDuration</a> fields\neditable for leaf events only (in case the event is part of a tree store) and all other fields as editable.</p>",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String",
              "description": "<p>Name of the field</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the field is editable, <code>false</code> if it is not and <code>undefined</code> if the event has no such field.</p>"
          }
        }
      ],
      "fields": [
        {
          "name": "startDate",
          "description": "<p>The start date of a time span (or Event / Task).</p>\n<p>Uses <a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">DateHelper.defaultFormat</a> to convert a\nsupplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\nchange the dateFormat for this field.</p>\n<p>UI fields representing this data field are disabled for summary tasks. See <a href=\"#Scheduler/model/mixin/EventModelMixin#function-isEditable\">isEditable</a> for details.</p>\n<p>Note that the field always returns a <code>Date</code>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "endDate",
          "description": "<p>The end date of a time span (or Event / Task).</p>\n<p>Uses <a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">DateHelper.defaultFormat</a> to convert a\nsupplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\nchange the dateFormat for this field.</p>\n<p>UI fields representing this data field are disabled for summary tasks. See <a href=\"#Scheduler/model/mixin/EventModelMixin#function-isEditable\">isEditable</a> for details.</p>\n<p>Note that the field always returns a <code>Date</code>.</p>",
          "type": "Date",
          "accepts": [
            "String",
            "Date"
          ],
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "duration",
          "description": "<p>The numeric part of the timespan's duration (the number of units).</p>\n<p>UI fields representing this data field are disabled for summary tasks. See <a href=\"#Scheduler/model/mixin/EventModelMixin#function-isEditable\">isEditable</a> for details.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "id",
          "description": "<p>The unique identifier of a task (mandatory)</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "resourceId",
          "description": "<p>Id of the resource this event is associated with (only usable for single assignments). We recommend\nusing assignments in an AssignmentStore over this approach. Internally any Event using <code>resourceId</code>\nwill have an assignment in AssignmentStore generated.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "resources",
          "description": "<p>The array of <a href=\"#Scheduler/model/ResourceModel\">resources</a> which are assigned to this event.</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "draggable",
          "description": "<p>Specify false to prevent the event from being dragged (if EventDrag feature is used)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "resizable",
          "description": "<p>Specify <code>false</code> to prevent the event from being resized (if EventResize feature is used). You can also\nspecify <code>'start'</code> or <code>'end'</code> to only allow resizing in one direction</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": true,
          "category": "Interaction"
        },
        {
          "name": "allDay",
          "description": "<p>A field marking event as all day(s) spanning event.\nFor example, a holiday day may be represented by a <code>startDate</code>, and the <code>allDay</code> flag.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "eventStyle",
          "description": "<p>Controls this events appearance, see Schedulers\n<a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle\">eventStyle config</a> for\navailable options.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "eventColor",
          "description": "<p>Controls the primary color of the event, see Schedulers\n<a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventColor\">eventColor config</a> for\navailable colors.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "milestoneWidth",
          "description": "<p>Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "stickyContents",
          "description": "<p>Set this field to false to opt out of <a href=\"#Scheduler/feature/StickyEvents\">sticky event content</a>\n(keeping event text in view while scrolling).</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Styling"
        }
      ],
      "properties": [
        {
          "name": "fullDuration",
          "description": "<p>Property which encapsulates the duration's magnitude and units.</p>",
          "type": "Core.data.Duration",
          "scope": "inner"
        },
        {
          "name": "resources",
          "description": "<p>Returns all resources assigned to an event.</p>",
          "type": "Array.<Scheduler.model.ResourceModel>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isDraggable",
          "description": "<p>Returns true if event can be drag and dropped</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "isResizable",
          "description": "<p>Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can be resized.</p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isPersistable",
          "description": "<p>Returns false if the event is not persistable. By default it always is, override this getter if you need\ncustom logic.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "persistableData",
          "access": "private",
          "description": "<p>Override persistable getter to prevent sending resourceId when using multiple resource assignment mode\nhttps://github.com/bryntum/support/issues/1345</p>",
          "scope": "instance"
        },
        {
          "name": "resource",
          "description": "<p>Returns the first assigned resource, or assigns a resource</p>",
          "type": "Scheduler.model.ResourceModel",
          "scope": "inner"
        },
        {
          "name": "assignments",
          "description": "<p>Returns all assignments for the event. Event must be part of the store for this method to work.</p>",
          "type": "Array.<Scheduler.model.AssignmentModel>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "predecessors",
          "description": "<p>Returns all predecessor dependencies of this event</p>",
          "type": "Array.<Scheduler.model.DependencyBaseModel>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "successors",
          "description": "<p>Returns all successor dependencies of this event</p>",
          "type": "Array.<Scheduler.model.DependencyBaseModel>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isInterDay",
          "description": "<p>Flag which indicates that this event is an interday event. This means that it spans\nan entire day or multiple days.</p>\n<p>This is essentially used by the Calendar package to determine if an event should\ngo into the all day zone of a DayView.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "ProjectCurrentConfig",
      "modulePath": "Scheduler/model/mixin/ProjectCurrentConfig",
      "description": "<p>Mixin that makes sure current config for a project includes store data and is cleaned up properly.</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ProjectCurrentConfig.js",
      "path": "/Calendar/lib/Scheduler/model/mixin"
    },
    {
      "name": "ProjectModelMixin",
      "modulePath": "Scheduler/model/mixin/ProjectModelMixin",
      "description": "<p>Mixin that holds configuration shared between projects in Scheduler and Scheduler Pro.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ProjectModelMixin.js",
      "path": "/Calendar/lib/Scheduler/model/mixin",
      "properties": [
        {
          "name": "stm",
          "description": "<p>State tracking manager instance the project relies on</p>",
          "type": "Core.data.stm.StateTrackingManager",
          "scope": "inner",
          "category": "Advanced"
        },
        {
          "name": "timeRangeStore",
          "description": "<p>The <a href=\"#Core/data/Store\">store</a> holding the time ranges information.</p>\n<p>See also <a href=\"#Scheduler/model/TimeSpan\">TimeSpan</a></p>",
          "type": "Core.data.Store",
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "resourceTimeRangeStore",
          "description": "<p>The <a href=\"#Scheduler/data/ResourceTimeRangeStore\">store</a> holding the resource time ranges information.</p>\n<p>See also <a href=\"#Scheduler/model/ResourceTimeRangeModel\">ResourceTimeRangeModel</a></p>",
          "type": "Scheduler.data.ResourceTimeRangeStore",
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "changes",
          "description": "<p>Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\nmanaged store. Returns <code>null</code> if no changes exist. Format:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    resources : {\n        added    : [{ name : 'New guy' }],\n        modified : [{ id : 2, name : 'Mike' }],\n        removed  : [{ id : 3 }]\n    },\n    events : {\n        modified : [{  id : 12, name : 'Cool task' }]\n    },\n    ...\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "readonly": true,
          "category": "Models & Stores"
        },
        {
          "name": "inlineData",
          "description": "<p>Get or set data of project stores. The returned data is identical to what\n<a href=\"#Scheduler/model/mixin/ProjectModelMixin#function-toJSON\">toJSON</a> returns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>\nconst data = scheduler.project.inlineData;\n\n// data:\n{\n    eventsData             : [...],\n    resourcesData          : [...],\n    dependenciesData       : [...],\n    assignmentsData        : [...],\n    resourceTimeRangesData : [...],\n    timeRangesData         : [...]\n}\n\n\n// Plug it back in later\nscheduler.project.inlineData = data;\n</code></pre>",
          "type": "Object",
          "scope": "instance",
          "category": "Inline data"
        },
        {
          "name": "json",
          "description": "<p>Get or set project data (records from its stores) as a JSON string.</p>\n<p>Get a JSON string:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const project = new ProjectModel({\n    eventsData             : [...],\n    resourcesData          : [...],\n    assignmentsData        : [...],\n    dependenciesData       : [...],\n    resourceTimeRangesData : [...],\n    timeRangesData         : [...]\n});\n\nconst jsonString = project.json;\n\n// jsonString:\n'{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'\n</code></pre>\n<p>Set a JSON string (to populate the project stores):</p>\n<pre class=\"prettyprint source lang-javascript\"><code>project.json = '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'\n</code></pre>",
          "type": "String",
          "scope": "instance",
          "category": "Inline data"
        }
      ],
      "configs": [
        {
          "name": "stm",
          "description": "<p>Configuration options to provide to the STM manager</p>",
          "type": [
            "Object",
            "Core.data.stm.StateTrackingManager"
          ],
          "scope": "inner",
          "category": "Advanced"
        },
        {
          "name": "timeRangeStoreClass",
          "description": "<p>The constructor to create a time range store instance with. Should be a class subclassing the\n<a href=\"#Core/data/Store\">Store</a></p>",
          "type": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": [
              "typeof Store",
              "object"
            ]
          }
        },
        {
          "name": "resourceTimeRangeStoreClass",
          "description": "<p>The constructor to create a resource time range store instance with. Should be a class subclassing the\n<a href=\"#Scheduler/data/ResourceTimeRangeStore\">ResourceTimeRangeStore</a></p>",
          "type": [
            "Scheduler.data.ResourceTimeRangeStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores",
          "typings": {
            "returns": [
              "typeof ResourceTimeRangeStore",
              "object"
            ]
          }
        },
        {
          "name": "timeRangesData",
          "description": "<p>The initial data, to fill the <a href=\"#Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore\">timeRangeStore</a> with.\nShould be an array of <a href=\"#Scheduler/model/TimeSpan\">TimeSpan</a> or its configuration objects.</p>",
          "type": "Array.<Scheduler.model.TimeSpan>",
          "scope": "inner",
          "category": "Legacy inline data"
        },
        {
          "name": "resourceTimeRangesData",
          "description": "<p>The initial data, to fill the <a href=\"#Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore\">resourceTimeRangeStore</a> with.\nShould be an array of <a href=\"#Scheduler/model/ResourceTimeRangeModel\">ResourceTimeRangeModel</a> or it's\nconfiguration objects.</p>",
          "type": "Array.<Scheduler.model.ResourceTimeRangeModel>",
          "scope": "inner",
          "category": "Legacy inline data"
        },
        {
          "name": "json",
          "description": "<p>Project data as a JSON string, used to populate its stores.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const project = new ProjectModel({\n    json : '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'\n}\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "category": "Inline data"
        },
        {
          "name": "timeRangeStore",
          "description": "<p>A <a href=\"#Core/data/Store\">Store</a> instance or a config object.</p>",
          "type": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores"
        },
        {
          "name": "resourceTimeRangeStore",
          "description": "<p>A <a href=\"#Scheduler/data/ResourceTimeRangeStore\">ResourceTimeRangeStore</a> instance or a config object.</p>",
          "type": [
            "Scheduler.data.ResourceTimeRangeStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Models & Stores"
        }
      ],
      "functions": [
        {
          "name": "loadInlineData",
          "description": "<p>Accepts a &quot;data package&quot; consisting of data for the projects stores, which is then loaded into the stores.</p>\n<p>The package can hold data for <code>EventStore</code>, <code>AssignmentStore</code>, <code>ResourceStore</code>, <code>DependencyStore</code>,\n<code>TimeRangeStore</code> and <code>ResourceTimeRangeStore</code>. It uses the same format as when creating a project with inline\ndata:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>await project.loadInlineData({\n    eventsData             : [...],\n    resourcesData          : [...],\n    assignmentsData        : [...],\n    dependenciesData       : [...],\n    resourceTimeRangesData : [...],\n    timeRangesData         : [...]\n});\n</code></pre>\n<p>After populating the stores it commits the project, starting its calculations. By awaiting <code>loadInlineData()</code> you\ncan be sure that project calculations are finished.</p>",
          "parameters": [
            {
              "name": "dataPackage",
              "type": "Object",
              "description": "<p>A data package as described above</p>"
            }
          ],
          "scope": "inner",
          "fires": [
            "event:load"
          ],
          "category": "Inline data",
          "async": true
        },
        {
          "name": "commitAsync",
          "description": "<p>Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\nunderlying graph based calculation engine. The engine performs it calculations async.</p>\n<p>By calling this function, the commit happens right away. And by awaiting it you are sure that project\ncalculations are finished and that references between records are up to date.</p>\n<p>The returned promise is resolved with an object. If that object has <code>rejectedWith</code> set, there has been a conflict and the calculation failed.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Move an event in time\neventStore.first.shift(1);\n\n// Trigger calculations directly and wait for them to finish\nconst result = await project.commitAsync();\n\nif (result.rejectedWith) {\n    // there was a conflict during the scheduling\n}\n</code></pre>",
          "scope": "inner",
          "category": "Common",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "toJSON",
          "description": "<p>Returns the data from the records of the projects stores, in a format that can be consumed by <code>loadInlineData()</code>.</p>\n<p>Used by JSON.stringify to correctly convert this record to json.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const project = new ProjectModel({\n    eventsData             : [...],\n    resourcesData          : [...],\n    assignmentsData        : [...],\n    dependenciesData       : [...],\n    resourceTimeRangesData : [...],\n    timeRangesData         : [...]\n});\n\nconst json = project.toJSON();\n\n// json:\n{\n    eventsData             : [...],\n    resourcesData          : [...],\n    dependenciesData       : [...],\n    assignmentsData        : [...],\n    resourceTimeRangesData : [...],\n    timeRangesData         : [...]\n}\n</code></pre>\n<p>Output can be consumed by <code>loadInlineData()</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const json = project.toJSON();\n\n// Plug it back in later\nproject.loadInlineData(json);\n</code></pre>",
          "scope": "instance",
          "category": "Inline data",
          "returns": {
            "type": "Object"
          }
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "<p>Fired when data in any of the projects stores changes.</p>\n<p>Basically a relayed version of each stores own change event, decorated with which store it originates from.\nSee the <a href=\"#Core/data/Store#event-change\">store change event</a> documentation for more information.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.model.ProjectModel",
              "description": "<p>This project</p>"
            },
            {
              "name": "store",
              "type": "Core.data.Store",
              "description": "<p>Affected store</p>"
            },
            {
              "name": "action",
              "type": "String",
              "description": "<p>Name of action which triggered the change. May be one of:</p>\n<ul>\n<li><code>'remove'</code></li>\n<li><code>'removeAll'</code></li>\n<li><code>'add'</code></li>\n<li><code>'updatemultiple'</code></li>\n<li><code>'clearchanges'</code></li>\n<li><code>'filter'</code></li>\n<li><code>'update'</code></li>\n<li><code>'dataset'</code></li>\n<li><code>'replace'</code></li>\n</ul>"
            },
            {
              "name": "record",
              "type": "Core.data.Model",
              "description": "<p>Changed record, for actions that affects exactly one record (<code>'update'</code>)</p>"
            },
            {
              "name": "records",
              "type": "Array.<Core.data.Model>",
              "description": "<p>Changed records, passed for all actions except <code>'removeAll'</code></p>"
            },
            {
              "name": "changes",
              "type": "Object",
              "description": "<p>Passed for the <code>'update'</code> action, info on which record fields changed</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "RecurringTimeSpan",
      "modulePath": "Scheduler/model/mixin/RecurringTimeSpan",
      "description": "<p>This mixin class provides recurrence related fields and methods to a <a href=\"#Scheduler/model/TimeSpan\">timespan model</a>.</p>\n<p>The mixin introduces two types of timespans: <strong>recurring timespan</strong> and its <strong>occurrences</strong>.\n<strong>Recurring timespan</strong> is a timespan having <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#field-recurrenceRule\">recurrence rule</a> specified and its <strong>occurrences</strong> are &quot;fake&quot; dynamically generated timespans.\nTheir set depends on the scheduler visible timespan and changes upon the timespan change.</p>\n<p>There are few methods allowing to distinguish a recurring event and an occurrence: <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#property-isRecurring\">isRecurring</a>, <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence\">isOccurrence</a>\nand <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#property-recurringTimeSpan\">recurringTimeSpan</a> (returns the event this record is an occurrence of).</p>\n<p>The <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#field-recurrenceRule\">recurrence rule</a> defined for the event is parsed and\nrepresented with <a href=\"#Scheduler/model/RecurrenceModel\">RecurrenceModel</a> class (can be changed by setting <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#property-recurrenceModel\">recurrenceModel</a> property) instance.\nSee: <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#property-recurrence\">recurrence</a> property.</p>",
      "mixin": true,
      "mixinbase": "TimeSpan",
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurringTimeSpan.js",
      "path": "/Calendar/lib/Scheduler/model/mixin",
      "properties": [
        {
          "name": "supportsRecurring",
          "description": "<p>Returns <code>true</code> if this timespan supports recurring.</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "recurrenceModel",
          "description": "<p>Name of the class representing the recurrence model, defaults to <a href=\"#Scheduler/model/RecurrenceModel\">RecurrenceModel</a></p>",
          "type": "String",
          "scope": "instance"
        },
        {
          "name": "recurrence",
          "description": "<p>The recurrence model used for the timespan.</p>",
          "type": "Scheduler.model.RecurrenceModel",
          "scope": "instance"
        },
        {
          "name": "isRecurring",
          "description": "<p>Indicates if the timespan is recurring.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "isOccurrence",
          "description": "<p>Indicates if the timespan is an occurrence of another recurring timespan.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "recurringTimeSpan",
          "access": "internal",
          "description": "<p>The &quot;main&quot; timespan this model is an occurrence of. For non-occurrences returns <code>null</code>.</p>",
          "type": "Scheduler.model.TimeSpan",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "occurrences",
          "access": "internal",
          "description": "<p>Array of this recurring timespan's cached occurrences. <strong>Not including the owning recurring\nevent</strong>.</p>\n<p>Empty if the timespan is not recurring.</p>\n<p><strong>Note that this is an internal accessor and is cleared whenever changes are made to the\nowning recurring event</strong>.</p>",
          "type": "Array.<Scheduler.model.TimeSpan>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "occurrenceMap",
          "access": "internal",
          "description": "<p>A Map, keyed by each date an occurrence intersects, of occurrences of this event.</p>",
          "type": "Map",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "occurrenceDate",
          "access": "internal",
          "description": "<p>The original {@lScheduler.model.TimeSpan#field-startDate startDate} of this event before any modifications\ntook place. Used by <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#function-removeOccurrence\">removeOccurrence</a> and <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#function-detachFromRecurringEvent\">detachFromRecurringEvent</a></p>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "occurrenceIndex",
          "description": "<p>If this event is an <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence\">occurrence</a> of a recurring event, then this\nproperty yields its zero-based occurrence index in the sequence.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "newExceptionDate",
          "access": "private",
          "description": "<p>The setter used by Model#inSet when <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate\">addExceptionDate</a> is called.\nAdding an exception must trigger change processing in a recurring event, so it must\nbe changed through a <a href=\"#Core/data/Model#function-set\">set</a> call. Also, the change must be batchable\nwith other changes.</p>",
          "scope": "instance",
          "readonly": true
        }
      ],
      "fields": [
        {
          "name": "recurrenceRule",
          "description": "<p>The timespan recurrence rule. A string in <a href=\"https://tools.ietf.org/html/rfc5545#section-3.3.10\">RFC-5545</a> described format (&quot;RRULE&quot; expression).</p>",
          "type": "String",
          "scope": "inner",
          "category": "Scheduling"
        },
        {
          "name": "exceptionDates",
          "description": "<p>A string (either a single date or multiple dates separated by comma) or an array of strings containing\nthe timespan exception dates. The dates that must be skipped when generating occurrences for a repeating\ntimespan. This is used to modify only individual occurrences of the timespan so the further regenerations\nwon't create another copy of this occurrence again.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    id: 7,\n    startDate: '2021-10-12T14:00:00',\n    endDate: '2021-10-12T15:00:00',\n    name: 'Lunch',\n    resourceId: 'hotel',\n    recurrenceRule: 'FREQ=DAILY;COUNT=5',\n    exceptionDates: ['2021-10-14']\n}\n</code></pre>\n<p>Use <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate\">addExceptionDate</a> method to add an individual entry to the dates array:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Break the link between the occurrence and its base.\n// This also adds the occurrence date as an exception date\n// so that the base timespan knows that this date should be skipped when regenerating its occurrences.\noccurrence.recurringTimeSpan = null;\n\n// now the occurrence is an individual record that can be changed & persisted freely\noccurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));\n</code></pre>\n<p><strong>Note:</strong> The dates in this field get automatically removed when the event changes its <a href=\"#Scheduler/model/TimeSpan#field-startDate\">start date</a>.</p>",
          "type": [
            "String",
            "Array.<String>"
          ],
          "scope": "inner",
          "category": "Scheduling"
        }
      ],
      "functions": [
        {
          "name": "remove",
          "description": "<p>Override of <a href=\"#Core/data/Model\">Model</a>'s method. If an <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence\">isOccurrence</a>\nis passed, it is detached from its parent recurring event. If it still has a recurrence\nthen the recurring event is changed to stop at the occurrence date. If it has no recurrence\nan exception is added at the occurrence date.</p>",
          "scope": "instance"
        },
        {
          "name": "setRecurrence",
          "description": "<p>Sets a recurrence for the timespan with a given frequency, interval, and end.</p>",
          "parameters": [
            {
              "name": "recurrence",
              "type": [
                "Object",
                "String",
                "Scheduler.model.RecurrenceModel"
              ],
              "description": "<p>A data object for an instance of <a href=\"#Scheduler/model/RecurrenceModel\">RecurrenceModel</a>.\nMay also be the frequency string: <code>DAILY</code>, <code>WEEKLY</code>, <code>MONTHLY</code>, or <code>YEARLY</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// repeat the event every other week till Jan 2 2039\nevent.setRecurrence({\n    frequency : &quot;WEEKLY&quot;,\n    interval  : 2,\n    endDate   : new Date(2039, 0, 2)\n});\n</code></pre>\n<p>Also a <a href=\"#Scheduler/model/RecurrenceModel\">recurrence model</a> can be provided as the only argument for this method:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });\n\nevent.setRecurrence(recurrence);\n</code></pre>\n<p>or</p>\n<pre class=\"prettyprint source lang-javascript\"><code>event.setRecurrence(&quot;WEEKLY&quot;, 2, new Date(2039, 0, 2));\n</code></pre>"
            },
            {
              "name": "interval",
              "type": "Number",
              "description": "<p>The interval between occurrences (instances of this recurrence). For example, a daily recurrence with an interval of 2 occurs every other day. Must be greater than 0.</p>",
              "optional": true
            },
            {
              "name": "recurrenceEnd",
              "type": [
                "Number",
                "Date"
              ],
              "description": "<p>The end of the recurrence. The value can be specified by a date or by a maximum count of occurrences (has to greater than 1, since 1 means the event itself).</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getOccurrencesForDateRange",
          "description": "<p>Returns the occurrences of this event over the specified time range. If the first\noccurrence is in the time range <code>*this*</code> record is included in that position.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the range for which to include occurrences.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date of the range for which to include occurrences.\nDefaults to the startDate.</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Scheduler.model.TimeSpan>",
            "description": "<p>The array of occurrences which occur over the specified range.</p>"
          }
        },
        {
          "name": "removeOccurrence",
          "access": "internal",
          "description": "<p>Removes an occurrence from this recurring timespan's cached occurrences.</p>",
          "parameters": [
            {
              "name": "dateOrTimeSpan",
              "description": "<p>occurrence date or occurrence TimeSpan</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removeOccurrencesFrom",
          "access": "internal",
          "description": "<p>Removes all cached occurrences on or after the passed date from this recurring timespan's cached occurrences.</p>",
          "scope": "instance"
        },
        {
          "name": "removeOccurrences",
          "access": "internal",
          "description": "<p>Removes this recurring timespan's cached occurrences.</p>",
          "scope": "instance"
        },
        {
          "name": "onRecurrenceChanged",
          "access": "internal",
          "description": "<p>The method is triggered when the timespan recurrence settings get changed.\nIt updates the <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#field-recurrenceRule\">recurrenceRule</a> field in this case.</p>",
          "scope": "instance"
        },
        {
          "name": "buildOccurrence",
          "access": "internal",
          "description": "<p>Builds an occurrence of this recurring event by cloning the timespan data.\nThe method is used internally by the <strong>RecurringTimeSpans</strong> mixin.\nOverride it if you need to customize the generated occurrences.</p>\n<p>If the date requested is the start date of the event sequence, <code>this</code>\nrecord is returned. All runs of recurring events begin with the base record.</p>",
          "parameters": [
            {
              "name": "occurrenceDate",
              "type": "Date",
              "description": "<p>The occurrence start date.</p>"
            },
            {
              "name": "isFirst",
              "type": "Boolean",
              "description": "<p><code>true</code> if this is the first occurrence.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.TimeSpan",
            "description": "<p>The occurrence.</p>"
          }
        },
        {
          "name": "detachFromRecurringEvent",
          "access": "internal",
          "description": "<p>Detaches an occurrence from its owning recurring event so that it can be added to the eventStore\neither as an exception, or as the start of a new recurring sequence.</p>",
          "scope": "instance"
        },
        {
          "name": "addExceptionDate",
          "access": "internal",
          "description": "<p>Adds an exception date that should be skipped when generating occurrences for the timespan.\nThe methods adds an entry to the array kept in <a href=\"#Scheduler/model/mixin/RecurringTimeSpan#field-exceptionDates\">exceptionDates</a> field.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Exception date.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "hasException",
          "description": "<p>Does this recurring event have an exception on the passed date.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to find an exception for.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p><code>true</code> if the event has an exception starting on the passed date.</p>"
          }
        }
      ]
    },
    {
      "name": "ResourceModelMixin",
      "modulePath": "Scheduler/model/mixin/ResourceModelMixin",
      "description": "<p>Mixin that holds configuration shared between resources in Scheduler and Scheduler Pro.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceModelMixin.js",
      "path": "/Calendar/lib/Scheduler/model/mixin",
      "functions": [
        {
          "name": "setAsync",
          "description": "<p>Set value for the specified field(s), triggering engine calculations immediately. See\n<a href=\"#Core/data/Model#function-set\">Model#set()</a> for arguments.</p>\n<p>This does not matter much on the resource itself, but is of importance when manipulating its references:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>assignment.set('resourceId', 2);\n// resource.assignments is not yet up to date\n\nawait assignment.setAsync('resourceId', 2);\n// resource.assignments is up to date\n</code></pre>",
          "parameters": [
            {
              "name": "field",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>The field to set value for, or an object with multiple values to set in one call</p>"
            },
            {
              "name": "value",
              "type": "*",
              "description": "<p>Value to set</p>"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Set to true to not trigger events\nautomatically.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Editing",
          "async": true
        },
        {
          "name": "getEvents",
          "description": "<p>Returns an array of events, associated with this resource</p>",
          "scope": "instance",
          "returns": {
            "type": "Array.<Scheduler.model.EventModel>"
          }
        },
        {
          "name": "unassignAll",
          "description": "<p>Unassigns this Resource from all its Events</p>",
          "scope": "instance"
        }
      ],
      "fields": [
        {
          "name": "id",
          "description": "<p>Unique identifier</p>",
          "type": [
            "String",
            "Number"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "name",
          "description": "<p>Get or set resource name</p>",
          "type": "String",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "eventColor",
          "description": "<p>Controls the primary color used for events assigned to this resource. Can be overridden per event using\nEventModels <a href=\"#Scheduler/model/mixin/EventModelMixin#field-eventColor\">eventColor config</a>. See Schedulers\n<a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventColor\">eventColor config</a> for available\ncolors.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "eventStyle",
          "description": "<p>Controls the style used for events assigned to this resource. Can be overridden per event using\nEventModels <a href=\"#Scheduler/model/mixin/EventModelMixin#field-eventStyle\">eventStyle config</a>. See Schedulers\n<a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle\">eventStyle config</a> for available\noptions.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "imageUrl",
          "description": "<p>Fully qualified image URL, used by <code>ResourceInfoColumn</code> and vertical modes <code>ResourceHeader</code> to display a miniature image\nfor the resource.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "image",
          "description": "<p>Image name relative to <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath\">resourceImagePath</a>,\nused by <code>ResourceInfoColumn</code> and vertical modes <code>ResourceHeader</code> to display a miniature image\nfor the resource.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Styling"
        },
        {
          "name": "resourceMargin",
          "description": "<p>Margin from rows edge to topmost event bar for this resource, in px.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "barMargin",
          "description": "<p>Margin between stacked event bars for this resource, in px.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "rowHeight",
          "description": "<p>Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.</p>\n<p>This value is used in horizontal mode to determine row height. When stacking, it is used as input for\ncalculating the actual row height:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>row.height = (resource.rowHeight - resourceMargin * 2) * overlap count - barMargin * (overlap count - 1)\n</code></pre>\n<p>When packing or overlapping, it is used as the actual row height.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Layout"
        },
        {
          "name": "eventLayout",
          "description": "<p>Specify this to use a resource specific event layout in horizontal mode, see\n<a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout\">eventLayout</a> for options.</p>\n<p>When unset (the default) Schedulers setting is used.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Layout"
        }
      ],
      "properties": [
        {
          "name": "events",
          "description": "<p>Get associated events</p>",
          "type": "Array.<Scheduler.model.EventModel>",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "assignments",
          "description": "<p>Returns all assignments for the resource</p>",
          "type": "Array.<Scheduler.model.AssignmentModel>",
          "scope": "instance"
        },
        {
          "name": "isPersistable",
          "description": "<p>Returns true if the Resource can be persisted.\nIn a flat store, a resource is always considered persistable. In a tree store, a resource is considered\npersistable if its parent node is persistable.</p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "initials",
          "description": "<p>Returns the initials (first letter of the first &amp; last space-separated word in the name) or an empty string\nif this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "PresetManager",
      "modulePath": "PresetManager",
      "classDescription": "<h2>Intro</h2>\n<p>This is a global Store of <a href=\"#Scheduler/preset/ViewPreset\">ViewPresets</a>, required to supply initial data to\nScheduler's <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">presets</a>.</p>\n<p>You can provide new view presets globally or for a specific scheduler.</p>\n<p><strong>NOTE:</strong> You <strong>cannot</strong> modify existing records in the PresetManager store. You can either remove\npreset records from the store or add new records to the store.\nAlso please keep in mind, all changes provided to the PresetManager store are not reflected to the\n<a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">presets</a> of schedulers that already exist!</p>\n<p>If you want to have just a few presets (also known as zoom levels) in your Scheduler, you can slice corresponding records\nfrom the <code>PresetManager</code> and apply them to the Scheduler <code>presets</code> config.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const newPresets = PresetManager.records.slice(10, 12);\n\nconst scheduler = new Scheduler({\n    presets    : newPresets, // Only 2 zoom levels are available\n    viewPreset : newPresets[0].id\n});\n</code></pre>\n<p>If you want to adjust all default presets and assign to a specific scheduler you are going to create,\nyou can extend them and pass as an array to the Scheduler <code>presets</code> config.\nHere is an example of how to set the same <code>timeResolution</code> to all <code>ViewPresets</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const newPresets = PresetManager.map(preset => {\n    return {\n        id             : 'my_' + preset.id,\n        base           : preset.id, // Based on an existing preset\n        timeResolution : {\n            unit      : 'day',\n            increment : 1\n        }\n    };\n});\n\nconst scheduler = new Scheduler({\n    presets     : newPresets,\n    viewPreset : 'my_hourAndDay'\n});\n</code></pre>\n<p>If you want to do the same for <strong>all</strong> schedulers which will be created next, you can register new presets in a loop.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>PresetManager.records.forEach(preset => {\n    // Pass the same ID, so when a new preset is added to the store, it will replace the current one.\n    PresetManager.registerPreset(preset.id, {\n       id             : preset.id,\n       base           : preset.id,\n       timeResolution : {\n           unit      : 'day',\n           increment : 1\n       }\n   });\n});\n</code></pre>\n<p>Here is an example of how to add a new <code>ViewPreset</code> to the global <code>PresetManager</code> store and to the already created scheduler <code>presets</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({...});\n\nconst newGlobalPresets = PresetManager.add({\n    id              : 'myNewPreset',\n    base            : 'hourAndDay', // Based on an existing preset\n    columnLinesFor  : 0,\n    headers : [                         // Override headers\n        {\n            unit       : 'day',\n            dateFormat : 'DD.MM.YYYY'   // Use different date format for top header 01.10.2020\n        },\n        {\n            unit       : 'hour',\n            dateFormat : 'LT'\n        }\n    ]\n});\n\nscheduler.presets.add(newGlobalPresets); // Add new presets to the scheduler that has been created before changes to PresetManager are applied\n</code></pre>\n<p>Predefined presets are:</p>\n<ul>\n<li><code>secondAndMinute</code> - creates 2 level header - minute and seconds within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/secondAndMinute.js\"></div></li>\n<li><code>minuteAndHour</code> - creates 2 level header - hour and minutes within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/minuteAndHour.js\"></div></li>\n<li><code>hourAndDay</code> - creates 2 level header - day and hours within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/hourAndDay.js\"></div></li>\n<li><code>dayAndWeek</code> - creates 2 level header - week and days within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/dayAndWeek.js\"></div></li>\n<li><code>weekAndDay</code> - just like <code>dayAndWeek</code> but with different formatting:\n<div class=\"external-example \" data-file=\"Scheduler/preset/weekAndDay.js\"></div></li>\n<li><code>weekAndDayLetter</code> - creates 2 level header - with weeks and day letters within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/weekAndDayLetter.js\"></div></li>\n<li><code>weekAndMonth</code> - creates 2 level header - month and weeks within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/weekAndMonth.js\"></div></li>\n<li><code>weekDateAndMonth</code> - creates 2 level header - month and weeks within it (weeks shown by first day only):\n<div class=\"external-example \" data-file=\"Scheduler/preset/weekDateAndMonth.js\"></div></li>\n<li><code>monthAndYear</code> - creates 2 level header - year and months within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/monthAndYear.js\"></div></li>\n<li><code>year</code> - creates 2 level header - year and quarters within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/year.js\"></div></li>\n<li><code>manyYears</code> - creates 2 level header - 5-years and year within it:\n<div class=\"external-example \" data-file=\"Scheduler/preset/manyYears.js\"></div></li>\n</ul>\n<p>See the <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> and <a href=\"#Scheduler/preset/ViewPresetHeaderRow\">ViewPresetHeaderRow</a> classes for a description of the view preset properties.</p>\n<p><h2 class=\"collapsible-heading\">Localizing View Presets</h2><section class=\"collapsible\">\nBryntum Scheduler uses locales for translations including date formats for view presets.</p>\n<p>To translate date format for view presets just define the date format for the specified region\nfor your locale file, like this:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const locale = {\n\n    // ... Other translations here ...\n\n    PresetManager : {\n        // Translation for the &quot;weekAndDay&quot; ViewPreset\n        weekAndDay : {\n            // Change the date format for the top and middle levels\n            topDateFormat    : 'MMM',\n            middleDateFormat : 'D'\n        },\n        // Translation for the &quot;dayAndWeek&quot; ViewPreset\n        dayAndWeek : {\n            // Change the date format for the top level\n            topDateFormat : 'MMMM YYYY'\n        }\n    }\n}\n\nLocaleManager.extendLocale('En', locale);\n</code></pre>\n<p>Check the <a target=\"_blank\" href=\"../examples/localization\">localization demo</a> and <a href=\"#Scheduler/guides/customization/localization.md\">this guide</a> for more details.\n</section></p>",
      "extends": [
        "Scheduler/preset/PresetStore"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "PresetManager.js",
      "path": "/Calendar/lib/Scheduler/preset",
      "singleton": true,
      "functions": [
        {
          "name": "registerPreset",
          "description": "<p>Registers a new view preset base to be used by any scheduler grid or tree on the page.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>The unique identifier for this preset</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The configuration properties of the view preset (see <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> for more information)</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.preset.ViewPreset",
            "description": "<p>A new ViewPreset based upon the passed configuration.</p>"
          }
        },
        {
          "name": "normalizePreset",
          "description": "<p>Applies preset customizations or fetches a preset view preset using its name.</p>",
          "parameters": [
            {
              "name": "presetOrId",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Id of a predefined preset or a preset config object</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.preset.ViewPreset",
            "description": "<p>Resulting ViewPreset instance</p>"
          }
        },
        {
          "name": "deletePreset",
          "description": "<p>Deletes a view preset</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>The id of the preset, or the preset instance.</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "PresetStore",
      "modulePath": "Scheduler/preset/PresetStore",
      "classDescription": "<p>A special Store subclass which holds <a href=\"#Scheduler/preset/ViewPreset\">ViewPresets</a>.\nEach ViewPreset in this store represents a zoom level. The store data is sorted in special\nzoom order. That is zoomed out to zoomed in. The first Preset will produce the narrowest event bars\nthe last one will produce the widest event bars.</p>\n<p>To specify view presets (zoom levels) please provide set of view presets to the scheduler:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const myScheduler = new Scheduler({\n    presets : [\n        {\n            base : 'hourAndDay',\n            id   : 'MyHourAndDay',\n            // other preset configs....\n        },\n        {\n            base : 'weekAndMonth',\n            id   : 'MyWeekAndMonth',\n            // other preset configs....\n        }\n    ],\n    viewPreset : 'MyHourAndDay',\n    // other scheduler configs....\n    });\n</code></pre>",
      "extends": [
        "Core/data/Store"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "PresetStore.js",
      "path": "/Calendar/lib/Scheduler/preset",
      "configs": [
        {
          "name": "zoomOrder",
          "description": "<p>Specifies the sort order of the presets in the store.\nBy default they are in zoomed out to zoomed in order. That is\npresets which will create widest event bars to presets\nwhich will produce narrowest event bars.</p>\n<p>Configure this as <code>-1</code> to reverse this order.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 1
        }
      ]
    },
    {
      "name": "ViewPreset",
      "modulePath": "Scheduler/preset/ViewPreset",
      "classDescription": "<p>A ViewPreset is a record of <a href=\"#Scheduler/preset/PresetStore\">PresetStore</a> which describes the granularity\nof the timeline view of a <a href=\"#Scheduler/view/Scheduler\">Scheduler</a> and the layout and subdivisions of the timeline header.</p>\n<p>You can create a new instance by specifying all fields:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const myViewPreset = new ViewPreset({\n    id   : 'myPreset',              // Unique id value provided to recognize your view preset. Not required, but having it you can simply set new view preset by id: scheduler.viewPreset = 'myPreset'\n\n    name : 'My view preset',        // A human-readable name provided to be used in GUI, e.i. preset picker, etc.\n\n    tickWidth  : 24,                // Time column width in horizontal mode\n    tickHeight : 50,                // Time column height in vertical mode\n    displayDateFormat : 'HH:mm',    // Controls how dates will be displayed in tooltips etc\n\n    shiftIncrement : 1,             // Controls how much time to skip when calling shiftNext and shiftPrevious.\n    shiftUnit      : 'day',         // Valid values are 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'.\n    defaultSpan    : 12,            // By default, if no end date is supplied to a view it will show 12 hours\n\n    timeResolution : {              // Dates will be snapped to this resolution\n        unit      : 'minute',       // Valid values are 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'.\n        increment : 15\n    },\n\n    headers : [                     // This defines your header rows from top to bottom\n        {                           // For each row you can define 'unit', 'increment', 'dateFormat', 'renderer', 'align', and 'thisObj'\n            unit       : 'day',\n            dateFormat : 'ddd DD/MM'\n        },\n        {\n            unit       : 'hour',\n            dateFormat : 'HH:mm'\n        }\n    ],\n\n    columnLinesFor : 1              // Defines header level column lines will be drawn for. Defaults to the last level.\n});\n</code></pre>\n<p>Or you can extend one of view presets registered in <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const myViewPreset2 = new ViewPreset({\n    id   : 'myPreset',                  // Unique id value provided to recognize your view preset. Not required, but having it you can simply set new view preset by id: scheduler.viewPreset = 'myPreset'\n    name : 'My view preset',            // A human-readable name provided to be used in GUI, e.i. preset picker, etc.\n    base : 'hourAndDay',                // Extends 'hourAndDay' view preset provided by PresetManager. You can pick out any of PresetManager's view presets: PresetManager.records\n\n    timeResolution : {                  // Override time resolution\n        unit      : 'minute',\n        increment : 15                  // Make it increment every 15 mins\n    },\n\n    headers : [                         // Override headers\n        {\n            unit       : 'day',\n            dateFormat : 'DD.MM.YYYY'   // Use different date format for top header 01.10.2020\n        },\n        {\n            unit       : 'hour',\n            dateFormat : 'LT'\n        }\n    ]\n});\n</code></pre>\n<p>See <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a> for the list of base presets. You may add your own\npresets to this global list:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>PresetManager.add(myViewPreset);     // Adds new preset to the global scope. All newly created scheduler instances will have it too.\n\nconst scheduler = new Scheduler({\n    viewPreset : 'myPreset'\n    // other configs...\n});\n</code></pre>\n<p>Or add them on an individual basis to Scheduler instances:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({...});\n\nscheduler.presets.add(myViewPreset); // Adds new preset to the scheduler instance only. All newly created scheduler instances will **not** have it.\n\nscheduler.viewPreset = 'myPreset';\n</code></pre>\n<h2>Defining custom header rows</h2>\n<p>You can have any number of header rows by specifying <a href=\"#Scheduler/preset/ViewPreset#field-headers\">headers</a>, see <a href=\"#Scheduler/preset/ViewPresetHeaderRow\">ViewPresetHeaderRow</a>\nfor the config object format and <a href=\"#Core/helper/DateHelper\">DateHelper</a> for the supported date formats, or use\n<a href=\"#Scheduler/preset/ViewPresetHeaderRow#config-renderer\">renderer</a> to render custom contents into the row cells.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> headers : [\n     {\n         unit       : 'month',\n         dateFormat : 'MM.YYYY'\n     },\n     {\n         unit       : 'week',\n         renderer   : ({ startDate }) => `Week ${DateHelper.format(startDate, 'WW')}`\n     }\n ]\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Scheduler/preset/CustomHeader.js\"></div></p>\n<p>This live demo shows a custom ViewPreset with AM/PM time format:</p>",
      "extends": [
        "Core/data/Model"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ViewPreset.js",
      "path": "/Calendar/lib/Scheduler/preset",
      "externalExamples": [
        "Scheduler/preset/amPmPreset.js"
      ],
      "fields": [
        {
          "name": "name",
          "description": "<p>The name of the view preset</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "rowHeight",
          "description": "<p>The height of the row in horizontal orientation</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "tickWidth",
          "description": "<p>The width of the time tick column in horizontal orientation</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "tickHeight",
          "description": "<p>The height of the time tick column in vertical orientation</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "displayDateFormat",
          "description": "<p>Defines how dates will be formatted in tooltips etc</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "shiftUnit",
          "description": "<p>The unit to shift when calling shiftNext/shiftPrevious to navigate in the chart.\nValid values are &quot;millisecond&quot;, &quot;second&quot;, &quot;minute&quot;, &quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;quarter&quot;, &quot;year&quot;.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "shiftIncrement",
          "description": "<p>The amount to shift (in shiftUnits)</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "defaultSpan",
          "description": "<p>The amount of time to show by default in a view (in the unit defined by the middle header)</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "timeResolution",
          "description": "<p>An object containing a unit identifier and an increment variable. This value means minimal task duration you can create using UI.\nFor example when you drag create a task or drag &amp; drop a task, if increment is 5 and unit is 'minute'\nthat means that you can create a 5 min long task, or move it 5 min forward/backward. This config maps to\nscheduler's <a href=\"#Scheduler/view/mixin/TimelineDateMapper#property-timeResolution\">timeResolution</a> config.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>timeResolution : {\n  unit      : 'minute',  //Valid values are &quot;millisecond&quot;, &quot;second&quot;, &quot;minute&quot;, &quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;quarter&quot;, &quot;year&quot;.\n  increment : 5\n}\n</code></pre>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "headers",
          "description": "<p>An array containing one or more <a href=\"#Scheduler/preset/ViewPresetHeaderRow\">ViewPresetHeaderRow</a> config objects, each of which defines a level of headers for the scheduler.\nThe <code>main</code> unit will be the last header's unit, but this can be changed using the <a href=\"#Scheduler/preset/ViewPreset#field-mainHeaderLevel\">mainHeaderLevel</a> field.</p>",
          "type": "Array.<Object>",
          "scope": "inner"
        },
        {
          "name": "mainHeaderLevel",
          "description": "<p>Index of the <a href=\"#Scheduler/preset/ViewPreset#field-headers\">headers</a> array to define which header level is the <code>main</code> header.\nDefaults to the bottom header.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "columnLinesFor",
          "description": "<p>Index of a header level in the <a href=\"#Scheduler/preset/ViewPreset#field-headers\">headers</a> array for which column lines are drawn. See <a href=\"#Scheduler/feature/ColumnLines\">ColumnLines</a>.\nDefaults to the bottom header.</p>",
          "type": "Number",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "ViewPresetHeaderRow",
      "modulePath": "Scheduler/preset/ViewPresetHeaderRow",
      "classDescription": "<p>A part of the <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> declaration. Not used directly, but the properties below are instead provided inline\nas seen in sources of <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>. This class is just provided for documentation purposes.</p>\n<p>A sample header configuration can look like below</p>\n<pre class=\"prettyprint source lang-javascript\"><code>headers    : {\n    {\n        unit        : &quot;month&quot;,\n        renderer : function(start, end, headerConfig, index) {\n            var month = start.getMonth();\n            // Simple alternating month in bold\n            if (start.getMonth() % 2) {\n                return '&lt;strong>' + month + '&lt;/strong>';\n            }\n            return month;\n        },\n        align       : 'start' // `start` or `end`, omit to center content (default)\n    },\n    {\n        unit        : &quot;week&quot;,\n        increment   : 1,\n        renderer    : function(start, end, headerConfig, index) {\n            return 'foo';\n        }\n    },\n}\n</code></pre>",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ViewPresetHeaderRow.js",
      "path": "/Calendar/lib/Scheduler/preset",
      "configs": [
        {
          "name": "align",
          "description": "<p>The text alignment for the cell. Valid values are <code>start</code> or <code>end</code>, omit this to center text content (default).\nCan also be added programmatically in the <a href=\"#Scheduler/preset/ViewPresetHeaderRow#config-renderer\">renderer</a></p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "unit",
          "description": "<p>The unit of time represented by each cell in this header row. See also increment property.\nValid values are &quot;millisecond&quot;, &quot;second&quot;, &quot;minute&quot;, &quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;quarter&quot;, &quot;year&quot;.</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "headerCellCls",
          "description": "<p>A CSS class to add to the cells in the time axis header row.\nCan also be added programmatically in the <a href=\"#Scheduler/preset/ViewPresetHeaderRow#config-renderer\">renderer</a></p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "increment",
          "description": "<p>The number of units each header cell will represent (e.g. 30 together with unit: &quot;minute&quot; for 30 minute cells)</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "dateFormat",
          "description": "<p>Defines how the cell date will be formatted</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "renderer",
          "description": "<p>A custom renderer function used to render the cell content. It should return text/HTML to put in the header cell.\nThe render function is called with the following parameters:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>function (startDate, endDate, headerConfig, i) {\n  headerConfig.align = &quot;start&quot;; // applies special CSS class to align header left\n  headerConfig.headerCellCls = &quot;myClass&quot;; // will be added as a CSS class of the header cell DOM element\n\n  return DateHelper.format(startDate, 'YYYY-MM-DD');\n}\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the cell.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date of the cell.</p>"
            },
            {
              "name": "headerConfig",
              "type": "Object",
              "description": "<p>An object containing the header config.</p>"
            },
            {
              "name": "headerConfig.align",
              "type": "String",
              "description": "<p>The text alignment for the cell. See <a href=\"#Scheduler/preset/ViewPresetHeaderRow#config-align\">align</a> config.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "headerConfig.headerCellCls",
              "type": "String",
              "description": "<p>A CSS class to add to the cells in the time axis header row. See <a href=\"#Scheduler/preset/ViewPresetHeaderRow#config-headerCellCls\">headerCellCls</a> config.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>The index of the cell in the row.</p>"
            }
          ]
        },
        {
          "name": "thisObj",
          "description": "<p><code>this</code> reference for the renderer function</p>",
          "type": "Object",
          "scope": "inner"
        },
        {
          "name": "cellGenerator",
          "description": "<p>A function that should return an array of objects containing 'start', 'end' and 'header' properties.\nUse this if you want full control over how the header rows are generated.</p>\n<p><strong>Note:</strong> <code>cellGenerator</code> cannot be used for the bottom level of your headers.</p>\n<p>Example :</p>\n<pre class=\"prettyprint source lang-javascript\"><code>viewPreset : {\n    displayDateFormat : 'H:mm',\n    shiftIncrement    : 1,\n    shiftUnit         : 'WEEK',\n    timeResolution    : {\n        unit      : 'MINUTE',\n        increment : 10\n    },\n    headers           : [\n        {\n            unit          : 'year',\n            // Simplified scenario, assuming view will always just show one US fiscal year\n            cellGenerator : (viewStart, viewEnd) => [{\n                start  : viewStart,\n                end    : viewEnd,\n                header : `Fiscal Year ${viewStart.getFullYear() + 1}`\n            }]\n        },\n        {\n            unit : 'quarter',\n            renderer(start, end, cfg) {\n                const\n                    quarter       = Math.floor(start.getMonth() / 3) + 1,\n                    fiscalQuarter = quarter === 4 ? 1 : (quarter + 1);\n\n                return `FQ${fiscalQuarter} ${start.getFullYear() + (fiscalQuarter === 1 ? 1 : 0)}`;\n            }\n        },\n        {\n            unit       : 'month',\n            dateFormat : 'MMM Y'\n        }\n    ]\n },\n</code></pre>",
          "type": "function",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "ClockTemplate",
      "modulePath": "Scheduler/tooltip/ClockTemplate",
      "classDescription": "<p>A template showing a clock, it consumes an object containing a date and a text</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "ClockTemplate.js",
      "path": "/Calendar/lib/Scheduler/tooltip",
      "properties": [
        {
          "name": "template",
          "description": "<p>Get the clock template, which accepts an object of format { date, text }</p>",
          "type": "function",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RectangularPathFinder",
      "modulePath": "Scheduler/util/RectangularPathFinder",
      "classDescription": "<p>Class which finds rectangular path, i.e. path with 90 degrees turns, between two boxes.</p>",
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "RectangularPathFinder.js",
      "path": "/Calendar/lib/Scheduler/util",
      "configs": [
        {
          "name": "startSide",
          "description": "<p>Default start connection side: 'left', 'right', 'top', 'bottom'</p>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner",
          "defaultValue": "right"
        },
        {
          "name": "startArrowSize",
          "description": "<p>Default start arrow size in pixels</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "startArrowMargin",
          "description": "<p>Default start arrow staff size in pixels</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 12
        },
        {
          "name": "startShift",
          "description": "<p>Default starting connection point shift from box's arrow pointing side middle point</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "endSide",
          "description": "<p>Default end arrow pointing direction, possible values are: 'left', 'right', 'top', 'bottom'</p>",
          "type": [
            "String",
            "Boolean"
          ],
          "scope": "inner",
          "defaultValue": "left"
        },
        {
          "name": "endArrowSize",
          "description": "<p>Default end arrow size in pixels</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "endArrowMargin",
          "description": "<p>Default end arrow staff size in pixels</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 12
        },
        {
          "name": "endShift",
          "description": "<p>Default ending connection point shift from box's arrow pointing side middle point</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0
        },
        {
          "name": "verticalMargin",
          "description": "<p>Start / End box vertical margin, the amount of pixels from top and bottom line of a box where drawing\nis prohibited</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 2
        },
        {
          "name": "horizontalMargin",
          "description": "<p>Start / End box horizontal margin, the amount of pixels from left and right line of a box where drawing</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5
        },
        {
          "name": "otherBoxes",
          "description": "<p>Other rectangular areas (obstacles) to search path through</p>",
          "type": "Array.<Object>",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "findPath",
          "description": "<p>Returns list of horizontal and vertical segments connecting two boxes</p>\n<pre>\n   |    | |  |    |       |\n --+----+----+----*-------*---\n --+=>Start  +----*-------*--\n --+----+----+----*-------*--\n   |    | |  |    |       |\n   |    | |  |    |       |\n --*----*-+-------+-------+--\n --*----*-+         End <=+--\n --*----*-+-------+-------+--\n   |    | |  |    |       |\n</pre>\n<p>Path goes by lines (-=) and turns at intersections (+), boxes depicted are adjusted by horizontal/vertical\nmargin and arrow margin, original boxes are smaller (path can't go at original box borders). Algorithm finds\nthe shortest path with minimum amount of turns. In short it's mix of &quot;Lee&quot; and &quot;Dijkstra pathfinding&quot;\nwith turns amount taken into account for distance calculation.</p>\n<p>The algorithm is not very performant though, it's O(N^2), where N is amount of\npoints in the grid, but since the maximum amount of points in the grid might be up to 34 (not 36 since\ntwo box middle points are not permitted) that might be ok for now.</p>",
          "parameters": [
            {
              "name": "lineDef",
              "type": "Object",
              "description": "<p>An object containing any of the class configuration option overrides as well\nas <code>startBox</code>, <code>endBox</code>, <code>startHorizontalMargin</code>, <code>startVerticalMargin</code>,\n<code>endHorizontalMargin</code>, <code>endVerticalMargin</code> properties</p>"
            },
            {
              "name": "lineDef.startBox",
              "type": "Object",
              "description": "<p>An object containing <code>start</code>, <code>end</code>, <code>top</code>, <code>bottom</code> properties</p>",
              "isSubParam": true
            },
            {
              "name": "lineDef.endBox",
              "type": "Object",
              "description": "<p>An object containing <code>start</code>, <code>end</code>, <code>top</code>, <code>bottom</code> properties</p>",
              "isSubParam": true
            },
            {
              "name": "lineDef.startHorizontalMargin",
              "type": "Number",
              "description": "<p>Horizontal margin override for start box</p>",
              "isSubParam": true
            },
            {
              "name": "lineDef.startVerticalMargin",
              "type": "Number",
              "description": "<p>Vertical margin override for start box</p>",
              "isSubParam": true
            },
            {
              "name": "lineDef.endHorizontalMargin",
              "type": "Number",
              "description": "<p>Horizontal margin override for end box</p>",
              "isSubParam": true
            },
            {
              "name": "lineDef.endVerticalMargin",
              "type": "Number",
              "description": "<p>Vertical margin override for end box</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Array.<Object>",
              "Boolean"
            ],
            "description": "<p>Array of line segments or false if path cannot be found</p>"
          }
        }
      ]
    },
    {
      "name": "ScheduleTableExporter",
      "modulePath": "Scheduler/util/ScheduleTableExporter",
      "classDescription": "<p>This class transforms scheduler component into two arrays: rows and columns. Columns array contains objects with\nmeta information about column: field name, column name, width and type of the rendered value, rows array contains\narrays of cell values.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const exporter = new ScheduleTableExporter({ target : scheduler });\nexporter.export()\n\n// Output\n{\n    columns : [\n        { field : 'name',      value : 'First name', type : 'string',  width : 100 },\n        { field : 'name',      value : 'Task',       type : 'string',  width : 100, eventColumn : true },\n        { field : 'startDate', value : 'Starts',     type : 'date',    width : 100, eventColumn : true },\n        { field : 'endDate',   value : 'Ends',       type : 'date',    width : 100, eventColumn : true }\n    ],\n    rows : [\n        ['Michael', 'Hand out dundies',      Date, Date],\n        ['Michael', 'Buy condo',             Date, Date],\n        ['Jim',     'Close sale to library', Date, Date]\n    ]\n}\n</code></pre>\n<h2>How data is exported</h2>\n<p>Data is exported as in the base class with minor addition: every event is exported on a separate row, like\ndemonstrated above.</p>\n<p>In case there are unassigned events, by default they will be exported as well</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// output\n{\n    rows : [\n        ['Michael', 'Hand out dundies',      Date, Date],\n        ['Michael', 'Buy condo',             Date, Date],\n        ['Jim',     'Close sale to library', Date, Date],\n        ['',        'No resource assigned'],\n        ['',        'Halloween prep',        Date, Date],\n        ['',        'New year prep',         Date, Date]\n    ]\n}\n</code></pre>",
      "extends": [
        "Grid/util/TableExporter"
      ],
      "mixes": [
        "Core/localization/Localizable"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ScheduleTableExporter.js",
      "path": "/Calendar/lib/Scheduler/util",
      "configs": [
        {
          "name": "includeUnassigned",
          "description": "<p>Set to <code>false</code> to not include unassigned events in the export. <code>true</code> by default.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "eventColumns",
          "description": "<p>An array of Event columns configuration used to specify columns width, headers name, and column fields to get the data from.\n'field' config is required. If 'text' is missing, the 'field' config will be used instead.</p>\n<p>For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>eventColumns    : [\n    { text : 'Task', field : 'name' },\n    { text : 'Starts', field : 'startDate', width : 140 },\n    { text : 'Ends', field : 'endDate', width : 140 }\n]\n</code></pre>",
          "type": [
            "Array.<String>",
            "Array.<Object>"
          ],
          "scope": "inner"
        },
        {
          "name": "eventSortFn",
          "access": "internal",
          "description": "<p>Function to sort events for each resource. By default events are sorted in the order of appending to the\nstore.\nFor example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// Sorting by start date\neventSortFn : (a, b) => a.startDate - b.startDate\n</code></pre>",
          "type": "function",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "DependencyEditor",
      "modulePath": "Scheduler/view/DependencyEditor",
      "classDescription": "<p>A dependency editor popup.</p>",
      "extends": [
        "Core/widget/Popup"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "DependencyEditor.js",
      "path": "/Calendar/lib/Scheduler/view"
    },
    {
      "name": "EventEditor",
      "modulePath": "Scheduler/view/EventEditor",
      "classDescription": "<p>Provided event editor dialog.</p>",
      "extends": [
        "Core/widget/Popup"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventEditor.js",
      "path": "/Calendar/lib/Scheduler/view",
      "configs": [
        {
          "name": "titleRenderer",
          "description": "<p>A Function (or <em>name</em> of a function) which produces a customized Panel header based upon the event being edited.</p>",
          "type": [
            "function",
            "String"
          ],
          "scope": "inner",
          "returns": {
            "type": "String",
            "description": "<p>The Panel title.</p>"
          },
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record being edited</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Header",
      "modulePath": "Scheduler/view/Header",
      "classDescription": "<p>Custom header subclass which handles the existence of the special TimeAxisColumn</p>",
      "extends": [
        "Grid/view/Header"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "Header.js",
      "path": "/Calendar/lib/Scheduler/view"
    },
    {
      "name": "HorizontalTimeAxis",
      "modulePath": "Scheduler/view/HorizontalTimeAxis",
      "classDescription": "<p>A visual horizontal representation of the time axis described in the\n<a href=\"#Scheduler/preset/ViewPreset#field-headers\">headers</a>.\nNormally you should not interact with this class directly.</p>",
      "extends": [
        "Scheduler/view/TimeAxisBase"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "HorizontalTimeAxis.js",
      "path": "/Calendar/lib/Scheduler/view"
    },
    {
      "name": "ResourceHeader",
      "modulePath": "Scheduler/view/ResourceHeader",
      "classDescription": "<p>Header widget that renders resource column headers and acts as the interaction point for resource columns in vertical\nmode. Note that it uses virtual rendering and element reusage to gain performance, only headers in view are available\nin DOM. Because of this you should avoid direct element manipulation, any such changes can be discarded at any time.</p>\n<p>By default it displays resources <code>name</code> and also applies its <code>iconCls</code> if any, like this:</p>\n<pre class=\"prettyprint source\"><code>&lt;i class=&quot;iconCls&quot;>name&lt;/i>\n</code></pre>\n<p>If Scheduler is configured with a <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath\">resourceImagePath</a> the\nheader will render miniatures for the resources, using <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-imageUrl\">imageUrl</a> or <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-image\">image</a> with\nfallback to <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-name\">name</a> + <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImageExtension\">resourceImageExtension</a> for unset values.</p>\n<p>The contents and styling of the resource cells in the header can be customized using <a href=\"#Scheduler/view/ResourceHeader#config-headerRenderer\">headerRenderer</a>:</p>\n<pre class=\"prettyprint source\"><code>new Scheduler({\n    mode            : 'vertical',\n    resourceColumns : {\n        headerRenderer : ({ resourceRecord }) => `Hello ${resourceRecord.name}`\n    }\n}\n</code></pre>\n<p>The width of the resource columns is determined by the <a href=\"#Scheduler/view/ResourceHeader#config-columnWidth\">columnWidth</a> config.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceHeader.js",
      "path": "/Calendar/lib/Scheduler/view",
      "configs": [
        {
          "name": "resourceStore",
          "access": "private",
          "description": "<p>Resource store used to render resource headers. Assigned from Scheduler.</p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "inner"
        },
        {
          "name": "columnWidth",
          "description": "<p>Width for each resource column</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "headerRenderer",
          "description": "<p>Custom header renderer function. Can be used to manipulate the element config used to create the element\nfor the header:</p>\n<pre class=\"prettyprint source\"><code>new Scheduler({\n  resourceColumns : {\n    headerRenderer({ elementConfig, resourceRecord }) {\n      elementConfig.dataset.myExtraData = 'extra';\n      elementConfig.style.fontWeight = 'bold';\n    }\n  }\n});\n</code></pre>\n<p>See <a href=\"#Core/helper/DomHelper#function-createElement-static\">DomHelper#createElement()</a> for more information.\nPlease take care to not break the default configs :)</p>\n<p>Or as a template by returning HTML from the function:</p>\n<pre class=\"prettyprint source\"><code>new Scheduler({\n  resourceColumns : {\n    headerRenderer : ({ resourceRecord }) => `\n      &lt;div class=&quot;my-custom-template&quot;>\n      ${resourceRecord.firstName} {resourceRecord.surname}\n      &lt;/div>\n    `\n  }\n});\n</code></pre>\n<p>NOTE: When using <code>headerRenderer</code> no default internal markup is applied to the resource header cell,\n<code>iconCls</code> and <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-imageUrl\">imageUrl</a> or <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-image\">image</a>\nwill have no effect unless you supply custom markup for them.</p>",
          "type": "function",
          "scope": "inner",
          "parameters": [
            {
              "name": "params",
              "type": "Object",
              "description": "<p>Object containing the params below</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource whose header is being rendered</p>"
            },
            {
              "name": "elementConfig",
              "type": "Object",
              "description": "<p>A <a href=\"#Core/helper/DomHelper#function-createElement-static\">createElement</a> config object used to create the element for the resource</p>"
            }
          ]
        },
        {
          "name": "fillWidth",
          "description": "<p>Automatically resize resource columns to <strong>fill</strong> available width. Set to <code>false</code> to always respect the\nconfigured <code>columnWidth</code></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        },
        {
          "name": "fitWidth",
          "description": "<p>Automatically resize resource columns to always <strong>fit</strong> available width</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "showAvatars",
          "description": "<p>Set to <code>false</code> to render just the resource name, <code>true</code> to render an avatar (or initials if no image exists)</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true
        }
      ],
      "properties": [
        {
          "name": "firstResource",
          "access": "private",
          "description": "<p>An index of the first visible resource in vertical mode</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "lastResource",
          "access": "private",
          "description": "<p>An index of the last visible resource in vertical mode</p>",
          "type": "Number",
          "scope": "inner",
          "readonly": true
        },
        {
          "name": "fillWidth",
          "description": "<p>Assign to toggle resource columns *<em>fill</em> mode. <code>true</code> means they will stretch (grow) to fill viewport, <code>false</code>\nthat they will respect their configured <code>columnWidth</code>.</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "fitWidth",
          "description": "<p>Assign to toggle resource columns *<em>fit</em> mode. <code>true</code> means they will grow or shrink to always fit viewport,\n<code>false</code> that they will respect their configured <code>columnWidth</code>.</p>",
          "type": "Boolean",
          "scope": "instance"
        }
      ],
      "functions": [
        {
          "name": "refresh",
          "description": "<p>Refreshes the visible headers</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "Scheduler",
      "modulePath": "Scheduler/view/Scheduler",
      "classDescription": "<p>The Scheduler widget is a very powerful and performant UI component that displays an arbitrary number of &quot;locked&quot;\ncolumns with a schedule occupying the remaining space. The schedule has a timeaxis at the top, one row per resource\nand any number of events per resource.</p>\n<h2>Intro</h2>\n<p>The Scheduler widget has a wide range of features and a large API to allow users to work with it efficiently in the\nbrowser.</p>\n<p>The timeaxis displayed at the top of the Scheduler is configured using a <a href=\"#Scheduler/view/TimelineBase#config-startDate\">startDate</a>,\n<a href=\"#Scheduler/view/TimelineBase#config-endDate\">endDate</a> and a <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-viewPreset\">viewPreset</a>.\nThe dates determine the outer limits of the range shown in the timeaxis while the <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a>\ndecides the appearance and which dates are actually shown. The Scheduler ships with a selection of predefined view\npresets, which can be found in <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>. If you want to specify view presets for a\nspecific scheduler only, please see <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">presets</a> config.</p>\n<p>The Scheduler uses a <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a> to hold resources and an <a href=\"#Scheduler/data/EventStore\">EventStore</a>\nto hold events. You can use inline data or load data using ajax, see the &quot;Working with data&quot; guides for more\ninformation.</p>\n<p>The simplest schedule configured with inline data would look like this:</p>\n<pre><code> let scheduler = new Scheduler({\n     appendTo : document.body,\n\n     startDate  : new Date(2018,4,6),\n     endDate    : new Date(2018,4,12),\n     viewPreset : 'dayAndWeek',\n\n      columns : [\n         { field : 'name', text : 'Name', width: 100 }\n     ],\n\n     resources : [\n         { id : 1, name : 'Bernard' },\n         { id : 2, name : 'Bianca' }\n     ],\n\n     events : [\n         { id : 1, resourceId : 1, name : 'Interview', startDate : '2018-05-06', endDate : '2018-05-07' },\n         { id : 2, resourceId : 1, name : 'Press conference', startDate : '2018-05-08', endDate : '2018-05-09' },\n         { id : 3, resourceId : 2, name : 'Audition', startDate : '2018-05-06', endDate : '2018-05-08' },\n         { id : 4, resourceId : 2, name : 'Script deadline', startDate : '2018-05-11', endDate : '2018-05-11' }\n     ]\n });\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Scheduler/view/Simplest.js\"></div></p>\n<h2>Inheriting from Bryntum Grid</h2>\n<p>Bryntum Scheduler inherits from Bryntum Grid, meaning that most features available for the grid are also available\nfor the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.</p>\n<p>For more information on configuring columns, filtering, search etc. please see the <a href=\"#Grid/view/Grid\">Grid API docs</a>.\n<h2 class=\"collapsible-heading\">Loading data</h2><section class=\"collapsible\">\nAs mentioned above Bryntum Scheduler uses an <a href=\"#Scheduler/data/EventStore\">EventStore</a> and a <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a>\nto hold its data. Data is expected to be in JSON format and can be assigned inline (from memory) using the\n<a href=\"#Scheduler/view/Scheduler#config-events\">events</a> and <a href=\"#Scheduler/view/Scheduler#config-resources\">resources</a> shortcuts:</p>\n<pre class=\"prettyprint source\"><code>let scheduler = new Scheduler({\n   events : myArrayOfEventData,\n   resources : myArrayOfResourceData\n});\n</code></pre>\n<p>If you need to give additional store configuration, you can also specify store configs or instances:</p>\n<pre class=\"prettyprint source\"><code>let resourceStore = new ResourceStore({\n  // ResourceStore config object\n})\n\nlet scheduler = new Scheduler({\n   // EventStore config object\n   eventStore : {\n      ...\n   },\n\n   // Already existing ResourceStore instance\n   resourceStore\n});\n</code></pre>\n<p>To use Ajax to fetch data from a server, specify <a href=\"#Core/data/AjaxStore#config-readUrl\">readUrl</a>:</p>\n<pre class=\"prettyprint source\"><code>let scheduler = new Scheduler({\n   eventStore : {\n       readUrl  : 'backend/read_events.php',\n       autoLoad : true\n   }\n});\n// If you do not specify autoLoad, trigger loading manually:\nscheduler.eventStore.load();\n</code></pre>\n<p>For more information, see the &quot;Working with data&quot; guides.\n</section>\n<h2 class=\"collapsible-heading\">Event styling</h2><section class=\"collapsible\">\nBryntum Schedulers appearance can be affected in a few different ways:</p>\n<ul>\n<li>Switching themes</li>\n<li>Choosing event styles and colors</li>\n<li>Using renderer functions</li>\n</ul>\n<h3>Switching themes</h3>\n<p>Scheduler ships with four different themes, simply include the css file for the theme you would like to use on your\npage. The themes are located in the <code>/build</code> folder. For example to include the material theme:</p>\n<pre class=\"prettyprint source\"><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;build/scheduler.material.css&quot; data-bryntum-theme>\n</code></pre>\n<p>Included themes are (from left to right) classic-light, classic, classic-dark, stockholm and material:</p>\n<img src=\"Scheduler/basic/thumb.classic-light.png\" alt=\"Classic-Light theme\" width=\"300\" style=\"margin-right: .5rem\">\n<img src=\"Scheduler/basic/thumb.classic.png\" alt=\"Classic theme\" width=\"300\" style=\"margin-right: .5rem\">\n<img src=\"Scheduler/basic/thumb.classic-dark.png\" alt=\"Classic-Dark theme\" width=\"300\" style=\"margin-right: .5rem\">\n<img src=\"Scheduler/basic/thumb.stockholm.png\" alt=\"Stockholm theme\" width=\"300\" style=\"margin-right: .5rem\">\n<img src=\"Scheduler/basic/thumb.material.png\" alt=\"Material theme\" width=\"300\">\n<h3>Choosing event styles and colors</h3>\n<p>The style and color of each event can be changed by assigning to the <code>eventStyle</code> and <code>eventColor</code> configs. These\nconfigs are available at 3 different levels:</p>\n<ul>\n<li>Scheduler level, affects all events (see <a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle\">eventStyle</a> and\n<a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventColor\">eventColor</a>).</li>\n<li>Resource level, affects all events assigned to that resource (see <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-eventStyle\">eventStyle</a>\nand <a href=\"#Scheduler/model/mixin/ResourceModelMixin#field-eventColor\">eventColor</a>).</li>\n<li>Event level, affects that event (see <a href=\"#Scheduler/model/mixin/EventModelMixin#field-eventStyle\">eventStyle</a> and\n<a href=\"#Scheduler/model/mixin/EventModelMixin#field-eventColor\">eventColor</a>).</li>\n</ul>\n<p><div class=\"external-example \" data-file=\"Scheduler/view/Styles.js\"></div></p>\n<p>For available styles, see <a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle\">eventStyle</a>. For colors,\n<a href=\"#Scheduler/view/mixin/TimelineEventRendering#config-eventColor\">eventColor</a>. Also take a look at the\n<a href=\"../examples/eventstyles\" target=\"_blank\">eventstyles demo</a>.</p>\n<h3>Sorting overlapping events</h3>\n<p>The order of overlapping events rendered in a horizontal scheduler can be customized by overriding\n<a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-horizontalEventSorterFn\">horizontalEventSorterFn</a> function on the scheduler.\nFor example:</p>\n<pre class=\"prettyprint source\"><code>let scheduler = new Scheduler({\n    horizontalEventSorterFn(a, b) {\n        return b.startDate.getTime() - a.startDate.getTime();\n    },\n    ...\n});\n</code></pre>\n<p><div class=\"external-example \" data-file=\"Scheduler/view/SortingOverlappingEvents.js\"></div></p>\n<h3>Using render functions</h3>\n<p>Render function can be used to manipulate the rendering of rows (resources) and events. For information on row\nrenderers, see <a href=\"#Grid/column/Column#config-renderer\">renderer</a>.</p>\n<p>Event rendering can be manipulated by specifying an <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer\">eventRenderer</a> function. The function is called\nfor each event before it is rendered to DOM. By using its arguments you can add CSS classes, modify styling and\ndetermine the contents of the event:</p>\n<pre class=\"prettyprint source\"><code>let scheduler = new Scheduler({\n\n  events    : [...],\n  resources : [...],\n\n  ...,\n\n  eventRenderer({resourceRecord, eventRecord, renderData}) {\n     // add css class to the event\n     renderData.cls.add('my-css-class');\n\n     // use an icon\n     renderData.iconCls = 'b-fa b-fa-some-nice-icon';\n\n     // return value is used as events text\n     return `${resourceRecord.name}: ${eventRecord.name}`;\n  }\n});\n</code></pre>\n<p></section>\n<h2 class=\"collapsible-heading\">Event manipulation</h2><section class=\"collapsible\">\nYou can programmatically manipulate the events using data operations, see the &quot;Working with data&quot; guides for more\ninformation. Events are reactive, changes reflect on the UI automatically. A small example on manipulating events:</p>\n<pre class=\"prettyprint source\"><code>// change startDate of first event\nscheduler.eventStore.first.startDate = new Date(2018,5,10);\n\n// remove last event\nscheduler.eventStore.last.remove();\n\n// reassign an event\nscheduler.eventStore.getById(10).resourceId = 2;\n</code></pre>\n<p>You can also allow your users to manipulate the events using the following features:</p>\n<ul>\n<li><a href=\"#Scheduler/feature/EventDrag\">EventDrag</a>, drag and drop events within the schedule</li>\n<li><a href=\"#Scheduler/feature/EventDragCreate\">EventDragCreate</a>, create new events by click-dragging an empty area</li>\n<li><a href=\"#Scheduler/feature/EventEdit\">EventEdit</a>, show an event editing form</li>\n<li><a href=\"#Scheduler/feature/SimpleEventEdit\">SimpleEventEdit</a>, edit the event name easily</li>\n<li><a href=\"#Scheduler/feature/EventResize\">EventResize</a>, resize events by dragging resize handles</li>\n</ul>\n<p>All of the features mentioned above are enabled by default.\n</section>\n<h2 class=\"collapsible-heading\">Default configs</h2><section class=\"collapsible\">\nThere is a myriad of configs and features available for Scheduler (browse the API docs to find them), some of them on\nby default and some of them requiring extra configuration. The code below tries to illustrate the major things that\nare used by default:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>let scheduler = new Scheduler({\n   // The following features are enabled by default:\n   features : {\n       cellEdit            : true, // Cell editing in the columns part\n       columnLines         : true, // Column lines in the schedule part\n       columnPicker        : true, // Header context menu item to toggle visible columns\n       columnReorder       : true, // Reorder columns in grid part using drag and drop\n       columnResize        : true, // Resize columns in grid part using the mouse\n       cellMenu            : true, // Context menu for cells in the grid part\n       eventMenu           : true, // Context menu for events\n       eventDrag           : true, // Dragging events\n       eventDragCreate     : true, // Drag creating events\n       eventEdit           : true, // Event editor dialog\n       eventFilter         : true, // Filtering events using header context menu\n       eventCopyPaste      : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste events\n       eventResize         : true, // Resizing events using the mouse\n       eventTooltip        : true, // Tooltips for events\n       group               : true, // Row grouping\n       headerMenu          : true, // Context menu for headers in the grid part\n       timeAxisHeaderMenu  : true, // Header context menu for schedule part\n       scheduleMenu        : true, // Context menu for empty parts of the schedule\n       scheduleTooltip     : true, // Tooltip for empty parts of the schedule\n       sort                : true  // Row sorting\n   },\n\n   // From Grid\n   animateRemovingRows       : false, // Rows will not slide out on removal\n   autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height\n   columnLines               : true,  // Grid part, themes might override it to hide lines anyway\n   emptyText                 : 'No rows to display',\n   enableTextSelection       : false, // Not allowed to select text in cells by default,\n   fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n   fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n   loadMask                  : 'Loading...',\n   resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n   responsiveLevels : {\n     small : 400,\n     medium : 600,\n     large : '*'\n   },\n   rowHeight                  : 60,    // Scheduler specifies a default rowHeight in pixels\n   showDirty                  : false, // No indicator for changed cells\n\n   // Scheduler specific\n   autoAdjustTimeAxis             : true,      // startDate & endDate will be adjusted to display a suitable range\n   allowOverlap                   : true,      // Events are allowed to overlap (overlays, stacks or packs depending on eventLayout)\n   barMargin                      : 10,        // Space above + below each event\n   createEventOnDblClick          : true,      // Allow creating new events by double clicking empty space\n   enableDeleteKey                : true,      // Allow deleting events with delete / backspace keys\n   enableEventAnimations          : true,      // Animate event changes\n   eventBarTextField              : 'name',    // Field on EventModel to display in events\n   eventColor                     : 'green',   // Use green as default color for events\n   eventLayout                    : 'stack',   // Stack overlapping events by default\n   eventStyle                     : 'plain',   // Use plain as default style for events\n   managedEventSizing             : true,      // Calculate event sizes based on rowHeight & barMargin\n   milestoneCharWidth             : 10,\n   milestoneLayoutMode            : 'default',\n   removeUnassignedEvent          : true,      // Remove event when all assignments for it are removed\n   useInitialAnimation            : true,      // Fade in events initially\n   viewPreset                     : 'weekAndDayLetter',\n   zoomOnMouseWheel               : true,\n   zoomOnTimeAxisDoubleClick      : true\n});\n</code></pre>\n<p></section>\n<h2 class=\"collapsible-heading\">Performance</h2><section class=\"collapsible\">\nTo make scheduler performance as good as possible it only renders the events and resources that are within view (plus\nan additional buffer). Since adding to and removing from DOM comes with a performance penalty the elements are\ninstead repositioned and reused as you scroll. A side effect of this is that you cannot do direct DOM element\nmanipulation in a reliable way, instead you should use row and event renderer functions to achieve what you want (see\nthe section on event styling above).</p>\n<p>To put the scheduler to the test, try our <a href=\"../examples/bigdataset\" target=\"_blank\">bigdataset demo</a>.\n</section></p>\n<p><h2 class=\"collapsible-heading\">Recurring Events</h2><section class=\"collapsible\">\nFrom 4.0.0, there is no <code>RecurringEvents</code> Feature. There is an\n<a href=\"#Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents\">enableRecurringEvents</a> boolean config on the Scheduler.\nOccurrences of recurring events are provided on a &quot;just in time&quot; basis by a new EventStore API which must now be used\nwhen interrogating an EventStore.</p>\n<p><a href=\"#Scheduler/data/mixin/GetEventsMixin#function-getEvents\">getEvents</a> is a multipurpose event gathering method which can be\nasked to return events which match a set of criteria including a date range and a resource. By default, if the\nrequested date range contains occurrences of a recurring event, those occurrences are returned in the result array.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>myEventStore.getEvents({\n    resourceRecord : myResourceRecord,\n    startDate      : myScheduler.startDate,\n    endDate        : myScheduler.endDate\n});\n</code></pre>\n<p>Occurrences are <em>not</em> present in the store's data collection.</p>\n<p>To directly access occurrences of a recurring event which <em>intersect</em> a date range, use:</p>\n<pre class=\"prettyprint source lang-js\"><code>recurringEvent.getOccurrencesForDateRange(startDate, endDate);\n</code></pre>\n<p>The <code>endDate</code> argument is optional if the occurrence for one date is required. This method always\nreturns an array. Note that it may be empty if no occurrences intersect the date range.</p>\n<h3>Convert an occurrence to an exception</h3>\n<p>To programmatically convert an occurrence to be a single exception to its owner's sequence use:</p>\n<pre class=\"prettyprint source\"><code>myOccurrence.beginBatch();\nmyOccurrence.startDate = DateHelper.add(myOccurrence.startDate, 1, 'day');\nmyOccurrence.name = 'Postponed to next day';\nmyOccurrence.recurrence = null; // This means it does NOT become a new recurring base event.\nmyOccurrence.endBatch();\n</code></pre>\n<p>That will cause that event to be inserted into the store as a concrete event definition, firing\nan <code>add</code> event as would be expected, and will add an <code>exceptionDates</code> to its owning recurring event.</p>\n<p>When syncing this change back to the server, the <code>exceptionDates</code> array for the modified\nrecurring event now contains the exception dates correctly serialized into string form using\nthe <code>dateFormat</code> of the field. The system-supplied default value for this is\n<code>'YYYY-MM-DDTHH:mm:ssZ'</code></p>\n<h3>Convert an occurrence to a new recurring event sequence.</h3>\n<p>To programmatically convert an occurrence to be the start of a new recurring sequence, use:</p>\n<pre class=\"prettyprint source\"><code>myOccurrence.beginBatch();\nmyOccurrence.startDate = DateHelper.set(myOccurrence.startDate, 'hour', 14);\nmyOccurrence.name = 'Moved to 2pm from here on';\nmyOccurrence.endBatch();\n</code></pre>\n<p>That will cause that event to be inserted into the store as a concrete <em>recurring</em> event\ndefinition, firing an <code>add</code> event as would be expected, and will terminate the previous\nrecurring owner of that occurrence on the day before the new event.\n</section></p>",
      "extends": [
        "Scheduler/view/SchedulerBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "Scheduler.js",
      "path": "/Calendar/lib/Scheduler/view",
      "classType": "scheduler"
    },
    {
      "name": "SchedulerBase",
      "modulePath": "Scheduler/view/SchedulerBase",
      "classDescription": "<p>A thin base class for <a href=\"#Scheduler/view/Scheduler\">Scheduler</a>. Does not include any features by default, allowing smaller\ncustom built bundles if used in place of <a href=\"#Scheduler/view/Scheduler\">Scheduler</a>.</p>\n<p><strong>NOTE:</strong> In most scenarios you do probably want to use Scheduler instead of SchedulerBase.</p>",
      "extends": [
        "Scheduler/view/TimelineBase"
      ],
      "mixes": [
        "Scheduler/view/mixin/EventNavigation",
        "Scheduler/view/mixin/EventSelection",
        "Scheduler/view/mixin/SchedulerDom",
        "Scheduler/view/mixin/SchedulerDomEvents",
        "Scheduler/view/mixin/SchedulerEventRendering",
        "Scheduler/view/mixin/SchedulerRegions",
        "Scheduler/view/mixin/SchedulerScroll",
        "Scheduler/view/mixin/SchedulerState",
        "Scheduler/view/mixin/SchedulerStores",
        "Scheduler/view/mixin/TimelineDateMapper",
        "Scheduler/view/mixin/TimelineDomEvents",
        "Scheduler/view/mixin/TimelineEventRendering",
        "Scheduler/view/mixin/TimelineScroll",
        "Scheduler/view/mixin/TimelineViewPresets",
        "Scheduler/view/mixin/TimelineZoomable",
        "Scheduler/crud/mixin/CrudManagerView",
        "Scheduler/data/mixin/ProjectConsumer"
      ],
      "features": [
        "Scheduler/feature/ColumnLines",
        "Scheduler/feature/Dependencies",
        "Scheduler/feature/DependencyEdit",
        "Scheduler/feature/EventCopyPaste",
        "Scheduler/feature/EventDrag",
        "Scheduler/feature/EventDragCreate",
        "Scheduler/feature/EventDragSelect",
        "Scheduler/feature/EventEdit",
        "Scheduler/feature/EventFilter",
        "Scheduler/feature/EventMenu",
        "Scheduler/feature/EventResize",
        "Scheduler/feature/EventTooltip",
        "Scheduler/feature/GroupSummary",
        "Scheduler/feature/HeaderZoom",
        "Scheduler/feature/Labels",
        "Scheduler/feature/NonWorkingTime",
        "Scheduler/feature/Pan",
        "Scheduler/feature/ResourceTimeRanges",
        "Scheduler/feature/ScheduleContext",
        "Scheduler/feature/ScheduleMenu",
        "Scheduler/feature/ScheduleTooltip",
        "Scheduler/feature/SimpleEventEdit",
        "Scheduler/feature/StickyEvents",
        "Scheduler/feature/Summary",
        "Scheduler/feature/TimeAxisHeaderMenu",
        "Scheduler/feature/TimeRanges",
        "Scheduler/feature/experimental/ExcelExporter",
        "Scheduler/feature/export/PdfExport",
        "Scheduler/feature/export/exporter/MultiPageExporter",
        "Scheduler/feature/export/exporter/MultiPageVerticalExporter",
        "Scheduler/feature/export/exporter/SinglePageExporter"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerBase.js",
      "path": "/Calendar/lib/Scheduler/view",
      "properties": [
        {
          "name": "readOnly",
          "description": "<p>Get/set the scheduler's read-only state. When set to <code>true</code>, any UIs for modifying data are disabled.</p>",
          "type": "Boolean",
          "scope": "inner"
        },
        {
          "name": "events",
          "description": "<p>Get/set events, applies to the backing project's EventStore.</p>",
          "type": "Array.<Scheduler.model.EventModel>",
          "accepts": [
            "Scheduler.model.EventModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "eventStore",
          "description": "<p>Get/set the event store instance of the backing project.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resources",
          "description": "<p>Get/set resources, applies to the backing project's ResourceStore.</p>",
          "type": "Array.<Scheduler.model.ResourceModel>",
          "accepts": [
            "Scheduler.model.ResourceModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceStore",
          "description": "<p>Get/set the resource store instance of the backing project</p>",
          "type": "Scheduler.data.ResourceStore",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "assignments",
          "description": "<p>Get/set assignments, applies to the backing project's AssignmentStore.</p>",
          "type": "Array.<Scheduler.model.AssignmentModel>",
          "accepts": [
            "Scheduler.model.AssignmentModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "assignmentStore",
          "description": "<p>Get/set the event store instance of the backing project.</p>",
          "type": "Scheduler.data.AssignmentStore",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "dependencies",
          "description": "<p>Get/set dependencies, applies to the backing projects DependencyStore.</p>",
          "type": "Array.<Scheduler.model.DependencyModel>",
          "accepts": [
            "Scheduler.model.DependencyModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "dependencyStore",
          "description": "<p>Get/set the dependencies store instance of the backing project.</p>",
          "type": "Scheduler.data.DependencyStore",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "visibleResources",
          "description": "<p>Returns an object defining the range of visible resources</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "properties": [
            {
              "name": "visibleResources.first",
              "type": "Number",
              "description": "<p>First visible resource</p>",
              "isSubParam": true
            },
            {
              "name": "visibleResources.last",
              "type": "Number",
              "description": "<p>Last visible resource</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "isHorizontal",
          "access": "private",
          "description": "<p>Checks if scheduler is in horizontal mode</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ],
          "readonly": true,
          "category": "Common"
        },
        {
          "name": "isVertical",
          "access": "private",
          "description": "<p>Checks if scheduler is in vertical mode</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ],
          "readonly": true,
          "category": "Common"
        },
        {
          "name": "mode",
          "description": "<p>Get mode (horizontal/vertical)</p>",
          "type": "String",
          "scope": "instance",
          "readonly": true,
          "category": "Common"
        }
      ],
      "configs": [
        {
          "name": "readOnly",
          "description": "<p>Configure as <code>true</code> to make the scheduler read-only, by disabling any UIs for modifying data.</p>\n<p><strong>Note that checks MUST always also be applied at the server side.</strong></p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "date",
          "description": "<p>The date to display when used as a component of a Calendar.</p>\n<p>This is required by the Calendar Mode Interface.</p>",
          "type": "Date",
          "scope": "inner",
          "category": "Calendar integration"
        },
        {
          "name": "stepUnit",
          "description": "<p>Unit used to control how large steps to take when clicking the previous and next buttons in the Calendar\nUI. Only applies when used as a component of a Calendar.</p>\n<p>Suitable units depend on configured <a href=\"#Scheduler/view/SchedulerBase#config-range\">range</a>, a smaller or equal unit is recommended.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Calendar integration"
        },
        {
          "name": "range",
          "description": "<p>Unit used to set the length of the time axis when used as a component of a Calendar. Suitable units are\n<code>'month'</code>, <code>'week'</code> and <code>'day'</code>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Calendar integration"
        },
        {
          "name": "descriptionRenderer",
          "description": "<p>When the scheduler is used in a Calendar, this function provides the textual description for the\nCalendar's toolbar.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> descriptionRenderer : scheduler => {\n     const\n         count = scheduler.eventStore.records.filter(\n             eventRec => DateHelper.intersectSpans(\n                 scheduler.startDate, scheduler.endDate,\n                 eventRec.startDate, eventRec.endDate)).length,\n         startDate = DateHelper.format(scheduler.startDate, 'DD/MM/YYY'),\n         endData = DateHelper.format(scheduler.endDate, 'DD/MM/YYY');\n\n     return `${startDate} - ${endData}, ${count} event${count === 1 ? '' : 's'}`;\n }\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "category": "Calendar integration",
          "parameters": [
            {
              "name": "view",
              "type": "Scheduler.view.SchedulerBase",
              "description": "<p>The active view.</p>"
            }
          ]
        },
        {
          "name": "getDateConstraints",
          "description": "<p>A method allowing you to define date boundaries that will constrain resize, create and drag drop operations. The method will be called with the\nResource record, and the Event record.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> new Scheduler({\n     getDateConstraints(resourceRecord, eventRecord) {\n         // Assuming you have added these extra fields to your own EventModel subclass\n         const { minStartDate, maxEndDate } = eventRecord;\n\n         return {\n             start : minStartDate,\n             end   : maxEndDate\n         };\n     }\n });\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Object",
            "description": "<p>Constraining object containing <code>start</code> and <code>end</code> constraints. Omitting either\nwill mean that end is not constrained. So you can prevent a resize or move from moving <em>before</em>\na certain time while not constraining the end date.</p>"
          },
          "category": "Scheduled events",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>"
            }
          ]
        },
        {
          "name": "verticalTimeAxisColumn",
          "description": "<p>The time axis column config for vertical <a href=\"#Scheduler/view/SchedulerBase#config-mode\">mode</a>.</p>\n<p>Object with <a href=\"#Scheduler/column/VerticalTimeAxisColumn\">VerticalTimeAxisColumn</a> configuration.</p>\n<p>This object will be used to configure the vertical time axis column instance.</p>\n<p>The config allows configuring the <code>VerticalTimeAxisColumn</code> instance used in vertical mode with any Column options that apply to it.</p>\n<p>Example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    mode     : 'vertical',\n    features : {\n        filterBar : true\n    },\n    verticalTimeAxisColumn : {\n        text  : 'Filter by event name',\n        width : 180,\n        filterable : {\n            // add a filter field to the vertical column access header\n            filterField : {\n                type        : 'text',\n                placeholder : 'Type to search',\n                onChange    : ({ value }) => {\n                    // filter event by name converting to lowerCase to be equal comparison\n                    scheduler.eventStore.filter({\n                        filters : event => event.name.toLowerCase().includes(value.toLowerCase()),\n                        replace : true\n                    });\n                }\n            }\n        }\n    },\n    ...\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Time axis"
        },
        {
          "name": "createEventOnDblClick",
          "description": "<p>If true, a new event will be created when user double clicks on a time axis cell (if scheduler is not in read only mode).\nThe duration / durationUnit of the new event will be 1 time axis tick (default),\nor it can be read from the <a href=\"#Scheduler/model/EventModel#field-duration\">duration</a>\nand <a href=\"#Scheduler/model/EventModel#field-durationUnit\">durationUnit</a> fields.\nSet to false to not create events on double click.</p>",
          "type": [
            "Boolean",
            "Object"
          ],
          "scope": "inner",
          "category": "Scheduled events",
          "parameters": [
            {
              "name": "createEventOnDblClick.useEventModelDefaults",
              "type": "Boolean",
              "description": "<p>set to true to set default duration based on the defaults\nspecified by the <a href=\"#Scheduler/model/EventModel#field-duration\">duration</a> and <a href=\"#Scheduler/model/EventModel#field-durationUnit\">durationUnit</a>\nfields.</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        },
        {
          "name": "mode",
          "description": "<p>Scheduler mode. Supported values: horizontal, vertical</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "eventCls",
          "access": "private",
          "description": "<p>CSS class to add to rendered events</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-event",
          "category": "CSS"
        },
        {
          "name": "timeCellCls",
          "access": "private",
          "description": "<p>CSS class to add to cells in the timeaxis column</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-timeaxis-cell",
          "category": "CSS"
        },
        {
          "name": "overScheduledEventClass",
          "access": "private",
          "description": "<p>A CSS class to apply to each event in the view on mouseover (defaults to 'b-sch-event-hover').</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-event-hover",
          "category": "CSS"
        },
        {
          "name": "allowOverlap",
          "description": "<p>Set to false if you don't want to allow events overlapping times for any one resource (defaults to true).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Scheduled events"
        },
        {
          "name": "rowHeight",
          "description": "<p>The height in pixels of Scheduler rows.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 60
        },
        {
          "name": "getRowHeight",
          "description": "<p>Scheduler overrides Grids default implementation of <a href=\"#Grid/view/GridBase#config-getRowHeight\">getRowHeight</a> to\npre-calculate row heights based on events in the rows.</p>\n<p>The amount of rows that are pre-calculated is limited for performance reasons. The limit is configurable\nby specifying the <a href=\"#Scheduler/view/SchedulerBase#config-preCalculateHeightLimit\">preCalculateHeightLimit</a> config.</p>\n<p>The results of the calculation are cached internally.</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Number",
            "description": "<p>Desired row height</p>"
          },
          "category": "Layout",
          "parameters": [
            {
              "name": "getRowHeight.record",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record to determine row height for</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "preCalculateHeightLimit",
          "description": "<p>Maximum number of resources for which height is pre-calculated. If you have many events per\nresource you might want to lower this number to gain some initial rendering performance.</p>\n<p>Specify a falsy value to opt out of row height pre-calculation.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10000,
          "category": "Layout"
        },
        {
          "name": "events",
          "description": "<p>Inline events, will be loaded into an internally created EventStore.</p>",
          "type": [
            "Array.<Scheduler.model.EventModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "eventStore",
          "description": "<p>The <a href=\"#Scheduler/data/EventStore\">EventStore</a> holding the events to be rendered into the scheduler (required).</p>",
          "type": [
            "Scheduler.data.EventStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resources",
          "description": "<p>Inline resources, will be loaded into an internally created ResourceStore.</p>",
          "type": [
            "Array.<Scheduler.model.ResourceModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceStore",
          "description": "<p>The <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a> holding the resources to be rendered into the scheduler (required).</p>",
          "type": [
            "Scheduler.data.ResourceStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "assignments",
          "description": "<p>Inline assignments, will be loaded into an internally created AssignmentStore.</p>",
          "type": [
            "Array.<Scheduler.model.AssignmentModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "assignmentStore",
          "description": "<p>The optional <a href=\"#Scheduler/data/AssignmentStore\">AssignmentStore</a>, holding assignments between resources and events.\nRequired for multi assignments.</p>",
          "type": [
            "Scheduler.data.AssignmentStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "dependencies",
          "description": "<p>Inline dependencies, will be loaded into an internally created DependencyStore.</p>",
          "type": [
            "Array.<Scheduler.model.DependencyModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "dependencyStore",
          "description": "<p>The optional <a href=\"#Scheduler/data/DependencyStore\">DependencyStore</a>.</p>",
          "type": [
            "Scheduler.data.DependencyStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        }
      ],
      "events": [
        {
          "name": "renderEvent",
          "description": "<p>Fired after rendering an event, when its element is available in DOM.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment record</p>"
            },
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>An object containing details about the event rendering, see\n<a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer\">eventRenderer</a> for details</p>"
            },
            {
              "name": "isRepaint",
              "type": "Boolean",
              "description": "<p><code>true</code> if this render is a repaint of the event, updating its existing element</p>"
            },
            {
              "name": "isReusingElement",
              "type": "Boolean",
              "description": "<p><code>true</code> if this render lead to the event reusing a released events element</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The event bar element</p>"
            }
          ]
        },
        {
          "name": "releaseEvent",
          "description": "<p>Fired after releasing an event, useful to cleanup of custom content added on <code>renderEvent</code> or in <code>eventRenderer</code>.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment record</p>"
            },
            {
              "name": "renderData",
              "type": "Object",
              "description": "<p>An object containing details about the event rendering</p>"
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The event bar element</p>"
            }
          ]
        },
        {
          "name": "resourceHeaderClick",
          "description": "<p>Fired when clicking a resource header cell</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event</p>"
            }
          ]
        },
        {
          "name": "resourceHeaderDblclick",
          "description": "<p>Fired when double clicking a resource header cell</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event</p>"
            }
          ]
        },
        {
          "name": "resourceHeaderContextmenu",
          "description": "<p>Fired when activating context menu on a resource header cell</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event</p>"
            }
          ]
        },
        {
          "name": "eventKeyDown",
          "description": "<p>Triggered when a keydown event is observed if there are selected events.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The selected event records</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>The selected assignment records</p>"
            },
            {
              "name": "event",
              "type": "KeyboardEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventKeyUp",
          "description": "<p>Triggered when a keyup event is observed if there are selected events.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The selected event records</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>The selected assignment records</p>"
            },
            {
              "name": "event",
              "type": "KeyboardEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "beforeEventAdd",
          "description": "<p>Fires before an event is added. Can be triggered by schedule double click or drag create action.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The Scheduler instance</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The record about to be added</p>"
            },
            {
              "name": "resourceRecords",
              "type": "Array.<Scheduler.model.ResourceModel>",
              "description": "<p>Resources that the record is assigned to</p>"
            },
            {
              "name": "assignmentRecords",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>The assignment records</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "eventAutoCreated",
          "description": "<p>Fired when a double click or drag gesture has created a new event and added it to the event store.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler.</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The new event record.</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource assigned to the new event.</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "editEvent",
          "description": "<p>Opens an editor UI to edit the passed event.</p>\n<p><em>NOTE: Only available when the <a href=\"#Scheduler/feature/EventEdit\">EventEdit</a> feature is enabled.</em></p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event to edit</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The Resource record for the event.\nThis parameter is needed if the event is newly created for a resource and has not been assigned, or when using\nmulti assignment.</p>",
              "optional": true
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>Element to anchor editor to (defaults to events element)</p>",
              "optional": true
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts"
        },
        {
          "name": "resolveDependencyRecord",
          "description": "<p>Returns the dependency record for a DOM element</p>\n<p><em>NOTE: Only available when the <a href=\"#Scheduler/feature/Dependencies\">Dependencies</a> feature is enabled.</em></p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The dependency line element</p>"
            }
          ],
          "scope": "inner",
          "category": "Feature shortcuts",
          "returns": {
            "type": "Scheduler.model.DependencyModel",
            "description": "<p>The dependency record</p>"
          }
        },
        {
          "name": "onEventCreated",
          "description": "<p>Called when new event is created.\nСan be overriden to supply default record values etc.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Newly created event</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "createEvent",
          "description": "<p>Creates an event on the specified date, for the specified resource which conforms to this\nscheduler's <a href=\"#Scheduler/view/SchedulerBase#config-createEventOnDblClick\">createEventOnDblClick</a> setting.</p>\n<p>This method may be called programmatically by application code if the <code>createEventOnDblClick</code> setting\nis <code>false</code>, in which case the default values for <code>createEventOnDblClick</code> will be used.</p>\n<p>If the <a href=\"#Scheduler/feature/EventEdit\">EventEdit</a> feature is active, the new event\nwill be displayed in the event editor.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to add the event at.</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource to create the event for.</p>"
            }
          ],
          "scope": "instance",
          "async": true
        },
        {
          "name": "isDateRangeAvailable",
          "description": "<p>Checks if a date range is allocated or not for a given resource.</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Date",
              "description": "<p>The start date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>The end date</p>"
            },
            {
              "name": "excludeEvent",
              "type": [
                "Scheduler.model.EventModel",
                "null"
              ],
              "description": "<p>An event to exclude from the check (or null)</p>"
            },
            {
              "name": "resource",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource</p>"
            }
          ],
          "scope": "instance",
          "category": "Dates",
          "returns": {
            "type": "Boolean",
            "description": "<p>True if the timespan is available for the resource</p>"
          }
        },
        {
          "name": "suspendRefresh",
          "description": "<p>Suspends UI refresh on store operations.</p>\n<p>Multiple calls to <code>suspendRefresh</code> stack up, and will require an equal number of <code>resumeRefresh</code> calls to\nactually resume UI refresh.</p>",
          "scope": "inner"
        },
        {
          "name": "resumeRefresh",
          "description": "<p>Resumes UI refresh on store operations.</p>\n<p>Multiple calls to <code>suspendRefresh</code> stack up, and will require an equal number of <code>resumeRefresh</code> calls to\nactually resume UI refresh.</p>\n<p>Specify <code>true</code> as the first param to trigger a refresh if this call unblocked the refresh suspension.\nIf the underlying project is calculating changes, the refresh will be postponed until it is done.</p>",
          "parameters": [
            {
              "name": "trigger",
              "type": "Boolean",
              "description": "<p><code>true</code> to trigger a refresh, if this resume unblocks the suspend</p>"
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        },
        {
          "name": "scheduleEvent",
          "description": "<p>Assigns and schedules an unassigned event record (+ adds it to this Scheduler's event store unless already in it).</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The config containing data about the event record to schedule</p>"
            },
            {
              "name": "config.startDate",
              "type": "Date",
              "description": "<p>The start date</p>",
              "isSubParam": true
            },
            {
              "name": "config.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>An event to exclude from the check (or null)</p>",
              "isSubParam": true
            },
            {
              "name": "config.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource</p>",
              "isSubParam": true
            },
            {
              "name": "config.element",
              "type": "HTMLElement",
              "description": "<p>The element if you are dragging an element from outside the scheduler</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise"
          }
        }
      ]
    },
    {
      "name": "TimeAxisBase",
      "modulePath": "Scheduler/view/TimeAxisBase",
      "classDescription": "<p>Base class for HorizontalTimeAxis and VerticalTimeAxis. Contains shared functionality to only render ticks in view,\nshould not be used directly.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "access": "private",
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeAxisBase.js",
      "path": "/Calendar/lib/Scheduler/view",
      "configs": [
        {
          "name": "compactCellWidthThreshold",
          "description": "<p>The minimum width for a bottom row header cell to be considered 'compact', which adds a special CSS class\nto the row (for special styling). Copied from Scheduler/Gantt.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 15
        },
        {
          "name": "sizeProperty",
          "access": "private",
          "description": "<p>Style property to use as cell size. Either width or height depending on orientation</p>",
          "type": "String",
          "scope": "inner"
        },
        {
          "name": "positionProperty",
          "access": "private",
          "description": "<p>Style property to use as cells position. Either left or top depending on orientation</p>",
          "type": "String",
          "scope": "inner"
        }
      ],
      "functions": [
        {
          "name": "refresh",
          "description": "<p>Refresh the UI</p>",
          "parameters": [
            {
              "name": "rebuild",
              "type": "Boolean",
              "description": "<p>Specify <code>true</code> to force a rebuild of the underlying header level definitions</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimeAxisSubGrid",
      "modulePath": "Scheduler/view/TimeAxisSubGrid",
      "classDescription": "<p>Widget that encapsulates the SubGrid part of the scheduler which houses the timeline view.</p>",
      "extends": [
        "Grid/view/SubGrid"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeAxisSubGrid.js",
      "path": "/Calendar/lib/Scheduler/view",
      "functions": [
        {
          "name": "onInternalResize",
          "access": "private",
          "description": "<p>This is an event handler triggered when the TimeAxisSubGrid changes size.\nIts height changes when content height changes, and that is not what we are\ninterested in here. If the <em>width</em> changes, that means the visible viewport\nhas changed size.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "width",
              "type": "Number"
            },
            {
              "name": "height",
              "type": "Number"
            },
            {
              "name": "oldWidth",
              "type": "Number"
            },
            {
              "name": "oldHeight",
              "type": "Number"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimelineBase",
      "modulePath": "Scheduler/view/TimelineBase",
      "classDescription": "<p>Abstract base class used by timeline based components such as Scheduler and Gantt. Based on Grid, supplies a &quot;locked&quot;\nregion for columns and a &quot;normal&quot; for rendering of events etc.</p>",
      "extends": [
        "Grid/view/Grid"
      ],
      "mixes": [
        "Scheduler/view/mixin/TimelineDateMapper",
        "Scheduler/view/mixin/TimelineDomEvents",
        "Scheduler/view/mixin/TimelineEventRendering",
        "Scheduler/view/mixin/TimelineScroll",
        "Scheduler/view/mixin/TimelineState",
        "Scheduler/view/mixin/TimelineViewPresets",
        "Scheduler/view/mixin/TimelineZoomable",
        "Scheduler/view/mixin/RecurringEvents"
      ],
      "virtual": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineBase.js",
      "path": "/Calendar/lib/Scheduler/view",
      "properties": [
        {
          "name": "startDate",
          "description": "<p>Get/set startDate. Defaults to current date if none specified.</p>\n<p><strong>Note:</strong> If you need to set start and end date at the same time, use <a href=\"#Scheduler/view/TimelineBase#function-setTimeSpan\">setTimeSpan</a> method.</p>",
          "type": "Date",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "endDate",
          "description": "<p>Get/set endDate. Defaults to startDate + default span of the used ViewPreset.</p>\n<p><strong>Note:</strong> If you need to set start and end date at the same time, use <a href=\"#Scheduler/view/TimelineBase#function-setTimeSpan\">setTimeSpan</a> method.</p>",
          "type": "Date",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "timeAxis",
          "description": "<p>A backing data store of 'ticks' providing the input date data for the time axis of timeline panel.</p>",
          "type": "Scheduler.data.TimeAxis",
          "scope": "inner",
          "readonly": true,
          "category": "Time axis"
        },
        {
          "name": "hasVisibleEvents",
          "description": "<p>Returns <code>true</code> if any of the events/tasks or feature injected elements (such as ResourceTimeRanges) are within\nthe <a href=\"#Scheduler/view/TimelineBase#config-timeAxis\">timeAxis</a></p>",
          "type": "Boolean",
          "scope": "instance",
          "readonly": true,
          "category": "Scheduled events"
        },
        {
          "name": "partners",
          "description": "<p>Returns the partnered timelines.</p>\n<ul>\n<li>To add a new partner see <a href=\"#Scheduler/view/TimelineBase#function-addPartner\">addPartner</a> method.</li>\n<li>To remove existing partner see <a href=\"#Scheduler/view/TimelineBase#function-removePartner\">removePartner</a> method.</li>\n</ul>",
          "type": "Scheduler.view.TimelineBase",
          "scope": "inner",
          "readonly": true,
          "category": "Time axis"
        },
        {
          "name": "timeAxisViewModel",
          "description": "<p>The internal view model, describing the visual representation of the time axis.</p>",
          "type": "Scheduler.view.model.TimeAxisViewModel",
          "scope": "instance",
          "readonly": true,
          "category": "Time axis"
        },
        {
          "name": "workingTime",
          "description": "<p>Get/set working time. Assign <code>null</code> to stop using working time. See <a href=\"#Scheduler/view/TimelineBase#config-workingTime\">workingTime</a> config for details.</p>",
          "type": "Object",
          "scope": "instance",
          "category": "Scheduled events"
        },
        {
          "name": "timeAxisSubGrid",
          "description": "<p>Returns the subGrid containing the time axis</p>",
          "type": "Grid.view.SubGrid",
          "scope": "inner",
          "readonly": true,
          "category": "Time axis"
        },
        {
          "name": "timeAxisSubGridElement",
          "description": "<p>Returns the html element for the subGrid containing the time axis</p>",
          "type": "HTMLElement",
          "scope": "instance",
          "readonly": true,
          "category": "Time axis"
        },
        {
          "name": "visibleDateRange",
          "description": "<p>Returns an object representing the visible date range</p>",
          "type": "Object",
          "scope": "instance",
          "readonly": true,
          "category": "Dates",
          "properties": [
            {
              "name": "visibleDateRange.startDate",
              "type": "Date",
              "isSubParam": true
            },
            {
              "name": "visibleDateRange.endDate",
              "type": "Date",
              "isSubParam": true
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "startDate",
          "description": "<p>The start date of the timeline. If omitted, and a TimeAxis has been set, the start date of the provided\n<a href=\"#Scheduler/data/TimeAxis\">TimeAxis</a> will be used. If no TimeAxis has been configured, it'll use the start/end\ndates of the loaded event dataset. If no date information exists in the event data set, it defaults to\nthe current date and time.</p>\n<p>If a string is supplied, it will be parsed using\n<a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">DateHelper.defaultFormat</a></p>\n<p><strong>Note:</strong> If you need to set start and end date at the same time, use the <a href=\"#Scheduler/view/TimelineBase#function-setTimeSpan\">setTimeSpan</a> method.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "endDate",
          "description": "<p>The end date of the timeline. If omitted, it will be calculated based on the <a href=\"#Scheduler/view/TimelineBase#config-startDate\">startDate</a>\nsetting and the 'defaultSpan' property of the current\n<a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-viewPreset\">viewPreset</a>.</p>\n<p>If a string is supplied, it will be parsed using\n<a href=\"#Core/helper/DateHelper#property-defaultFormat-static\">DateHelper.defaultFormat</a></p>\n<p><strong>Note:</strong> If you need to set start and end date at the same time, use the <a href=\"#Scheduler/view/TimelineBase#function-setTimeSpan\">setTimeSpan</a> method.</p>",
          "type": [
            "Date",
            "String"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "stickyHeaders",
          "description": "<p>When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Time axis"
        },
        {
          "name": "visibleDate",
          "description": "<p>A date to bring into view initially on the scrollable timeline. Either a date or an object describing\nthe scroll action, see <a href=\"#Scheduler/view/TimelineBase#function-scrollToDate\">scrollToDate</a> for reference.</p>",
          "type": [
            "Date",
            "Object"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "eventCls",
          "access": "private",
          "description": "<p>CSS class to add to rendered events</p>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "weekStartDay",
          "description": "<p>A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.\nWhen omitted, the week start day is retrieved from the active locale class.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Time axis"
        },
        {
          "name": "workingTime",
          "description": "<p>An object with format <code>{ fromDay, toDay, fromHour, toHour }</code> that describes the working days and hours.\nThis object will be used to populate TimeAxis <a href=\"#Scheduler/data/TimeAxis#config-include\">include</a> property.</p>\n<p>Using it results in a non-continuous time axis. Any ticks not covered by the working days and hours will\nbe excluded. Events within larger ticks (for example if using week as the unit for ticks) will be\nstretched to fill the gap otherwise left by the non working hours.</p>\n<p>As with end dates, <code>toDay</code> and <code>toHour</code> are exclusive. Thus <code>toDay : 6</code> means that day 6 (saturday) will\nnot be included.</p>\n<p><strong>NOTE:</strong> When this feature is enabled <a href=\"#Scheduler/view/mixin/TimelineZoomable\">Zooming feature</a> is\nnot supported. It's recommended to disable zooming controls:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    zoomOnMouseWheel          : false,\n    zoomOnTimeAxisDoubleClick : false,\n    ...\n});\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Time axis"
        },
        {
          "name": "timeAxis",
          "description": "<p>A <a href=\"#Scheduler/data/TimeAxis\">TimeAxis</a> config object or instance, used to create a backing data store of\n'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none\nsupplied.</p>",
          "type": [
            "Object",
            "Scheduler.data.TimeAxis"
          ],
          "scope": "inner",
          "category": "Time axis"
        },
        {
          "name": "timeAxisViewModel",
          "access": "private",
          "description": "<p>The backing view model for the visual representation of the time axis.\nEither a real instance or a simple config object.</p>",
          "type": [
            "Scheduler.view.model.TimeAxisViewModel",
            "Object"
          ],
          "scope": "inner",
          "category": "Time axis"
        },
        {
          "name": "autoAdjustTimeAxis",
          "description": "<p>You can set this option to <code>false</code> to make the timeline panel start and end on the exact provided\n<a href=\"#Scheduler/view/TimelineBase#config-startDate\">startDate</a>/<a href=\"#Scheduler/view/TimelineBase#config-endDate\">endDate</a> w/o adjusting them.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Time axis"
        },
        {
          "name": "snap",
          "description": "<p>true to snap to resolution increment while interacting with scheduled events.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Scheduled events"
        },
        {
          "name": "snapRelativeToEventStartDate",
          "description": "<p>Affects drag drop and resizing of events when <a href=\"#Scheduler/view/TimelineBase#config-snap\">snap</a> is enabled. If set to <code>true</code>, dates\nwill be snapped relative to event start. e.g. for a zoom level with timeResolution = { unit: &quot;s&quot;,\nincrement: &quot;20&quot; }, an event that starts at 10:00:03 and is dragged would snap its start date to 10:00:23,\n10:00:43 etc. When set to <code>false</code>, dates will be snapped relative to the timeAxis startDate (tick start)</p>\n<ul>\n<li>10:00:03, 10:00:20, 10:00:40 etc.</li>\n</ul>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Scheduled events"
        },
        {
          "name": "forceFit",
          "description": "<p>Set to <code>true</code> to force the time columns to fit to the available space (horizontal or vertical depends on mode).\nNote that setting <a href=\"#Scheduler/view/TimelineBase#config-suppressFit\">suppressFit</a> on <code>true</code>, will disable <code>forceFit</code> functionality.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Time axis"
        },
        {
          "name": "suppressFit",
          "description": "<p>Set to <code>true</code> to prevent auto calculating of a minimal <a href=\"#Scheduler/view/mixin/TimelineEventRendering#property-tickSize\">tickSize</a>\nto always fit the content to the screen size. Setting this property on <code>true</code> will disable <a href=\"#Scheduler/view/TimelineBase#config-forceFit\">forceFit</a> behaviour.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Time axis"
        },
        {
          "name": "timeCellCls",
          "access": "private",
          "description": "<p>CSS class to add to cells in the timeaxis column</p>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "overScheduledEventClass",
          "access": "private",
          "description": "<p>A CSS class to apply to each event in the view on mouseover.</p>",
          "type": "String",
          "scope": "inner",
          "category": "CSS"
        },
        {
          "name": "enableEventAnimations",
          "description": "<p>Set to <code>false</code> if you don't want event bar DOM updates to animate.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Scheduled events"
        },
        {
          "name": "partner",
          "description": "<p>Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),\nstart and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the <code>partner</code>.</p>\n<ul>\n<li>To add a new partner dynamically see <a href=\"#Scheduler/view/TimelineBase#function-addPartner\">addPartner</a> method.</li>\n<li>To remove existing partner see <a href=\"#Scheduler/view/TimelineBase#function-removePartner\">removePartner</a> method.</li>\n<li>To check if timelines are partners see <a href=\"#Scheduler/view/TimelineBase#function-isPartneredWith\">isPartneredWith</a> method.</li>\n</ul>",
          "type": "Scheduler.view.TimelineBase",
          "scope": "inner",
          "category": "Time axis"
        },
        {
          "name": "defaultRegion",
          "description": "<p>Region to which columns are added when they have none specified</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "locked",
          "category": "Misc"
        },
        {
          "name": "durationDisplayPrecision",
          "description": "<p>Decimal precision used when displaying durations, used by tooltips and DurationColumn.\nSpecify <code>false</code> to use raw value</p>",
          "type": [
            "Number",
            "Boolean"
          ],
          "scope": "inner",
          "defaultValue": 1,
          "category": "Common"
        }
      ],
      "functions": [
        {
          "name": "populateEventMenu",
          "access": "internal",
          "description": "<p>Populates the event context menu. Chained in features to add menu items.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown.</p>",
              "isSubParam": true
            },
            {
              "name": "options.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The context event.</p>",
              "isSubParam": true
            },
            {
              "name": "options.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The context resource.</p>",
              "isSubParam": true
            },
            {
              "name": "options.assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The context assignment if any.</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "populateScheduleMenu",
          "access": "internal",
          "description": "<p>Populates the time axis context menu. Chained in features to add menu items.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Contains menu items and extra data retrieved from the menu target.</p>"
            },
            {
              "name": "options.column",
              "type": "Grid.column.Column",
              "description": "<p>Column for which the menu will be shown.</p>",
              "isSubParam": true
            },
            {
              "name": "options.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The context resource.</p>",
              "isSubParam": true
            },
            {
              "name": "options.date",
              "type": "Date",
              "description": "<p>The Date corresponding to the mouse position in the time axis.</p>",
              "isSubParam": true
            },
            {
              "name": "options.items",
              "type": "Object",
              "description": "<p>A named object to describe menu items.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "initScroll",
          "access": "private",
          "description": "<p>Overrides initScroll from Grid, listens for horizontal scroll to do virtual event rendering</p>",
          "scope": "instance"
        },
        {
          "name": "preserveViewCenter",
          "description": "<p>Calls the specified function (returning its return value) and preserves the timeline center\npoint. This is a useful way of retaining the user's visual context while making updates\nand changes to the view which require major changes or a full refresh.</p>",
          "parameters": [
            {
              "name": "fn",
              "type": "function",
              "description": "<p>The function to call.</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p>The <code>this</code> context for the function.</p>"
            },
            {
              "name": "args",
              "type": "*",
              "description": "<p>Parameters to the function.</p>",
              "isRestParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setTimeSpan",
          "description": "<p>Changes this Sheduler's time axis timespan to the supplied start and end dates.</p>",
          "parameters": [
            {
              "name": "newStartDate",
              "type": "Date",
              "description": "<p>The new start date</p>"
            },
            {
              "name": "newEndDate",
              "type": "Date",
              "description": "<p>The new end date</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>An object containing modifiers for the time span change operation.</p>",
              "optional": true
            },
            {
              "name": "options.maintainVisibleStart",
              "type": "Boolean",
              "description": "<p>Specify as <code>true</code> to keep the visible start date stable.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.visibleDate",
              "type": "Date",
              "description": "<p>The date inside the range to scroll into view</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "addPartner",
          "description": "<p>Partners this Timeline with the passed Timeline in order to sync the horizontal scrolling position and zoom level.</p>\n<ul>\n<li>To remove existing partner see <a href=\"#Scheduler/view/TimelineBase#function-removePartner\">removePartner</a> method.</li>\n<li>To get the list of partners see <a href=\"#Scheduler/view/TimelineBase#property-partners\">partners</a> getter.</li>\n</ul>",
          "parameters": [
            {
              "name": "otherTimeline",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>The timeline to partner with</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "removePartner",
          "description": "<p>Breaks the link between current Timeline and the passed Timeline</p>\n<ul>\n<li>To add a new partner see <a href=\"#Scheduler/view/TimelineBase#function-addPartner\">addPartner</a> method.</li>\n<li>To get the list of partners see <a href=\"#Scheduler/view/TimelineBase#property-partners\">partners</a> getter.</li>\n</ul>",
          "parameters": [
            {
              "name": "otherTimeline",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>The timeline to unlink from</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "isPartneredWith",
          "description": "<p>Checks whether the passed timeline is partnered with the current timeline.</p>",
          "parameters": [
            {
              "name": "partner",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>The timeline to check the partnering with</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the timelines are partnered</p>"
          }
        },
        {
          "name": "setStartDate",
          "description": "<p>Sets the timeline start date.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>If you need to set start and end date at the same time, use the <a href=\"#Scheduler/view/TimelineBase#function-setTimeSpan\">setTimeSpan</a> method.</li>\n<li>If keepDuration is false and new start date is greater than end date, it will throw an exception.</li>\n</ul>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The new start date</p>"
            },
            {
              "name": "keepDuration",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to keep the duration of the timeline (&quot;move&quot; the timeline),\n<code>false</code> to change the duration (&quot;resize&quot; the timeline). Defaults to <code>true</code>.</p>",
              "default": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "setEndDate",
          "description": "<p>Sets the timeline end date</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>If you need to set start and end date at the same time, use the <a href=\"#Scheduler/view/TimelineBase#function-setTimeSpan\">setTimeSpan</a> method.</li>\n<li>If keepDuration is false and new end date is less than start date, it will throw an exception.</li>\n</ul>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The new end date</p>"
            },
            {
              "name": "keepDuration",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to keep the duration of the timeline (&quot;move&quot; the timeline),\n<code>false</code> to change the duration (&quot;resize&quot; the timeline). Defaults to <code>false</code>.</p>",
              "default": false
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onBodyResize",
          "access": "private",
          "description": "<p>Called when the element which encapsulates the Scheduler's visible height changes size.\nWe only respond to <em>height</em> changes here. The TimeAxisSubGrid monitors its own width.</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "oldRect",
              "type": "DOMRect"
            },
            {
              "name": "newRect",
              "type": "DOMRect"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getHeaderDomConfigs",
          "description": "<p>A chainable function which Features may hook to add their own content to the timeaxis header.</p>",
          "parameters": [
            {
              "name": "configs",
              "type": "Array",
              "description": "<p>An array of domConfigs, append to it to have the config applied to the header</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getForegroundDomConfigs",
          "description": "<p>A chainable function which Features may hook to add their own content to the foreground canvas</p>",
          "parameters": [
            {
              "name": "configs",
              "type": "Array",
              "description": "<p>An array of domConfigs, append to it to have the config applied to the foreground canvas</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "refreshWithTransition",
          "description": "<p>Refreshes the grid with transitions enabled.</p>",
          "scope": "instance"
        },
        {
          "name": "formatDuration",
          "description": "<p>Returns a rounded duration value to be displayed in UI (tooltips, labels etc)</p>",
          "parameters": [
            {
              "name": "The",
              "type": "Number",
              "description": "<p>raw duration value</p>"
            },
            {
              "name": "nbrDecimals",
              "type": "Number",
              "description": "<p>The number of decimals, defaults to <a href=\"#Scheduler/view/TimelineBase#config-durationDisplayPrecision\">durationDisplayPrecision</a></p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>The rounded duration</p>"
          }
        }
      ],
      "events": [
        {
          "name": "visibleDateRangeChange",
          "description": "<p>Fired when the range of dates visible within the viewport changes. This will be when\nscrolling along a time axis.</p>\n<p><strong>Note</strong> that this event will fire frequently during scrolling, so any listener\nshould probably be added with the <code>buffer</code> option to slow down the calls to your\nhandler function :</p>\n<pre class=\"prettyprint source lang-javascript\"><code>listeners : {\n    visibleDateRangeChange({ old, new }) {\n        this.updateRangeRequired(old, new);\n    },\n    // Only call once. 300 ms after the last event was detected\n    buffer : 300\n}\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler instance.</p>"
            },
            {
              "name": "old",
              "type": "Object",
              "description": "<p>The old date range</p>"
            },
            {
              "name": "old.startDate",
              "type": "Date",
              "description": "<p>the old start date.</p>",
              "isSubParam": true
            },
            {
              "name": "old.endDate",
              "type": "Date",
              "description": "<p>the old end date.</p>",
              "isSubParam": true
            },
            {
              "name": "new",
              "type": "Object",
              "description": "<p>The new date range</p>"
            },
            {
              "name": "new.startDate",
              "type": "Date",
              "description": "<p>the new start date.</p>",
              "isSubParam": true
            },
            {
              "name": "new.endDate",
              "type": "Date",
              "description": "<p>the new end date.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "dateRangeChange",
          "description": "<p>Fired when the range of dates encapsulated by the UI changes. This will be when\nmoving a view in time by reconfiguring its <a href=\"#Scheduler/view/TimelineBase#config-timeAxis\">timeAxis</a>. This will happen\nwhen zooming, or changing <a href=\"#Scheduler/view/TimelineBase#config-viewPreset\">viewPreset</a>.</p>\n<p>Contrast this with the <a href=\"#Scheduler/view/TimelineBase#event-visibleDateRangeChange\">visibleDateRangeChange</a> event which fires much\nmore frequently, during scrolling along the time axis and changing the <strong>visible</strong>\ndate range.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>This Scheduler/Gantt instance.</p>"
            },
            {
              "name": "old",
              "type": "Object",
              "description": "<p>The old date range</p>"
            },
            {
              "name": "old.startDate",
              "type": "Date",
              "description": "<p>the old start date.</p>",
              "isSubParam": true
            },
            {
              "name": "old.endDate",
              "type": "Date",
              "description": "<p>the old end date.</p>",
              "isSubParam": true
            },
            {
              "name": "new",
              "type": "Object",
              "description": "<p>The new date range</p>"
            },
            {
              "name": "new.startDate",
              "type": "Date",
              "description": "<p>the new start date.</p>",
              "isSubParam": true
            },
            {
              "name": "new.endDate",
              "type": "Date",
              "description": "<p>the new end date.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "timeAxisChange",
          "description": "<p>Fired when the timeaxis has changed, for example by zooming or configuring a new time span.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "<p>Config object used to reconfigure the time axis.</p>"
            },
            {
              "name": "config.start",
              "type": "Date",
              "description": "<p>New start date (if supplied)</p>",
              "isSubParam": true
            },
            {
              "name": "config.end",
              "type": "Date",
              "description": "<p>New end date (if supplied)</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "timelineViewportResize",
          "description": "<p>Fired when the <em>scheduler</em> viewport (not the overall Scheduler element) changes size.\nThis happens when the grid changes height, or when the subgrid which encapsulates the\nscheduler column changes width.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Core.widget.Widget",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "width",
              "type": "Number",
              "description": "<p>The new width</p>"
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>The new height</p>"
            },
            {
              "name": "oldWidth",
              "type": "Number",
              "description": "<p>The old width</p>"
            },
            {
              "name": "oldHeight",
              "type": "Number",
              "description": "<p>The old height</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "VerticalTimeAxis",
      "modulePath": "Scheduler/view/VerticalTimeAxis",
      "classDescription": "<p>Widget that renders a vertical time axis. Only renders ticks in view. Used in vertical mode.</p>",
      "extends": [
        "Core/widget/Widget"
      ],
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "VerticalTimeAxis.js",
      "path": "/Calendar/lib/Scheduler/view"
    },
    {
      "name": "SchedulerExportDialog",
      "modulePath": "Scheduler/view/export/SchedulerExportDialog",
      "classDescription": "<p>Extends the Grid's <a href=\"#Grid/view/export/ExportDialog\">ExportDialog</a> and adds a few extra fields specific to the scheduler.</p>\n<h2>Default widgets</h2>\n<p>The default widgets of this dialog are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>columnsField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>100</td>\n<td>Choose columns to export</td>\n</tr>\n<tr>\n<td><code>scheduleRangeField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>150</td>\n<td>Choose date range to export</td>\n</tr>\n<tr>\n<td><code>rangesContainer</code></td>\n<td><a href=\"#Core/widget/Container\">Container</a></td>\n<td>151</td>\n<td>Container for range fields</td>\n</tr>\n<tr>\n<td>&gt;<code>rangeStartField</code></td>\n<td><a href=\"#Core/widget/DateField\">DateField</a></td>\n<td>10</td>\n<td>Choose date range start</td>\n</tr>\n<tr>\n<td>&gt;<code>rangeEndField</code></td>\n<td><a href=\"#Core/widget/DateField\">DateField</a></td>\n<td>30</td>\n<td>Choose date range end</td>\n</tr>\n<tr>\n<td><code>rowsRangeField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>200</td>\n<td>Choose which rows to export</td>\n</tr>\n<tr>\n<td><code>exporterTypeField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>300</td>\n<td>Type of the exporter to use</td>\n</tr>\n<tr>\n<td><code>alignRowsField</code></td>\n<td><a href=\"#Core/widget/Checkbox\">Checkbox</a></td>\n<td>400</td>\n<td>Align row top to the page top on every exported page</td>\n</tr>\n<tr>\n<td><code>repeatHeaderField</code></td>\n<td><a href=\"#Core/widget/Checkbox\">Checkbox</a></td>\n<td>500</td>\n<td>Toggle repeating headers on / off</td>\n</tr>\n<tr>\n<td><code>fileFormatField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>600</td>\n<td>Choose file format</td>\n</tr>\n<tr>\n<td><code>paperFormatField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>700</td>\n<td>Choose paper format</td>\n</tr>\n<tr>\n<td><code>orientationField</code></td>\n<td><a href=\"#Core/widget/Combo\">Combo</a></td>\n<td>800</td>\n<td>Choose orientation</td>\n</tr>\n</tbody>\n</table>\n<p>The default buttons are:</p>\n<table>\n<thead>\n<tr>\n<th>Widget ref</th>\n<th>Type</th>\n<th>Weight</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>exportButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>100</td>\n<td>Triggers export</td>\n</tr>\n<tr>\n<td><code>cancelButton</code></td>\n<td><a href=\"#Core/widget/Button\">Button</a></td>\n<td>200</td>\n<td>Cancel export</td>\n</tr>\n</tbody>\n</table>\n<p><em>&gt; nested items</em></p>\n<h2>Configuring default widgets</h2>\n<p>Widgets can be customized with <a href=\"#Scheduler/feature/export/PdfExport#config-exportDialog\">exportDialog</a> config:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        pdfExport : {\n            exportDialog : {\n                items : {\n                    // hide the field\n                    orientationField  : { hidden : true },\n\n                    // reorder fields\n                    exporterTypeField : { weight : 150 },\n\n                    // change default format in exporter\n                    fileFormatField   : { value : 'png' },\n\n                    // Configure nested fields\n                    rangesContainer : {\n                        items : {\n                            rangeStartField : { value : new Date() },\n                            rangeEndField : { value : new Date() }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n\nscheduler.features.pdfExport.showExportDialog();\n</code></pre>\n<h2>Using DateTime fields for range start/end</h2>\n<p>This config system is also capable (but not limited to) of changing layout of the container and replacing widget type:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    features : {\n        pdfExport : {\n            exportDialog : {\n                items : {\n                    rangesContainer : {\n                        // DateTime fields are longer, so we better lay them out\n                        // vertically\n                        layoutStyle : {\n                            flexDirection : 'column'\n                        },\n                        items : {\n                            rangeStartField : {\n                                // Use DateTime widget for ranges\n                                type       : 'datetime',\n\n                                // Sync label width with other fields\n                                labelWidth : '12em'\n                            },\n                            rangeEndField : {\n                                type       : 'datetime',\n                                labelWidth : '12em'\n                            },\n                            // Add a filler widget that would add a margin at the bottom\n                            filler : {\n                                height : '0.6em',\n                                weight : 900\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n\n</code></pre>\n<h2>Configuring default columns</h2>\n<p>By default all visible columns are selected in the export dialog. This is managed by\n<a href=\"#Scheduler/view/export/SchedulerExportDialog#config-autoSelectVisibleColumns\">autoSelectVisibleColumns</a> config. To change default selected columns you should disable this config\nand set field value. Value should be an array of valid column ids (or column instances). This way you can\npreselect hidden columns:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    columns : [\n        { id : 'name', text : 'Name', field : 'name' },\n        { id : 'age', text : 'Age', field : 'age' },\n        { id : 'city', text : 'City', field : 'city', hidden : true }\n    ],\n    features : {\n        pdfExport : {\n            exportDialog : {\n                autoSelectVisibleColumns : false,\n                items : {\n                    columnsField : { value : ['name', 'city'] }\n                }\n            }\n        }\n    }\n})\n\n// This will show export dialog with Name and City columns selected\n// even though City column is hidden in the UI\nscheduler.features.pdfExport.showExportDialog();\n</code></pre>\n<h2>Adding fields</h2>\n<p>You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\nnaming pattern - it should have <code>ref</code> config ending with <code>Field</code>, see other fields for reference - <code>orientationField</code>,\n<code>columnsField</code>, etc. Fields not matching this pattern are ignored. When values are collected from the dialog, <code>Field</code>\npart of the widget reference is removed, so <code>orientationField</code> becomes <code>orientation</code>, <code>fooField</code> becomes <code>foo</code>, etc.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const grid = new Grid({\n    features : {\n        pdfExport : {\n            exportDialog : {\n                items : {\n                    // This field gets into export config\n                    fooField : {\n                        type : 'text',\n                        label : 'Foo',\n                        value : 'FOO'\n                    },\n\n                    // This one does not, because name doesn't end with `Field`\n                    bar : {\n                        type : 'text',\n                        label : 'Bar',\n                        value : 'BAR'\n                    },\n\n                    // Add a container widget to wrap some fields together\n                    myContainer : {\n                        type : 'container',\n                        items : {\n                            // This one gets into config too despite the nesting level\n                            bazField : {\n                                type : 'text',\n                                label : 'Baz',\n                                value : 'BAZ'\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n\n// Assuming export dialog is opened and export triggered with default values\n// you can receive custom field values here\ngrid.on({\n    beforePdfExport({ config }) {\n        console.log(config.foo) // 'FOO'\n        console.log(config.bar) // undefined\n        console.log(config.baz) // 'BAZ'\n    }\n});\n</code></pre>\n<h2>Configuring widgets at runtime</h2>\n<p>If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\nbefore dialog pops up:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const scheduler = new Scheduler({\n    columns : [\n        { id : 'name', text : 'Name', field : 'name' },\n        { id : 'age', text : 'Age', field : 'age' },\n        { id : 'city', text : 'City', field : 'city', hidden : true }\n    ],\n    features : {\n        pdfExport : true\n    }\n});\n\n// Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n// above this will show Name and City columns\nscheduler.features.pdfExport.exportDialog.on({\n    beforeShow() {\n        this.widgetMap.columnsField.value = ['age', 'city']\n    }\n});\n</code></pre>",
      "extends": [
        "Grid/view/export/ExportDialog"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerExportDialog.js",
      "path": "/Calendar/lib/Scheduler/view/export"
    },
    {
      "name": "CurrentConfig",
      "modulePath": "Scheduler/view/mixin/CurrentConfig",
      "description": "<p>Mixin that makes sure inline data &amp; crud manager data are removed from current config for products using a project.\nThe data is instead inlined in the project (by ProjectModel.js)</p>",
      "mixin": true,
      "access": "private",
      "constructor": {
        "name": "constructor"
      },
      "filename": "CurrentConfig.js",
      "path": "/Calendar/lib/Scheduler/view/mixin"
    },
    {
      "name": "EventNavigation",
      "modulePath": "Scheduler/view/mixin/EventNavigation",
      "description": "<p>Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventNavigation.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "navigator",
          "access": "internal",
          "description": "<p>A config object to use when creating the <a href=\"#Core/helper/util/Navigator\">Navigator</a>\nto use to perform keyboard navigation in the timeline.</p>",
          "type": "Object",
          "scope": "inner",
          "defaultValue": "{\"allowCtrlKey\":true,\"scrollSilently\":true,\"keys\":\"\"}",
          "category": "Misc"
        },
        {
          "name": "focusCls",
          "access": "private",
          "description": "<p>A CSS class name to add to focused events.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-active",
          "category": "CSS"
        },
        {
          "name": "enableDeleteKey",
          "description": "<p>Allow using [Delete] and [Backspace] to remove events/assignments</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        }
      ],
      "events": [
        {
          "name": "navigate",
          "description": "<p>Fired when a user gesture causes the active item to change.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The browser event which instigated navigation. May be a click or key or focus event.</p>"
            },
            {
              "name": "item",
              "type": [
                "HTMLElement",
                "null"
              ],
              "description": "<p>The newly active item, or <code>null</code> if focus moved out.</p>"
            },
            {
              "name": "oldItem",
              "type": [
                "HTMLElement",
                "null"
              ],
              "description": "<p>The previously active item, or <code>null</code> if focus is moving in.</p>"
            }
          ]
        },
        {
          "name": "beforeAssignmentDelete",
          "description": "<p>Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or\nby the event editor. Can for example be used to display a custom dialog to confirm deletion, in which\ncase records should be &quot;manually&quot; removed after confirmation:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>scheduler.on({\n   beforeAssignmentDelete({ assignmentRecords, context }) {\n       // Show custom confirmation dialog (pseudo code)\n       confirm.show({\n           listeners : {\n               onOk() {\n                   // Remove the assignments on confirmation\n                   context.finalize(true);\n               },\n               onCancel() {\n                   // do not remove the assignments if &quot;Cancel&quot; clicked\n                   context.finalize(false);\n               }\n           }\n       });\n\n       // Prevent default behaviour\n       return false;\n   }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The Scheduler instance</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The records about to be deleted</p>"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Additional removal context:</p>"
            },
            {
              "name": "context.finalize",
              "type": "function",
              "description": "<p>Function to call to finalize the removal.\nUsed to asynchronously decide to remove the records or not. Provide <code>false</code> to the function to\nprevent the removal.</p>",
              "isSubParam": true
            },
            {
              "name": "context.finalize.removeRecords",
              "type": "Boolean",
              "description": "<p>Provide <code>false</code> to the function to prevent\nthe removal.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            }
          ],
          "preventable": true
        },
        {
          "name": "beforeEventDelete",
          "description": "<p>Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the\nevent editor. Can for example be used to display a custom dialog to confirm deletion, in which case\nrecords should be &quot;manually&quot; removed after confirmation:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>scheduler.on({\n   beforeEventDelete({ eventRecords, context }) {\n       // Show custom confirmation dialog (pseudo code)\n       confirm.show({\n           listeners : {\n               onOk() {\n                   // Remove the events on confirmation\n                   context.finalize(true);\n               },\n               onCancel() {\n                   // do not remove the events if &quot;Cancel&quot; clicked\n                   context.finalize(false);\n               }\n           }\n       });\n\n       // Prevent default behaviour\n       return false;\n   }\n});\n</code></pre>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>The Scheduler instance</p>"
            },
            {
              "name": "eventRecords",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The records about to be deleted</p>"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>Additional removal context:</p>"
            },
            {
              "name": "context.finalize",
              "type": "function",
              "description": "<p>Function to call to finalize the removal.\nUsed to asynchronously decide to remove the records or not. Provide <code>false</code> to the function to\nprevent the removal.</p>",
              "isSubParam": true
            },
            {
              "name": "context.finalize.removeRecords",
              "type": "Boolean",
              "description": "<p>Provide <code>false</code> to the function to prevent\nthe removal.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            }
          ],
          "preventable": true
        }
      ],
      "functions": [
        {
          "name": "removeEvents",
          "access": "internal",
          "description": "<p>Internal utility function to remove events. Used when pressing [DELETE] or [BACKSPACE] or when clicking the\ndelete button in the event editor. Triggers a preventable <code>beforeEventDelete</code> or <code>beforeAssignmentDelete</code> event.</p>",
          "parameters": [
            {
              "name": "eventRecords",
              "type": [
                "Array.<Scheduler.model.EventModel>",
                "Array.<Scheduler.model.AssignmentModel>"
              ],
              "description": "<p>Records to remove</p>"
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>Optional callback executed after triggering the event but before deletion</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "fires": [
            "event:beforeEventDelete",
            "event:beforeAssignmentDelete"
          ],
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>false</code> if the operation was prevented, otherwise <code>true</code></p>"
          }
        }
      ]
    },
    {
      "name": "EventSelection",
      "modulePath": "Scheduler/view/mixin/EventSelection",
      "description": "<p>Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "EventSelection.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "highlightPredecessors",
          "description": "<p>Configure as <code>true</code>, or set property to <code>true</code> to highlight dependent events as well when selecting an event.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Selection"
        },
        {
          "name": "highlightSuccessors",
          "description": "<p>Configure as <code>true</code>, or set property to <code>true</code> to highlight dependent events as well when selecting an event.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Selection"
        },
        {
          "name": "deselectOnClick",
          "description": "<p>Configure as <code>true</code> to deselect a selected event upon click.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Selection"
        },
        {
          "name": "multiEventSelect",
          "description": "<p>Configure as <code>true</code> to allow <code>CTRL+click</code> to select multiple events in the scheduler.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Selection"
        },
        {
          "name": "eventSelectionDisabled",
          "description": "<p>Configure as <code>true</code>, or set property to <code>true</code> to disable event selection.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Selection"
        },
        {
          "name": "eventSelectedCls",
          "access": "private",
          "description": "<p>CSS class to add to selected events.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-event-selected",
          "category": "CSS"
        },
        {
          "name": "triggerSelectionChangeOnRemove",
          "description": "<p>Configure as <code>true</code> to trigger <code>selectionChange</code> when removing a selected event/assignment.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Selection"
        },
        {
          "name": "maintainSelectionOnDatasetChange",
          "description": "<p>This flag controls whether Scheduler should preserve its selection of events when loading a new dataset\n(if selected event ids are included in the newly loaded dataset).</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Selection"
        },
        {
          "name": "eventAssignHighlightCls",
          "access": "private",
          "description": "<p>CSS class to add to other instances of a selected event, to highlight them.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-event-assign-selected",
          "category": "CSS"
        },
        {
          "name": "selectedCollection",
          "access": "private",
          "description": "<p>Collection to store selection.</p>",
          "type": "Core.util.Collection",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "eventSelectionChange",
          "description": "<p>Fired any time there is a change to the events selected in the Scheduler.</p>",
          "parameters": [
            {
              "name": "action",
              "type": "String",
              "description": "<p>One of the actions 'select', 'deselect', 'update', 'clear'</p>"
            },
            {
              "name": "selected",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>An array of the Events added to the selection.</p>"
            },
            {
              "name": "deselected",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>An array of the Event removed from the selection.</p>"
            },
            {
              "name": "selection",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>The new selection.</p>"
            }
          ]
        },
        {
          "name": "assignmentSelectionChange",
          "description": "<p>Fired any time there is a change to the assignments selected in the Scheduler.</p>",
          "parameters": [
            {
              "name": "action",
              "type": "String",
              "description": "<p>One of the actions 'select', 'deselect', 'update', 'clear'</p>"
            },
            {
              "name": "selected",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>An array of the Assignments added to the selection.</p>"
            },
            {
              "name": "deselected",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>An array of the Assignments removed from the selection.</p>"
            },
            {
              "name": "selection",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>The new selection.</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "selectedEvents",
          "description": "<p>The <a href=\"#Scheduler/model/EventModel\">events</a> which are selected.</p>",
          "type": "Array.<Scheduler.model.EventModel>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectedAssignments",
          "description": "<p>The <a href=\"#Scheduler/model/AssignmentModel\">events</a> which are selected.</p>",
          "type": "Array.<Scheduler.model.AssignmentModel>",
          "scope": "instance",
          "category": "Selection"
        }
      ],
      "functions": [
        {
          "name": "isEventSelected",
          "description": "<p>Returns <code>true</code> if the <a href=\"#Scheduler/model/EventModel\">event</a> is selected.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the event is selected</p>"
          }
        },
        {
          "name": "isEventSelectable",
          "description": "<p>A template method (empty by default) allowing you to control if an event can be selected or not.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    isEventSelectable(event) {\n        return event.startDate >= Date.now();\n    }\n})\n</code></pre>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection",
          "returns": {
            "type": "Boolean",
            "description": "<p>true if event can be selected, otherwise false</p>"
          }
        },
        {
          "name": "isAssignmentSelected",
          "description": "<p>Returns <code>true</code> if the <a href=\"#Scheduler/model/AssignmentModel\">assignment</a> is selected.</p>",
          "parameters": [
            {
              "name": "assignment",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection",
          "returns": {
            "type": "Boolean",
            "description": "<p>Returns <code>true</code> if the assignment is selected</p>"
          }
        },
        {
          "name": "select",
          "description": "<p>Selects the passed <a href=\"#Scheduler/model/EventModel\">event</a> or <a href=\"#Scheduler/model/AssignmentModel\">assignment</a>\n<em>if it is not selected</em>. Selecting events results in all their assignments being selected.</p>",
          "parameters": [
            {
              "name": "eventOrAssignment",
              "type": [
                "Scheduler.model.EventModel",
                "Scheduler.model.AssignmentModel"
              ],
              "description": "<p>The event or assignment to select</p>"
            },
            {
              "name": "preserveSelection",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to preserve any other selected events or assignments</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectEvent",
          "description": "<p>Selects the passed <a href=\"#Scheduler/model/EventModel\">event</a> <em>if it is not selected</em>. Selecting an event will\nselect all its assignments.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event select</p>"
            },
            {
              "name": "preserveSelection",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to preserve any other selected events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectAssignment",
          "description": "<p>Selects the passed <a href=\"#Scheduler/model/AssignmentModel\">assignment</a> <em>if it is not selected</em>.</p>",
          "parameters": [
            {
              "name": "assignment",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment to select</p>"
            },
            {
              "name": "preserveSelection",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to preserve any other selected assignments</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>If this method was invoked as a result of a user action, this is the DOM event that triggered it</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselect",
          "description": "<p>Deselects the passed <a href=\"#Scheduler/model/EventModel\">event</a> or <a href=\"#Scheduler/model/AssignmentModel\">assignment</a>\n<em>if it is selected</em>.</p>",
          "parameters": [
            {
              "name": "eventOrAssignment",
              "type": [
                "Scheduler.model.EventModel",
                "Scheduler.model.AssignmentModel"
              ],
              "description": "<p>The event or assignment to deselect.</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectEvent",
          "description": "<p>Deselects the passed <a href=\"#Scheduler/model/EventModel\">event</a> <em>if it is selected</em>.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event to deselect.</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectAssignment",
          "description": "<p>Deselects the passed <a href=\"#Scheduler/model/AssignmentModel\">assignment</a> <em>if it is selected</em>.</p>",
          "parameters": [
            {
              "name": "assignment",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment to deselect</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>If this method was invoked as a result of a user action, this is the DOM event that triggered it</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectEvents",
          "description": "<p>Adds <a href=\"#Scheduler/model/EventModel\">events</a> to the selection.</p>",
          "parameters": [
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Events to be selected</p>"
            },
            {
              "name": "preserveSelection",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to preserve any other selected events</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectEvents",
          "description": "<p>Removes <a href=\"#Scheduler/model/EventModel\">events</a> from the selection.</p>",
          "parameters": [
            {
              "name": "events",
              "type": "Array.<Scheduler.model.EventModel>",
              "description": "<p>Events or assignments  to be deselected</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "selectAssignments",
          "description": "<p>Adds <a href=\"#Scheduler/model/AssignmentModel\">assignments</a> to the selection.</p>",
          "parameters": [
            {
              "name": "assignments",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignments to be selected</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "deselectAssignments",
          "description": "<p>Removes <a href=\"#Scheduler/model/AssignmentModel\">assignments</a> from the selection.</p>",
          "parameters": [
            {
              "name": "assignments",
              "type": "Array.<Scheduler.model.AssignmentModel>",
              "description": "<p>Assignments  to be deselected</p>"
            }
          ],
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "clearEventSelection",
          "description": "<p>Deselects all <a href=\"#Scheduler/model/EventModel\">events</a> and <a href=\"#Scheduler/model/AssignmentModel\">assignments</a>.</p>",
          "scope": "instance",
          "category": "Selection"
        },
        {
          "name": "onSelectedCollectionChange",
          "access": "private",
          "description": "<p>Responds to mutations of the underlying selection Collection.\nKeeps the UI synced, eventSelectionChange and assignmentSelectionChange event is fired when <code>me.silent</code> is falsy.</p>",
          "scope": "instance"
        },
        {
          "name": "onAssignmentChange",
          "access": "private",
          "description": "<p>Assignment change listener to remove events from selection which are no longer in the assignments.</p>",
          "scope": "instance"
        },
        {
          "name": "onAssignmentSelectionClick",
          "access": "private",
          "description": "<p>Mouse listener to update selection.</p>",
          "scope": "instance"
        },
        {
          "name": "onEventNavigate",
          "access": "private",
          "description": "<p>Navigation listener to update selection.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RecurringEvents",
      "modulePath": "Scheduler/view/mixin/RecurringEvents",
      "description": "<p>A mixin that adds recurring events functionality to the Scheduler.</p>\n<p>The main purpose of the code in here is displaying  a <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup\">special confirmation</a>\non user mouse dragging/resizing/deleting recurring events and their occurrences.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurringEvents.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "enableRecurringEvents",
          "description": "<p>Enables showing occurrences of recurring events across the scheduler's time axis.</p>\n<p>Enables extra recurrence UI fields in the system-provided event editor.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Scheduled events"
        }
      ],
      "functions": [
        {
          "name": "getOccurrencesFor",
          "description": "<p>Returns occurrences of the provided recurring event across the date range of this Scheduler.</p>",
          "parameters": [
            {
              "name": "recurringEvent",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>Recurring event for which occurrences should be retrieved.</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<Scheduler.model.TimeSpan>",
            "description": "<p>Array of the provided timespans occurrences.</p>\n<p><strong>Empty if the passed event is not recurring, or has no occurrences in the date range.</strong></p>\n<p><strong>If the date range encompasses the start point, the recurring event itself will be the first entry.</strong></p>"
          }
        }
      ]
    },
    {
      "name": "SchedulerDom",
      "modulePath": "Scheduler/view/mixin/SchedulerDom",
      "description": "<p>Mixin with EventModel and ResourceModel &lt;-&gt; HTMLElement mapping functions</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerDom.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "functions": [
        {
          "name": "getElementFromAssignmentRecord",
          "description": "<p>Returns a single HTMLElement representing an event record assigned to a specific resource.</p>",
          "parameters": [
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>An assignment record</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>The element representing the event record</p>"
          }
        },
        {
          "name": "getElementFromEventRecord",
          "description": "<p>Returns a single HTMLElement representing an event record assigned to a specific resource.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>An event record</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>A resource record</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "HTMLElement",
            "description": "<p>The element representing the event record</p>"
          }
        },
        {
          "name": "getElementsFromEventRecord",
          "description": "<p>Returns all the HTMLElements representing an event record.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>An event record</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>A resource record</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array.<HTMLElement>",
            "description": "<p>The element(s) representing the event record</p>"
          }
        },
        {
          "name": "resolveResourceRecord",
          "description": "<p>Resolves the resource based on a dom element or event. In vertical mode, if resolving from an element higher up in\nthe hierarchy than event elements, then it is required to supply an coordinates since resources are virtual\ncolumns.</p>",
          "parameters": [
            {
              "name": "elementOrEvent",
              "type": [
                "HTMLElement",
                "Event"
              ],
              "description": "<p>The HTML element or DOM event to resolve a resource from</p>"
            },
            {
              "name": "xy",
              "type": "Array.<Number>",
              "description": "<p>X and Y coordinates, required in some cases in vertical mode, disregarded in horizontal</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.ResourceModel",
            "description": "<p>The resource corresponding to the element, or null if not found.</p>"
          }
        },
        {
          "name": "resolveEventRecord",
          "description": "<p>Returns the event record for a DOM element</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The DOM node to lookup</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.EventModel",
            "description": "<p>The event record</p>"
          }
        },
        {
          "name": "resolveAssignmentRecord",
          "description": "<p>Returns an assignment record for a DOM element</p>",
          "parameters": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "<p>The DOM node to lookup</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.model.AssignmentModel",
            "description": "<p>The assignment record</p>"
          }
        }
      ]
    },
    {
      "name": "SchedulerDomEvents",
      "modulePath": "Scheduler/view/mixin/SchedulerDomEvents",
      "description": "<p>Mixin that handles dom events (click etc) for scheduler and rendered events.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerDomEvents.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "events": [
        {
          "name": "scheduleMouseMove",
          "description": "<p>Triggered when user moves mouse over an empty area in the schedule.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>This TimelineBase</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date at mouse position</p>"
            },
            {
              "name": "tickStartDate",
              "type": "Date",
              "description": "<p>The start date of the current time axis tick</p>"
            },
            {
              "name": "tickEndDate",
              "type": "Date",
              "description": "<p>The end date of the current time axis tick</p>"
            },
            {
              "name": "row",
              "type": "Grid.row.Row",
              "description": "<p>Clicked row (in horizontal mode only)</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index of clicked resource</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "scheduleClick",
          "description": "<p>Triggered when user clicks an empty area in the schedule.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>This TimelineBase</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date at mouse position</p>"
            },
            {
              "name": "tickStartDate",
              "type": "Date",
              "description": "<p>The start date of the current time axis tick</p>"
            },
            {
              "name": "tickEndDate",
              "type": "Date",
              "description": "<p>The end date of the current time axis tick</p>"
            },
            {
              "name": "row",
              "type": "Grid.row.Row",
              "description": "<p>Clicked row (in horizontal mode only)</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index of clicked resource</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "scheduleDblClick",
          "description": "<p>Triggered when user clicks an empty area in the schedule.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>This TimelineBase</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date at mouse position</p>"
            },
            {
              "name": "tickStartDate",
              "type": "Date",
              "description": "<p>The start date of the current time axis tick</p>"
            },
            {
              "name": "tickEndDate",
              "type": "Date",
              "description": "<p>The end date of the current time axis tick</p>"
            },
            {
              "name": "row",
              "type": "Grid.row.Row",
              "description": "<p>Double clicked row (in horizontal mode only)</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index of double clicked resource</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "scheduleContextMenu",
          "description": "<p>Triggered when user right clicks an empty area in the schedule.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.TimelineBase",
              "description": "<p>This TimelineBase</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date at mouse position</p>"
            },
            {
              "name": "tickStartDate",
              "type": "Date",
              "description": "<p>The start date of the current time axis tick</p>"
            },
            {
              "name": "tickEndDate",
              "type": "Date",
              "description": "<p>The end date of the current time axis tick</p>"
            },
            {
              "name": "row",
              "type": "Grid.row.Row",
              "description": "<p>Clicked row (in horizontal mode only)</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>Index of clicked resource</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Resource record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventMouseDown",
          "description": "<p>Triggered for mouse down on an event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventMouseUp",
          "description": "<p>Triggered for mouse up on an event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventClick",
          "description": "<p>Triggered for click on an event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventDblClick",
          "description": "<p>Triggered for double click on an event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventContextMenu",
          "description": "<p>Triggered for right click on an event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventMouseOver",
          "description": "<p>Triggered for mouse over on an event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        },
        {
          "name": "eventMouseOut",
          "description": "<p>Triggered for mouse out from an event.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event record</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment record</p>"
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "description": "<p>Browser event</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "onElementKeyDown",
          "access": "private",
          "description": "<p>Relays keydown events as eventkeydown if we have a selected task.</p>",
          "scope": "instance"
        },
        {
          "name": "onElementKeyUp",
          "access": "private",
          "description": "<p>Relays keyup events as eventkeyup if we have a selected task.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "SchedulerEventRendering",
      "modulePath": "Scheduler/view/mixin/SchedulerEventRendering",
      "description": "<p>Functions to handle event rendering (EventModel -&gt; dom elements).</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerEventRendering.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "typedefs": [
        {
          "name": "EventRenderData",
          "description": "<p>Layout data object used to render an event record.</p>",
          "properties": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event instance</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Assigned resource</p>"
            },
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>Assignment instance</p>"
            },
            {
              "name": "startMS",
              "type": "Number",
              "description": "<p>Event start date time in milliseconds</p>"
            },
            {
              "name": "endMS",
              "type": "Number",
              "description": "<p>Event end date in milliseconds</p>"
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>Calculated event element height</p>"
            },
            {
              "name": "width",
              "type": "Number",
              "description": "<p>Calculated event element width</p>"
            },
            {
              "name": "top",
              "type": "Number",
              "description": "<p>Calculated event element top position in the row (or column)</p>"
            },
            {
              "name": "left",
              "type": "Number",
              "description": "<p>Calculated event element left position in the row (or column)</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "milestoneTextPosition",
          "description": "<p>Position of the milestone text, either 'inside' (for short 1-char text) or 'outside' for longer text. Not\napplicable when using <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-milestoneLayoutMode\">milestoneLayoutMode</a>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Milestones"
        },
        {
          "name": "milestoneAlign",
          "description": "<p>Get/set how to align milestones in relation to their startDate. Only applies when using a\n<code>milestoneLayoutMode</code> other than <code>default</code>. Valid values are:</p>\n<ul>\n<li>start</li>\n<li>center (default)</li>\n<li>end</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "category": "Milestones"
        },
        {
          "name": "milestoneCharWidth",
          "description": "<p>Factor representing the average char width in pixels used to determine milestone width when configured\nwith <code>milestoneLayoutMode: 'estimate'</code>.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Milestones"
        },
        {
          "name": "milestoneLayoutMode",
          "description": "<p>How to handle milestones during event layout. Options are:</p>\n<ul>\n<li>default - Milestones do not affect event layout</li>\n<li>estimate - Milestone width is estimated by multiplying text length with Scheduler#milestoneCharWidth</li>\n<li>data - Milestone width is determined by checking EventModel#milestoneWidth</li>\n<li>measure - Milestone width is determined by measuring label width\nPlease note that currently text width is always determined using EventModel#name.\nAlso note that only 'default' is supported by eventStyles line, dashed and minimal.</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "category": "Milestones"
        },
        {
          "name": "eventLayout",
          "description": "<p>Get/set overlap mode. See <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout\">eventLayout</a> config, valid values are <code>stack</code> (horizontal), <code>pack</code>, <code>mixed</code>\n(vertical) and <code>none</code></p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "category": "Scheduled events"
        },
        {
          "name": "overlappingEventSorter",
          "description": "<p>Override this method to provide a custom sort function to sort any overlapping events. See <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter\">overlappingEventSorter</a> for more details.</p>",
          "type": "function",
          "scope": "inner",
          "returns": [
            {
              "type": {
                "names": [
                  "Number"
                ]
              },
              "description": "<p>Return -1 to display <code>a</code> above <code>b</code>, 1 for <code>b</code> above <code>a</code></p>"
            }
          ],
          "category": "Misc",
          "parameters": [
            {
              "name": "a",
              "type": "Scheduler.model.EventModel",
              "description": "<p>First event</p>"
            },
            {
              "name": "b",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Second event</p>"
            }
          ]
        },
        {
          "name": "fillTicks",
          "description": "<p>Get/set fillTicks setting. If set to <code>true</code> it forces the rendered events to fill entire ticks.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Scheduled events"
        },
        {
          "name": "resourceMargin",
          "description": "<p>Control how much space to leave between the first event/last event and the resources edge (top/bottom\nmargin within the resource row in horizontal mode, left/right margin within the resource column in\nvertical mode), in px. Defaults to the value of <a href=\"#Scheduler/view/Scheduler#config-barMargin\">barMargin</a>.</p>\n<p>Can be configured per resource by setting <a href=\"#Scheduler/model/ResourceModel#field-resourceMargin\">resource.resourceMargin</a>.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Scheduled events"
        },
        {
          "name": "useInitialAnimation",
          "description": "<p>Specify initial animation at runtime, see <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-useInitialAnimation\">useInitialAnimation</a></p>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "resourceColumns",
          "description": "<p>Use it to manipulate resource column properties at runtime.</p>",
          "type": "Scheduler.view.ResourceHeader",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "resourceColumnWidth",
          "description": "<p>Get resource column width. Only applies to vertical mode. To set it, assign to\n<code>scheduler.resourceColumns.columnWidth</code>.</p>",
          "type": "Number",
          "scope": "instance",
          "readonly": true
        }
      ],
      "configs": [
        {
          "name": "milestoneTextPosition",
          "description": "<p>Position of the milestone text, either 'inside' (for short 1-char text) or 'outside' for longer text. Not\napplicable when using <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-milestoneLayoutMode\">milestoneLayoutMode</a>.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "outside",
          "category": "Milestones"
        },
        {
          "name": "milestoneAlign",
          "description": "<p>How to align milestones in relation to their startDate. Only applies when using a <code>milestoneLayoutMode</code>\nother than <code>default</code>. Valid values are:</p>\n<ul>\n<li>start</li>\n<li>center (default)</li>\n<li>end</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "center",
          "category": "Milestones"
        },
        {
          "name": "milestoneCharWidth",
          "description": "<p>Factor representing the average char width in pixels used to determine milestone width when configured\nwith <code>milestoneLayoutMode: 'estimate'</code>.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10,
          "category": "Milestones"
        },
        {
          "name": "milestoneLayoutMode",
          "description": "<p>How to handle milestones during event layout. Options are:</p>\n<ul>\n<li>default - Milestones do not affect event layout</li>\n<li>estimate - Milestone width is estimated by multiplying text length with Scheduler#milestoneCharWidth</li>\n<li>data - Milestone width is determined by checking EventModel#milestoneWidth</li>\n<li>measure - Milestone width is determined by measuring label width\nPlease note that currently text width is always determined using EventModel#name.\nAlso note that only 'default' is supported by eventStyles line, dashed and minimal.</li>\n</ul>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "default",
          "category": "Milestones"
        },
        {
          "name": "eventLayout",
          "description": "<p>This config defines how to handle overlapping events. Valid values are:</p>\n<ul>\n<li><code>stack</code>, adjusts row height (only horizontal)</li>\n<li><code>pack</code>, adjusts event height</li>\n<li><code>mixed</code>, allows two events to overlap, more packs (only vertical)</li>\n<li><code>none</code>, allows events to overlap</li>\n</ul>\n<p>This config can also accept an object:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>new Scheduler({\n    eventLayout : { type : 'stack' }\n})\n</code></pre>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": "stack",
          "category": "Scheduled events"
        },
        {
          "name": "overlappingEventSorter",
          "description": "<p>Override this method to provide a custom sort function to sort any overlapping events. This only applies\nto the horizontal mode, where the order the events are sorted in determines their vertical placement\nwithin a resource.</p>\n<p>By default, overlapping events are laid out based on the start date. If the start date is equal, events\nwith earlier end date go first. And lastly the name of events is taken into account.</p>\n<p>Here's a sample sort function, sorting on start- and end date. If this function returns -1, then event\n<code>a</code> is placed above event <code>b</code>:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>overlappingEventSorter(a, b) {\n\n  const startA = a.startDate, endA = a.endDate;\n  const startB = b.startDate, endB = b.endDate;\n\n  const sameStart = (startA - startB === 0);\n\n  if (sameStart) {\n    return endA > endB ? -1 : 1;\n  } else {\n    return (startA &lt; startB) ? -1 : 1;\n  }\n}\n</code></pre>\n<p>NOTE: The algorithms (stack, pack) that lay the events out expects them to be served in chronological\norder, be sure to first sort by <code>startDate</code> to get predictable results.</p>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": "Number",
            "description": "<p>Return -1 to display <code>a</code> above <code>b</code>, 1 for <code>b</code> above <code>a</code></p>"
          },
          "category": "Misc",
          "parameters": [
            {
              "name": "a",
              "type": "Scheduler.model.EventModel",
              "description": "<p>First event</p>"
            },
            {
              "name": "b",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Second event</p>"
            }
          ]
        },
        {
          "name": "horizontalEventSorterFn",
          "description": "<p>Deprecated, to be removed in version 6.0. Replaced by <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter\">overlappingEventSorter</a>.</p>",
          "type": "function",
          "scope": "inner",
          "deprecated": true
        },
        {
          "name": "fillTicks",
          "description": "<p>Specify <code>true</code> to force rendered events to fill entire ticks. This only affects rendering, events retain\ntheir set start and end dates on the data level. When enabling this config you should probably also\ndisable EventDrag and EventResize, otherwise their behaviour will not be what a user expects.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false,
          "category": "Scheduled events"
        },
        {
          "name": "resourceMargin",
          "description": "<p>Control how much space to leave between the first event/last event and the resources edge (top/bottom\nmargin within the resource row in horizontal mode, left/right margin within the resource column in\nvertical mode), in px. Defaults to the value of <a href=\"#Scheduler/view/Scheduler#config-barMargin\">barMargin</a>.</p>\n<p>Can be configured per resource by setting <a href=\"#Scheduler/model/ResourceModel#field-resourceMargin\">resource.resourceMargin</a>.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Scheduled events"
        },
        {
          "name": "useInitialAnimation",
          "description": "<p>By default scheduler fades events in on load. Specify <code>false</code> to prevent this animation or specify one\nof the available animation types to use it (<code>true</code> equals <code>'fade-in'</code>):</p>\n<ul>\n<li>fade-in (default)</li>\n<li>slide-from-left</li>\n<li>slide-from-top</li>\n</ul>\n<pre class=\"prettyprint source\"><code>// Slide events in from the left on load\nscheduler = new Scheduler({\n    useInitialAnimation : 'slide-from-left'\n});\n</code></pre>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "eventRenderer",
          "description": "<p>An empty function by default, but provided so that you can override it. This function is called each time\nan event is rendered into the schedule to render the contents of the event. It's called with the event,\nits resource and a <code>renderData</code> object which allows you to populate data placeholders inside the event\ntemplate. <strong>IMPORTANT</strong> You should never modify any data on the EventModel inside this method.</p>\n<p>By default, the DOM markup of an event bar includes placeholders for 'cls' and 'style'. The cls property\nis a <a href=\"#Core/helper/util/DomClassList\">DomClassList</a> which will be added to the event element. The style property\nis an inline style declaration for the event element.</p>\n<p>IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n(Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\nthe event's <code>name</code>. The function <a href=\"#Core/helper/StringHelper#function-encodeHtml-static\">encodeHtml</a> as well as\n<a href=\"#Core/helper/StringHelper#function-xss-static\">xss</a> can be helpful in these cases.</p>\n<pre class=\"prettyprint source lang-javascript\"><code> eventRenderer({ eventRecord, resourceRecord, renderData }) {\n     renderData.style = 'color:white';                 // You can use inline styles too.\n\n     // Property names with truthy values are added to the resulting elements CSS class.\n     renderData.cls.isImportant = this.isImportant(eventRecord);\n     renderData.cls.isModified = eventRecord.isModified;\n\n     // Remove a class name by setting the property to false\n     renderData.cls[scheduler.generatedIdCls] = false;\n\n     // Or, you can treat it as a string, but this is less efficient, especially\n     // if your renderer wants to *remove* classes that may be there.\n     renderData.cls += ' extra-class';\n\n     return StringHelper.xss`${DateHelper.format(eventRecord.startDate, 'YYYY-MM-DD')}: ${eventRecord.name}`;\n }\n</code></pre>",
          "type": "function",
          "scope": "inner",
          "returns": {
            "type": [
              "String",
              "Object"
            ],
            "description": "<p>A simple string, or a custom object which will be applied to the\n<a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventBodyTemplate\">eventBodyTemplate</a>, creating the actual HTML</p>"
          },
          "category": "Scheduled events",
          "parameters": [
            {
              "name": "detail",
              "type": "Object",
              "description": "<p>An object containing the information needed to render an Event.</p>"
            },
            {
              "name": "detail.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>The assignment record.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData",
              "type": "Object",
              "description": "<p>An object containing details about the event rendering.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.event",
              "type": "Scheduler.model.EventModel",
              "description": "<p>The event record.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.cls",
              "type": [
                "Core.helper.util.DomClassList",
                "String"
              ],
              "description": "<p>An object whose property names\nrepresent the CSS class names to be added to the event bar element. Set a property's value to truthy or\nfalsy to add or remove the class name based on the property name. Using this technique, you do not have\nto know whether the class is already there, or deal with concatenation.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.wrapperCls",
              "type": [
                "Core.helper.util.DomClassList",
                "String"
              ],
              "description": "<p>An object whose property names\nrepresent the CSS class names to be added to the event wrapper element. Set a property's value to truthy\nor falsy to add or remove the class name based on the property name. Using this technique, you do not\nhave to know whether the class is already there, or deal with concatenation.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.iconCls",
              "type": [
                "Core.helper.util.DomClassList",
                "String"
              ],
              "description": "<p>An object whose property names\nrepresent the CSS class names to be added to an event icon element.</p>\n<p>Note that an element carrying this icon class is injected into the event element <em>after</em>\nthe renderer completes, <em>before</em> the renderer's created content.</p>\n<p>To disable this if the renderer takes full control and creates content using the iconCls,\nyou can set <code>renderData.iconCls = null</code>.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.left",
              "type": "Number",
              "description": "<p>Vertical offset position (in pixels) on the time axis.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.width",
              "type": "Number",
              "description": "<p>Width in pixels of the event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.height",
              "type": "Number",
              "description": "<p>Height in pixels of the event element.</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.style",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Inline styles for the event bar DOM element. Use either\n'border: 1px solid black' or <code>{ border: '1px solid black' }</code></p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.wrapperStyle",
              "type": [
                "String",
                "Object"
              ],
              "description": "<p>Inline styles for wrapper of the event bar DOM element. Use either\n'border: 1px solid green' or <code>{ border: '1px solid green' }</code></p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventStyle",
              "type": "String",
              "description": "<p>The <code>eventStyle</code> of the event. Use this to apply custom\nstyles to the event DOM element</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.eventColor",
              "type": "String",
              "description": "<p>The <code>eventColor</code> of the event. Use this to set a custom\ncolor for the rendered event</p>",
              "isSubParam": true
            },
            {
              "name": "detail.renderData.children",
              "type": "Array.<Object>",
              "description": "<p>An array of DOM configs used as children to the\n<code>b-sch-event</code> element. Can be populated with additional DOM configs to have more control over contents.</p>",
              "isSubParam": true
            }
          ]
        },
        {
          "name": "eventRendererThisObj",
          "description": "<p><code>this</code> reference for the <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer\">eventRenderer</a> function</p>",
          "type": "Object",
          "scope": "inner",
          "category": "Scheduled events"
        },
        {
          "name": "eventBarTextField",
          "description": "<p>Field from EventModel displayed as text in the bar when rendering</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "name",
          "category": "Scheduled events"
        },
        {
          "name": "eventBodyTemplate",
          "description": "<p>The template used to generate the markup of your events in the scheduler. To 'populate' the\neventBodyTemplate with data, use the <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer\">eventRenderer</a> method.</p>",
          "type": "function",
          "scope": "inner",
          "category": "Scheduled events"
        },
        {
          "name": "horizontalLayoutPackClass",
          "access": "private",
          "description": "<p>The class responsible for the packing horizontal event layout process.\nOverride this to take control over the layout process.</p>",
          "type": "Scheduler.eventlayout.HorizontalLayout",
          "scope": "inner",
          "category": "Misc",
          "typings": {
            "returns": "typeof HorizontalLayout"
          }
        },
        {
          "name": "horizontalLayoutStackClass",
          "access": "private",
          "description": "<p>The class name responsible for the stacking horizontal event layout process.\nOverride this to take control over the layout process.</p>",
          "type": "Scheduler.eventlayout.HorizontalLayout",
          "scope": "inner",
          "category": "Misc",
          "typings": {
            "returns": "typeof HorizontalLayout"
          }
        },
        {
          "name": "resourceColumns",
          "description": "<p>A config object used to configure the resource columns in vertical mode.\nSee <a href=\"#Scheduler/view/ResourceHeader\">ResourceHeader</a> for more details on available properties.</p>\n<pre class=\"prettyprint source\"><code>new Scheduler({\n  resourceColumns : {\n    columnWidth    : 100,\n    headerRenderer : ({ resourceRecord }) => `${resourceRecord.id} - ${resourceRecord.name}`\n  }\n})\n</code></pre>",
          "type": "Object",
          "scope": "inner",
          "category": "Resources"
        },
        {
          "name": "resourceImagePath",
          "description": "<p>Path to load resource images from. Used by the resource header in vertical mode and the\n<a href=\"#Scheduler/column/ResourceInfoColumn\">ResourceInfoColumn</a> in horizontal mode. Set this to display miniature\nimages for each resource using their <code>image</code> or <code>imageUrl</code> fields.</p>\n<ul>\n<li><code>image</code> represents image name inside the specified <code>resourceImagePath</code>,</li>\n<li><code>imageUrl</code> represents fully qualified image URL.</li>\n</ul>\n<p>If set and a resource has no <code>imageUrl</code> or <code>image</code> specified it will try show miniature using\nthe resource's name with <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImageExtension\">resourceImageExtension</a> appended.</p>\n<p><strong>NOTE</strong>: The path should end with a <code>/</code>:</p>\n<pre class=\"prettyprint source\"><code>new Scheduler({\n  resourceImagePath : 'images/resources/'\n});\n</code></pre>",
          "type": "String",
          "scope": "inner",
          "category": "Resources"
        },
        {
          "name": "defaultResourceImageName",
          "description": "<p>Generic resource image, used when provided <code>imageUrl</code> or <code>image</code> fields or path calculated from resource\nname are all invalid. If left blank, resource name initials will be shown when no image can be loaded.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Resources"
        },
        {
          "name": "resourceImageExtension",
          "description": "<p>Resource image extension, used when creating image path from resource name.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": ".jpg",
          "category": "Resources"
        },
        {
          "name": "barMargin",
          "description": "<p>Controls how much space to leave between stacked event bars in px.</p>\n<p>Can be configured per resource by setting <a href=\"#Scheduler/model/ResourceModel#field-barMargin\">resource.barMargin</a>.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Scheduled events"
        }
      ],
      "functions": [
        {
          "name": "getEventLayoutHandler",
          "access": "internal",
          "description": "<p>Get event layout handler. The handler decides the vertical placement of events within a resource.\nReturns null if no eventLayout is used (if <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout\">eventLayout</a> is set to &quot;none&quot;)</p>",
          "scope": "instance",
          "category": "Scheduled events",
          "returns": {
            "type": "Scheduler.eventlayout.HorizontalLayout"
          }
        },
        {
          "name": "repaintEventsForResource",
          "description": "<p>Rerenders events for specified resource (by rerendering the entire row).</p>",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "repaintEvent",
          "access": "private",
          "description": "<p>Rerenders the events for all resources connected to the specified event</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "generateRenderData",
          "access": "private",
          "description": "<p>Generates data used in the template when rendering an event. For example which css classes to use. Also applies\n#eventBodyTemplate and calls the <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer\">eventRenderer</a>.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event to generate data for</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Events resource</p>"
            },
            {
              "name": "includeOutside",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>Specify true to get boxes for timespans outside of the rendered zone in both\ndimensions. This option is used when calculating dependency lines, and we need to include routes from timespans\nwhich may be outside the rendered zone.</p>"
            },
            {
              "name": "includeOutside.timeAxis",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to include timespans outside of the TimeAxis's bounds</p>",
              "isSubParam": true
            },
            {
              "name": "includeOutside.viewport",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to include timespans outside of the vertical timespan viewport's bounds.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Data to use in event template, or <code>undefined</code> if the event is outside of the rendered zone.</p>"
          }
        },
        {
          "name": "onEventDataGenerated",
          "access": "internal",
          "description": "<p>A method which may be chained by features. It is called when an event's render\ndata is calculated so that features may update the style, class list or body.</p>",
          "parameters": [
            {
              "name": "eventData",
              "type": "Object"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "restartInitialAnimation",
          "description": "<p>Restarts initial events animation with new value <a href=\"#Scheduler/view/mixin/SchedulerEventRendering#config-useInitialAnimation\">useInitialAnimation</a>.</p>",
          "parameters": [
            {
              "name": "initialAnimation",
              "type": [
                "Boolean",
                "String"
              ],
              "description": "<p>new initial animation value</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getMilestoneLabelWidth",
          "description": "<p>Determines width of a milestones label. How width is determined is decided by configuring Scheduler#milestoneLayoutMode.\nPlease note that currently text width is always determined using EventModel#name.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Number"
          }
        }
      ]
    },
    {
      "name": "SchedulerRegions",
      "modulePath": "Scheduler/view/mixin/SchedulerRegions",
      "description": "<p>Functions to get regions (bounding boxes) for scheduler, events etc.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerRegions.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "functions": [
        {
          "name": "getScheduleRegion",
          "description": "<p>Gets the region represented by the schedule and optionally only for a single resource. The view will ask the\nscheduler for the resource availability by calling getResourceAvailability. By overriding that method you can\nconstrain events differently for different resources.</p>",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>(optional) The resource record</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>(optional) The event record</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The region of the schedule</p>"
          }
        },
        {
          "name": "getResourceRegion",
          "description": "<p>Gets the region, relative to the timeline view element, representing the passed resource and optionally just for a certain date interval.</p>",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The resource record</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>A start date constraining the region</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>An end date constraining the region</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>A Rectangle which encapsulates the resource time span</p>"
          }
        },
        {
          "name": "getResourceEventBox",
          "description": "<p>Get the region for a specified resources specified event.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel"
            },
            {
              "name": "includeOutside",
              "type": "Boolean",
              "description": "<p>Specify true to get boxes for events outside of the rendered zone in both\ndimensions. This option is used when calculating dependency lines, and we need to include routes from events\nwhich may be outside the rendered zone.</p>",
              "default": false
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle"
          }
        },
        {
          "name": "getItemBox",
          "access": "internal",
          "description": "<p>Gets box for displayed item designated by the record. If several boxes are displayed for the given item\nthen the method returns all of them. Box coordinates are in view coordinate system.</p>\n<p>Boxes outside scheduling view timeaxis timespan and inside collapsed rows (if row defining store is a tree store)\nwill not be returned. Boxes outside scheduling view vertical visible area (i.e. boxes above currently visible\ntop row or below currently visible bottom row) will be calculated approximately.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Object",
              "Array.<Object>"
            ]
          }
        }
      ]
    },
    {
      "name": "SchedulerScroll",
      "modulePath": "Scheduler/view/mixin/SchedulerScroll",
      "description": "<p>Functions for scrolling to events, dates etc.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerScroll.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "functions": [
        {
          "name": "scrollEventIntoView",
          "description": "<p>Scrolls an event record into the viewport.\nIf the resource store is a tree store, this method will also expand all relevant parent nodes to locate the event.</p>\n<p>This function is not applicable for events with multiple assignments, please use #scrollResourceEventIntoView instead.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>the event record to scroll into view</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the event: <code>start/end/center/nearest</code>.</p>",
              "default": "nearest",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin <em>in pixels</em> around the event to bring into view.</p>",
              "default": 20,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the event element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the event element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when the scrolling is complete.</p>"
          }
        },
        {
          "name": "scrollAssignmentIntoView",
          "description": "<p>Scrolls an assignment record into the viewport.</p>\n<p>If the resource store is a tree store, this method will also expand all relevant parent nodes\nto locate the event.</p>",
          "parameters": [
            {
              "name": "assignmentRecord",
              "type": "Scheduler.model.AssignmentModel",
              "description": "<p>A resource record an event record is assigned to</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>DOM node index, applicable only for weekview</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the event: <code>start/end/center/nearest</code>.</p>",
              "default": "nearest",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin <em>in pixels</em> around the event to bring into view.</p>",
              "default": 20,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": "Boolean/Number",
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.extendTimeAxis",
              "type": "Boolean",
              "description": "<p>By default, if the requested event is outside the time axis, the time axis is extended.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the event element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the event element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when the scrolling is complete.</p>"
          }
        },
        {
          "name": "scrollResourceEventIntoView",
          "description": "<p>Scrolls a resource event record into the viewport.</p>\n<p>If the resource store is a tree store, this method will also expand all relevant parent nodes\nto locate the event.</p>",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>A resource record an event record is assigned to</p>"
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>An event record to scroll into view</p>"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>DOM node index, applicable only for weekview</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the event: <code>start/end/center/nearest</code>.</p>",
              "default": "nearest",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin <em>in pixels</em> around the event to bring into view.</p>",
              "default": 20,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.extendTimeAxis",
              "type": "Boolean",
              "description": "<p>By default, if the requested event is outside the time axis, the time axis is extended.</p>",
              "default": true,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the event element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.focus",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to focus the event element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when the scrolling is complete.</p>"
          }
        },
        {
          "name": "scrollUnrenderedEventIntoView",
          "access": "private",
          "description": "<p>Scrolls an unrendered event into view. Internal function used from #scrollResourceEventIntoView.</p>",
          "scope": "instance"
        },
        {
          "name": "scrollResourceIntoView",
          "description": "<p>Scrolls the specified resource into view, works for both horizontal and vertical modes.</p>",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>A resource record an event record is assigned to</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.column",
              "type": "String",
              "description": "<p>Field name or ID of the column, or the Column instance to scroll to (in horizontal mode).</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the element: <code>start/end/center/nearest</code>.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin around the element or rectangle to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.highlight",
              "type": "Boolean",
              "description": "<p>Set to <code>true</code> to highlight the element when it is in view.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the scrolling has finished.</p>"
          }
        }
      ]
    },
    {
      "name": "SchedulerState",
      "modulePath": "Scheduler/view/mixin/SchedulerState",
      "description": "<p>A Mixin for Scheduler that handles state. It serializes the following scheduler properties, in addition to what\nis already stored by its superclass <a href=\"#Grid/view/mixin/GridState\">GridState</a>:</p>\n<ul>\n<li>eventLayout</li>\n<li>barMargin</li>\n<li>mode</li>\n<li>tickSize</li>\n<li>zoomLevel</li>\n<li>eventColor</li>\n<li>eventStyle</li>\n</ul>\n<p>See <a href=\"#Grid/view/mixin/GridState\">GridState</a> and <a href=\"#Core/mixin/State\">State</a> for more information on state.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerState.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "properties": [
        {
          "name": "state",
          "description": "<p>Gets or sets scheduler's state. Check out <a href=\"#Scheduler/view/mixin/SchedulerState\">SchedulerState</a> mixin\nand <a href=\"#Grid/view/mixin/GridState\">GridState</a> for more details.</p>",
          "type": "Object",
          "scope": "inner",
          "properties": [
            {
              "name": "state.eventLayout",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "state.eventStyle",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "state.eventColor",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "state.barMargin",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.tickSize",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.fillTicks",
              "type": "Boolean",
              "isSubParam": true
            },
            {
              "name": "state.zoomLevel",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.mode",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "state.columns",
              "type": "Array.<Object>",
              "isSubParam": true
            },
            {
              "name": "state.readOnly",
              "type": "Boolean",
              "isSubParam": true
            },
            {
              "name": "state.rowHeight",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.scroll",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.scroll.scrollLeft",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.scroll.scrollTop",
              "type": "Number",
              "isSubParam": true
            },
            {
              "name": "state.selectedRecords",
              "type": "Array",
              "isSubParam": true
            },
            {
              "name": "state.style",
              "type": "String",
              "isSubParam": true
            },
            {
              "name": "state.subGrids",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.store",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.store.sorters",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.store.groupers",
              "type": "Object",
              "isSubParam": true
            },
            {
              "name": "state.store.filters",
              "type": "Object",
              "isSubParam": true
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getState",
          "access": "private",
          "description": "<p>Get scheduler's current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,\nselectedRecordId, column states and store state etc.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>State object to be serialized</p>"
          }
        },
        {
          "name": "applyState",
          "access": "private",
          "description": "<p>Apply previously stored state.</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Object"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "SchedulerStores",
      "modulePath": "Scheduler/view/mixin/SchedulerStores",
      "description": "<p>Functions for store assignment and store event listeners.</p>",
      "extends": [
        "Scheduler/data/mixin/ProjectConsumer"
      ],
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerStores.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "store",
          "access": "private",
          "description": "<p>Overridden to <em>not</em> auto create a store at the Scheduler level.\nThe store is the <a href=\"#Scheduler/data/ResourceStore\">ResourceStore</a> of the backing project</p>",
          "type": "Core.data.Store",
          "scope": "inner"
        },
        {
          "name": "startParamName",
          "description": "<p>The name of the start date parameter that will be passed to in every <code>eventStore</code> load request.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "endParamName",
          "description": "<p>The name of the end date parameter that will be passed to in every <code>eventStore</code> load request.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "passStartEndParameters",
          "description": "<p>true to apply start and end dates of the current view to any <code>eventStore</code> load requests.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "removeUnassignedEvent",
          "description": "<p>Configure with <code>true</code> to also remove the event when removing the last assignment.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Misc"
        },
        {
          "name": "crudManagerClass",
          "description": "<p>Class that should be used to instantiate a CrudManager in case it's provided as a simple object to\n<a href=\"#Scheduler/view/mixin/SchedulerStores#config-crudManager\">crudManager</a> config.</p>",
          "type": "Scheduler.data.CrudManager",
          "scope": "inner",
          "category": "Data",
          "typings": {
            "returns": "typeof CrudManager"
          }
        },
        {
          "name": "crudManager",
          "description": "<p>Supply a <a href=\"#Scheduler/data/CrudManager\">CrudManager</a> instance or a config object if you want to use\nCrudManager for handling data.</p>",
          "type": [
            "Object",
            "Scheduler.data.CrudManager"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "timeRanges",
          "description": "<p>Inline time ranges, will be loaded into an internally created store if <a href=\"#Scheduler/feature/TimeRanges\">TimeRanges</a>\nis enabled.</p>",
          "type": [
            "Array.<Scheduler.model.TimeSpan>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "timeRangeStore",
          "description": "<p>The time ranges store instance for <a href=\"#Scheduler/feature/TimeRanges\">TimeRanges</a> feature.</p>",
          "type": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceTimeRanges",
          "description": "<p>Inline resource time ranges, will be loaded into an internally created store if\n<a href=\"#Scheduler/feature/ResourceTimeRanges\">ResourceTimeRanges</a> is enabled.</p>",
          "type": [
            "Array.<Scheduler.model.ResourceTimeRangeModel>",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceTimeRangeStore",
          "description": "<p>Resource time ranges store instance or config object for <a href=\"#Scheduler/feature/ResourceTimeRanges\">ResourceTimeRanges</a> feature.</p>",
          "type": [
            "Scheduler.data.ResourceTimeRangeStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        }
      ],
      "properties": [
        {
          "name": "crudManager",
          "description": "<p>Get/set the CrudManager instance</p>",
          "type": "Scheduler.data.CrudManager",
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "timeRanges",
          "description": "<p>Get/set time ranges, applies to the backing project's TimeRangeStore.</p>",
          "type": "Array.<Scheduler.model.TimeSpan>",
          "accepts": [
            "Scheduler.model.TimeSpan[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "timeRangeStore",
          "description": "<p>Get/set the time ranges store instance or config object for <a href=\"#Scheduler/feature/TimeRanges\">TimeRanges</a> feature.</p>",
          "type": "Core.data.Store",
          "accepts": [
            "Core.data.Store",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceTimeRanges",
          "description": "<p>Get/set time ranges, applies to the backing project's ResourceTimeRangeStore.</p>",
          "type": "Array.<Scheduler.model.ResourceTimeRangeModel>",
          "accepts": [
            "Scheduler.model.ResourceTimeRangeModel[]",
            "Object[]"
          ],
          "scope": "inner",
          "category": "Data"
        },
        {
          "name": "resourceTimeRangeStore",
          "description": "<p>Get/set the resource time ranges store instance for <a href=\"#Scheduler/feature/ResourceTimeRanges\">ResourceTimeRanges</a> feature.</p>",
          "type": "Scheduler.data.ResourceTimeRangeStore",
          "accepts": [
            "Scheduler.data.ResourceTimeRangeStore",
            "Object"
          ],
          "scope": "inner",
          "category": "Data"
        }
      ],
      "functions": [
        {
          "name": "onEventStoreBatchedUpdate",
          "access": "private",
          "description": "<p>Listener to the batchedUpdate event which fires when a field is changed on a record which\nis batch updating. Occasionally UIs must keep in sync with batched changes.\nFor example, the EventResize feature performs batched updating of the startDate/endDate\nand it tells its client to listen to batchedUpdate.</p>",
          "scope": "instance"
        },
        {
          "name": "onInternalEventStoreChange",
          "access": "private",
          "description": "<p>Calls appropriate functions for current event layout when the event store is modified.</p>",
          "scope": "instance"
        },
        {
          "name": "onEventCommit",
          "access": "private",
          "description": "<p>Refreshes committed events, to remove dirty/committing flag.\nCSS is added</p>",
          "scope": "instance"
        },
        {
          "name": "onEventCommitStart",
          "access": "private",
          "description": "<p>Adds the committing flag to changed events before commit.</p>",
          "scope": "instance"
        },
        {
          "name": "applyStartEndParameters",
          "description": "<p>Applies the start and end date to each event store request (formatted in the same way as the start date, defined\nin the EventStore Model class).</p>",
          "scope": "instance",
          "category": "Data"
        },
        {
          "name": "getResourcesEventsPerTick",
          "access": "private",
          "description": "<p>Get events grouped by timeAxis ticks from resources array</p>",
          "parameters": [
            {
              "name": "resources",
              "type": "Array.<Scheduler.model.ResourceModel>",
              "description": "<p>An array of resources to process. If not passed, all resources\nwill be used.</p>"
            },
            {
              "name": "filterFn",
              "type": "function",
              "description": "<p>filter function to filter events if required. Optional.</p>"
            }
          ],
          "scope": "instance",
          "category": "Data"
        }
      ]
    },
    {
      "name": "TimelineDateMapper",
      "modulePath": "Scheduler/view/mixin/TimelineDateMapper",
      "description": "<p>Mixin that contains functionality to convert between coordinates and dates etc.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineDateMapper.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "functions": [
        {
          "name": "getDateFromCoordinate",
          "description": "<p>Gets the date for an X or Y coordinate, either local to the view element or the page based on the 3rd argument.\nIf the coordinate is not in the currently rendered view, null will be returned unless the <code>allowOutOfRange</code>\nparameter is passed a <code>true</code>.</p>",
          "parameters": [
            {
              "name": "coordinate",
              "type": "Number",
              "description": "<p>The X or Y coordinate</p>"
            },
            {
              "name": "roundingMethod",
              "type": "String",
              "description": "<p>The rounding method to use</p>",
              "optional": true
            },
            {
              "name": "local",
              "type": "Boolean",
              "description": "<p>true if the coordinate is local to the scheduler view element</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "allowOutOfRange",
              "type": "Boolean",
              "description": "<p>By default, this returns <code>null</code> if the position is outside\nof the time axis. Pass <code>true</code> to attempt to calculate a date outside of the time axis.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Dates",
          "returns": {
            "type": "Date",
            "description": "<p>The Date corresponding to the X or Y coordinate</p>"
          }
        },
        {
          "name": "getDateFromXY",
          "description": "<p>Gets the date for an XY coordinate regardless of the orientation of the time axis.</p>",
          "parameters": [
            {
              "name": "xy",
              "type": "Array",
              "description": "<p>The page X and Y coordinates</p>"
            },
            {
              "name": "roundingMethod",
              "type": "String",
              "description": "<p>Optional, 'floor' to floor the value or 'round' to round the value to nearest increment</p>",
              "optional": true
            },
            {
              "name": "local",
              "type": "Boolean",
              "description": "<p>true if the coordinate is local to the scheduler element</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "allowOutOfRange",
              "type": "Boolean",
              "description": "<p>By default, this returns <code>null</code> if the position is outside\nof the time axis. Pass <code>true</code> to attempt to calculate a date outside of the time axis.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Dates",
          "returns": {
            "type": "Date",
            "description": "<p>the Date corresponding to the xy coordinate</p>"
          }
        },
        {
          "name": "getDateFromDomEvent",
          "description": "<p>Gets the time for a DOM event such as 'mousemove' or 'click' regardless of the orientation of the time axis.</p>",
          "parameters": [
            {
              "name": "e",
              "type": "Event",
              "description": "<p>the Event instance</p>"
            },
            {
              "name": "roundingMethod",
              "type": "String",
              "description": "<p>Optional, 'floor' to floor the value or 'round' to round the value to nearest increment</p>",
              "optional": true
            },
            {
              "name": "allowOutOfRange",
              "type": "Boolean",
              "description": "<p>By default, this returns <code>null</code> if the position is outside\nof the time axis. Pass <code>true</code> to attempt to calculate a date outside of the time axis.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Dates",
          "returns": {
            "type": "Date",
            "description": "<p>The date corresponding to the EventObject's position along the orientation of the time axis.</p>"
          }
        },
        {
          "name": "getStartEndDatesFromRectangle",
          "description": "<p>Gets the start and end dates for an element Region</p>",
          "parameters": [
            {
              "name": "rect",
              "type": "Core.helper.util.Rectangle",
              "description": "<p>The rectangle to map to start and end dates</p>"
            },
            {
              "name": "roundingMethod",
              "type": "String",
              "description": "<p>The rounding method to use</p>"
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>The duration in MS of the underlying event</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>an object containing start/end properties</p>"
          }
        },
        {
          "name": "getFormattedDate",
          "access": "private",
          "description": "<p>Method to get a formatted display date</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>The formatted date</p>"
          }
        },
        {
          "name": "getDisplayEndDate",
          "access": "private",
          "description": "<p>Method to get a displayed end date value, see <a href=\"#Scheduler/view/mixin/TimelineDateMapper#function-getFormattedEndDate\">getFormattedEndDate</a> for more info.</p>",
          "parameters": [
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The date to format</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Date",
            "description": "<p>The date value to display</p>"
          }
        },
        {
          "name": "getFormattedEndDate",
          "access": "private",
          "description": "<p>Method to get a formatted end date for a scheduled event, the grid uses the &quot;displayDateFormat&quot; property defined in the current view preset.\nEnd dates are formatted as 'inclusive', meaning when an end date falls on midnight and the date format doesn't involve any hour/minute information,\n1ms will be subtracted (e.g. 2010-01-08T00:00:00 will first be modified to 2010-01-07 before being formatted).</p>",
          "parameters": [
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The date to format</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>The formatted date</p>"
          }
        },
        {
          "name": "getCoordinateFromDate",
          "description": "<p>Gets the x or y coordinate relative to the scheduler element, or page coordinate (based on the 'local' flag)\nIf the coordinate is not in the currently rendered view, -1 will be returned.</p>",
          "parameters": [
            {
              "name": "date",
              "type": [
                "Date",
                "Number"
              ],
              "description": "<p>the date to query for (or a date as ms)</p>"
            },
            {
              "name": "options",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>true to return a coordinate local to the scheduler view element (defaults to true),\nalso accepts a config object like { local : true }.</p>",
              "default": true
            }
          ],
          "scope": "instance",
          "category": "Dates",
          "returns": {
            "type": "Number",
            "description": "<p>the x or y position representing the date on the time axis</p>"
          }
        },
        {
          "name": "getTimeSpanDistance",
          "description": "<p>Returns the distance in pixels for the time span in the view.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the span</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date of the span</p>"
            }
          ],
          "scope": "instance",
          "category": "Dates",
          "returns": {
            "type": "Number",
            "description": "<p>The distance in pixels</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "displayDateFormat",
          "description": "<p>Get/set format to use when displaying dates. Usually set by specifying a view preset</p>",
          "type": "String",
          "scope": "instance",
          "category": "Dates"
        },
        {
          "name": "viewportCenterDate",
          "description": "<p>Returns the center date of the currently visible timespan of scheduler.</p>",
          "type": "Date",
          "scope": "instance",
          "readonly": true,
          "category": "Dates"
        },
        {
          "name": "timeResolution",
          "description": "<p>Gets/sets the current time resolution object, which contains a unit identifier and an increment count { unit, increment }.\nThis value means minimal task duration you can create using UI.\nFor example when you drag create a task or drag &amp; drop a task, if increment is 5 and unit is 'minute'\nthat means that you can create a 5 min long task, or move it 5 min forward/backward.\nThis value is taken from viewPreset <a href=\"#Scheduler/preset/ViewPreset#field-timeResolution\">timeResolution</a> config by default.\nWhen supplying a <code>Number</code> to the setter only the <code>increment</code> is changed and the <code>unit</code> value remains untouched.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>timeResolution : {\n  unit      : 'minute',  //Valid values are &quot;millisecond&quot;, &quot;second&quot;, &quot;minute&quot;, &quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;quarter&quot;, &quot;year&quot;.\n  increment : 5\n}\n</code></pre>",
          "type": [
            "Object",
            "Number"
          ],
          "scope": "instance",
          "category": "Dates"
        },
        {
          "name": "snap",
          "description": "<p>Controls whether the scheduler should snap to the resolution when interacting with it</p>",
          "type": "Boolean",
          "scope": "instance",
          "category": "Dates"
        }
      ]
    },
    {
      "name": "TimelineDomEvents",
      "modulePath": "Scheduler/view/mixin/TimelineDomEvents",
      "description": "<p>Mixin that handles dom events (click etc) for scheduler and rendered events.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineDomEvents.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "events": [
        {
          "name": "timeAxisHeaderClick",
          "description": "<p>Fires after a click on a time axis cell</p>",
          "parameters": [
            {
              "name": "source",
              "type": [
                "Scheduler.column.TimeAxisColumn",
                "Scheduler.column.VerticalTimeAxisColumn"
              ],
              "description": "<p>The column object</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the header cell</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date of the header cell</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event object</p>"
            }
          ]
        },
        {
          "name": "timeAxisHeaderDblClick",
          "description": "<p>Fires after a double click on a time axis cell</p>",
          "parameters": [
            {
              "name": "source",
              "type": [
                "Scheduler.column.TimeAxisColumn",
                "Scheduler.column.VerticalTimeAxisColumn"
              ],
              "description": "<p>The column object</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the header cell</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date of the header cell</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event object</p>"
            }
          ]
        },
        {
          "name": "timeAxisHeaderContextMenu",
          "description": "<p>Fires after a right click on a time axis cell</p>",
          "parameters": [
            {
              "name": "source",
              "type": [
                "Scheduler.column.TimeAxisColumn",
                "Scheduler.column.VerticalTimeAxisColumn"
              ],
              "description": "<p>The column object</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The start date of the header cell</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The end date of the header cell</p>"
            },
            {
              "name": "event",
              "type": "Event",
              "description": "<p>The event object</p>"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "initDomEvents",
          "access": "private",
          "description": "<p>Adds listeners for DOM events for the scheduler and its events.\nWhich events is specified in Scheduler#scheduledBarEvents and Scheduler#schedulerEvents.</p>",
          "scope": "instance"
        },
        {
          "name": "handleScheduledBarEvent",
          "access": "private",
          "description": "<p>Wraps dom Events for rendered scheduler EventModels and fires prefixed as our events.\nFor example click -&gt; eventclick</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "handleScheduleEvent",
          "access": "private",
          "description": "<p>Wraps dom Events for the scheduler and fires as our events.\nFor example click -&gt; scheduleClick</p>",
          "parameters": [
            {
              "name": "event"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "onElementMouseOver",
          "access": "private",
          "description": "<p>Relays mouseover events as eventmouseenter if over rendered event.\nAlso adds Scheduler#overScheduledEventClass to the hovered element.</p>",
          "scope": "instance"
        },
        {
          "name": "onElementMouseOut",
          "access": "private",
          "description": "<p>Relays mouseout events as eventmouseleave if out from rendered event.\nAlso removes Scheduler#overScheduledEventClass from the hovered element.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimelineEventRendering",
      "modulePath": "Scheduler/view/mixin/TimelineEventRendering",
      "description": "<p>Functions to handle event rendering (EventModel -&gt; dom elements).</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineEventRendering.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "barMargin",
          "description": "<p>Controls how much space to leave between stacked event bars in px</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 10,
          "category": "Scheduled events"
        },
        {
          "name": "managedEventSizing",
          "description": "<p>True to size events based on the rowHeight and barMargin settings. Set this to false if you want to\ncontrol height and top properties via CSS instead.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Scheduled events"
        },
        {
          "name": "generatedIdCls",
          "access": "private",
          "description": "<p>The CSS class added to an event/assignment when it is newly created\nin the UI and unsynced with the server.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-dirty-new",
          "category": "CSS"
        },
        {
          "name": "dirtyCls",
          "access": "private",
          "description": "<p>The CSS class added to an event when it has unsaved modifications</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-dirty",
          "category": "CSS"
        },
        {
          "name": "committingCls",
          "access": "private",
          "description": "<p>The CSS class added to an event when it is currently committing changes</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-committing",
          "category": "CSS"
        },
        {
          "name": "endsOutsideViewCls",
          "access": "private",
          "description": "<p>The CSS class added to an event/assignment when it ends outside of the visible time range.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-event-endsoutside",
          "category": "CSS"
        },
        {
          "name": "startsOutsideViewCls",
          "access": "private",
          "description": "<p>The CSS class added to an event/assignment when it starts outside of the visible time range.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-event-startsoutside",
          "category": "CSS"
        },
        {
          "name": "fixedEventCls",
          "access": "private",
          "description": "<p>The CSS class added to an event/assignment when it is not draggable.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "b-sch-event-fixed",
          "category": "CSS"
        },
        {
          "name": "eventStyle",
          "description": "<p>Event style used by default. Events and resources can specify their own style, with priority order being:\nEvent -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class\nto it. Available styles are:</p>\n<ul>\n<li><code>'plain'</code> (default) - flat look</li>\n<li><code>'border'</code> - has border in darker shade of events color</li>\n<li><code>'colored'</code> - has colored text and wide left border in same color</li>\n<li><code>'hollow'</code> - only border + text until hovered</li>\n<li><code>'line'</code> - as a line with the text below it</li>\n<li><code>'dashed'</code> - as a dashed line with the text below it</li>\n<li><code>'minimal'</code> - as a thin line with small text above it</li>\n<li><code>'rounded'</code> - minimalistic style with rounded corners</li>\n</ul>\n<p>In addition, there are two styles intended to be used when integrating with Bryntum Calendar. To match\nthe look of Calendar events, you can use:</p>\n<ul>\n<li><code>'calendar'</code> - a variation of the &quot;colored&quot; style matching the default style used by Calendar</li>\n<li><code>'interday'</code> - a variation of the &quot;plain&quot; style, for interday events</li>\n</ul>\n<p>Specify <code>null</code> to not apply a default style and take control using custom CSS (easily overridden basic\nstyling will be used).</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "plain",
          "category": "Scheduled events"
        },
        {
          "name": "eventColor",
          "description": "<p>The event color used by the Scheduler. Events and resources can specify their own color. See\n<a href=\"#Scheduler/view/mixin/TimelineEventRendering#property-eventColor\">eventColor</a> for more details.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "green",
          "category": "Scheduled events"
        },
        {
          "name": "tickSize",
          "description": "<p>The width/height (depending on vertical / horizontal mode) of all the time columns.</p>",
          "type": "Number",
          "scope": "inner",
          "category": "Scheduled events"
        }
      ],
      "properties": [
        {
          "name": "eventColor",
          "description": "<p>Event color used by default. Events and resources can specify their own color, with priority order being:\nEvent -&gt; Resource -&gt; Scheduler default. Available colors are:</p>\n<ul>\n<li>red</li>\n<li>pink</li>\n<li>purple</li>\n<li>violet</li>\n<li>indigo</li>\n<li>blue</li>\n<li>cyan</li>\n<li>teal</li>\n<li>green</li>\n<li>lime</li>\n<li>yellow</li>\n<li>orange</li>\n<li>deep-orange</li>\n<li>gray</li>\n<li>gantt-green (Useful when you want to match the color to the default color in Gantt)</li>\n</ul>\n<p>Specify <code>null</code> to not apply a default color and take control using custom CSS (an easily overridden color\nwill be used to make sure events are still visible).</p>",
          "type": "String",
          "scope": "inner",
          "category": "Scheduled events"
        },
        {
          "name": "barMargin",
          "description": "<p>Control how much space to leave between stacked event bars in px. Value will be constrained by half the row height.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Scheduled events"
        },
        {
          "name": "tickSize",
          "description": "<p>Get/set the width/height (depending on mode) of all the time columns to the supplied value.\nThere is a limit for the tick size value. Its minimal allowed value is calculated so ticks would fit the available space.\nOnly applicable when <a href=\"#Scheduler/view/TimelineBase#config-forceFit\">forceFit</a> is set to <code>false</code>.\nTo set <code>tickSize</code> freely skipping that limitation please set <a href=\"#Scheduler/view/TimelineBase#config-suppressFit\">suppressFit</a> to <code>true</code>.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Scheduled events"
        },
        {
          "name": "eventColors",
          "description": "<p>Predefined event colors, useful in combos etc.</p>",
          "type": "Array.<String>",
          "scope": "static",
          "category": "Scheduled events"
        },
        {
          "name": "eventStyles",
          "description": "<p>Predefined event styles , useful in combos etc.</p>",
          "type": "Array.<String>",
          "scope": "static",
          "category": "Scheduled events"
        }
      ]
    },
    {
      "name": "TimelineScroll",
      "modulePath": "Scheduler/view/mixin/TimelineScroll",
      "description": "<p>Functions for scrolling to events, dates etc.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineScroll.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "bufferCoef",
          "description": "<p>This config defines the size of the start and end invisible parts of the timespan when <a href=\"#Scheduler/view/mixin/TimelineScroll#config-infiniteScroll\">infiniteScroll</a> set to <code>true</code>.</p>\n<p>It should be provided as a coefficient, which will be multiplied by the size of the scheduling area.</p>\n<p>For example, if <code>bufferCoef</code> is <code>5</code> and the panel view width is 200px then the timespan will be calculated to\nhave approximately 1000px (<code>5 * 200</code>) to the left and 1000px to the right of the visible area, resulting\nin 2200px of totally rendered content.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5,
          "category": "Infinite scroll"
        },
        {
          "name": "bufferThreshold",
          "description": "<p>This config defines the scroll limit, which, when exceeded will cause a timespan shift.\nThe limit is calculated as the <code>panelWidth * <a href=\"#Scheduler/view/mixin/TimelineScroll#config-bufferCoef\">bufferCoef</a> * bufferThreshold</code>. During scrolling, if the left or right side\nhas less than that of the rendered content - a shift is triggered.</p>\n<p>For example if <code>bufferCoef</code> is <code>5</code> and the panel view width is 200px and <code>bufferThreshold</code> is 0.2, then the timespan\nwill be shifted when the left or right side has less than 200px (5 * 200 * 0.2) of content.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0.2,
          "category": "Infinite scroll"
        },
        {
          "name": "infiniteScroll",
          "description": "<p>True to automatically adjust the panel timespan during scrolling in the time dimension, when the scroller\ncomes close to the start/end edges.</p>\n<p>The actually rendered timespan in this mode (and thus the amount of HTML in the DOM) is calculated based\non the <a href=\"#Scheduler/view/mixin/TimelineScroll#config-bufferCoef\">bufferCoef</a> option. The moment when the timespan shift happens is determined by the <a href=\"#Scheduler/view/mixin/TimelineScroll#config-bufferThreshold\">bufferThreshold</a> value.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Infinite scroll"
        }
      ],
      "functions": [
        {
          "name": "scrollToDate",
          "description": "<p>Scrolls the time line &quot;tick&quot; encapsulating the passed <code>Date</code> into view according to the passed options.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>The date to which to scroll the time line</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the tick: <code>start/end/center/nearest</code>.</p>",
              "default": "nearest",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin <em>in pixels</em> around the tick to bring into view.</p>",
              "default": 20,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when the scrolling is complete.</p>"
          }
        },
        {
          "name": "scrollToNow",
          "description": "<p>Scrolls to current time.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the tick: <code>start/end/center/nearest</code>.</p>",
              "default": "nearest",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin <em>in pixels</em> around the tick to bring into view.</p>",
              "default": 20,
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when the scrolling is complete.</p>"
          }
        },
        {
          "name": "scrollToCoordinate",
          "access": "private",
          "description": "<p>Used by <a href=\"#Scheduler/view/mixin/TimelineScroll#function-scrollToDate\">scrollToDate</a> to scroll to correct coordinate.</p>",
          "parameters": [
            {
              "name": "localCoordinate",
              "type": "Number",
              "description": "<p>Coordinate to scroll to</p>"
            },
            {
              "name": "date",
              "type": "Date",
              "description": "<p>Date to scroll to, used for reconfiguring the time axis</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>How to scroll.</p>",
              "optional": true
            },
            {
              "name": "options.block",
              "type": "String",
              "description": "<p>How far to scroll the tick: <code>start/end/center/nearest</code>.</p>",
              "default": "nearest",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.edgeOffset",
              "type": "Number",
              "description": "<p>edgeOffset A margin <em>in pixels</em> around the tick to bring into view.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate",
              "type": [
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll, or the number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A Promise which resolves when the scrolling is complete.</p>"
          }
        },
        {
          "name": "scrollHorizontallyTo",
          "description": "<p>Horizontal scrolling. Applies to the SubGrid that holds the scheduler</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number"
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>How to scroll. May be passed as <code>true</code> to animate.</p>",
              "optional": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the scrolling has finished.</p>"
          }
        },
        {
          "name": "scrollVerticallyTo",
          "description": "<p>Vertical scrolling</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number"
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>How to scroll. May be passed as <code>true</code> to animate.</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the scrolling has finished.</p>"
          }
        },
        {
          "name": "scrollTo",
          "description": "<p>Scrolls the subgrid that contains the scheduler</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number"
            },
            {
              "name": "options",
              "type": [
                "Object",
                "Boolean"
              ],
              "description": "<p>How to scroll. May be passed as <code>true</code> to animate.</p>",
              "default": true,
              "optional": true
            },
            {
              "name": "options.animate",
              "type": [
                "Object",
                "Boolean",
                "Number"
              ],
              "description": "<p>Set to <code>true</code> to animate the scroll by 300ms,\nor the number of milliseconds to animate over, or an animation config object.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.duration",
              "type": "Number",
              "description": "<p>The number of milliseconds to animate over.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.animate.easing",
              "type": "String",
              "description": "<p>The name of an easing function.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "async": true,
          "returns": {
            "type": "Promise",
            "description": "<p>A promise which is resolved when the scrolling has finished.</p>"
          }
        }
      ],
      "properties": [
        {
          "name": "scrollLeft",
          "description": "<p>Get/set horizontal scroll. Applies to the SubGrid that holds the scheduler</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Scrolling"
        },
        {
          "name": "scrollTop",
          "description": "<p>Get/set vertical scroll</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Scrolling"
        }
      ]
    },
    {
      "name": "TimelineState",
      "modulePath": "Scheduler/view/mixin/TimelineState",
      "description": "<p>Mixin for Timeline base that handles state. It serializes the following timeline properties:</p>\n<ul>\n<li>barMargin</li>\n<li>zoomLevel</li>\n</ul>\n<p>See <a href=\"#Grid/view/mixin/GridState\">GridState</a> and <a href=\"#Core/mixin/State\">State</a> for more information on state.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineState.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "properties": [
        {
          "name": "state",
          "description": "<p>Gets or sets timeline's state. Check out <a href=\"#Scheduler/view/mixin/TimelineState\">TimelineState</a> mixin for details.</p>",
          "type": "Object",
          "scope": "inner",
          "category": "State"
        }
      ],
      "functions": [
        {
          "name": "getState",
          "access": "private",
          "description": "<p>Get timeline's current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,\nselectedRecordId, column states and store state etc.</p>",
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>State object to be serialized</p>"
          }
        },
        {
          "name": "applyState",
          "access": "private",
          "description": "<p>Apply previously stored state.</p>",
          "parameters": [
            {
              "name": "state",
              "type": "Object"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimelineViewPresets",
      "modulePath": "Scheduler/view/mixin/TimelineViewPresets",
      "description": "<p>View preset handling.</p>\n<p>A Scheduler's <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">presets</a> are loaded with a default set of <a href=\"#Scheduler/preset/ViewPreset\">ViewPresets</a>\nwhich are defined by the system in the <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>.</p>\n<p>The zooming feature works by reconfiguring the Scheduler with a new <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> selected\nfrom the <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">presets</a> store.</p>\n<p><a href=\"#Scheduler/preset/ViewPreset\">ViewPresets</a> can be added and removed from the store to change the amount of available steps.\nRange of zooming in/out can be also modified with <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel\">maxZoomLevel</a> / <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel\">minZoomLevel</a> properties.</p>\n<p>This mixin adds additional methods to the column : <a href=\"#Scheduler/view/mixin/TimelineZoomable#property-maxZoomLevel\">maxZoomLevel</a>, <a href=\"#Scheduler/view/mixin/TimelineZoomable#property-minZoomLevel\">minZoomLevel</a>, <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel\">zoomToLevel</a>, <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomIn\">zoomIn</a>,\n<a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomOut\">zoomOut</a>, <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomInFull\">zoomInFull</a>, <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomOutFull\">zoomOutFull</a>.</p>\n<p><strong>Notice</strong>: Zooming is not supported when <code>forceFit</code> option is set to true for the Scheduler or for filtered timeaxis.</p>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineViewPresets.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "viewPreset",
          "description": "<p>A string key used to lookup a predefined <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> (e.g. 'weekAndDay', 'hourAndDay'),\nmanaged by <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>. See <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a> for more information.\nOr a config object for a viewPreset.</p>\n<p>Options:</p>\n<ul>\n<li>'secondAndMinute'</li>\n<li>'minuteAndHour'</li>\n<li>'hourAndDay'</li>\n<li>'dayAndWeek'</li>\n<li>'weekAndDay'</li>\n<li>'weekAndMonth',</li>\n<li>'monthAndYear'</li>\n<li>'year'</li>\n<li>'manyYears'</li>\n<li>'weekAndDayLetter'</li>\n<li>'weekDateAndMonth'</li>\n<li>'day'</li>\n<li>'week'</li>\n</ul>\n<p>If passed as a config object, the settings from the viewPreset with the provided <code>base</code> property will be used along\nwith any overridden values in your object.</p>\n<p>To override:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>viewPreset : {\n  base    : 'hourAndDay',\n  id      : 'myHourAndDayPreset',\n  headers : [\n      {\n          unit      : &quot;hour&quot;,\n          increment : 12,\n          renderer  : (startDate, endDate, headerConfig, cellIdx) => {\n              return &quot;&quot;;\n          }\n      }\n  ]\n}\n</code></pre>\n<p>or set a new valid preset config if the preset is not registered in the <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>.</p>\n<p>When you use scheduler in weekview mode, this config is used to pick view preset. If passed view preset is not\nsupported by weekview (only 2 supported by default - 'day' and 'week') default preset will be used - 'week'.</p>",
          "type": [
            "String",
            "Object"
          ],
          "scope": "inner",
          "defaultValue": "weekAndDayLetter",
          "category": "Common"
        },
        {
          "name": "presets",
          "description": "<p>An array of <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> config objects\nwhich describes the available timeline layouts for this scheduler.</p>\n<p>By default, a predefined set is loaded from the <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>.</p>\n<p>A <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> describes the granularity of the\ntimeline view and the layout and subdivisions of the timeline header.</p>",
          "type": "Array.<Object>",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "displayDateFormat",
          "description": "<p>Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the\nview preset. For allowed values see <a href=\"#Core/helper/DateHelper#function-format-static\">format</a>.</p>",
          "type": "String",
          "scope": "inner",
          "category": "Scheduled events"
        }
      ],
      "properties": [
        {
          "name": "presets",
          "description": "<p>Get the <a href=\"#Scheduler/preset/PresetStore\">PresetStore</a> created for the Scheduler,\nor set an array of <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> config objects.</p>",
          "type": [
            "Scheduler.preset.PresetStore",
            "Array.<Object>"
          ],
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "viewPreset",
          "description": "<p>Get/set the current view preset</p>",
          "type": [
            "Scheduler.preset.ViewPreset",
            "String"
          ],
          "scope": "inner",
          "category": "Common",
          "parameters": [
            {
              "name": "viewPreset.options",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "viewPreset.options.startDate",
              "type": "Date",
              "description": "<p>A new start date for the time axis</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "viewPreset.options.endDate",
              "type": "Date",
              "description": "<p>A new end date for the time axis</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "viewPreset.options.centerDate",
              "type": "Date",
              "description": "<p>Where to center the new time axis</p>",
              "optional": true,
              "isSubParam": true
            }
          ]
        }
      ],
      "events": [
        {
          "name": "beforePresetChange",
          "description": "<p>Fired before the <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-viewPreset\">viewPreset</a> is changed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler instance.</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The new start date of the timeline.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The new end date of the timeline.</p>"
            },
            {
              "name": "from",
              "type": "Scheduler.preset.ViewPreset",
              "description": "<p>The outgoing ViewPreset.</p>"
            },
            {
              "name": "to",
              "type": "Scheduler.preset.ViewPreset",
              "description": "<p>The ViewPreset being switched to.</p>"
            }
          ],
          "preventable": true
        },
        {
          "name": "presetChange",
          "description": "<p>Fired after the <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-viewPreset\">viewPreset</a> has changed.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.Scheduler",
              "description": "<p>This Scheduler instance.</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The new start date of the timeline.</p>"
            },
            {
              "name": "centerDate",
              "type": "Date",
              "description": "<p>The new center date of the timeline.</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The new end date of the timeline.</p>"
            },
            {
              "name": "from",
              "type": "Scheduler.preset.ViewPreset",
              "description": "<p>The outgoing ViewPreset.</p>"
            },
            {
              "name": "to",
              "type": "Scheduler.preset.ViewPreset",
              "description": "<p>The ViewPreset being switched to.</p>"
            }
          ],
          "preventable": true
        }
      ]
    },
    {
      "name": "TimelineZoomable",
      "modulePath": "Scheduler/view/mixin/TimelineZoomable",
      "description": "<p>Mixin providing &quot;zooming&quot; functionality.</p>\n<p>The zoom levels are stored as instances of <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a>s, and are\ncached centrally in the <a href=\"#Scheduler/preset/PresetManager\">PresetManager</a>.</p>\n<p>The default presets are loaded into the <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">presets</a>\nstore upon Scheduler instantiation. Preset selection is covered in the\n<a href=\"#Scheduler/view/mixin/TimelineViewPresets\">TimelineViewPresets</a> mixin.</p>\n<p>To specify custom zoom levels please provide a set of view presets to the global PresetManager store <strong>before</strong> scheduler creation,\nor provide a set of view presets to a specific scheduler only:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const myScheduler = new Scheduler({\n    presets : [\n        {\n            base : 'hourAndDay',\n            id   : 'MyHourAndDay',\n            // other preset configs....\n        },\n        {\n            base : 'weekAndMonth',\n            id   : 'MyWeekAndMonth',\n            // other preset configs....\n        }\n    ],\n    viewPreset : 'MyHourAndDay',\n    // other scheduler configs....\n    });\n</code></pre>",
      "mixin": true,
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimelineZoomable.js",
      "path": "/Calendar/lib/Scheduler/view/mixin",
      "configs": [
        {
          "name": "zoomOnMouseWheel",
          "description": "<p>If true, you can zoom in and out on the the time axis using CTRL-key + mouse wheel.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Zoom"
        },
        {
          "name": "zoomOnTimeAxisDoubleClick",
          "description": "<p>True to zoom to time span when double clicking a time axis cell.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": true,
          "category": "Zoom"
        },
        {
          "name": "minZoomLevel",
          "description": "<p>The minimum zoom level to which <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomOut\">zoomOut</a> will work. Defaults to 0 (year ticks)</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 0,
          "category": "Zoom"
        },
        {
          "name": "maxZoomLevel",
          "description": "<p>The maximum zoom level to which <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomIn\">zoomIn</a> will work. Defaults to the number of\n<a href=\"#Scheduler/preset/ViewPreset\">ViewPresets</a> available, see <a href=\"#Scheduler/view/mixin/TimelineViewPresets#property-presets\">presets</a>\nfor information. Unless you have modified the collection of available presets, the max zoom level is milliseconds.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": "23",
          "category": "Zoom"
        },
        {
          "name": "visibleZoomFactor",
          "description": "<p>Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make the scrolling area <code>visibleZoomFactor</code> times\nwider than the timeline area itself. Used in <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan\">zoomToSpan</a> and <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel\">zoomToLevel</a> functions.</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 5,
          "category": "Zoom"
        },
        {
          "name": "zoomKeepsOriginalTimespan",
          "description": "<p>Whether the originally rendered timespan should be preserved while zooming. By default it is set to <code>false</code>,\nmeaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to render. When setting this option\nto <code>true</code>, be careful not to allow to zoom a big timespan in seconds resolution for example. That will cause <strong>a lot</strong> of HTML content\nto be rendered and affect performance. You can use <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel\">minZoomLevel</a> and <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel\">maxZoomLevel</a> config options for that.</p>",
          "type": "Boolean",
          "scope": "inner",
          "category": "Zoom"
        }
      ],
      "properties": [
        {
          "name": "maxZoomLevel",
          "description": "<p>Get/set the <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel\">maxZoomLevel</a> value</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Zoom"
        },
        {
          "name": "minZoomLevel",
          "description": "<p>Sets the <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel\">minZoomLevel</a> value</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Zoom"
        },
        {
          "name": "zoomLevel",
          "description": "<p>Current zoom level, which is equal to the <a href=\"#Scheduler/preset/ViewPreset\">ViewPreset</a> index\nin the provided array of <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">zoom levels</a>.</p>",
          "type": "Number",
          "scope": "instance",
          "category": "Zoom"
        }
      ],
      "functions": [
        {
          "name": "zoomTo",
          "description": "<p>Zooms to passed view preset, saving center date. Method accepts config object as a first argument, which can be\nreduced to primitive type (string,number) when no additional options required. e.g.:</p>\n<pre class=\"prettyprint source\"><code>// zooming to preset\nscheduler.zoomTo({ preset : 'hourAndDay' })\n// shorthand\nscheduler.zoomTo('hourAndDay')\n\n// zooming to level\nscheduler.zoomTo({ level : 0 })\n// shorthand\nscheduler.zoomTo(0)\n</code></pre>\n<p>It is also possible to zoom to a time span by omitting <code>preset</code> and <code>level</code> configs, in which case scheduler sets\nthe time frame to a specified range and applies zoom level which allows to fit all columns to this range. The\ngiven time span will be centered in the scheduling view (unless <code>centerDate</code> config provided). In the same time,\nthe start/end date of the whole time axis will be extended to allow scrolling for user.</p>\n<pre class=\"prettyprint source\"><code>// zooming to time span\nscheduler.zoomTo({ startDate : new Date(..), endDate : new Date(...) })\n\n</code></pre>",
          "parameters": [
            {
              "name": "config",
              "type": [
                "Object",
                "String",
                "Number"
              ],
              "description": "<p>Config object, preset name or zoom level index.</p>"
            },
            {
              "name": "config.preset",
              "type": "String",
              "description": "<p>Preset name to zoom to. Ignores level config in this case</p>",
              "isSubParam": true
            },
            {
              "name": "config.level",
              "type": "Number",
              "description": "<p>Zoom level to zoom to. Is ignored, if preset config is provided</p>",
              "isSubParam": true
            },
            {
              "name": "config.startDate",
              "type": "Date",
              "description": "<p>New time frame start. If provided along with end, view will be centered in this time\ninterval (unless <code>centerDate</code> is present)</p>",
              "isSubParam": true
            },
            {
              "name": "config.endDate",
              "type": "Date",
              "description": "<p>New time frame end</p>",
              "isSubParam": true
            },
            {
              "name": "config.centerDate",
              "type": "Date",
              "description": "<p>Date that should be kept in the center. Has priority over start and end params</p>",
              "isSubParam": true
            },
            {
              "name": "config.width",
              "type": "Number",
              "description": "<p>Lowest tick width. Might be increased automatically</p>",
              "isSubParam": true
            },
            {
              "name": "config.leftMargin",
              "type": "Number",
              "description": "<p>Amount of pixels to extend span start on (used, when zooming to span)</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.rightMargin",
              "type": "Number",
              "description": "<p>Amount of pixels to extend span end on (used, when zooming to span)</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.adjustStart",
              "type": "Number",
              "description": "<p>Amount of units to extend span start on (used, when zooming to span)</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.adjustEnd",
              "type": "Number",
              "description": "<p>Amount of units to extend span end on (used, when zooming to span)</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Zoom"
        },
        {
          "name": "zoomToLevel",
          "description": "<p>Allows zooming to certain level of <a href=\"#Scheduler/view/mixin/TimelineViewPresets#config-presets\">presets</a> array. Automatically limits zooming between <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel\">maxZoomLevel</a>\nand <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel\">minZoomLevel</a>. Can also set time axis timespan to the supplied start and end dates.</p>",
          "parameters": [
            {
              "name": "preset",
              "type": "Number",
              "description": "<p>Level to zoom to.</p>"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Object, containing options for this method</p>",
              "optional": true
            },
            {
              "name": "options.startDate",
              "type": "Date",
              "description": "<p>New time frame start. If provided along with end, view will be centered in this time\ninterval, ignoring centerDate config.</p>",
              "isSubParam": true
            },
            {
              "name": "options.endDate",
              "type": "Date",
              "description": "<p>New time frame end.</p>",
              "isSubParam": true
            },
            {
              "name": "options.centerDate",
              "type": "Date",
              "description": "<p>Date that should be kept in center. Is ignored when start and end are provided.</p>",
              "isSubParam": true
            },
            {
              "name": "options.width",
              "type": "Number",
              "description": "<p>Lowest tick width. Might be increased automatically</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Zoom",
          "returns": {
            "type": [
              "Number",
              "null"
            ],
            "description": "<p>level Current zoom level or null if it hasn't changed.</p>"
          }
        },
        {
          "name": "zoomToFit",
          "description": "<p>Changes the range of the scheduling chart to fit all the events in its event store.</p>",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "<p>Options object for the zooming operation.</p>",
              "optional": true
            },
            {
              "name": "options.leftMargin",
              "type": "Number",
              "description": "<p>Defines margin in pixel between the first event start date and first visible date</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "options.rightMargin",
              "type": "Number",
              "description": "<p>Defines margin in pixel between the last event end date and last visible date</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "zoomToSpan",
          "description": "<p>Sets time frame to specified range and applies zoom level which allows to fit all columns to this range.</p>\n<p>The given time span will be centered in the scheduling view, in the same time, the start/end date of the whole time axis\nwill be extended in the same way as <a href=\"#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel\">zoomToLevel</a> method does, to allow scrolling for user.</p>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The time frame.</p>"
            },
            {
              "name": "config.startDate",
              "type": "Date",
              "description": "<p>The time frame start.</p>",
              "isSubParam": true
            },
            {
              "name": "config.endDate",
              "type": "Date",
              "description": "<p>The time frame end.</p>",
              "isSubParam": true
            },
            {
              "name": "config.centerDate",
              "type": "Date",
              "description": "<p>Date that should be kept in the center. Has priority over start and end params</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.leftMargin",
              "type": "Number",
              "description": "<p>Amount of pixels to extend span start on</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.rightMargin",
              "type": "Number",
              "description": "<p>Amount of pixels to extend span end on</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.adjustStart",
              "type": "Number",
              "description": "<p>Amount of units to extend span start on</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.adjustEnd",
              "type": "Number",
              "description": "<p>Amount of units to extend span end on</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "category": "Zoom",
          "returns": {
            "type": [
              "Number",
              "null"
            ],
            "description": "<p>level Current zoom level or null if it hasn't changed.</p>"
          }
        },
        {
          "name": "zoomIn",
          "description": "<p>Zooms in the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view will zoom in by this value.\nOtherwise a value of <code>1</code> will be used.</p>",
          "parameters": [
            {
              "name": "levels",
              "type": "Number",
              "description": "<p>(optional) amount of levels to zoom in</p>",
              "default": 1
            }
          ],
          "scope": "instance",
          "category": "Zoom",
          "returns": {
            "type": [
              "Number",
              "null"
            ],
            "description": "<p>currentLevel New zoom level of the panel or null if level hasn't changed.</p>"
          }
        },
        {
          "name": "zoomOut",
          "description": "<p>Zooms out the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view will zoom out by this value.\nOtherwise a value of <code>1</code> will be used.</p>",
          "parameters": [
            {
              "name": "levels",
              "type": "Number",
              "description": "<p>(optional) amount of levels to zoom out</p>",
              "default": 1
            }
          ],
          "scope": "instance",
          "category": "Zoom",
          "returns": {
            "type": [
              "Number",
              "null"
            ],
            "description": "<p>currentLevel New zoom level of the panel or null if level hasn't changed.</p>"
          }
        },
        {
          "name": "zoomInFull",
          "description": "<p>Zooms in the timeline to the <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel\">maxZoomLevel</a> according to the array of zoom levels.</p>",
          "scope": "instance",
          "category": "Zoom",
          "returns": {
            "type": [
              "Number",
              "null"
            ],
            "description": "<p>currentLevel New zoom level of the panel or null if level hasn't changed.</p>"
          }
        },
        {
          "name": "zoomOutFull",
          "description": "<p>Zooms out the timeline to the <a href=\"#Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel\">minZoomLevel</a> according to the array of zoom levels.</p>",
          "scope": "instance",
          "category": "Zoom",
          "returns": {
            "type": [
              "Number",
              "null"
            ],
            "description": "<p>currentLevel New zoom level of the panel or null if level hasn't changed.</p>"
          }
        },
        {
          "name": "setTimeSpan",
          "description": "<p>Changes the time axis timespan to the supplied start and end dates.</p>",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>The new start date</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>The new end date. If omitted or equal to startDate, the <a href=\"#Scheduler/preset/ViewPreset#field-defaultSpan\">defaultSpan</a> property of the current view preset will be used to calculate the new end date.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "shift",
          "description": "<p>Moves the time axis by the passed amount and unit.</p>\n<p>NOTE: If using a filtered time axis, see <a href=\"#Scheduler/data/TimeAxis#function-shift\">shift</a> for more information.</p>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The number of units to jump</p>"
            },
            {
              "name": "unit",
              "type": "String",
              "description": "<p>The unit (Day, Week etc)</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "shiftNext",
          "description": "<p>Moves the time axis forward in time in units specified by the view preset <code>shiftUnit</code>, and by the amount specified by the <code>shiftIncrement</code>\nconfig of the current view preset.</p>\n<p>NOTE: If using a filtered time axis, see <a href=\"#Scheduler/data/TimeAxis#function-shiftNext\">shiftNext</a> for more information.</p>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The number of units to jump forward</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "shiftPrevious",
          "description": "<p>Moves the time axis backward in time in units specified by the view preset <code>shiftUnit</code>, and by the amount specified by the <code>shiftIncrement</code> config of the current view preset.</p>\n<p>NOTE: If using a filtered time axis, see <a href=\"#Scheduler/data/TimeAxis#function-shiftPrevious\">shiftPrevious</a> for more information.</p>",
          "parameters": [
            {
              "name": "amount",
              "type": "Number",
              "description": "<p>The number of units to jump backward</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "TimeAxisViewModel",
      "modulePath": "Scheduler/view/model/TimeAxisViewModel",
      "classDescription": "<p>This class is an internal view model class, describing the visual representation of a <a href=\"#Scheduler/data/TimeAxis\">TimeAxis</a>.\nThe config for the header rows is described in the <a href=\"#Scheduler/preset/ViewPreset#field-headers\">headers</a>.\nTo calculate the size of each cell in the time axis, this class requires:</p>\n<ul>\n<li>availableSpace  - The total width or height available for the rendering</li>\n<li>tickSize       - The fixed width or height of each cell in the lowest header row. This value is normally read from the\n<a href=\"#Scheduler/preset/ViewPreset\">viewPreset</a> but this can also be updated programmatically using the <a href=\"#Scheduler/view/model/TimeAxisViewModel#property-tickSize\">tickSize</a> setter</li>\n</ul>\n<p>Normally you should not interact with this class directly.</p>",
      "extends": [
        "Core/mixin/Events"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "TimeAxisViewModel.js",
      "path": "/Calendar/lib/Scheduler/view/model",
      "configs": [
        {
          "name": "timeAxis",
          "access": "internal",
          "description": "<p>The time axis providing the underlying data to be visualized</p>",
          "type": "Scheduler.data.TimeAxis",
          "scope": "inner"
        },
        {
          "name": "availableSpace",
          "access": "internal",
          "description": "<p>The available width/height, this is normally not known by the consuming UI component using this model\nclass until it has been fully rendered. The consumer of this model should set\n<a href=\"#Scheduler/view/model/TimeAxisViewModel#property-availableSpace\">availableSpace</a> when its width has changed.</p>",
          "type": "Number",
          "scope": "inner"
        },
        {
          "name": "tickSize",
          "access": "internal",
          "description": "<p>The &quot;tick width&quot; for horizontal mode or &quot;tick height&quot; for vertical mode, to use for the cells in the\nbottom most header row.\nThis value is normally read from the <a href=\"#Scheduler/preset/ViewPreset\">viewPreset</a></p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 100
        },
        {
          "name": "snap",
          "access": "internal",
          "description": "<p>true if there is a requirement to be able to snap events to a certain view resolution.\nThis has implications of the <a href=\"#Scheduler/view/model/TimeAxisViewModel#config-tickSize\">tickSize</a> that can be used, since all widths must be in even pixels.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "forceFit",
          "access": "internal",
          "description": "<p>true if cells in the bottom-most row should be fitted to the <a href=\"#Scheduler/view/model/TimeAxisViewModel#property-availableSpace\">available space</a>.</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ],
      "functions": [
        {
          "name": "calculateInfiniteScrollingDateRange",
          "access": "internal",
          "description": "<p>Used to calculate the range to extend the TimeAxis to during infinite scroll.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "centered",
              "type": "Boolean"
            },
            {
              "name": "preset",
              "type": "Scheduler.preset.ViewPreset",
              "description": "<p>Optional, the preset for which to calculate the range.\ndefaults to the currently active ViewPreset</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p><code>{ startDate, endDate }</code></p>"
          }
        },
        {
          "name": "update",
          "access": "internal",
          "description": "<p>Updates the view model current timeAxis configuration and available space.</p>",
          "parameters": [
            {
              "name": "availableSpace",
              "type": "Number",
              "description": "<p>The available space for the rendering of the axis (used in forceFit mode)</p>",
              "optional": true
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to suppress the firing of the <code>update</code> event.</p>",
              "default": false,
              "optional": true
            },
            {
              "name": "forceUpdate",
              "type": "Boolean",
              "description": "<p>Pass <code>true</code> to fire the <code>update</code> event even if the size has not changed.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "getDistanceBetweenDates",
          "description": "<p>Returns the distance in pixels for a timespan with the given start and end date.</p>",
          "parameters": [
            {
              "name": "start",
              "type": "Date",
              "description": "<p>start date</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>end date</p>"
            }
          ],
          "scope": "instance",
          "category": "Date mapping",
          "returns": {
            "type": "Number",
            "description": "<p>The length of the time span</p>"
          }
        },
        {
          "name": "getDistanceForDuration",
          "description": "<p>Returns the distance in pixels for a time span</p>",
          "parameters": [
            {
              "name": "durationMS",
              "type": "Number",
              "description": "<p>Time span duration in ms</p>"
            }
          ],
          "scope": "instance",
          "category": "Date mapping",
          "returns": {
            "type": "Number",
            "description": "<p>The length of the time span</p>"
          }
        },
        {
          "name": "getPositionFromDate",
          "description": "<p>Gets the position of a date on the projected time axis or -1 if the date is not in the timeAxis.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date",
              "description": "<p>the date to query for.</p>"
            }
          ],
          "scope": "instance",
          "category": "Date mapping",
          "returns": {
            "type": "Number",
            "description": "<p>the coordinate representing the date</p>"
          }
        },
        {
          "name": "getDateFromPosition",
          "description": "<p>Gets the date for a position on the time axis</p>",
          "parameters": [
            {
              "name": "position",
              "type": "Number",
              "description": "<p>The page X or Y coordinate</p>"
            },
            {
              "name": "roundingMethod",
              "type": "String",
              "description": "<p>The rounding method to use</p>",
              "optional": true
            },
            {
              "name": "allowOutOfRange",
              "type": "Boolean",
              "description": "<p>By default, this returns <code>null</code> if the position is outside\nof the time axis. Pass <code>true</code> to attempt to calculate a date outside of the time axis.</p>",
              "default": false,
              "optional": true
            }
          ],
          "scope": "instance",
          "category": "Date mapping",
          "returns": {
            "type": "Date",
            "description": "<p>the Date corresponding to the xy coordinate</p>"
          }
        },
        {
          "name": "getSingleUnitInPixels",
          "access": "internal",
          "description": "<p>Returns the amount of pixels for a single unit</p>",
          "scope": "instance",
          "returns": {
            "type": "Number",
            "description": "<p>The unit in pixel</p>"
          }
        },
        {
          "name": "getDates",
          "access": "internal",
          "description": "<p>Returns start dates for ticks at the specified level in format { date, isMajor }.</p>",
          "parameters": [
            {
              "name": "level",
              "type": "Number",
              "description": "<p>Level in headers array, <code>0</code> meaning the topmost...</p>"
            },
            {
              "name": "useLowestHeader",
              "type": "Boolean",
              "description": "<p>Use lowest level</p>",
              "default": false
            },
            {
              "name": "getEnd",
              "default": false
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Array"
          }
        },
        {
          "name": "fitToAvailableSpace",
          "access": "internal",
          "description": "<p>This function fits the time columns into the available space in the time axis column.</p>",
          "parameters": [
            {
              "name": "suppressEvent",
              "type": "Boolean",
              "description": "<p><code>true</code> to skip firing the 'update' event.</p>"
            }
          ],
          "scope": "instance"
        },
        {
          "name": "isMajorTick",
          "access": "private",
          "description": "<p>For vertical view (and column lines plugin) we sometimes want to know if current tick starts along with the\nupper header level.</p>",
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "forEachInterval",
          "access": "internal",
          "description": "<p>Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.\nReturn false to break the iteration.</p>",
          "parameters": [
            {
              "name": "position",
              "type": "Number",
              "description": "<p>The index of the header in the headers array.</p>"
            },
            {
              "name": "iteratorFn",
              "type": "function",
              "description": "<p>The function to call, will be called with start date, end date and &quot;tick index&quot;</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "forEachMainInterval",
          "access": "internal",
          "description": "<p>Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.\nReturn false to break the iteration.</p>",
          "parameters": [
            {
              "name": "iteratorFn",
              "type": "function",
              "description": "<p>The function to call</p>"
            },
            {
              "name": "thisObj",
              "type": "Object",
              "description": "<p><code>this</code> reference for the function</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ],
      "properties": [
        {
          "name": "columnConfig",
          "access": "internal",
          "description": "<p>Returns an array representing the headers of the current timeAxis. Each element is an array representing the cells for that level in the header.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Array.<Object>"
                ]
              },
              "description": "<p>An array of headers, each element being an array representing each cell (with start date and end date) in the timeline representation.</p>"
            }
          ]
        },
        {
          "name": "isHorizontal",
          "access": "internal",
          "description": "<p>Using horizontal mode?</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ],
          "readonly": true
        },
        {
          "name": "isVertical",
          "access": "internal",
          "description": "<p>Using vertical mode?</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Boolean"
                ]
              }
            }
          ],
          "readonly": true
        },
        {
          "name": "forceFit",
          "access": "internal",
          "description": "<p>Gets/sets the forceFit value for the model. Setting it will cause it to update its contents and fire the\n<a href=\"#Scheduler/view/model/TimeAxisViewModel#event-update\">update</a> event.</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "snapPixelAmount",
          "access": "internal",
          "description": "<p>[Experimental] Returns the pixel increment for the current view resolution.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Number"
                ]
              },
              "description": "<p>The increment</p>"
            }
          ]
        },
        {
          "name": "tickSize",
          "access": "internal",
          "description": "<p>Get/set the current time column size (the width or height of a cell in the bottom-most time axis header row,\ndepending on mode)</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "totalSize",
          "access": "internal",
          "description": "<p>Returns the total width/height of the time axis representation, depending on mode.</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "Number"
                ]
              },
              "description": "<p>The width or height</p>"
            }
          ],
          "readonly": true
        },
        {
          "name": "availableSpace",
          "access": "internal",
          "description": "<p>Get/set the available space for the time axis representation. If size changes it will cause it to update its\ncontents and fire the <a href=\"#Scheduler/view/model/TimeAxisViewModel#event-update\">update</a> event.</p>",
          "type": "Number",
          "scope": "instance"
        },
        {
          "name": "snap",
          "access": "internal",
          "description": "<p>Gets/sets the snap value for the model. Setting it will cause it to update its contents and fire the\n<a href=\"#Scheduler/view/model/TimeAxisViewModel#event-update\">update</a> event.</p>",
          "type": "Boolean",
          "scope": "instance"
        },
        {
          "name": "majorHeaderLevel",
          "access": "private",
          "description": "<p>This method is meant to return the level of the header which 2nd lowest.\nIt is used for <a href=\"#Scheduler/view/model/TimeAxisViewModel#function-isMajorTick\">isMajorTick</a> method</p>",
          "scope": "instance",
          "returns": [
            {
              "type": {
                "names": [
                  "String"
                ]
              }
            }
          ]
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "<p>Fires after the model has been updated.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.model.TimeAxisViewModel",
              "description": "<p>The model instance</p>"
            }
          ]
        },
        {
          "name": "reconfigure",
          "description": "<p>Fires after the model has been reconfigured.</p>",
          "parameters": [
            {
              "name": "source",
              "type": "Scheduler.view.model.TimeAxisViewModel",
              "description": "<p>The model instance</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "HorizontalRendering",
      "modulePath": "Scheduler/view/orientation/HorizontalRendering",
      "classDescription": "<p>Handles event rendering in Schedulers horizontal mode. Reacts to project/store changes to keep the UI up to date.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "HorizontalRendering.js",
      "path": "/Calendar/lib/Scheduler/view/orientation",
      "typedefs": [
        {
          "name": "HorizontalRenderData",
          "access": "private",
          "properties": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            },
            {
              "name": "start",
              "type": "Date",
              "description": "<p>Span start</p>"
            },
            {
              "name": "end",
              "type": "Date",
              "description": "<p>Span end</p>"
            },
            {
              "name": "rowId",
              "type": "String",
              "description": "<p>Id of the resource row</p>"
            },
            {
              "name": "children",
              "type": "Array.<Object>",
              "description": "<p>Child elements</p>"
            },
            {
              "name": "startMS",
              "type": "Number",
              "description": "<p>Wrap element start in milliseconds</p>"
            },
            {
              "name": "endMS",
              "type": "Number",
              "description": "<p>Span Wrap element end in milliseconds</p>"
            },
            {
              "name": "durationMS",
              "type": "Number",
              "description": "<p>Wrap duration in milliseconds (not just a difference between start and end)</p>"
            },
            {
              "name": "innerStartMS",
              "type": "Number",
              "description": "<p>Actual event start in milliseconds</p>"
            },
            {
              "name": "innerEndMS",
              "type": "Number",
              "description": "<p>Actual event end in milliseconds</p>"
            },
            {
              "name": "innerDurationMS",
              "type": "Number",
              "description": "<p>Actual event duration in milliseconds</p>"
            },
            {
              "name": "startsOutsideView",
              "type": "Boolean",
              "description": "<p>True if span starts before time axis start</p>"
            },
            {
              "name": "endsOutsideView",
              "type": "Boolean",
              "description": "<p>True if span ends after time axis end</p>"
            },
            {
              "name": "left",
              "type": "Number",
              "description": "<p>Absolute left coordinate of the wrap element</p>"
            },
            {
              "name": "width",
              "type": "Number"
            },
            {
              "name": "top",
              "type": "Number",
              "description": "<p>Absolute top coordinate of the wrap element (can be changed by layout)</p>"
            },
            {
              "name": "height",
              "type": "Number"
            },
            {
              "name": "clippedStart",
              "type": "Boolean",
              "description": "<p>True if start is clipped</p>"
            },
            {
              "name": "clippedEnd",
              "type": "Boolean",
              "description": "<p>True if end is clipped</p>"
            }
          ]
        }
      ],
      "configs": [
        {
          "name": "bufferSize",
          "description": "<p>Amount of pixels to extend the current visible range at both ends with when deciding which events to\nrender. Only applies when using labels or for milestones</p>",
          "type": "Number",
          "scope": "inner",
          "defaultValue": 150
        }
      ],
      "functions": [
        {
          "name": "getScheduleRegion",
          "description": "<p>Gets the region, relative to the page, represented by the schedule and optionally only for a single resource.\nThis method will call getDateConstraints to allow for additional resource/event based constraints. By overriding\nthat method you can constrain events differently for different resources.</p>",
          "parameters": [
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>(optional) The row record</p>",
              "optional": true
            },
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>(optional) The event record</p>",
              "optional": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The region of the schedule</p>"
          }
        },
        {
          "name": "getRowRegion",
          "description": "<p>Gets the Region, relative to the timeline view element, representing the passed row and optionally just for a\ncertain date interval.</p>",
          "parameters": [
            {
              "name": "rowRecord",
              "type": "Core.data.Model",
              "description": "<p>The row record</p>"
            },
            {
              "name": "startDate",
              "type": "Date",
              "description": "<p>A start date constraining the region</p>"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "<p>An end date constraining the region</p>"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Core.helper.util.Rectangle",
            "description": "<p>The Rectangle which encapsulates the row</p>"
          }
        },
        {
          "name": "getConnectorStartSide",
          "description": "<p>Gets displaying item start side</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>'left' / 'right' / 'top' / 'bottom'</p>"
          }
        },
        {
          "name": "getConnectorEndSide",
          "description": "<p>Gets displaying item end side</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.EventModel"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "String",
            "description": "<p>'left' / 'right' / 'top' / 'bottom'</p>"
          }
        },
        {
          "name": "refreshResourcesWhenReady",
          "access": "private",
          "description": "<p>Clears resources directly and redraws them on next project refresh</p>",
          "parameters": [
            {
              "name": "resourceIds",
              "type": [
                "Array.<Number>",
                "Array.<String>"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "refreshResources",
          "access": "private",
          "description": "<p>Clears and redraws resources directly. Respects schedulers refresh suspension</p>",
          "parameters": [
            {
              "name": "ids",
              "type": [
                "Array.<Number>",
                "Array.<String>"
              ],
              "description": "<p>Resource ids</p>"
            },
            {
              "name": "transition",
              "type": "Boolean",
              "description": "<p>Use transition or not</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "addTemporaryDragElement",
          "access": "private",
          "description": "<p>Used by event drag features to bring into existence event elements that are outside of the rendered block.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The event to render</p>"
            },
            {
              "name": "resourceRecord",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>The event to render</p>",
              "optional": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "calculateMS",
          "access": "private",
          "description": "<p>Converts a start/endDate into a MS value used when rendering the event. If scheduler is configured with\n<code>fillTicks: true</code> the value returned will be snapped to tick start/end.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.TimeSpan"
            },
            {
              "name": "startDateField",
              "type": "String"
            },
            {
              "name": "endDateField",
              "type": "String"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object",
            "description": "<p>Object of format { startMS, endMS, durationMS }</p>"
          }
        },
        {
          "name": "setupRenderData",
          "access": "private",
          "description": "<p>Returns event render data except actual position information.</p>",
          "parameters": [
            {
              "name": "timeSpan"
            },
            {
              "name": "rowRecord"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Scheduler.view.orientation.HorizontalRendering#HorizontalRenderData"
          }
        },
        {
          "name": "fillTimeSpanHorizontalPosition",
          "access": "private",
          "description": "<p>Populates render data with information about width and horizontal position of the wrap.</p>",
          "parameters": [
            {
              "name": "renderData",
              "type": "Scheduler.view.orientation.HorizontalRendering#HorizontalRenderData"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Boolean"
          }
        },
        {
          "name": "calculateHorizontalPosition",
          "access": "private",
          "description": "<p>Fills render data with <code>left</code> and <code>width</code> properties</p>",
          "parameters": [
            {
              "name": "renderData",
              "type": "Scheduler.view.orientation.HorizontalRendering#HorizontalRenderData"
            },
            {
              "name": "startMS",
              "type": "Number"
            },
            {
              "name": "endMS",
              "type": "Number"
            },
            {
              "name": "durationMS",
              "type": "Number"
            }
          ],
          "scope": "instance",
          "returns": {
            "type": [
              "Object",
              "null"
            ]
          }
        },
        {
          "name": "getTimeSpanRenderData",
          "access": "private",
          "description": "<p>Gets timespan coordinates etc. Relative to containing row. If the timespan is outside of the zone in\nwhich timespans are rendered, that is outside of the TimeAxis, or outside of the vertical zone in which timespans\nare rendered, then <code>undefined</code> is returned.</p>",
          "parameters": [
            {
              "name": "timeSpan",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>TimeSpan record</p>"
            },
            {
              "name": "rowRecord",
              "type": "Core.data.Model",
              "description": "<p>Row record</p>"
            },
            {
              "name": "includeOutside",
              "type": [
                "Boolean",
                "Object"
              ],
              "description": "<p>Specify true to get boxes for timespans outside of the rendered zone in both\ndimensions. This option is used when calculating dependency lines, and we need to include routes from timespans\nwhich may be outside the rendered zone.</p>",
              "default": false
            },
            {
              "name": "includeOutside.timeAxis",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to include timespans outside of the TimeAxis's bounds</p>",
              "isSubParam": true
            },
            {
              "name": "includeOutside.viewport",
              "type": "Boolean",
              "description": "<p>Pass as <code>true</code> to include timespans outside of the vertical timespan viewport's bounds.</p>",
              "isSubParam": true
            }
          ],
          "scope": "instance",
          "returns": {
            "type": "Object"
          }
        },
        {
          "name": "refreshEventsForResource",
          "access": "internal",
          "description": "<p>Refresh events for resource record (or Row), clearing its cache and forcing DOM refresh.</p>",
          "parameters": [
            {
              "name": "recordOrRow",
              "type": "Scheduler.model.ResourceModel",
              "description": "<p>Record or row to refresh</p>"
            },
            {
              "name": "force",
              "type": "Boolean",
              "description": "<p>Specify <code>false</code> to prevent clearing cache and forcing DOM refresh</p>",
              "default": true,
              "optional": true
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "VerticalRendering",
      "modulePath": "Scheduler/view/orientation/VerticalRendering",
      "classDescription": "<p>Handles event rendering in Schedulers vertical mode. Reacts to project/store changes to keep the UI up to date.</p>",
      "access": "internal",
      "constructor": {
        "name": "constructor"
      },
      "filename": "VerticalRendering.js",
      "path": "/Calendar/lib/Scheduler/view/orientation",
      "functions": [
        {
          "name": "refreshResourcesWhenReady",
          "access": "private",
          "description": "<p>Clears resources directly and redraws them on next project refresh</p>",
          "parameters": [
            {
              "name": "resourceIds",
              "type": [
                "Array.<Number>",
                "Array.<String>"
              ]
            }
          ],
          "scope": "instance"
        },
        {
          "name": "refreshAllResourcesWhenReady",
          "access": "private",
          "description": "<p>Clears all resources directly and redraws them on next project refresh</p>",
          "scope": "instance"
        },
        {
          "name": "addTemporaryDragElement",
          "access": "private",
          "description": "<p>Used by event drag features to bring into existence event elements that are outside of the rendered block.</p>",
          "parameters": [
            {
              "name": "eventRecord",
              "type": "Scheduler.model.TimeSpan",
              "description": "<p>The event to render</p>"
            }
          ],
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RecurrenceConfirmationPopup",
      "modulePath": "Scheduler/view/recurrence/RecurrenceConfirmationPopup",
      "classDescription": "<p>Confirmation dialog showing up before modifying a recurring event or some of its occurrences.\nFor recurring events the dialog notifies user that the event change/removal will cause all its occurrences\nchange/removal and asks to confirm the action.</p>\n<p>And for occurrences the dialog allows to choose if user wants to affect all further occurrences, this occurrence only or cancel the change.</p>\n<p>Usage example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const confirmation = new RecurrenceConfirmationPopup();\n\nconfirmation.confirm({\n    eventRecord : recurringEvent,\n    actionType  : &quot;delete&quot;,\n    changerFn   : () => recurringEvent.remove(event)\n});\n</code></pre>",
      "extends": [
        "Core/widget/Popup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceConfirmationPopup.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence",
      "classType": "recurrenceconfirmation",
      "properties": [
        {
          "name": "changeMultipleButton",
          "description": "<p>Reference to the &quot;Apply changes to multiple occurrences&quot; button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "changeSingleButton",
          "description": "<p>Reference to the button that causes changing of the event itself only, if used</p>",
          "type": "Core.widget.Button",
          "scope": "instance",
          "readonly": true
        },
        {
          "name": "cancelButton",
          "description": "<p>Reference to the cancel button, if used</p>",
          "type": "Core.widget.Button",
          "scope": "instance",
          "readonly": true
        }
      ],
      "functions": [
        {
          "name": "onChangeMultipleButtonClick",
          "description": "<p>Handler for &quot;Apply changes to multiple occurrences&quot; <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#property-changeMultipleButton\">button</a>.\nIt calls <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#function-processMultipleRecords\">processMultipleRecords</a> and then hides the dialog.</p>",
          "scope": "instance"
        },
        {
          "name": "onChangeSingleButtonClick",
          "description": "<p>Handler for the <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#property-changeSingleButton\">button</a> that causes changing of the event itself only.\nIt calls <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#function-processSingleRecord\">processSingleRecord</a> and then hides the dialog.</p>",
          "scope": "instance"
        },
        {
          "name": "onCancelButtonClick",
          "description": "<p>Handler for <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#property-cancelButton\">cancel button</a>.\nIt calls <code>cancelFn</code> provided to <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#function-confirm\">confirm</a> call and then hides the dialog.</p>",
          "scope": "instance"
        },
        {
          "name": "confirm",
          "description": "<p>Displays the confirmation.\nUsage example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>const popup = new RecurrenceConfirmationPopup();\n\npopup.confirm({\n    eventRecord,\n    actionType : &quot;delete&quot;,\n    changerFn  : () => eventStore.remove(record)\n});\n</code></pre>",
          "parameters": [
            {
              "name": "config",
              "type": "Object",
              "description": "<p>The following config options are supported:</p>"
            },
            {
              "name": "config.eventRecord",
              "type": "Scheduler.model.EventModel",
              "description": "<p>Event being modified.</p>",
              "isSubParam": true
            },
            {
              "name": "config.actionType",
              "type": "String",
              "description": "<p>Type of modification to be applied to the event. Can be either &quot;update&quot; or &quot;delete&quot;.</p>",
              "isSubParam": true
            },
            {
              "name": "config.changerFn",
              "type": "function",
              "description": "<p>A function that should be called to apply the change to the event upon user choice.</p>",
              "isSubParam": true
            },
            {
              "name": "config.thisObj",
              "type": "function",
              "description": "<p><code>changerFn</code> and <code>cancelFn</code> functions scope.</p>",
              "optional": true,
              "isSubParam": true
            },
            {
              "name": "config.cancelFn",
              "type": "function",
              "description": "<p>Function called on <code>Cancel</code> button click.</p>",
              "optional": true,
              "isSubParam": true
            }
          ],
          "scope": "instance"
        },
        {
          "name": "processMultipleRecords",
          "description": "<p>Applies changes to multiple occurrences as reaction on &quot;Apply changes to multiple occurrences&quot;\n<a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#property-changeMultipleButton\">button</a> click.</p>",
          "scope": "instance"
        },
        {
          "name": "processSingleRecord",
          "description": "<p>Applies changes to a single record by making it a &quot;real&quot; event and adding an exception to the recurrence.\nThe method is called as reaction on clicking the <a href=\"#Scheduler/view/recurrence/RecurrenceConfirmationPopup#property-changeSingleButton\">button</a> that causes changing of the event itself only.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RecurrenceEditor",
      "modulePath": "Scheduler/view/recurrence/RecurrenceEditor",
      "classDescription": "<p>Class implementing a dialog to edit <a href=\"#Scheduler/model/RecurrenceModel\">Recurrence model</a>.\nThe class is used by the <a href=\"#Scheduler/view/mixin/RecurringEvents\">recurring events</a> feature and you don't need to instantiate it normally.\nBefore showing the dialog need to use <a href=\"#Core/widget/Container#property-record\">record</a> to load a <a href=\"#Scheduler/model/RecurrenceModel\">Recurrence model</a>\ndata into the editor fields. For example:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>// make the editor instance\nconst editor = new RecurrenceEditor();\n// load recurrence model into it\neditor.record = new RecurrenceModel({ frequency : &quot;WEEKLY&quot; });\n// display the editor\neditor.show();\n</code></pre>",
      "extends": [
        "Core/widget/Popup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceEditor.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence",
      "classType": "recurrenceeditor",
      "functions": [
        {
          "name": "syncEventRecord",
          "description": "<p>Updates the provided recurrence model with the contained form data.\nIf recurrence model is not provided updates the last loaded recurrence model.</p>",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RecurrenceLegendButton",
      "modulePath": "Scheduler/view/recurrence/RecurrenceLegendButton",
      "classDescription": "<p>Class implementing a button which text displays the associated recurrence info in a human readable form.</p>",
      "extends": [
        "Core/widget/Button"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceLegendButton.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence",
      "classType": "recurrencelegendbutton",
      "properties": [
        {
          "name": "recurrence",
          "description": "<p>Sets / gets the recurrence to display description for.</p>",
          "type": "Scheduler.model.RecurrenceModel",
          "scope": "instance"
        }
      ]
    },
    {
      "name": "RecurrenceCombo",
      "modulePath": "Scheduler/view/recurrence/field/RecurrenceCombo",
      "classDescription": "<p>A combobox field displaying the recurrence by either mode: <code>Daily</code>, <code>Weekly</code>, <code>Monthly</code> or <code>Yearly</code> if the recurrence\nhas no other non-default settings, or <code>Custom...</code> if the recurrence has custom setting applied.</p>",
      "extends": [
        "Scheduler/view/recurrence/field/RecurrenceFrequencyCombo"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceCombo.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence/field",
      "classType": "recurrencecombo"
    },
    {
      "name": "RecurrenceDaysButtonGroup",
      "modulePath": "Scheduler/view/recurrence/field/RecurrenceDaysButtonGroup",
      "classDescription": "<p>A segmented button field allowing to pick days for the &quot;Weekly&quot; mode in the <a href=\"#Scheduler/view/recurrence/RecurrenceEditor\">recurrence dialog</a>.</p>",
      "extends": [
        "Core/widget/ButtonGroup"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceDaysButtonGroup.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence/field"
    },
    {
      "name": "RecurrenceDaysCombo",
      "modulePath": "Scheduler/view/recurrence/field/RecurrenceDaysCombo",
      "classDescription": "<p>A combobox field allowing to pick days for the <code>Monthly</code> and <code>Yearly</code> mode in the <a href=\"#Scheduler/view/recurrence/RecurrenceEditor\">recurrence dialog</a>.</p>",
      "extends": [
        "Core/widget/Combo"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceDaysCombo.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence/field",
      "classType": "recurrencedayscombo"
    },
    {
      "name": "RecurrenceFrequencyCombo",
      "modulePath": "Scheduler/view/recurrence/field/RecurrenceFrequencyCombo",
      "classDescription": "<p>A combobox field allowing to pick frequency in the <a href=\"#Scheduler/view/recurrence/RecurrenceEditor\">recurrence dialog</a>.</p>",
      "extends": [
        "Core/widget/Combo"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceFrequencyCombo.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence/field",
      "classType": "recurrencefrequencycombo"
    },
    {
      "name": "RecurrencePositionsCombo",
      "modulePath": "Scheduler/view/recurrence/field/RecurrencePositionsCombo",
      "classDescription": "<p>A combobox field allowing to specify day positions in the <a href=\"#Scheduler/view/recurrence/RecurrenceEditor\">recurrence editor</a>.</p>",
      "extends": [
        "Core/widget/Combo"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrencePositionsCombo.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence/field",
      "classType": "recurrencepositionscombo"
    },
    {
      "name": "RecurrenceStopConditionCombo",
      "modulePath": "Scheduler/view/recurrence/field/RecurrenceStopConditionCombo",
      "classDescription": "<p>A combobox field allowing to choose stop condition for the recurrence in the <a href=\"#Scheduler/view/recurrence/RecurrenceEditor\">recurrence dialog</a>.</p>",
      "extends": [
        "Core/widget/Combo"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "RecurrenceStopConditionCombo.js",
      "path": "/Calendar/lib/Scheduler/view/recurrence/field",
      "classType": "recurrencestopconditioncombo"
    },
    {
      "name": "ProjectCombo",
      "modulePath": "Scheduler/widget/ProjectCombo",
      "classDescription": "<p>Combo that allows picking a dataset to use for a <a href=\"#Scheduler/model/ProjectModel\">ProjectModel</a>. Each item holds a title and\na load url to reconfigure the project with.</p>",
      "extends": [
        "Core/widget/Combo"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ProjectCombo.js",
      "path": "/Calendar/lib/Scheduler/widget",
      "classType": "projectcombo",
      "configs": [
        {
          "name": "project",
          "description": "<p>Project to reconfigure when picking an item.</p>",
          "type": "Scheduler.model.ProjectModel",
          "scope": "inner",
          "category": "Common"
        },
        {
          "name": "displayField",
          "description": "<p>Field used as projects title.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "title",
          "category": "Common"
        },
        {
          "name": "valueField",
          "description": "<p>Field used as projects load url.</p>",
          "type": "String",
          "scope": "inner",
          "defaultValue": "url",
          "category": "Common"
        }
      ]
    },
    {
      "name": "ResourceCombo",
      "modulePath": "Scheduler/widget/ResourceCombo",
      "classDescription": "<p>A Combo subclass which selects resources, optionally displaying the <a href=\"#Scheduler/model/ResourceModel#field-eventColor\">eventColor</a>\nof each resource in the picker and in the input area.</p>\n<p><div class=\"external-example \" data-file=\"Scheduler/widget/ResourceCombo.js\"></div></p>",
      "extends": [
        "Core/widget/Combo"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceCombo.js",
      "path": "/Calendar/lib/Scheduler/widget",
      "classType": "resourceCombo",
      "configs": [
        {
          "name": "showEventColor",
          "description": "<p>Show the <a href=\"#Scheduler/model/ResourceModel#field-eventColor\">event color</a> for each resource</p>",
          "type": "Boolean",
          "scope": "inner",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "ResourceFilter",
      "modulePath": "Scheduler/widget/ResourceFilter",
      "classDescription": "<p>A List which allows selection of resources to filter a specified eventStore to only show\nevents for the selected resources.</p>\n<p>Because this widget maintains a state that can be changed through the UI, it offers some of the\nAPI of an input field. It has a read only <a href=\"#Scheduler/widget/ResourceFilter#property-value\">value</a> property, and it fires a\n<a href=\"#Scheduler/widget/ResourceFilter#event-change\">change</a> event.</p>",
      "extends": [
        "Core/widget/List"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "ResourceFilter.js",
      "path": "/Calendar/lib/Scheduler/widget",
      "classType": "resourceFilter",
      "configs": [
        {
          "name": "eventStore",
          "description": "<p>The <a href=\"#Scheduler/data/EventStore\">EventStore</a> to filter.\nEvents for resources which are deselected in this List will be filtered out.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner"
        },
        {
          "name": "masterFilter",
          "description": "<p>An optional filter function to apply when loading resources from the project's\nresource store. Defaults to loading all resources.</p>\n<p><strong>This is called using this <code>ResourceFilter</code> as the <code>this</code> object.</strong></p>",
          "type": "function",
          "scope": "inner"
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "<p>Fired when this widget's selection changes</p>",
          "parameters": [
            {
              "name": "value",
              "type": "String",
              "description": "<p>This field's value</p>"
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "<p>This field's previous value</p>"
            },
            {
              "name": "source",
              "type": "Core.widget.Field",
              "description": "<p>This ResourceFilter</p>"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "value",
          "description": "<p>An array encapsulating the currently selected resources.</p>",
          "type": "Array.<Scheduler.model.ResourceModel>",
          "scope": "instance",
          "readonly": true
        }
      ]
    },
    {
      "name": "SchedulerDatePicker",
      "modulePath": "Scheduler/widget/SchedulerDatePicker",
      "classDescription": "<p>A subclass of <a href=\"#Core/widget/DatePicker\">DatePicker</a> which is able to show the presence of\nevents in its cells if configured with an <a href=\"#Scheduler/widget/SchedulerDatePicker#config-eventStore\">eventStore</a>, and\n<a href=\"#Scheduler/widget/SchedulerDatePicker#config-events\">events</a> is set to a truthy value.</p>\n<p>The <code>datepicker</code> Widget type is implemented by this class when this class is imported, or built\ninto a bundle, and so any <a href=\"#Core/widget/DateField\">DateField</a> may have its\n<a href=\"#Core/widget/PickerField#config-picker\">picker</a> configured to use its capabilities of showing\nthe presence of events in its date cells.</p>",
      "extends": [
        "Core/widget/DatePicker"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "SchedulerDatePicker.js",
      "path": "/Calendar/lib/Scheduler/widget",
      "classType": "datepicker",
      "externalExamples": [
        "Scheduler/widget/SchedulerDatePicker.js"
      ],
      "configs": [
        {
          "name": "events",
          "description": "<p>How to show presence of events in the configured <a href=\"#Scheduler/widget/SchedulerDatePicker#config-eventStore\">eventStore</a> in the\nday cells. Values may be:</p>\n<ul>\n<li><code>true</code> - Show a themeable bullet to indicate the presence of events for a date.</li>\n<li><code>'count'</code> - Show a themeable badge containing the event count for a date.</li>\n</ul>",
          "type": [
            "Boolean",
            "String"
          ],
          "scope": "inner",
          "defaultValue": false
        },
        {
          "name": "eventStore",
          "description": "<p>The <a href=\"#Scheduler/data/EventStore\">event store</a> from which the in-cell event presence\nindicators are drawn.</p>",
          "type": "Scheduler.data.EventStore",
          "scope": "inner"
        }
      ]
    },
    {
      "name": "UndoRedo",
      "modulePath": "Scheduler/widget/UndoRedo",
      "classDescription": "<p>A widget which encapsulates undo/redo functionality for the <a href=\"#Scheduler/model/ProjectModel\">project</a>\nof a scheduling widget (<code>Scheduler</code>, <code>Gantt</code> or <code>Calendar</code>).</p>\n<p>To make use of this, the project must be configured with a\n<a href=\"#Scheduler/model/mixin/ProjectModelMixin#config-stm\">State Tracking Manager</a>.</p>\n<p>If inserted into a scheduling widget (such as into a <code>tbar</code>, or <code>bbar</code>, or as an item in a context menu),\nthe project of the encapsulating scheduling widget will be used.</p>\n<p>If this widget is to be used &quot;standalone&quot; (rendered into the DOM outside of a scheduling widget),\nthis must be configured with a reference to the project, or the scheduling widget which is\nusing the project.</p>\n<p>There are three child widgets encapsulated which may be referenced through the <a href=\"#Core/widget/Container#property-widgetMap\">widgetMap</a>:</p>\n<ul>\n<li><code>undoBtn</code> - The button which operates the undo operation</li>\n<li><code>transactionsCombo</code> - A combobox into which is pushed the list of transactions,</li>\n<li><code>redoBtn</code> - The button which operates the redo operation</li>\n</ul>\n<p>The transactionsCombo may be configured away if only the buttons are required:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>{\n    type      : 'undoredo',\n    items     : {\n        transactionsCombo : null\n    }\n}\n</code></pre>\n<p>The example below illustrated how to embed an <code>undoredo</code> widget in the top toolbar of a Scheduler.</p>",
      "extends": [
        "Core/widget/base/UndoRedoBase"
      ],
      "constructor": {
        "name": "constructor"
      },
      "filename": "UndoRedo.js",
      "path": "/Calendar/lib/Scheduler/widget",
      "classType": "undoredo",
      "demo": {
        "product": "scheduler",
        "demo": "undoredo"
      },
      "externalExamples": [
        "Scheduler/widget/UndoRedo.js"
      ],
      "configs": [
        {
          "name": "scheduler",
          "description": "<p>The Scheduling Widget (or its <code>id</code>) whose transaction to track.</p>\n<p>This may be a <code>Scheduler</code>, a <code>Gantt</code> or a <code>Calendar</code>.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    {\n        type      : 'undoredo',\n        scheduler : myCalendar\n    }\n</code></pre>",
          "type": [
            "Core.widget.Widget",
            "String"
          ],
          "scope": "inner"
        },
        {
          "name": "project",
          "description": "<p>The Scheduling <a href=\"#Scheduler/model/ProjectModel\">project</a>'s whose\ntransaction to track.</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    {\n        type    : 'undoredo',\n        project : scheduler.project\n    }\n</code></pre>",
          "type": "Scheduler.model.ProjectModel",
          "scope": "inner"
        }
      ]
    }
  ]
}
